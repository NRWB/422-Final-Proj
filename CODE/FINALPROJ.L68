00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/11/2014 9:31:05 PM

00000000                             1  *    666
00000000                             2  *   66 66
00000000                             3  *  66   66
00000000                             4  *  66   66         8888
00000000                             5  *  66   66       88   kkkk
00000000                             6  *  66  66       8   88   kk      
00000000                             7  *   66  6      8  88  kkk  kk    
00000000                             8  *    66  6    8  88     kk  k
00000000                             9  *     66 66  88 88        kk
00000000                            10  *     6 _______ 8
00000000                            11  *    6    68k    8
00000000                            12  *   6_____PRO_____8
00000000                            13  *  6               8        68k is as easy as
00000000                            14  *  6    0     0    8        6 - 8 - k !
00000000                            15  *  6   /   V   \   8 
00000000                            16  *  6   \__/ \__/   8        Welcome to our Dissasembler, Professor Nash!
00000000                            17  *    6            8         Enjoy your stay!
00000000                            18  *      6        8      
00000000                            19  *        666888
00000000                            20  *  _____                   __    ___  _    
00000000                            21  * | ____|__ _ ___ _   _   / /_  ( _ )| | __
00000000                            22  * |  _| / _` / __| | | | | '_ \ / _ \| |/ /
00000000                            23  * | |__| (_| \__ \ |_| | | (_) | (_) |   < 
00000000                            24  * |_____\__,_|___/\__, |  \___/ \___/|_|\_\
00000000                            25  *                 |___/           
00000000                            26  *-----------------------------------------------------------
00000000                            27  * Title      : 68K Decompiler
00000000                            28  * Written by : Nick Bell, Sammy Nimnuch, Caleb Larson
00000000                            29  * Date       : 11/2014
00000000                            30  * Description: This program decompiles other 68K programs
00000000                            31  *              which are loaded into the simulator simultaneously.
00000000                            32  *-----------------------------------------------------------
00000000                            33  
00000000                            34  
00000000  =00000000                 35  OP_0000     EQU     %0000000000000000
00000000  =00001000                 36  OP_0001     EQU     %0001000000000000
00000000  =00002000                 37  OP_0010     EQU     %0010000000000000
00000000  =00003000                 38  OP_0011     EQU     %0011000000000000
00000000  =00004000                 39  OP_0100     EQU     %0100000000000000
00000000  =00005000                 40  OP_0101     EQU     %0101000000000000
00000000  =00006000                 41  OP_0110     EQU     %0110000000000000
00000000  =00007000                 42  OP_0111     EQU     %0111000000000000
00000000  =00008000                 43  OP_1000     EQU     %1000000000000000
00000000  =00009000                 44  OP_1001     EQU     %1001000000000000
00000000  =0000A000                 45  OP_1010     EQU     %1010000000000000
00000000  =0000B000                 46  OP_1011     EQU     %1011000000000000
00000000  =0000C000                 47  OP_1100     EQU     %1100000000000000
00000000  =0000D000                 48  OP_1101     EQU     %1101000000000000
00000000  =0000E000                 49  OP_1110     EQU     %1110000000000000
00000000  =0000F000                 50  OP_1111     EQU     %1111000000000000
00000000  =0000000F                 51  HEX_VALUE_MASK_LONG EQU     $0000000F  * mask a hex value in 32-bits
00000000                            52  
00000000                            53  * BITMASK     EQU     $F000       * used to bitmask the first nibble
00000000                            54  
00001000                            55  START:  ORG    $1000            * first instruction of program
00001000                            56  
00001000                            57  * -----------------------------------
00001000                            58  * Starting and Ending Addresses
00001000                            59  * -----------------------------------
00001000                            60  *-----------------------------------------------------------------------------
00001000                            61  *-----------------------------------------------------------------------------
00001000                            62  * NAME: x
00001000                            63  * DESCRIPTION:    a
00001000                            64  * PRE-CONDITION:  b
00001000                            65  * POST-CONDITION: c
00001000                            66  * REGISTERS:      d
00001000                            67  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001000                            68  
00001000                            69  * THINK ABOUT ASKING FOR VALID START/END NO NEGATIVE ADDR
00001000                            70  
00001000                            71  * LOAD MSGSTART, ASK FOR INPUT
00001000  43F9 00002752             72          LEA     MSGSTART,A1     * Load MESSAGE START
00001006  103C 000E                 73          MOVE.B  #14,D0          * Trap #14 to display message
0000100A  4E4F                      74          TRAP    #15             * Perform #14
0000100C                            75          
0000100C                            76  * GETS THE STARTING ADDRESS
0000100C  103C 0004                 77          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001010  4E4F                      78          TRAP    #15             * Perform #15
00001012                            79          
00001012                            80  * MOVE IT TO ANOTHER ADDRESS REGISTER
00001012  2441                      81          MOVEA.L D1,A2           * Move the user input into A2. This is the starting address.
00001014                            82  
00001014                            83  * LOAD MSGSTART, ASK FOR INPUT
00001014  43F9 0000276A             84          LEA     MSGEND,A1       * Load MESSAGE END
0000101A  303C 000E                 85          MOVE.W  #14,D0          * Trap #14 to display message
0000101E  4E4F                      86          TRAP    #15             * Perform #14
00001020                            87          
00001020                            88  * GETS THE ENDING ADDRESS
00001020  103C 0004                 89          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001024  4E4F                      90          TRAP    #15             * Perform Trap #4
00001026  2A01                      91          MOVE.L  D1,D5           * Move the ending address into D5
00001028  43F9 000027A5             92          LEA     NEWLINE,A1      * Store newline variable for seper opcodes
0000102E                            93          
0000102E  3E3C 000F                 94          MOVE.W  #15,D7          * prep D7 for bitmask subroutine
00001032  3C3C 000C                 95          MOVE.W  #12,D6          * prep D6 for bitmask subroutine
00001036  6100 1704                 96          BSR     BITMASK         * obtain a bitmask that goes from 12-15 (inclusive)
0000103A                            97          * MOVE.W  D6,D2           * move the bitmask to D2
0000103A                            98          
0000103A  4279 000028AC             99          CLR     (__COUNTER)              * setup the counter
00001040  33FC 0000 000028AC       100          MOVE    #0,(__COUNTER)           
00001048                           101          
00001048  6100 0164                102          BSR     CLEAR_SCREEN    * clear the prompt for start/end ADDR's
0000104C                           103  LOOP    
0000104C  2C4A                     104          MOVE.L  A2,A6
0000104E  7608                     105          MOVE.L  #8,D3
00001050  6100 14AA                106          BSR     PRINT_ASCII_HEX_CHAR
00001054                           107          
00001054                           108          *MOVE.W  A2,D1           * print what address we are processing
00001054                           109          *MOVE.B  #3,D0
00001054                           110          *TRAP    #15
00001054                           111          
00001054  43F9 0000285C            112          LEA     SPACE,A1        * print a space to seperate the address from the data
0000105A  303C 000E                113          MOVE.W  #14,D0
0000105E  4E4F                     114          TRAP    #15
00001060                           115  
00001060  3F06                     116          MOVE    D6,-(A7)        * save the bitmask on the stack
00001062  341A                     117          MOVE.W  (A2)+,D2        * Read an operation into D2
00001064  CC42                     118          AND.W   D2,D6           * Apply this bitmask
00001066                           119          
00001066  BC7C 0000                120          CMP     #OP_0000,D6     * Does the operation start with 0000?
0000106A  6600 000A                121          BNE     NOT0000         * No, check next case
0000106E  6100 014A                122          BSR     OP0000          * Branch to subroutine 0000
00001072  6000 00F6                123          BRA     ITERATION       * Move to next iteration of the loop
00001076                           124  NOT0000        
00001076  BC7C 1000                125          CMP     #OP_0001,D6     * Does the operation start with 0001?
0000107A  6600 000A                126          BNE     NOT0001         * No, check next case
0000107E  6100 02C4                127          BSR     OP0001          * Branch to subroutine 0001
00001082  6000 00E6                128          BRA     ITERATION       * Move to next iteration of the loop
00001086                           129  NOT0001
00001086  BC7C 2000                130          CMP     #OP_0010,D6     * Does the operation start with 0010?
0000108A  6600 000A                131          BNE     NOT0010         * No, check next case
0000108E  6100 0326                132          BSR     OP0010          * Branch to subroutine 0010
00001092  6000 00D6                133          BRA     ITERATION       * Move to next iteration of the loop
00001096                           134  NOT0010
00001096  BC7C 3000                135          CMP     #OP_0011,D6     * Does the operation start with 0011?
0000109A  6600 000A                136          BNE     NOT0011         * No, check next case
0000109E  6100 0388                137          BSR     OP0011          * Branch to subroutine 0011
000010A2  6000 00C6                138          BRA     ITERATION       * Move to next iteration of the loop
000010A6                           139  NOT0011
000010A6  BC7C 4000                140          CMP     #OP_0100,D6     * Does the operation start with 0100?
000010AA  6600 000A                141          BNE     NOT0100         * No, check next case
000010AE  6100 03EA                142          BSR     OP0100          * Branch to subroutine 0100
000010B2  6000 00B6                143          BRA     ITERATION       * Move to next iteration of the loop
000010B6                           144  NOT0100
000010B6  BC7C 5000                145          CMP     #OP_0101,D6     * Does the operation start with 0101?
000010BA  6600 000A                146          BNE     NOT0101         * No, check next case
000010BE  6100 0708                147          BSR     OP0101          * Branch to subroutine 0101
000010C2  6000 00A6                148          BRA     ITERATION       * Move to next iteration of the loop
000010C6                           149  NOT0101
000010C6  BC7C 6000                150          CMP     #OP_0110,D6     * Does the operation start with 0110?
000010CA  6600 000A                151          BNE     NOT0110         * No, check next case
000010CE  6100 0766                152          BSR     OP0110          * Branch to subroutine 0110
000010D2  6000 0096                153          BRA     ITERATION       * Move to next iteration of the loop
000010D6                           154  NOT0110
000010D6  BC7C 7000                155          CMP     #OP_0111,D6     * Does the operation start with 0111?
000010DA  6600 000A                156          BNE     NOT0111         * No, check next case
000010DE  6100 081E                157          BSR     OP0111          * Branch to subroutine 0111
000010E2  6000 0086                158          BRA     ITERATION       * Move to next iteration of the loop
000010E6                           159  NOT0111
000010E6  BC7C 8000                160          CMP     #OP_1000,D6     * Does the operation start with 1000?
000010EA  6600 000A                161          BNE     NOT1000         * No, check next case
000010EE  6100 0814                162          BSR     OP1000          * Branch to subroutine 1000
000010F2  6000 0076                163          BRA     ITERATION       * Move to next iteration of the loop
000010F6                           164  NOT1000
000010F6  BC7C 9000                165          CMP     #OP_1001,D6     * Does the operation start with 1001?
000010FA  6600 000A                166          BNE     NOT1001         * No, check next case
000010FE  6100 0898                167          BSR     OP1001          * Branch to subroutine 1001
00001102  6000 0066                168          BRA     ITERATION       * Move to next iteration of the loop
00001106                           169  NOT1001
00001106  BC7C A000                170          CMP     #OP_1010,D6     * Does the operation start with 1010?
0000110A  6600 000A                171          BNE     NOT1010         * No, check next case
0000110E  6100 0942                172          BSR     OP1010          * Branch to subroutine 1010
00001112  6000 0056                173          BRA     ITERATION       * Move to next iteration of the loop
00001116                           174  NOT1010
00001116  BC7C B000                175          CMP     #OP_1011,D6     * Does the operation start with 1011?
0000111A  6600 000A                176          BNE     NOT1011         * No, check next case
0000111E  6100 0938                177          BSR     OP1011          * Branch to subroutine 1011
00001122  6000 0046                178          BRA     ITERATION       * Move to next iteration of the loop
00001126                           179  NOT1011
00001126  BC7C C000                180          CMP     #OP_1100,D6     * Does the operation start with 1100?
0000112A  6600 000A                181          BNE     NOT1100         * No, check next case
0000112E  6100 09D2                182          BSR     OP1100          * Branch to subroutine 1100
00001132  6000 0036                183          BRA     ITERATION       * Move to next iteration of the loop
00001136                           184  NOT1100
00001136  BC7C D000                185          CMP     #OP_1101,D6     * Does the operation start with 1101?
0000113A  6600 000A                186          BNE     NOT1101         * No, check next case
0000113E  6100 0A4C                187          BSR     OP1101          * Branch to subroutine 1101
00001142  6000 0026                188          BRA     ITERATION       * Move to next iteration of the loop
00001146                           189  NOT1101
00001146  BC7C E000                190          CMP     #OP_1110,D6     * Does the operation start with 1110?
0000114A  6600 000A                191          BNE     NOT1110         * No, check next case
0000114E  6100 0BC2                192          BSR     OP1110          * Branch to subroutine 1110
00001152  6000 0016                193          BRA     ITERATION       * Move to next iteration of the loop
00001156                           194  NOT1110
00001156  BC7C F000                195          CMP     #OP_1111,D6     * Does the operation start with 1111?
0000115A  6600 000A                196          BNE     LOOPUNKNOWNOP   * No, check next case
0000115E  6100 0D48                197          BSR     OP1111          * Branch to subroutine 1111
00001162  6000 0006                198          BRA     ITERATION       * Move to next iteration of the loop
00001166                           199          
00001166                           200  LOOPUNKNOWNOP
00001166  6100 136A                201          BSR     UNKNOWNOP
0000116A                           202          
0000116A                           203  ITERATION
0000116A  3C1F                     204          MOVE    (A7)+,D6        * restore the bitmask to its previous state
0000116C                           205      
0000116C  5279 000028AC            206          ADDI    #1,(__COUNTER)           * Track the lines on screen
00001172  0C79 001E 000028AC       207          CMPI    #30,(__COUNTER)
0000117A  6600 0006                208          BNE     END_OF_LOOP     * Not at 30, go loop more
0000117E  6100 000C                209          BSR     IDLE_STATE      * Break to idle, ask to clear screen
00001182                           210  
00001182                           211  END_OF_LOOP
00001182  BA4A                     212          CMP     A2,D5           * Compare the starting address to ending address
00001184  6700 2F1C                213          BEQ     END             * If they are equal, branch 
00001188  6000 FEC2                214          BRA     LOOP            * Otherwise, branch back to LOOP
0000118C                           215  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000118C                           216  *-----------------------------------------------------------------------------
0000118C                           217  IDLE_STATE
0000118C  43F9 00002780            218      LEA     CONT_MSG,A1 * show msg to hit enter in order to continue
00001192  103C 000E                219      MOVE.B  #14,D0
00001196  4E4F                     220      TRAP    #15
00001198                           221      
00001198  103C 0004                222      MOVE.B  #4,D0 * trap task 4 - input
0000119C  4E4F                     223      TRAP    #15
0000119E  0C41 000D                224      CMPI    #$D,D1
000011A2                           225      
000011A2  6100 000A                226      BSR     CLEAR_SCREEN * clear everything, so ready to output another 30
000011A6  42B9 000028AC            227      CLR.L   (__COUNTER)
000011AC  4E75                     228      RTS
000011AE                           229  CLEAR_SCREEN
000011AE  103C 000B                230      MOVE.B  #11,D0
000011B2  323C FF00                231      MOVE.W  #$FF00,D1
000011B6  4E4F                     232      TRAP    #15
000011B8  4E75                     233      RTS
000011BA                           234  
000011BA                           235  
000011BA                           236  *-----------------------------------------------------------------------------
000011BA                           237  *-----------------------------------------------------------------------------
000011BA                           238  * NAME: OP_0000   (BCLR, ORI, CMPI)
000011BA                           239  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000011BA                           240  * PRE-CONDITION:  xyz
000011BA                           241  * POST-CONDITION: All registers return to their previous state, and the output
000011BA                           242  *                 goes to the output console for reading the raw data or the
000011BA                           243  *                 actual instruction.
000011BA                           244  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000011BA                           245  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000011BA                           246  OP0000
000011BA  48A7 FFC0                247          MOVEM   D0-D7/A0-A1,-(A7)   * Push values to the stack to save
000011BE                           248                        
000011BE                           249          * Checking for unsupported mode (An) for BCLR, ORI, and CMPI
000011BE  3C3C 0003                250          MOVE.W  #3, D6              * Prep lower value for bitmask
000011C2  3E3C 0005                251          MOVE.W  #5, D7              * Prep upper value for bitmask
000011C6  6100 1574                252          BSR     BITMASK             * Finalize bitmask setup
000011CA  CC42                     253          AND     D2,D6               * Apply bitmask
000011CC                           254          
000011CC  0C46 0008                255          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
000011D0  6700 0168                256          BEQ     UNKNOWN0000             * If so, the op is unknown
000011D4                           257          
000011D4                           258          * Checking for BCLR Dynamic
000011D4  3C3C 0006                259          MOVE.W  #6, D6              * Prep lower value for bitmask
000011D8  3E3C 0008                260          MOVE.W  #8, D7              * Prep upper value for bitmask
000011DC  6100 155E                261          BSR     BITMASK             * Finalize bitmask setup
000011E0  CC42                     262          AND     D2,D6               * Apply bitmask
000011E2                           263          
000011E2  0C46 0180                264          CMPI    #%0000000110000000, D6  * Are we BCLR Dynamic?
000011E6  6600 0050                265          BNE     NOTBCLRDYNA             * If not, branch to BCLR Static or other ops
000011EA                           266  
000011EA                           267          * Confirmed BCLR Dynamic at this point
000011EA  43F9 000027DF            268          LEA     BCLROP,A1           * We found BCLR
000011F0  103C 000E                269          MOVE.B  #14,D0              * Trap #14 prints out the data
000011F4  4E4F                     270          TRAP    #15                 * Perform Trap #14
000011F6                           271  
000011F6  43F9 0000285C            272          LEA     SPACE,A1            * Formatting
000011FC  103C 000E                273          MOVE.B  #14,D0              * Trap #14 prints out space
00001200  4E4F                     274          TRAP    #15                 * Perform Trap #14
00001202                           275          
00001202                           276          * Set up for printing out the Register
00001202  0882 0006                277          BCLR    #6,D2               * Clear bit 6
00001206  0882 0007                278          BCLR    #7,D2               * Clear bit 7
0000120A  0882 0008                279          BCLR    #8,D2               * Clear bit 8
0000120E                           280          
0000120E  6100 0C9E                281          BSR     EAHELPER611         * Print out Register
00001212                           282  
00001212  43F9 00002862            283          LEA     COMMA,A1            * formatting
00001218  103C 000E                284          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000121C  4E4F                     285          TRAP    #15                 * Perform Trap #14
0000121E                           286          
0000121E  4243                     287          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
00001220  08C3 0000                288          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
00001224                           289      
00001224  6100 0CCA                290          BSR     EAHELPER05          * Print out data.
00001228                           291          
00001228  43F9 000027A5            292          LEA     NEWLINE,A1          * Formatting
0000122E  103C 000E                293          MOVE.B  #14,D0              * Trap #14 prints out the data
00001232  4E4F                     294          TRAP    #15                 * Perform Trap #14
00001234                           295          
00001234  6000 0108                296          BRA     END0000             * Found the op, move to next iteration
00001238                           297          
00001238                           298  NOTBCLRDYNA     * Possible options left are BCLR Static, ORI, and CMPI
00001238  3C3C 0006                299          MOVE.W  #6, D6              * Prep lower value for bitmask
0000123C  3E3C 000B                300          MOVE.W  #11, D7             * Prep upper value for bitmask
00001240  6100 14FA                301          BSR     BITMASK             * Finalize bitmask setup
00001244  CC42                     302          AND     D2,D6               * Apply bitmask
00001246                           303          
00001246  0C46 0880                304          CMPI    #%0000100010000000, D6  * Are we BCLR Static?
0000124A  6600 003A                305          BNE     NOTBCLR                 * If not, branch to other functions
0000124E                           306          
0000124E                           307          * Confirmed BCLR Static at this point
0000124E  43F9 000027DF            308          LEA     BCLROP,A1           * We found BCLR
00001254  103C 000E                309          MOVE.B  #14,D0              * Trap #14 prints out the data
00001258  4E4F                     310          TRAP    #15                 * Perform Trap #14
0000125A                           311  
0000125A  43F9 0000285C            312          LEA     SPACE,A1            * Formatting
00001260  103C 000E                313          MOVE.B  #14,D0              * Trap #14 prints out space
00001264  4E4F                     314          TRAP    #15                 * Perform Trap #14
00001266                           315          
00001266  2802                     316          MOVE.L  D2, D4              * Saving values
00001268                           317                  
00001268  43F9 00002860            318          LEA     IMD, A1             * Formatting
0000126E  103C 000E                319          MOVE.B  #14,D0              * Trap #14 prints out the data
00001272  4E4F                     320          TRAP    #15                 * Perform Trap #14
00001274                           321          
00001274                           322          * Grab next word
00001274  3A1A                     323          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
00001276  E18D                     324          LSL.L   #8, D5              * LSL for first nibble of the word
00001278  E18D                     325          LSL.L   #8, D5              * LSL for second nibble of the word
0000127A  2C45                     326          MOVE.L  D5, A6              * Store D5 into A6, to be used as parameter
0000127C  7604                     327          MOVE.L  #4, D3              * Four most significant bits in D3
0000127E  6100 127C                328          BSR     PRINT_ASCII_HEX_CHAR    * Perform number print out
00001282                           329  
00001282  6000 007E                330          BRA     SKIPLONG            * Formatting, returning saved values, etc.
00001286                           331          
00001286                           332  NOTBCLR * Possible options left are ORI or CMPI
00001286  3C3C 0009                333          MOVE.W  #9, D6              * Prep lower value for bitmask
0000128A  3E3C 000B                334          MOVE.W  #11, D7             * Prep upper value for bitmask
0000128E  6100 14AC                335          BSR     BITMASK             * Finalize bitmask setup
00001292  CC42                     336          AND     D2,D6               * Apply bitmask
00001294                           337          
00001294  0C46 0000                338          CMPI    #%0000000000000000, D6   * Are we possibly ORI?
00001298  6600 008A                339          BNE     NOTORI                   * If not, branch to NOTORI
0000129C                           340          
0000129C                           341          * Size check to see if unsupported ORI mode
0000129C  3C3C 0006                342          MOVE.W  #6, D6              * Prep lower value for bitmask
000012A0  3E3C 0007                343          MOVE.W  #7, D7              * Prep upper value for bitmask
000012A4  6100 1496                344          BSR     BITMASK             * Finalize bitmask setup
000012A8  CC42                     345          AND     D2,D6               * Apply bitmask
000012AA                           346          
000012AA  0C46 00C0                347          CMPI    #%0000000011000000, D6  * Are bits 6,7 == 1,1?
000012AE  6700 008A                348          BEQ     UNKNOWN0000             * If so, unknown op. 
000012B2                           349          
000012B2                           350          * Confirmed ORI at this point
000012B2  43F9 000027ED            351          LEA     ORIOP, A1           * Load 'ORI' into the output window
000012B8  103C 000E                352          MOVE.B  #14,D0              * Trap #14 prints out the data in D0
000012BC  4E4F                     353          TRAP    #15                 * Perform Trap #14
000012BE                           354  
000012BE                           355  IMD_SIZE_0000        
000012BE  6100 0F76                356          BSR     SIZE67              * Print the size
000012C2                           357  
000012C2                           358          * Mode check to see the size
000012C2  3C3C 0006                359          MOVE.W  #6, D6              * Prep lower value for bitmask
000012C6  3E3C 0007                360          MOVE.W  #7, D7              * Prep upper value for bitmask
000012CA  6100 1470                361          BSR     BITMASK             * Finalize bitmask setup
000012CE  CC42                     362          AND     D2,D6               * Apply bitmask
000012D0                           363          
000012D0  2802                     364          MOVE.L  D2, D4              * Saving value
000012D2                           365                  
000012D2  43F9 00002860            366          LEA     IMD, A1             * Formatting
000012D8  103C 000E                367          MOVE.B  #14,D0              * Trap #14 prints out the data
000012DC  4E4F                     368          TRAP    #15                 * Perform Trap #14
000012DE                           369                 
000012DE                           370          * Grab immediate data
000012DE  3A1A                     371          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
000012E0  E18D                     372          LSL.L   #8, D5               
000012E2  E18D                     373          LSL.L   #8, D5
000012E4  2C45                     374          MOVE.L  D5, A6
000012E6  7604                     375          MOVE.L  #4, D3
000012E8  6100 1212                376          BSR     PRINT_ASCII_HEX_CHAR
000012EC                           377  
000012EC  0C46 0080                378          CMPI    #%0000000010000000, D6   * See if the size is a LONG
000012F0  6600 0010                379          BNE     SKIPLONG    
000012F4                           380          
000012F4                           381          * Grab next word
000012F4  3A1A                     382          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
000012F6  E18D                     383          LSL.L   #8, D5              * LSL to get first nibble of the word
000012F8  E18D                     384          LSL.L   #8, D5              * LSL to get second nibble of the word
000012FA  2C45                     385          MOVE.L  D5, A6              * Store D5 into A6 as a parameter
000012FC  7604                     386          MOVE.L  #4, D3              * Move #4 into D3 to show four bits
000012FE  6100 11FC                387          BSR     PRINT_ASCII_HEX_CHAR    * Perform number output
00001302                           388  
00001302                           389  SKIPLONG
00001302  43F9 00002862            390          LEA     COMMA, A1           * Formatting
00001308  103C 000E                391          MOVE.B  #14,D0              * Trap #14 prints out the data
0000130C  4E4F                     392          TRAP    #15                 * Perform Trap #14
0000130E                           393          
0000130E  2404                     394          MOVE.L  D4, D2              * Return saved value
00001310                           395          
00001310  6100 0BDE                396          BSR     EAHELPER05          * Print out the EA
00001314                           397          
00001314  43F9 000027A5            398          LEA     NEWLINE,A1          * Formatting
0000131A  103C 000E                399          MOVE.B  #14,D0              * Trap #14 prints out the data
0000131E  4E4F                     400          TRAP    #15                 * Perform Trap #14
00001320                           401          
00001320  6000 001C                402          BRA     END0000             * Done with op. Move to next iteration
00001324                           403  
00001324                           404  NOTORI  * Possible option left is CMPI
00001324                           405  
00001324  0C46 0C00                406          CMPI    #%0000110000000000, D6  * Are we CMPI?
00001328  6600 0010                407          BNE     UNKNOWN0000             * If not, unknown op
0000132C                           408          
0000132C                           409          * Confirmed CMPI at this point
0000132C  43F9 000027F1            410          LEA     CMPIOP, A1          * Formatting
00001332  103C 000E                411          MOVE.B  #14,D0              * Trap #14 prints out the data
00001336  4E4F                     412          TRAP    #15                 * Perform Trap #14
00001338                           413          
00001338  6084                     414          BRA     IMD_SIZE_0000       * Get immediate value and end opcode 0000
0000133A                           415          
0000133A                           416  UNKNOWN0000
0000133A  6100 1196                417          BSR     UNKNOWNOP          * Unknown op
0000133E                           418  
0000133E                           419  END0000          
0000133E  4C9F 03FF                420          MOVEM   (A7)+,D0-D7/A0-A1   * Push values to the stack to save
00001342  4E75                     421          RTS
00001344                           422  
00001344                           423  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001344                           424  *-----------------------------------------------------------------------------
00001344                           425  
00001344                           426  
00001344                           427  
00001344                           428  *-----------------------------------------------------------------------------
00001344                           429  *-----------------------------------------------------------------------------
00001344                           430  * NAME: OP_0001   (MOVE.B)
00001344                           431  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001344                           432  * PRE-CONDITION:  xyz
00001344                           433  * POST-CONDITION: All registers return to their previous state, and the output
00001344                           434  *                 goes to the output console for reading the raw data or the
00001344                           435  *                 actual instruction.
00001344                           436  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001344                           437  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001344                           438  OP0001  
00001344  48A7 FFC0                439          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
00001348                           440          
00001348  3C3C 0006                441          MOVE.W  #6, D6              * Prep lower value for bitmask
0000134C  3E3C 0008                442          MOVE.W  #8, D7              * Prep upper value for bitmask
00001350  6100 13EA                443          BSR     BITMASK             * Finalize bitmask setup
00001354                           444          
00001354  CC42                     445          AND     D2,D6               * Apply bitmask
00001356                           446          
00001356  0C46 0040                447          CMPI    #%0000000001000000,D6
0000135A  6600 0012                448          BNE     OP0001MOVE
0000135E                           449          
0000135E  43F9 000027C2            450          LEA     MOVEAOP,A1   * Put 'MOVE' into the window
00001364  103C 000E                451          MOVE.B  #14,D0      * Trap #14 to print out
00001368  4E4F                     452          TRAP    #15         * Perform Trap #14
0000136A                           453          
0000136A  6000 000E                454          BRA     OP0001MOVEA
0000136E                           455          
0000136E                           456  OP0001MOVE
0000136E                           457  
0000136E  43F9 000027BD            458          LEA     MOVEOP,A1   * Put 'MOVE' into the window
00001374  103C 000E                459          MOVE.B  #14,D0      * Trap #14 to print out
00001378  4E4F                     460          TRAP    #15         * Perform Trap #14
0000137A                           461          
0000137A                           462  OP0001MOVEA
0000137A                           463  
0000137A  43F9 00002870            464          LEA     __B,A1   * Put 'MOVE' into the window
00001380  103C 000E                465          MOVE.B  #14,D0      * Trap #14 to print out
00001384  4E4F                     466          TRAP    #15         * Perform Trap #14
00001386                           467          
00001386  7601                     468          MOVE.L  #1,D3
00001388                           469          
00001388  6100 0B66                470          BSR     EAHELPER05
0000138C                           471          
0000138C  43F9 00002862            472          LEA     COMMA,A1
00001392  103C 000E                473          MOVE.B  #14,D0
00001396  4E4F                     474          TRAP    #15
00001398                           475          
00001398  6100 0B14                476          BSR     EAHELPER611
0000139C                           477          
0000139C  43F9 000027A5            478          LEA     NEWLINE,A1
000013A2  103C 000E                479          MOVE.B  #14,D0
000013A6  4E4F                     480          TRAP    #15
000013A8                           481          
000013A8  6000 0006                482          BRA     ENDOP0001
000013AC                           483          
000013AC                           484  UNKNOWNOP0001
000013AC  6100 1124                485          BSR     UNKNOWNOP
000013B0                           486          
000013B0                           487  ENDOP0001
000013B0  4C9F 03FF                488          MOVEM (A7)+,D0-D7/A0-A1
000013B4  4E75                     489          RTS        
000013B6                           490          
000013B6                           491  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000013B6                           492  *-----------------------------------------------------------------------------
000013B6                           493  
000013B6                           494  
000013B6                           495  
000013B6                           496  *-----------------------------------------------------------------------------
000013B6                           497  *-----------------------------------------------------------------------------
000013B6                           498  * NAME: OP_0010   (MOVE.L, MOVEA.L)
000013B6                           499  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000013B6                           500  * PRE-CONDITION:  xyz
000013B6                           501  * POST-CONDITION: All registers return to their previous state, and the output
000013B6                           502  *                 goes to the output console for reading the raw data or the
000013B6                           503  *                 actual instruction.
000013B6                           504  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000013B6                           505  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000013B6                           506  OP0010  
000013B6  48A7 FFC0                507          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
000013BA                           508          
000013BA  3C3C 0006                509          MOVE.W  #6, D6              * Prep lower value for bitmask
000013BE  3E3C 0008                510          MOVE.W  #8, D7              * Prep upper value for bitmask
000013C2  6100 1378                511          BSR     BITMASK             * Finalize bitmask setup
000013C6                           512          
000013C6  CC42                     513          AND     D2,D6               * Apply bitmask
000013C8                           514          
000013C8  0C46 0040                515          CMPI    #%0000000001000000,D6
000013CC  6600 0012                516          BNE     OP0010MOVE
000013D0                           517          
000013D0  43F9 000027C2            518          LEA     MOVEAOP,A1   * Put 'MOVE' into the window
000013D6  103C 000E                519          MOVE.B  #14,D0      * Trap #14 to print out
000013DA  4E4F                     520          TRAP    #15         * Perform Trap #14
000013DC                           521          
000013DC  6000 000E                522          BRA     OP0010MOVEA
000013E0                           523          
000013E0                           524  OP0010MOVE
000013E0                           525  
000013E0  43F9 000027BD            526          LEA     MOVEOP,A1   * Put 'MOVE' into the window
000013E6  103C 000E                527          MOVE.B  #14,D0      * Trap #14 to print out
000013EA  4E4F                     528          TRAP    #15         * Perform Trap #14
000013EC                           529          
000013EC                           530  OP0010MOVEA
000013EC                           531  
000013EC  43F9 00002878            532          LEA     __L,A1   * Put 'MOVE' into the window
000013F2  103C 000E                533          MOVE.B  #14,D0      * Trap #14 to print out
000013F6  4E4F                     534          TRAP    #15         * Perform Trap #14
000013F8                           535          
000013F8  7603                     536          MOVE.L  #3,D3
000013FA                           537          
000013FA  6100 0AF4                538          BSR     EAHELPER05
000013FE                           539          
000013FE  43F9 00002862            540          LEA     COMMA,A1
00001404  103C 000E                541          MOVE.B  #14,D0
00001408  4E4F                     542          TRAP    #15
0000140A                           543          
0000140A  6100 0AA2                544          BSR     EAHELPER611
0000140E                           545          
0000140E  43F9 000027A5            546          LEA     NEWLINE,A1
00001414  103C 000E                547          MOVE.B  #14,D0
00001418  4E4F                     548          TRAP    #15
0000141A                           549          
0000141A  6000 0006                550          BRA     ENDOP0010
0000141E                           551          
0000141E                           552  UNKNOWNOP0010
0000141E  6100 10B2                553          BSR     UNKNOWNOP
00001422                           554          
00001422                           555  ENDOP0010
00001422  4C9F 03FF                556          MOVEM (A7)+,D0-D7/A0-A1
00001426  4E75                     557          RTS        
00001428                           558  
00001428                           559  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001428                           560  *-----------------------------------------------------------------------------
00001428                           561  
00001428                           562  
00001428                           563  
00001428                           564  *-----------------------------------------------------------------------------
00001428                           565  *-----------------------------------------------------------------------------
00001428                           566  * NAME: OP_0011   (MOVE.W, MOVEA.W)
00001428                           567  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001428                           568  * PRE-CONDITION:  xyz
00001428                           569  * POST-CONDITION: All registers return to their previous state, and the output
00001428                           570  *                 goes to the output console for reading the raw data or the
00001428                           571  *                 actual instruction.
00001428                           572  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001428                           573  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001428                           574  OP0011  
00001428  48A7 FFC0                575          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
0000142C                           576          
0000142C  3C3C 0006                577          MOVE.W  #6, D6              * Prep lower value for bitmask
00001430  3E3C 0008                578          MOVE.W  #8, D7              * Prep upper value for bitmask
00001434  6100 1306                579          BSR     BITMASK             * Finalize bitmask setup
00001438                           580          
00001438  CC42                     581          AND     D2,D6               * Apply bitmask
0000143A                           582          
0000143A  0C46 0040                583          CMPI    #%0000000001000000,D6
0000143E  6600 0012                584          BNE     OP0011MOVE
00001442                           585          
00001442  43F9 000027C2            586          LEA     MOVEAOP,A1   * Put 'MOVE' into the window
00001448  103C 000E                587          MOVE.B  #14,D0      * Trap #14 to print out
0000144C  4E4F                     588          TRAP    #15         * Perform Trap #14
0000144E                           589          
0000144E  6000 000E                590          BRA     OP0011MOVEA
00001452                           591          
00001452                           592  OP0011MOVE
00001452                           593  
00001452  43F9 000027BD            594          LEA     MOVEOP,A1   * Put 'MOVE' into the window
00001458  103C 000E                595          MOVE.B  #14,D0      * Trap #14 to print out
0000145C  4E4F                     596          TRAP    #15         * Perform Trap #14
0000145E                           597          
0000145E                           598  OP0011MOVEA
0000145E                           599  
0000145E  43F9 00002874            600          LEA     __W,A1   * Put 'MOVE' into the window
00001464  103C 000E                601          MOVE.B  #14,D0      * Trap #14 to print out
00001468  4E4F                     602          TRAP    #15         * Perform Trap #14
0000146A                           603          
0000146A  7602                     604          MOVE.L  #2,D3
0000146C                           605          
0000146C  6100 0A82                606          BSR     EAHELPER05
00001470                           607          
00001470  43F9 00002862            608          LEA     COMMA,A1
00001476  103C 000E                609          MOVE.B  #14,D0
0000147A  4E4F                     610          TRAP    #15
0000147C                           611          
0000147C  6100 0A30                612          BSR     EAHELPER611
00001480                           613          
00001480  43F9 000027A5            614          LEA     NEWLINE,A1
00001486  103C 000E                615          MOVE.B  #14,D0
0000148A  4E4F                     616          TRAP    #15
0000148C                           617          
0000148C  6000 0006                618          BRA     ENDOP0011
00001490                           619          
00001490                           620  UNKNOWNOP0011
00001490  6100 1040                621          BSR     UNKNOWNOP
00001494                           622          
00001494                           623  ENDOP0011
00001494  4C9F 03FF                624          MOVEM (A7)+,D0-D7/A0-A1
00001498  4E75                     625          RTS        
0000149A                           626  
0000149A                           627  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000149A                           628  *-----------------------------------------------------------------------------
0000149A                           629  
0000149A                           630  *-----------------------------------------------------------------------------
0000149A                           631  *-----------------------------------------------------------------------------
0000149A                           632  * NAME: OP_0100   (NOP, MOVEM, LEA, NEG, JSR, RTS)
0000149A                           633  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000149A                           634  * PRE-CONDITION:  xyz
0000149A                           635  * POST-CONDITION: All registers return to their previous state, and the output
0000149A                           636  *                 goes to the output console for reading the raw data or the
0000149A                           637  *                 actual instruction.
0000149A                           638  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000149A                           639  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000149A                           640  OP0100  
0000149A                           641  
0000149A  48A7 C0C0                642          MOVEM   D0-D1/A0-A1,-(A7) * Push values to the stack to save
0000149E                           643          
0000149E                           644          *NOP
0000149E  0C42 4E71                645          CMPI    #%0100111001110001,D2
000014A2  6600 0012                646          BNE     NOTNOP
000014A6                           647          
000014A6  43F9 000027B5            648          LEA     NOOPERATION,A1
000014AC  103C 000D                649          MOVE.B  #13,D0          * Print a newline
000014B0  4E4F                     650          TRAP    #15
000014B2                           651          
000014B2  6000 030E                652          BRA     DONE0100 *we found it, move on to the next iteration
000014B6                           653  NOTNOP *NEG
000014B6                           654          
000014B6                           655          * prep values for BITMASK subroutine
000014B6  7C08                     656          MOVE.L  #8,D6
000014B8  7E0B                     657          MOVE.L  #11,D7
000014BA                           658          
000014BA  6100 1280                659          BSR     BITMASK
000014BE                           660          
000014BE  CC42                     661          AND     D2,D6                   * apply bitmask
000014C0                           662          
000014C0  0C46 0400                663          CMPI    #%0000010000000000,D6   * are we NEG?
000014C4  6600 0046                664          BNE     NOTNEG                  * not neg
000014C8                           665          
000014C8  7C03                     666          MOVE.L  #3,D6
000014CA  7E05                     667          MOVE.L  #5,D7
000014CC                           668          
000014CC  6100 126E                669          BSR     BITMASK * generate a bitmask to be used to check mode
000014D0                           670          
000014D0  0C46 0008                671          CMPI    #%0000000000001000,D6 * check to see if it is the unsupported mode
000014D4  6700 02E8                672          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
000014D8                           673          
000014D8  0C46 0028                674          CMPI    #%0000000000101000,D6 * check to see if it is the unsupported mode
000014DC  6700 02E0                675          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
000014E0                           676          
000014E0  0C46 0030                677          CMPI    #%0000000000110000,D6 * check to see if it is the unsupported mode
000014E4  6700 02D8                678          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
000014E8                           679        
000014E8                           680          * it is NEG, print
000014E8  43F9 000027B9            681          LEA     NEGOP,A1
000014EE  103C 000E                682          MOVE.B  #14,D0
000014F2  4E4F                     683          TRAP    #15
000014F4                           684          
000014F4  6100 0D40                685          BSR     SIZE67
000014F8                           686          
000014F8  6100 09F6                687          BSR     EAHELPER05
000014FC                           688          
000014FC  43F9 000027A5            689          LEA     NEWLINE,A1
00001502  103C 000E                690          MOVE.B  #14,D0
00001506  4E4F                     691          TRAP    #15
00001508                           692          
00001508  6000 02B8                693          BRA     DONE0100 * we found the op, move to next iteration
0000150C                           694          
0000150C                           695  NOTNEG *MOVEM
0000150C                           696  
0000150C                           697          * prep values for BITMASK subroutine
0000150C  7C07                     698          MOVE.L  #7,D6
0000150E  7E09                     699          MOVE.L  #9,D7
00001510                           700          
00001510  6100 122A                701          BSR     BITMASK
00001514                           702          
00001514  CC82                     703          AND.L   D2,D6   * apply bitmask
00001516                           704          
00001516  0C46 0080                705          CMPI    #%0000000010000000,D6 * is it MOVEM?
0000151A  6600 0148                706          BNE     NOTMOVEM          * it is not MOVEM
0000151E                           707          
0000151E  7C0A                     708          MOVE.L  #10,D6
00001520  7E0A                     709          MOVE.L  #10,D7
00001522                           710          
00001522  6100 1218                711          BSR     BITMASK
00001526                           712          
00001526  CC82                     713          AND.L   D2,D6
00001528                           714          
00001528  0C46 0000                715          CMPI    #%0000000000000000,D6 * is it register to memory?
0000152C  6700 009C                716          BEQ     MOVEMTOMEM 
00001530                           717          
00001530                           718  MOVEMTOREG *supported modes: 010 011
00001530                           719  
00001530  7C03                     720          MOVE.L  #3,D6
00001532  7E05                     721          MOVE.L  #5,D7
00001534                           722          
00001534  6100 1206                723          BSR     BITMASK
00001538                           724          
00001538  CC82                     725          AND.L   D2,D6
0000153A                           726          
0000153A  0C46 0000                727          CMPI    #%0000000000000000,D6 * is it an unsupported mode?
0000153E  6700 027E                728          BEQ     UNKNOWN0100
00001542                           729          
00001542  0C46 0008                730          CMPI    #%0000000000001000,D6 * is it an unsupported mode?
00001546  6700 0276                731          BEQ     UNKNOWN0100
0000154A                           732          
0000154A  0C46 0020                733          CMPI    #%0000000000100000,D6 * is it an unsupported mode?
0000154E  6700 026E                734          BEQ     UNKNOWN0100
00001552                           735          
00001552  0C46 0028                736          CMPI    #%0000000000101000,D6 * is it an unsupported mode?
00001556  6700 0266                737          BEQ     UNKNOWN0100
0000155A                           738          
0000155A  0C46 0030                739          CMPI    #%0000000000110000,D6 * is it an unsupported mode?
0000155E  6700 025E                740          BEQ     UNKNOWN0100
00001562                           741          
00001562  0C46 0038                742          CMPI    #%0000000000111000,D6 * is it an unsupported mode?
00001566  6700 0256                743          BEQ     UNKNOWN0100
0000156A                           744          
0000156A  43F9 000027C8            745          LEA     MOVEMOP,A1
00001570  103C 000E                746          MOVE.B  #14,D0          * print MOVEM
00001574  4E4F                     747          TRAP    #15
00001576                           748          
00001576  7C06                     749          MOVE.L  #6,D6
00001578  7E06                     750          MOVE.L  #6,D7
0000157A                           751          
0000157A  6100 11C0                752          BSR     BITMASK
0000157E                           753          
0000157E  CC82                     754          AND.L   D2,D6
00001580                           755          
00001580  0C46 0040                756          CMPI    #%0000000001000000,D6 * is it a long op?
00001584  6600 0012                757          BNE     NOTLONGMOVEM1       * no, it is a word
00001588                           758          
00001588  43F9 00002878            759          LEA     __L,A1
0000158E  103C 000E                760          MOVE.B  #14,D0          * print .L 
00001592  4E4F                     761          TRAP    #15
00001594                           762          
00001594  6000 000E                763          BRA     SKIPNOTLONG1
00001598                           764          
00001598                           765  NOTLONGMOVEM1
00001598                           766  
00001598  43F9 00002874            767          LEA     __W,A1
0000159E  103C 000E                768          MOVE.B  #14,D0          * print .W 
000015A2  4E4F                     769          TRAP    #15
000015A4                           770                  
000015A4                           771  SKIPNOTLONG1
000015A4                           772  
000015A4  6100 094A                773          BSR     EAHELPER05 * print out the register we are moving from
000015A8                           774          
000015A8  43F9 00002862            775          LEA     COMMA,A1
000015AE  103C 000E                776          MOVE.B  #14,D0          * print , 
000015B2  4E4F                     777          TRAP    #15
000015B4                           778          
000015B4  6100 0D62                779          BSR     MOVEMHELPERPOST
000015B8                           780          
000015B8  341A                     781          MOVE.W  (A2)+,D2
000015BA                           782          
000015BA  43F9 000027A5            783          LEA     NEWLINE,A1
000015C0  103C 000E                784          MOVE.B  #14,D0          * print a newline 
000015C4  4E4F                     785          TRAP    #15
000015C6                           786      
000015C6  6000 01FA                787          BRA     DONE0100          * we found and printed, move on to the next iteration
000015CA                           788          
000015CA                           789  MOVEMTOMEM * supported modes 010 100
000015CA                           790  
000015CA  7C03                     791          MOVE.L  #3,D6
000015CC  7E05                     792          MOVE.L  #5,D7
000015CE                           793          
000015CE  6100 116C                794          BSR     BITMASK
000015D2                           795          
000015D2  CC82                     796          AND.L   D2,D6
000015D4                           797          
000015D4  0C46 0000                798          CMPI    #%0000000000000000,D6 * is it an unsopported mode?
000015D8  6700 01E4                799          BEQ     UNKNOWN0100
000015DC                           800          
000015DC  0C46 0008                801          CMPI    #%0000000000001000,D6 * is it an unsopported mode?
000015E0  6700 01DC                802          BEQ     UNKNOWN0100
000015E4                           803          
000015E4  0C46 0018                804          CMPI    #%0000000000011000,D6 * is it an unsopported mode?
000015E8  6700 01D4                805          BEQ     UNKNOWN0100
000015EC                           806          
000015EC  0C46 0028                807          CMPI    #%0000000000101000,D6 * is it an unsopported mode?
000015F0  6700 01CC                808          BEQ     UNKNOWN0100
000015F4                           809          
000015F4  0C46 0030                810          CMPI    #%0000000000110000,D6 * is it an unsopported mode?
000015F8  6700 01C4                811          BEQ     UNKNOWN0100
000015FC                           812          
000015FC  0C46 0070                813          CMPI    #%0000000001110000,D6 * is it an unsopported mode?
00001600  6700 01BC                814          BEQ     UNKNOWN0100
00001604                           815          
00001604  43F9 000027C8            816          LEA     MOVEMOP,A1
0000160A  103C 000E                817          MOVE.B  #14,D0          * print MOVEM
0000160E  4E4F                     818          TRAP    #15
00001610                           819          
00001610  7C06                     820          MOVE.L  #6,D6
00001612  7E06                     821          MOVE.L  #6,D7
00001614                           822          
00001614  6100 1126                823          BSR     BITMASK
00001618                           824          
00001618  CC82                     825          AND.L   D2,D6
0000161A                           826          
0000161A  0C46 0040                827          CMPI    #%0000000001000000,D6 * is it a long op?
0000161E  6600 0012                828          BNE     NOTLONGMOVEM2       * no, it is a word
00001622                           829          
00001622  43F9 00002878            830          LEA     __L,A1
00001628  103C 000E                831          MOVE.B  #14,D0          * print .L 
0000162C  4E4F                     832          TRAP    #15
0000162E                           833          
0000162E  6000 000E                834          BRA     SKIPNOTLONG2
00001632                           835          
00001632                           836  NOTLONGMOVEM2
00001632                           837  
00001632  43F9 00002874            838          LEA     __W,A1
00001638  103C 000E                839          MOVE.B  #14,D0          * print .W 
0000163C  4E4F                     840          TRAP    #15
0000163E                           841                  
0000163E                           842  SKIPNOTLONG2
0000163E                           843  
0000163E  6100 0E64                844          BSR     MOVEMHELPERPRE
00001642                           845  
00001642  43F9 00002862            846          LEA     COMMA,A1
00001648  103C 000E                847          MOVE.B  #14,D0          * print , 
0000164C  4E4F                     848          TRAP    #15
0000164E                           849          
0000164E  6100 08A0                850          BSR     EAHELPER05 * print out the register we are moving to
00001652                           851          
00001652  341A                     852          MOVE.W  (A2)+,D2
00001654                           853          
00001654  43F9 000027A5            854          LEA     NEWLINE,A1
0000165A  103C 000E                855          MOVE.B  #14,D0          * print a newline 
0000165E  4E4F                     856          TRAP    #15
00001660                           857      
00001660  6000 0160                858          BRA     DONE0100          * we found and printed, move on to the next iteration
00001664                           859  
00001664                           860  NOTMOVEM *JSR
00001664                           861          * prep values for BITMASK subroutine
00001664  7C06                     862          MOVE.L  #6,D6
00001666  7E08                     863          MOVE.L  #8,D7
00001668                           864          
00001668  6100 10D2                865          BSR     BITMASK
0000166C                           866          
0000166C  CC42                     867          AND     D2,D6   * apply bitmask
0000166E                           868          
0000166E  0C46 0080                869          CMPI    #%0000000010000000,D6
00001672  6600 0046                870          BNE     NOTJSR          * it's not JSR
00001676                           871          
00001676  43F9 000027CE            872          LEA     JSROP,A1
0000167C  103C 000E                873          MOVE.B  #14,D0          * Print JSR
00001680  4E4F                     874          TRAP    #15
00001682                           875          
00001682  43F9 0000285C            876          LEA     SPACE,A1
00001688  103C 000E                877          MOVE.B  #14,D0          * Print space
0000168C  4E4F                     878          TRAP    #15
0000168E                           879          
0000168E  43F9 0000285E            880          LEA     DOLLAR,A1
00001694  103C 000E                881          MOVE.B  #14,D0          * Print $
00001698  4E4F                     882          TRAP    #15
0000169A                           883          
0000169A                           884          * print out where we are jumping to
0000169A                           885          
0000169A  241A                     886          MOVE.L  (A2)+,D2 * read in the next word of the instruction
0000169C                           887  
0000169C  2E02                     888          MOVE.L  D2,D7
0000169E                           889  
0000169E  2C47                     890          MOVE.L  D7,A6
000016A0                           891          
000016A0  4283                     892          CLR.L   D3
000016A2                           893          
000016A2  163C 0008                894          MOVE.B  #8,D3
000016A6                           895          
000016A6  6100 0E54                896          BSR     PRINT_ASCII_HEX_CHAR
000016AA                           897          
000016AA                           898          *MOVE.L  D2,D1   * save the opcode to print
000016AA                           899          
000016AA                           900          *MOVE.L  #16,D2  * set the base to 16
000016AA                           901          
000016AA                           902          *MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000016AA                           903          *TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000016AA                           904          
000016AA                           905          *MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
000016AA                           906          
000016AA                           907          *MOVE.L  D2,D1   * save the opcode to print
000016AA                           908          
000016AA                           909          *MOVE.L  #16,D2  * set the base to 16
000016AA                           910          
000016AA                           911          *MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000016AA                           912          *TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000016AA                           913          
000016AA  43F9 000027A5            914          LEA     NEWLINE,A1
000016B0  103C 000E                915          MOVE.B  #14,D0          * Print a newline
000016B4  4E4F                     916          TRAP    #15
000016B6                           917          
000016B6  6000 010A                918          BRA     DONE0100          * we already found instruction, next iteration
000016BA                           919  NOTJSR *RTS
000016BA                           920  
000016BA                           921          * prep values for BITMASK subroutine
000016BA  7C06                     922          MOVE.L  #6,D6
000016BC  7E08                     923          MOVE.L  #8,D7
000016BE                           924          
000016BE  6100 107C                925          BSR     BITMASK
000016C2                           926          
000016C2  CC42                     927          AND     D2,D6   * apply bitmask
000016C4                           928          
000016C4  0C46 0040                929          CMPI    #%0000000001000000,D6
000016C8  6600 0012                930          BNE     NOTRTS          * it's not RTS
000016CC                           931          
000016CC  43F9 000027D2            932          LEA     RTSOP,A1
000016D2  103C 000D                933          MOVE.B  #13,D0          * Print a newline and RTS
000016D6  4E4F                     934          TRAP    #15
000016D8                           935          
000016D8  6000 00E8                936          BRA     DONE0100          * we already found instruction, next iteration
000016DC                           937  NOTRTS  *LEA
000016DC                           938         
000016DC                           939          * prep values for BITMASK subroutine
000016DC  7C06                     940          MOVE.L  #6,D6
000016DE  7E08                     941          MOVE.L  #8,D7
000016E0                           942          
000016E0  6100 105A                943          BSR     BITMASK
000016E4                           944          
000016E4  CC42                     945          AND     D2,D6   * apply bitmask
000016E6                           946          
000016E6  0C46 01C0                947          CMPI    #%0000000111000000,D6
000016EA  6600 00D2                948          BNE     UNKNOWN0100          * it's not LEA, we dont know what it is
000016EE                           949          
000016EE                           950          * prep values for BITMASK subroutine
000016EE  7C03                     951          MOVE.L  #3,D6
000016F0  7E05                     952          MOVE.L  #5,D7
000016F2                           953          
000016F2  6100 1048                954          BSR     BITMASK
000016F6                           955          
000016F6  CC42                     956          AND     D2,D6   * apply bitmask
000016F8                           957          
000016F8  0C46 0008                958          CMPI    #%0000000000001000,D6
000016FC  6700 00C0                959          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001700                           960          
00001700  0C46 0018                961          CMPI    #%0000000000011000,D6
00001704  6700 00B8                962          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001708                           963          
00001708  0C46 0020                964          CMPI    #%0000000000100000,D6
0000170C  6700 00B0                965          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001710                           966          
00001710  0C46 0028                967          CMPI    #%0000000000101000,D6
00001714  6700 00A8                968          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001718                           969          
00001718  0C46 0030                970          CMPI    #%0000000000110000,D6
0000171C  6700 00A0                971          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001720                           972          
00001720  0C46 0038                973          CMPI    #%0000000000111000,D6
00001724  6700 0046                974          BEQ     TWOWORDLEA          * it's a two word LEA
00001728                           975          
00001728  43F9 000027DB            976          LEA     LEAOP,A1
0000172E  103C 000E                977          MOVE.B  #14,D0          * Print LEA
00001732  4E4F                     978          TRAP    #15
00001734                           979          
00001734  0882 0007                980          BCLR    #7,D2
00001738  0882 0008                981          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
0000173C                           982          
0000173C  43F9 0000285C            983          LEA     SPACE,A1
00001742  103C 000E                984          MOVE.B  #14,D0          * Print SPACE
00001746  4E4F                     985          TRAP    #15
00001748                           986          
00001748  6100 07A6                987          BSR     EAHELPER05
0000174C                           988          
0000174C  43F9 00002862            989          LEA     COMMA,A1
00001752  103C 000E                990          MOVE.B  #14,D0          * Print COMMA
00001756  4E4F                     991          TRAP    #15
00001758                           992          
00001758  6100 0754                993          BSR     EAHELPER611
0000175C                           994          
0000175C  43F9 000027A5            995          LEA     NEWLINE,A1
00001762  103C 000E                996          MOVE.B  #14,D0          * Start a new line
00001766  4E4F                     997          TRAP    #15
00001768                           998          
00001768                           999          
00001768                          1000          * call EA helper
00001768                          1001          * MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
00001768                          1002                  
00001768  6000 0058               1003          BRA     DONE0100          * we already found instruction, next iteration
0000176C                          1004          
0000176C                          1005  TWOWORDLEA
0000176C                          1006  
0000176C  43F9 000027DB           1007          LEA     LEAOP,A1
00001772  103C 000E               1008          MOVE.B  #14,D0   * Print LEA
00001776  4E4F                    1009          TRAP    #15
00001778                          1010          
00001778  43F9 0000285C           1011          LEA     SPACE,A1
0000177E  103C 000E               1012          MOVE.B  #14,D0   * Print SPACE
00001782  4E4F                    1013          TRAP    #15
00001784                          1014  
00001784  321A                    1015          MOVE.W  (A2)+,D1
00001786                          1016          
00001786  7C00                    1017          MOVE.L  #0,D6
00001788  7E0F                    1018          MOVE.L  #15,D7
0000178A                          1019          
0000178A  6100 0FB0               1020          BSR     BITMASK
0000178E                          1021          
0000178E  C286                    1022          AND.L   D6,D1   * shave off bad info
00001790                          1023          
00001790  103C 0003               1024          MOVE.B  #3,D0   * Print the address which was the source
00001794  4E4F                    1025          TRAP    #15
00001796                          1026          
00001796  43F9 00002862           1027          LEA     COMMA,A1
0000179C  103C 000E               1028          MOVE.B  #14,D0  * Print COMMA
000017A0  4E4F                    1029          TRAP    #15
000017A2                          1030          
000017A2  0882 0007               1031          BCLR    #7,D2
000017A6  0882 0008               1032          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
000017AA                          1033          
000017AA  6100 0702               1034          BSR     EAHELPER611
000017AE                          1035          
000017AE  43F9 000027A5           1036          LEA     NEWLINE,A1
000017B4  103C 000E               1037          MOVE.B  #14,D0          * Start a new line
000017B8  4E4F                    1038          TRAP    #15
000017BA                          1039          
000017BA  6000 0006               1040          BRA     DONE0100
000017BE                          1041          
000017BE                          1042  UNKNOWN0100 *dont know what it is
000017BE  6100 0D12               1043          BSR     UNKNOWNOP
000017C2                          1044          
000017C2                          1045  DONE0100
000017C2  4C9F 0303               1046          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
000017C6  4E75                    1047          RTS
000017C8                          1048          
000017C8                          1049  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000017C8                          1050  *-----------------------------------------------------------------------------
000017C8                          1051        
000017C8                          1052          
000017C8                          1053          
000017C8                          1054  
000017C8                          1055  *-----------------------------------------------------------------------------
000017C8                          1056  *-----------------------------------------------------------------------------
000017C8                          1057  * NAME: OP_0101   (SUBQ)
000017C8                          1058  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000017C8                          1059  * PRE-CONDITION:  xyz
000017C8                          1060  * POST-CONDITION: All registers return to their previous state, and the output
000017C8                          1061  *                 goes to the output console for reading the raw data or the
000017C8                          1062  *                 actual instruction.
000017C8                          1063  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000017C8                          1064  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000017C8                          1065  OP0101
000017C8  48A7 FFC0               1066          MOVEM   D0-D7/A0-A1,-(A7)       * Push values to the stack to save
000017CC                          1067  
000017CC  CC7C 0100               1068          AND     #%0000000100000000, D6  * Baby-Bitmask for the 8th digit.
000017D0  0C46 0100               1069          CMPI    #%0000000100000000, D6  * Is the 8th digit a 1?
000017D4  6700 005A               1070          BEQ     UNKNOWN0101             * If so, unknown op
000017D8                          1071        
000017D8  0C46 0100               1072          CMPI    #%0000000100000000, D6  * Is the size 11, an unsupported value?
000017DC  6700 0052               1073          BEQ     UNKNOWN0101             * If so, unknown op
000017E0                          1074            
000017E0                          1075          * Verified SUBQ at this point
000017E0  43F9 000027D6           1076          LEA     SUBQOP,A1           * Print out SUBQ
000017E6  103C 000E               1077          MOVE.B  #14,D0              * Trap #14 to print out
000017EA  4E4F                    1078          TRAP    #15                 * Perform Trap #14
000017EC                          1079                          
000017EC  6100 0A48               1080          BSR     SIZE67              * Print out size
000017F0                          1081          
000017F0  43F9 00002860           1082          LEA     IMD,A1              * Formatting
000017F6  103C 000E               1083          MOVE.B  #14,D0              * Trap #14 prints out space
000017FA  4E4F                    1084          TRAP    #15                 * Perform Trap #14
000017FC                          1085          
000017FC  3C3C 0009               1086          MOVE.W  #9, D6              * Prep lower value for bitmask
00001800  3E3C 000B               1087          MOVE.W  #11,D7              * Prep upper value for bitmask
00001804  6100 0F36               1088          BSR     BITMASK             * Finalize bitmask setup
00001808  CC42                    1089          AND     D2,D6               * Apply bitmask
0000180A                          1090          
0000180A  6100 0E7E               1091          BSR     PRINTDATA911        * Special op for immediate in bits 9->11
0000180E                          1092            
0000180E  43F9 00002862           1093          LEA     COMMA,A1            * Formatting
00001814  103C 000E               1094          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001818  4E4F                    1095          TRAP    #15                 * Perform Trap #14
0000181A                          1096          
0000181A  6100 06D4               1097          BSR     EAHELPER05          * Print out the Effective Address
0000181E                          1098          
0000181E  43F9 000027A5           1099          LEA     NEWLINE,A1          * Formatting
00001824  103C 000E               1100          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001828  4E4F                    1101          TRAP    #15                 * Perform Trap #14
0000182A                          1102          
0000182A  4C9F 03FF               1103          MOVEM   (A7)+,D0-D7/A0-A1   * Pop off the stack to return our registers
0000182E  4E75                    1104          RTS
00001830                          1105      
00001830                          1106  UNKNOWN0101
00001830  6100 0CA0               1107          BSR     UNKNOWNOP
00001834  4E75                    1108          RTS
00001836                          1109  
00001836                          1110  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001836                          1111  *-----------------------------------------------------------------------------
00001836                          1112  
00001836                          1113  
00001836                          1114  
00001836                          1115  *-----------------------------------------------------------------------------
00001836                          1116  *-----------------------------------------------------------------------------
00001836                          1117  * NAME: OP_0110   (BCC, BCS, BGE, BLT, BVC, BRA)
00001836                          1118  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001836                          1119  * PRE-CONDITION:  Given the possibilties for 0110, masks the next 4 bits
00001836                          1120  *                 in the instruction and determines what the bits match to a
00001836                          1121  *                 given condition code. If the 8 bit offset is $00, or $FF,
00001836                          1122  *                 this signifies a word or long offset (for $00 and $FF
00001836                          1123  *                 respectively). The 8 bit offset is in 2's comp. form, and
00001836                          1124  *                 should be un-done, then plus or minus to the current
00001836                          1125  *                 program counter (PC) to get the actual memory label to
00001836                          1126  *                 output to console. The word offset signal eats an
00001836                          1127  *                 additional 16 bits and the long offset eats an additional
00001836                          1128  *                 32 bits. The word/long offset are for memory alignment.
00001836                          1129  * POST-CONDITION: All registers return to their previous state, and the output
00001836                          1130  *                 goes to the output console for reading the raw data or the
00001836                          1131  *                 actual instruction.
00001836                          1132  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001836                          1133  *                 A1 (output)
00001836                          1134  * CONDITIONS TABLE:
00001836                          1135  *                Condition Names  - Mnemonic - Condition Code
00001836                          1136  *                --------------------------------------------
00001836                          1137  *                True             -    T     - 0000
00001836                          1138  *                False            -    F     - 0001
00001836                          1139  *                Higher           -    HI    - 0010
00001836                          1140  *                Lower or Same    -    LS    - 0011
00001836                          1141  *                Carry Clear      -    CC    - 0100
00001836                          1142  *                Carry Set        -    CS    - 0101
00001836                          1143  *                Not Equal        -    NE    - 0110
00001836                          1144  *                Equal            -    EQ    - 0111
00001836                          1145  *                Overflow Clear   -    VC    - 1000
00001836                          1146  *                Overflow Set     -    VS    - 1001
00001836                          1147  *                Plus             -    PL    - 1010
00001836                          1148  *                Minus            -    MI    - 1011
00001836                          1149  *                Greater or Equal -    GE    - 1100
00001836                          1150  *                Less Than        -    LT    - 1101
00001836                          1151  *                Greater Than     -    GT    - 1110
00001836                          1152  *                Less or Equal    -    LE    - 1111
00001836                          1153  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001836  48E7 FFFE               1154  OP0110  MOVEM.L D0-D7/A0-A6,-(A7) * Save main method routine vars to stack
0000183A                          1155                          
0000183A  3C3C 0009               1156          MOVE.W  #9,D6  * Move in 9 to D6
0000183E  3E3C 000B               1157          MOVE.W  #11,D7 * Move in 11 to D7
00001842                          1158                                        
00001842  6100 0EF8               1159          BSR     BITMASK * Call BITMASK sub-routine, Returns a bitmask in D6
00001846  CC42                    1160          AND     D2,D6   * apply the BITMASK
00001848                          1161          
00001848  0C46 0400               1162          CMPI    #%0000010000000000,D6 * CASE 1: BCC - BINARY FOR "CARRY CLEAR" FLAG
0000184C  6700 0032               1163          BEQ     OP_BCC
00001850  0C46 0500               1164          CMPI    #%0000010100000000,D6 * CASE 2: BCS - BINARY FOR "CARRY SET" FLAG
00001854  6700 0034               1165          BEQ     OP_BCS
00001858  0C46 0C00               1166          CMPI    #%0000110000000000,D6 * CASE 3: BGE - BINARY FOR "GREATER OR EQUAL" FLAG
0000185C  6700 0036               1167          BEQ     OP_BGE
00001860  0C46 0D00               1168          CMPI    #%0000110100000000,D6 * CASE 4: BLT - BINARY FOR "LESS THAN" FLAG
00001864  6700 0038               1169          BEQ     OP_BLT
00001868  0C46 0800               1170          CMPI    #%0000100000000000,D6 * CASE 5: BVC - BINARY FOR "OVERFLOW CLEAR" FLAG
0000186C  6700 003A               1171          BEQ     OP_BVC
00001870  0C46 0000               1172          CMPI    #%0000000000000000,D6 * CASE 6: BRA - BINARY FOR "BRANCH ALWAYS" FLAG
00001874  6700 003C               1173          BEQ     OP_BRA
00001878  6100 0C58               1174          BSR     UNKNOWNOP             * don't know what it is, print it out, skip to end
0000187C  6000 007A               1175          BRA     BCC_END
00001880                          1176  
00001880  43F9 0000281A           1177  OP_BCC  LEA     OP_BCC_MSG,A1
00001886  6000 0034               1178          BRA     OP_BRANCHES_PRINT
0000188A  43F9 0000281F           1179  OP_BCS  LEA     OP_BCS_MSG,A1
00001890  6000 002A               1180          BRA     OP_BRANCHES_PRINT
00001894  43F9 00002824           1181  OP_BGE  LEA     OP_BGE_MSG,A1
0000189A  6000 0020               1182          BRA     OP_BRANCHES_PRINT
0000189E  43F9 00002829           1183  OP_BLT  LEA     OP_BLT_MSG,A1
000018A4  6000 0016               1184          BRA     OP_BRANCHES_PRINT
000018A8  43F9 0000282E           1185  OP_BVC  LEA     OP_BVC_MSG,A1
000018AE  6000 000C               1186          BRA     OP_BRANCHES_PRINT
000018B2  43F9 00002833           1187  OP_BRA  LEA     OP_BRA_MSG,A1
000018B8  6000 0002               1188          BRA     OP_BRANCHES_PRINT
000018BC                          1189  OP_BRANCHES_PRINT
000018BC  103C 000E               1190          MOVE.B  #14,D0 * print instruction op, chosen from cases directly above
000018C0  4E4F                    1191          TRAP    #15
000018C2                          1192          
000018C2  43F9 0000285E           1193          LEA     DOLLAR,A1
000018C8  103C 000E               1194          MOVE.B  #14,D0 * print raw data hex of the LABEL
000018CC  4E4F                    1195          TRAP    #15
000018CE                          1196          
000018CE  3C3C 0000               1197          MOVE.W  #0,D6                 * Move in 0 to D6 - prep mask
000018D2  3E3C 0007               1198          MOVE.W  #7,D7                 * Move in 7 to D7
000018D6  6100 0E64               1199          BSR     BITMASK               * Call BITMASK sub-routine, return in D6
000018DA  CC42                    1200          AND     D2,D6                 * AND mask with op bits, get last 8 bits in D6
000018DC                          1201          
000018DC                          1202  *        CMPI    #%00000000,D6         * all 0's == word offset
000018DC                          1203  *        BEQ     BCC_WORD_OFFSET
000018DC                          1204          
000018DC                          1205  *        CMPI    #%11111111,D6         * all F's == long offset
000018DC                          1206  *        BEQ     BCC_LONG_OFFSET
000018DC                          1207  BCC_BYTE_OFFSET
000018DC  4254                    1208          CLR     (A4)
000018DE  2846                    1209          MOVE.L  D6,A4
000018E0  43D4                    1210          LEA     (A4),A1
000018E2  103C 000E               1211          MOVE.B  #14,D0
000018E6  4E4F                    1212          TRAP    #15
000018E8  43F9 000027A5           1213          LEA     NEWLINE,A1
000018EE  103C 000E               1214          MOVE.B  #14,D0
000018F2  4E4F                    1215          TRAP    #15
000018F4                          1216          
000018F4  6000 0002               1217          BRA     BCC_END
000018F8                          1218  *BCC_WORD_OFFSET
000018F8                          1219  *        MOVEM.W (A2)+,A1
000018F8                          1220  *        MOVE.B  #13,D0
000018F8                          1221  *        TRAP    #15
000018F8                          1222  *        BRA     BCC_END
000018F8                          1223  *BCC_LONG_OFFSET
000018F8                          1224  *        MOVEM.L (A2)+,A1
000018F8                          1225  *        MOVE.B  #13,D0
000018F8                          1226  *        TRAP    #15
000018F8                          1227  *        BRA     BCC_END
000018F8                          1228  BCC_END * reload the memory, call RTS
000018F8  4C9F 7FFF               1229          MOVEM   (A7)+,D0-D7/A0-A6 * Pop off the stack to return our registers
000018FC  4E75                    1230          RTS
000018FE                          1231  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000018FE                          1232  *-----------------------------------------------------------------------------
000018FE                          1233  
000018FE                          1234  
000018FE                          1235  
000018FE                          1236  *-----------------------------------------------------------------------------
000018FE                          1237  *-----------------------------------------------------------------------------
000018FE                          1238  * NAME: OP_0111   ()
000018FE                          1239  * DESCRIPTION:    OP code 0111 is not supported. 
000018FE                          1240  * PRE-CONDITION:  
000018FE                          1241  * POST-CONDITION: 
000018FE                          1242  * REGISTERS:
000018FE                          1243  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000018FE                          1244  OP0111
000018FE  6100 0BD2               1245      BSR     UNKNOWNOP
00001902  4E75                    1246      RTS
00001904                          1247  
00001904                          1248  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001904                          1249  *-----------------------------------------------------------------------------
00001904                          1250  
00001904                          1251  
00001904                          1252  
00001904                          1253  *-----------------------------------------------------------------------------
00001904                          1254  *-----------------------------------------------------------------------------
00001904                          1255  * NAME: OP_1000   (DIVS, OR)
00001904                          1256  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001904                          1257  * PRE-CONDITION:  xyz
00001904                          1258  * POST-CONDITION: All registers return to their previous state, and the output
00001904                          1259  *                 goes to the output console for reading the raw data or the
00001904                          1260  *                 actual instruction.
00001904                          1261  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001904                          1262  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001904                          1263  OP1000
00001904  48A7 FFC0               1264          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
00001908                          1265  
00001908                          1266          * Check if the EA Mode is 001 since both DIVS and OR do not support it
00001908  3C3C 0003               1267          MOVE.W  #3, D6              * Prep lower value for bitmask
0000190C  3E3C 0005               1268          MOVE.W  #5, D7              * Prep upper value for bitmask
00001910  6100 0E2A               1269          BSR     BITMASK             * Finalize bitmask setup
00001914  CC42                    1270          AND     D2,D6               * Apply bitmask
00001916                          1271          
00001916  0C46 0008               1272          CMPI    #%0000000000001000, D6  * Is the mode 001, an unsupported mode?
0000191A  6700 0BB6               1273          BEQ     UNKNOWNOP                 * If so, the op is not supported
0000191E                          1274          
0000191E                          1275          * Checking for DIVS
0000191E  3C3C 0006               1276          MOVE.W  #6, D6              * Prep lower value for bitmask
00001922  3E3C 0008               1277          MOVE.W  #8, D7              * Prep upper value for bitmask
00001926  6100 0E14               1278          BSR     BITMASK             * Finalize bitmask setup
0000192A  CC42                    1279          AND     D2,D6               * Apply bitmask
0000192C                          1280          
0000192C  0C46 01C0               1281          CMPI    #%0000000111000000, D6  * Are we DIVS?
00001930  6600 0050               1282          BNE     NOTDIVS                 * If not, branch to see if it's OR
00001934                          1283          
00001934  43F9 000027A8           1284          LEA     DIVSOP,A1           * We found DIVS
0000193A  103C 000E               1285          MOVE.B  #14,D0              * Trap #14 prints out the data
0000193E  4E4F                    1286          TRAP    #15                 * Perform Trap #14
00001940                          1287          
00001940  43F9 0000285C           1288          LEA     SPACE,A1            * formatting
00001946  103C 000E               1289          MOVE.B  #14,D0              * Trap #14 prints out space
0000194A  4E4F                    1290          TRAP    #15                 * Perform Trap #14
0000194C                          1291          
0000194C  4243                    1292          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
0000194E  08C3 0000               1293          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
00001952                          1294                                      * to indicate a potential immediate of size word
00001952                          1295          
00001952  6100 059C               1296          BSR     EAHELPER05          * Print out data
00001956                          1297  
00001956  43F9 00002862           1298          LEA     COMMA,A1            * formatting
0000195C  103C 000E               1299          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001960  4E4F                    1300          TRAP    #15                 * Perform Trap #14
00001962                          1301          
00001962                          1302          * bit manipulation is needed to make the outlier DIVS work
00001962                          1303          * with the generic EAHELPER611
00001962  0882 0006               1304          BCLR    #6,D2
00001966  0882 0007               1305          BCLR    #7,D2
0000196A  0882 0008               1306          BCLR    #8,D2
0000196E                          1307          
0000196E                          1308          * the above bits were cleared so that eahelper05 knows the destination
0000196E                          1309          * is a data register.
0000196E                          1310          
0000196E  6100 053E               1311          BSR     EAHELPER611 
00001972                          1312  
00001972  43F9 000027A5           1313          LEA     NEWLINE,A1          * We found DIVS
00001978  103C 000E               1314          MOVE.B  #14,D0              * Trap #14 prints out the data
0000197C  4E4F                    1315          TRAP    #15                 * Perform Trap #14
0000197E                          1316          
0000197E  6000 0012               1317          BRA     OP1000END
00001982                          1318          
00001982                          1319  NOTDIVS * It is confirmed OR at this point
00001982  43F9 000027EA           1320          LEA     OROP,A1         * We found OR
00001988  103C 000E               1321          MOVE.B  #14,D0          * Trap #14 prints out the data
0000198C  4E4F                    1322          TRAP    #15             * Perform Trap #14
0000198E                          1323          *================================================================
0000198E                          1324          * todo, move the size of the operation into the leading bits of D5
0000198E                          1325          * before subroutine call
0000198E  6100 051E               1326          BSR     EAHELPER611
00001992                          1327  
00001992                          1328  OP1000END
00001992  4C9F 03FF               1329          MOVEM   (A7)+,D0-D7/A0-A1
00001996  4E75                    1330          RTS
00001998                          1331  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001998                          1332  *-----------------------------------------------------------------------------
00001998                          1333  
00001998                          1334  
00001998                          1335  
00001998                          1336  *-----------------------------------------------------------------------------
00001998                          1337  *-----------------------------------------------------------------------------
00001998                          1338  * NAME: OP_1001   (SUB)
00001998                          1339  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001998                          1340  * PRE-CONDITION:  xyz
00001998                          1341  * POST-CONDITION: All registers return to their previous state, and the output
00001998                          1342  *                 goes to the output console for reading the raw data or the
00001998                          1343  *                 actual instruction.
00001998                          1344  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001998                          1345  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001998                          1346  OP1001
00001998  48A7 FFC0               1347          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
0000199C                          1348          
0000199C  3C3C 0006               1349          MOVE.W  #6, D6              * Prep lower value for bitmask
000019A0  3E3C 0008               1350          MOVE.W  #8, D7              * Prep upper value for bitmask
000019A4  6100 0D96               1351          BSR     BITMASK             * Finalize bitmask setup
000019A8  CC42                    1352          AND     D2,D6               * Apply bitmask
000019AA                          1353          
000019AA                          1354          * Check to see if opmode is unsupported for both EOR and CMP
000019AA  0C46 00C0               1355          CMPI    #%0000000011000000, D6      * Is the OPMODE 011, unsupported by SUB?
000019AE  6700 0098               1356          BEQ     UNKNOWN1001                 * If so, the OP is unknown
000019B2  0C46 01C0               1357          CMPI    #%0000000111000000, D6      * Is the OPMODE 111, unsupported by SUB?
000019B6  6700 0090               1358          BEQ     UNKNOWN1001                 * If so, the OP is unknown
000019BA                          1359            
000019BA                          1360          * Check to see if the opmode is EA v Dn -> Dn
000019BA  0C46 0000               1361          CMPI    #%0000000000000000, D6      * Is the OPMODE 000, a BYTE for EA v DN?
000019BE  6700 0070               1362          BEQ     SUB_EA_DN                   * If so, branch to SUB_EA_DN
000019C2  0C46 0040               1363          CMPI    #%0000000001000000, D6      * Is the OPMODE 001, a WORD for EA v DN?
000019C6  6700 0068               1364          BEQ     SUB_EA_DN                   * If so, branch to SUB_EA_DN
000019CA  0C46 0080               1365          CMPI    #%0000000010000000, D6      * Is the OPMODE 010, a LONG for EA v DN?
000019CE  6700 0060               1366          BEQ     SUB_EA_DN                   * If so, branch to SUB_EA_DN
000019D2                          1367          
000019D2                          1368          * Need to see if the size is a BYTE and the mode is An direct
000019D2                          1369          * Since this is not supported
000019D2  3C3C 0003               1370          MOVE.W  #3, D6              * Prep lower value for bitmask
000019D6  3E3C 0008               1371          MOVE.W  #8, D7              * Prep upper value for bitmask
000019DA  6100 0D60               1372          BSR     BITMASK             * Finalize bitmask setup
000019DE  CC42                    1373          AND     D2,D6               * Apply bitmask
000019E0                          1374          
000019E0  0C46 0108               1375          CMPI    #%0000000100001000, D6      * Is the mode 001 and is a byte?
000019E4  6700 0062               1376          BEQ     UNKNOWN1001                 * If so, unsupported op
000019E8                          1377          
000019E8                          1378          * Verified to be SUB_DN_EA here
000019E8  0C46 0000               1379          CMPI    #%0000000000000000, D6      * Is the  000, a BYTE for EA v DN?
000019EC  6700 0042               1380          BEQ     SUB_EA_DN                   * If so, branch to SUB_EA_DN
000019F0                          1381  
000019F0                          1382  PRINT1001   
000019F0  43F9 0000280E           1383          LEA     SUBOP,A1    * We found SUB
000019F6  103C 000E               1384          MOVE.B  #14,D0      * Trap #14 prints out a comma
000019FA  4E4F                    1385          TRAP    #15         * Perform Trap #14
000019FC                          1386          
000019FC  6100 087C               1387          BSR     SIZE68      * print out the size
00001A00                          1388          
00001A00  6100 04EE               1389          BSR     EAHELPER05
00001A04                          1390          
00001A04                          1391          * bit manipulation is needed to make EAHELPER611 work
00001A04  0882 0006               1392          BCLR    #6,D2
00001A08  0882 0007               1393          BCLR    #7,D2
00001A0C  0882 0008               1394          BCLR    #8,D2
00001A10                          1395               
00001A10  43F9 00002862           1396          LEA     COMMA,A1            * formatting
00001A16  103C 000E               1397          MOVE.B  #14,D0              * Trap #14 prints out comma
00001A1A  4E4F                    1398          TRAP    #15                 * Perform Trap #1
00001A1C                          1399          
00001A1C  6100 0490               1400          BSR     EAHELPER611 
00001A20                          1401          
00001A20  43F9 000027A5           1402          LEA     NEWLINE,A1          * formatting
00001A26  103C 000E               1403          MOVE.B  #14,D0              * Trap #14 prints out comma
00001A2A  4E4F                    1404          TRAP    #15                 * Perform Trap #1
00001A2C                          1405          
00001A2C  6000 001E               1406          BRA     DONE1001
00001A30                          1407          
00001A30                          1408  SUB_EA_DN
00001A30                          1409          * SUBA is not supported and must be checked
00001A30  3C3C 0003               1410          MOVE.W  #3, D6              * Prep lower value for bitmask
00001A34  3E3C 0005               1411          MOVE.W  #5, D7              * Prep upper value for bitmask
00001A38  6100 0D02               1412          BSR     BITMASK             * Finalize bitmask setup
00001A3C  CC42                    1413          AND     D2,D6               * Apply bitmask
00001A3E                          1414          
00001A3E  0C46 0008               1415          CMPI    #%0000000000001000, D6      * Is the mode 001, an unsupported mode for SUB?
00001A42  6700 0004               1416          BEQ     UNKNOWN1001                 * If so, branch to UNKNOWN100
00001A46                          1417          
00001A46  60A8                    1418          BRA     PRINT1001           * Verified to be valid at this point
00001A48                          1419          
00001A48                          1420  UNKNOWN1001
00001A48  6100 0A88               1421          BSR     UNKNOWNOP           * Unknown op
00001A4C                          1422          
00001A4C                          1423  DONE1001
00001A4C  4C9F 03FF               1424          MOVEM   (A7)+,D0-D7/A0-A1   * Return vales
00001A50  4E75                    1425          RTS                         * Return to main
00001A52                          1426  
00001A52                          1427  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001A52                          1428  *-----------------------------------------------------------------------------
00001A52                          1429  
00001A52                          1430  
00001A52                          1431  
00001A52                          1432  *-----------------------------------------------------------------------------
00001A52                          1433  *-----------------------------------------------------------------------------
00001A52                          1434  * NAME: OP_1010   ()
00001A52                          1435  * DESCRIPTION:    a
00001A52                          1436  * PRE-CONDITION:  b
00001A52                          1437  * POST-CONDITION: c
00001A52                          1438  * REGISTERS:      d
00001A52                          1439  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001A52                          1440  OP1010
00001A52                          1441  
00001A52  6100 0A7E               1442      BSR     UNKNOWNOP
00001A56  4E75                    1443      RTS
00001A58                          1444  
00001A58                          1445  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001A58                          1446  *-----------------------------------------------------------------------------
00001A58                          1447  
00001A58                          1448  
00001A58                          1449  
00001A58                          1450  *-----------------------------------------------------------------------------
00001A58                          1451  *-----------------------------------------------------------------------------
00001A58                          1452  * NAME: OP_1011   (EOR, CMP)
00001A58                          1453  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001A58                          1454  * PRE-CONDITION:  xyz
00001A58                          1455  * POST-CONDITION: All registers return to their previous state, and the output
00001A58                          1456  *                 goes to the output console for reading the raw data or the
00001A58                          1457  *                 actual instruction.
00001A58                          1458  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001A58                          1459  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001A58                          1460  OP1011
00001A58                          1461  
00001A58  48A7 FFC0               1462          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
00001A5C                          1463  
00001A5C  3C3C 0006               1464          MOVE.W  #6, D6              * Prep lower value for bitmask
00001A60  3E3C 0008               1465          MOVE.W  #8, D7              * Prep upper value for bitmask
00001A64  6100 0CD6               1466          BSR     BITMASK             * Finalize bitmask setup
00001A68  CC42                    1467          AND     D2,D6               * Apply bitmask
00001A6A                          1468          
00001A6A                          1469          * Check to see if opmode is unsupported for both EOR and CMP
00001A6A  0C46 00C0               1470          CMPI    #%0000000011000000, D6      * Is the OPMODE 011, unsupported by EOR/CMP?
00001A6E  6700 0088               1471          BEQ     UNKNOWN1011                 * If so, the OP is unknown
00001A72  0C46 01C0               1472          CMPI    #%0000000111000000, D6      * Is the OPMODE 111, unsupported by EOR/CMP?
00001A76  6700 0080               1473          BEQ     UNKNOWN1011                 * If so, the OP is unknown
00001A7A                          1474          
00001A7A                          1475          * Check to see if it is CMP
00001A7A  0C46 0000               1476          CMPI    #%0000000000000000, D6      * Is the OPMODE 000, a BYTE for CMP?
00001A7E  6700 0038               1477          BEQ     NOTEOR                      * If so, the OP is CMP
00001A82  0C46 0040               1478          CMPI    #%0000000001000000, D6      * Is the OPMODE 000, a WORD for CMP?
00001A86  6700 0030               1479          BEQ     NOTEOR                      * If so, the OP is CMP
00001A8A  0C46 0080               1480          CMPI    #%0000000010000000, D6      * Is the OPMODE 000, a LONG for CMP?
00001A8E  6700 0028               1481          BEQ     NOTEOR                      * If so, the OP is CMP
00001A92                          1482  
00001A92                          1483          * Check to see EA mode is 001, unsupported by EOR
00001A92  3C3C 0003               1484          MOVE.W  #3, D6              * Prep lower value for bitmask
00001A96  3E3C 0005               1485          MOVE.W  #5, D7              * Prep upper value for bitmask
00001A9A  6100 0CA0               1486          BSR     BITMASK             * Finalize bitmask setup
00001A9E  CC42                    1487          AND     D2,D6               * Apply bitmask
00001AA0                          1488          
00001AA0  0C46 0040               1489          CMPI    #%0000000001000000, D6      * Is the mode 001, unsupported for EOR?
00001AA4  6700 0052               1490          BEQ     UNKNOWN1011                 * If so, the op is unknown
00001AA8                          1491          
00001AA8                          1492          * Verified to be EOR at this point
00001AA8  43F9 000027B1           1493          LEA     EOROP,A1            * We found EOR
00001AAE  103C 000E               1494          MOVE.B  #14,D0              * Trap #14 prints out the data
00001AB2  4E4F                    1495          TRAP    #15                 * Perform Trap #14
00001AB4                          1496          
00001AB4  6000 000E               1497          BRA     DISPLAY1011         * Branch to the end of 1011       
00001AB8                          1498  
00001AB8                          1499  NOTEOR
00001AB8  43F9 000027AD           1500          LEA     CMPOP,A1            * We found CMP
00001ABE  103C 000E               1501          MOVE.B  #14,D0              * Trap #14 prints out the data
00001AC2  4E4F                    1502          TRAP    #15                 * Perform Trap #14
00001AC4                          1503          
00001AC4                          1504  DISPLAY1011
00001AC4  6100 07B4               1505          BSR     SIZE68
00001AC8                          1506          
00001AC8  6100 0426               1507          BSR     EAHELPER05
00001ACC                          1508          
00001ACC  43F9 00002862           1509          LEA     COMMA,A1            * Formatting
00001AD2  103C 000E               1510          MOVE.B  #14,D0              * Trap #14 prints out the data
00001AD6  4E4F                    1511          TRAP    #15                 * Perform Trap #14
00001AD8                          1512          
00001AD8  0882 0006               1513          BCLR    #6,D2               * Bit manipulation is 
00001ADC  0882 0007               1514          BCLR    #7,D2               * necessary in order to make
00001AE0  0882 0008               1515          BCLR    #8,D2               * EAHELPER611 work generically
00001AE4                          1516          
00001AE4  6100 03C8               1517          BSR     EAHELPER611         * Print out EA
00001AE8                          1518          
00001AE8  43F9 000027A5           1519          LEA     NEWLINE,A1          * Formatting
00001AEE  103C 000E               1520          MOVE.B  #14,D0              * Trap #14 prints out the data
00001AF2  4E4F                    1521          TRAP    #15                 * Perform Trap #14
00001AF4                          1522          
00001AF4  6000 0006               1523          BRA     DONE1011            * Branch to end 1011 and move to next op
00001AF8                          1524          
00001AF8                          1525  UNKNOWN1011
00001AF8  6100 09D8               1526          BSR     UNKNOWNOP           * Unknown op
00001AFC                          1527                   
00001AFC                          1528  DONE1011
00001AFC  4C9F 03FF               1529          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
00001B00  4E75                    1530          RTS                         * Return to main
00001B02                          1531  
00001B02                          1532  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001B02                          1533  *-----------------------------------------------------------------------------
00001B02                          1534  
00001B02                          1535  
00001B02                          1536  
00001B02                          1537  *-----------------------------------------------------------------------------
00001B02                          1538  *-----------------------------------------------------------------------------
00001B02                          1539  * NAME: OP_1100   (MULS)
00001B02                          1540  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001B02                          1541  * PRE-CONDITION:  xyz
00001B02                          1542  * POST-CONDITION: All registers return to their previous state, and the output
00001B02                          1543  *                 goes to the output console for reading the raw data or the
00001B02                          1544  *                 actual instruction.
00001B02                          1545  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001B02                          1546  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001B02                          1547  OP1100
00001B02  48A7 FFC0               1548          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
00001B06                          1549  
00001B06                          1550          * Check if the EA Mode is 001 since MULS does not support it
00001B06  3C3C 0003               1551          MOVE.W  #3, D6              * Prep lower value for bitmask
00001B0A  3E3C 0005               1552          MOVE.W  #5, D7              * Prep upper value for bitmask
00001B0E  6100 0C2C               1553          BSR     BITMASK             * Finalize bitmask setup
00001B12  CC42                    1554          AND     D2,D6               * Apply bitmask
00001B14                          1555          
00001B14  0C46 0008               1556          CMPI    #%0000000000001000, D6    * Is the mode 001, an unsupported mode?
00001B18  6700 0068               1557          BEQ     UNKNOWN1100               * If so, the op is not supported
00001B1C                          1558          
00001B1C  3C3C 0006               1559          MOVE.W  #6, D6              * Prep lower value for bitmask
00001B20  3E3C 0008               1560          MOVE.W  #8, D7              * Prep upper value for bitmask
00001B24  6100 0C16               1561          BSR     BITMASK             * Finalize bitmask setup
00001B28  CC42                    1562          AND     D2,D6               * Apply bitmask
00001B2A                          1563          
00001B2A  0C46 01C0               1564          CMPI    #%0000000111000000, D6  * Are we MULS?
00001B2E  6600 0052               1565          BNE     UNKNOWN1100             * If not, it is an unknown op
00001B32                          1566          
00001B32  43F9 000027E5           1567          LEA     MULSOP,A1           * We found MULS
00001B38  103C 000E               1568          MOVE.B  #14,D0              * Trap #14 prints out the data
00001B3C  4E4F                    1569          TRAP    #15                 * Perform Trap #14
00001B3E                          1570          
00001B3E  43F9 0000285C           1571          LEA     SPACE,A1            * formatting
00001B44  103C 000E               1572          MOVE.B  #14,D0              * Trap #14 prints out space
00001B48  4E4F                    1573          TRAP    #15                 * Perform Trap #14
00001B4A                          1574          
00001B4A  4243                    1575          CLR     D3                  * clear D3, it is a parameter
00001B4C  08C3 0000               1576          BSET    #0,D3               * of EAHELPER05 to indicate size
00001B50                          1577          
00001B50  6100 039E               1578          BSR     EAHELPER05          * Print out data
00001B54                          1579  
00001B54  43F9 00002862           1580          LEA     COMMA,A1            * formatting
00001B5A  103C 000E               1581          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001B5E  4E4F                    1582          TRAP    #15                 * Perform Trap #14
00001B60                          1583          
00001B60  0882 0006               1584          BCLR    #6,D2               * Bit manipulation is 
00001B64  0882 0007               1585          BCLR    #7,D2               * necessary in order to make
00001B68  0882 0008               1586          BCLR    #8,D2               * EAHELPER611 work generically
00001B6C                          1587          
00001B6C  6100 0340               1588          BSR     EAHELPER611         * Print out EA
00001B70                          1589  
00001B70  43F9 000027A5           1590          LEA     NEWLINE,A1          * Formatting
00001B76  103C 000E               1591          MOVE.B  #14,D0              * Trap #14 prints out the data
00001B7A  4E4F                    1592          TRAP    #15                 * Perform Trap #14
00001B7C                          1593          
00001B7C  4C9F 03FF               1594          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
00001B80  4E75                    1595          RTS                         * Return to main
00001B82                          1596          
00001B82                          1597  UNKNOWN1100
00001B82  6100 094E               1598          BSR     UNKNOWNOP
00001B86                          1599       
00001B86  4C9F 03FF               1600          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
00001B8A  4E75                    1601          RTS                         * Return to main
00001B8C                          1602          
00001B8C                          1603  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001B8C                          1604  *-----------------------------------------------------------------------------
00001B8C                          1605  
00001B8C                          1606  
00001B8C                          1607  
00001B8C                          1608  
00001B8C                          1609  
00001B8C                          1610  
00001B8C                          1611  *-----------------------------------------------------------------------------
00001B8C                          1612  *-----------------------------------------------------------------------------
00001B8C                          1613  * NAME: OP_1101   (ADD, ADDA)
00001B8C                          1614  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001B8C                          1615  * PRE-CONDITION:  xyz
00001B8C                          1616  * POST-CONDITION: All registers return to their previous state, and the output
00001B8C                          1617  *                 goes to the output console for reading the raw data or the
00001B8C                          1618  *                 actual instruction.
00001B8C                          1619  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001B8C                          1620  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001B8C                          1621  OP1101
00001B8C  48E7 FFFE               1622          MOVEM.L A0-A6/D0-D7,-(A7)
00001B90                          1623          
00001B90  3C3C 0006               1624          MOVE.W  #6, D6              * Prep lower value for bitmask
00001B94  3E3C 0008               1625          MOVE.W  #8, D7              * Prep upper value for bitmask
00001B98  6100 0BA2               1626          BSR     BITMASK             * Finalize bitmask setup
00001B9C  CC42                    1627          AND     D2,D6               * Apply bitmask
00001B9E  EC4E                    1628          LSR     #6,D6
00001BA0                          1629  
00001BA0  0C06 0000               1630          CMPI.B  #%0000000000000000,D6
00001BA4  6700 003E               1631          BEQ     BYTE_EA_DN
00001BA8                          1632  
00001BA8  0C06 0001               1633          CMPI.B  #%0000000000000001,D6
00001BAC  6700 004E               1634          BEQ     WORD_EA_DN
00001BB0                          1635  
00001BB0  0C06 0002               1636          CMPI.B  #%0000000000000010,D6
00001BB4  6700 005E               1637          BEQ     LONG_EA_DN
00001BB8                          1638  
00001BB8  0C06 0003               1639          CMPI.B  #%0000000000000011,D6
00001BBC  6700 006E               1640          BEQ     ADDA_WORD_OP
00001BC0                          1641  
00001BC0  0C06 0004               1642          CMPI.B  #%0000000000000100,D6
00001BC4  6700 0086               1643          BEQ     BYTE_DN_EA
00001BC8                          1644  
00001BC8  0C06 0005               1645          CMPI.B  #%0000000000000101,D6
00001BCC  6700 0096               1646          BEQ     WORD_DN_EA
00001BD0                          1647  
00001BD0  0C06 0006               1648          CMPI.B  #%0000000000000110,D6
00001BD4  6700 00A6               1649          BEQ     LONG_DN_EA
00001BD8                          1650  
00001BD8  0C06 0007               1651          CMPI.B  #%0000000000000111,D6
00001BDC  6700 00B6               1652          BEQ     ADDA_LONG_OP
00001BE0                          1653  
00001BE0  6000 011E               1654          BRA     ADD_ADDA_END
00001BE4                          1655          
00001BE4                          1656  BYTE_EA_DN
00001BE4  6100 00CE               1657          BSR     ADD_EA_DN_GENERIC       * print out 'ADD' base op name for ADDA too
00001BE8                          1658  
00001BE8  43F9 00002870           1659          LEA     __B,A1                  * print out size
00001BEE  103C 000E               1660          MOVE.B  #14,D0
00001BF2  4E4F                    1661          TRAP    #15
00001BF4                          1662  
00001BF4  6100 00CC               1663          BSR     ADD_ADDA_SPACE          * print out space
00001BF8  6000 00EE               1664          BRA     ADD_ADDA_PRINT
00001BFC                          1665  
00001BFC                          1666  WORD_EA_DN
00001BFC  6100 00B6               1667          BSR     ADD_EA_DN_GENERIC
00001C00                          1668  
00001C00  43F9 00002874           1669          LEA     __W,A1
00001C06  103C 000E               1670          MOVE.B  #14,D0
00001C0A  4E4F                    1671          TRAP    #15
00001C0C                          1672          
00001C0C  6100 00B4               1673          BSR     ADD_ADDA_SPACE
00001C10  6000 00D6               1674          BRA     ADD_ADDA_PRINT
00001C14                          1675          
00001C14                          1676  LONG_EA_DN
00001C14  6100 009E               1677          BSR     ADD_EA_DN_GENERIC
00001C18                          1678  
00001C18  43F9 00002878           1679          LEA     __L,A1
00001C1E  103C 000E               1680          MOVE.B  #14,D0
00001C22  4E4F                    1681          TRAP    #15
00001C24                          1682  
00001C24  6100 009C               1683          BSR     ADD_ADDA_SPACE
00001C28  6000 00BE               1684          BRA     ADD_ADDA_PRINT
00001C2C                          1685          
00001C2C                          1686  ADDA_WORD_OP
00001C2C  6100 0086               1687          BSR     ADD_EA_DN_GENERIC
00001C30                          1688  
00001C30  43F9 00002850           1689          LEA     ASCII_A,A1
00001C36  103C 000E               1690          MOVE.B  #14,D0
00001C3A  4E4F                    1691          TRAP    #15
00001C3C                          1692  
00001C3C  43F9 00002874           1693          LEA     __W,A1
00001C42  103C 000E               1694          MOVE.B  #14,D0
00001C46  4E4F                    1695          TRAP    #15
00001C48                          1696          
00001C48  6000 0086               1697          BRA     ADDA_PRT
00001C4C                          1698          
00001C4C                          1699  BYTE_DN_EA
00001C4C  6100 0066               1700          BSR     ADD_EA_DN_GENERIC
00001C50                          1701          
00001C50  43F9 00002870           1702          LEA     __B,A1
00001C56  103C 000E               1703          MOVE.B  #14,D0
00001C5A  4E4F                    1704          TRAP    #15
00001C5C                          1705          
00001C5C  6100 0064               1706          BSR     ADD_ADDA_SPACE
00001C60  6000 0086               1707          BRA     ADD_ADDA_PRINT
00001C64                          1708  
00001C64                          1709  WORD_DN_EA
00001C64  6100 004E               1710          BSR     ADD_EA_DN_GENERIC
00001C68                          1711  
00001C68  43F9 00002874           1712          LEA     __W,A1
00001C6E  103C 000E               1713          MOVE.B  #14,D0
00001C72  4E4F                    1714          TRAP    #15 
00001C74                          1715  
00001C74  6100 004C               1716          BSR     ADD_ADDA_SPACE
00001C78  6000 006E               1717          BRA     ADD_ADDA_PRINT
00001C7C                          1718  
00001C7C                          1719  LONG_DN_EA
00001C7C  6100 0036               1720          BSR     ADD_EA_DN_GENERIC
00001C80                          1721          
00001C80  43F9 00002878           1722          LEA     __L,A1
00001C86  103C 000E               1723          MOVE.B  #14,D0
00001C8A  4E4F                    1724          TRAP    #15     
00001C8C                          1725          
00001C8C  6100 0034               1726          BSR     ADD_ADDA_SPACE
00001C90  6000 0056               1727          BRA     ADD_ADDA_PRINT
00001C94                          1728  
00001C94                          1729  ADDA_LONG_OP
00001C94  6100 001E               1730          BSR     ADD_EA_DN_GENERIC
00001C98                          1731          
00001C98  43F9 00002850           1732          LEA     ASCII_A,A1
00001C9E  103C 000E               1733          MOVE.B  #14,D0
00001CA2  4E4F                    1734          TRAP    #15
00001CA4                          1735          
00001CA4  43F9 00002878           1736          LEA     __L,A1
00001CAA  103C 000E               1737          MOVE.B  #14,D0
00001CAE  4E4F                    1738          TRAP    #15
00001CB0                          1739          
00001CB0  6000 001E               1740          BRA     ADDA_PRT
00001CB4                          1741          
00001CB4                          1742  ADD_EA_DN_GENERIC
00001CB4  43F9 00002838           1743          LEA     OP_ADD_MSG,A1           * print out 'ADD'
00001CBA  103C 000E               1744          MOVE.B  #14,D0
00001CBE  4E4F                    1745          TRAP    #15
00001CC0  4E75                    1746          RTS
00001CC2                          1747          
00001CC2                          1748  ADD_ADDA_SPACE
00001CC2  43F9 0000285C           1749          LEA     SPACE,A1
00001CC8  103C 000E               1750          MOVE.B  #14,D0
00001CCC  4E4F                    1751          TRAP    #15
00001CCE  4E75                    1752          RTS
00001CD0                          1753  
00001CD0                          1754  ADDA_PRT
00001CD0  6100 0364               1755          BSR     MODE_DN
00001CD4  43F9 00002862           1756          LEA     COMMA,A1
00001CDA  103C 000E               1757          MOVE.B  #14,D0
00001CDE  4E4F                    1758          TRAP    #15
00001CE0  6100 0454               1759          BSR     MODE_AN
00001CE4  6000 001A               1760          BRA     ADD_ADDA_END
00001CE8                          1761  
00001CE8                          1762  ADD_ADDA_PRINT
00001CE8                          1763  
00001CE8  6100 0206               1764          BSR     EAHELPER05          * Print out data. TODO: DOESN'T WORK.
00001CEC                          1765  
00001CEC  43F9 00002862           1766          LEA     COMMA,A1            * formatting
00001CF2  103C 000E               1767          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001CF6  4E4F                    1768          TRAP    #15                 * Perform Trap #14
00001CF8                          1769          
00001CF8  6100 01B4               1770          BSR     EAHELPER611
00001CFC  6000 0002               1771          BRA     ADD_ADDA_END
00001D00                          1772          
00001D00                          1773  ADD_ADDA_END
00001D00  43F9 000027A5           1774          LEA     NEWLINE,A1
00001D06  103C 000E               1775          MOVE.B  #14,D0
00001D0A  4E4F                    1776          TRAP    #15
00001D0C                          1777          
00001D0C  4CDF 7FFF               1778          MOVEM.L (A7)+,A0-A6/D0-D7
00001D10  4E75                    1779          RTS
00001D12                          1780  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001D12                          1781  *-----------------------------------------------------------------------------
00001D12                          1782  
00001D12                          1783  
00001D12                          1784  
00001D12                          1785  *-----------------------------------------------------------------------------
00001D12                          1786  *-----------------------------------------------------------------------------
00001D12                          1787  * NAME: OP_1110   (LSL, LSR, ASL, ASR, ROL, ROR)
00001D12                          1788  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001D12                          1789  * PRE-CONDITION:  xyz
00001D12                          1790  * POST-CONDITION: All registers return to their previous state, and the output
00001D12                          1791  *                 goes to the output console for reading the raw data or the
00001D12                          1792  *                 actual instruction.
00001D12                          1793  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001D12                          1794  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001D12                          1795  OP1110
00001D12                          1796  
00001D12  48A7 FFC0               1797      MOVEM   D0-D7/A0-A1,-(A7)   * Caller saved
00001D16                          1798  
00001D16  7C03                    1799      MOVE.L  #3,D6
00001D18  7E04                    1800      MOVE.L  #4,D7
00001D1A                          1801      
00001D1A  6100 0A20               1802      BSR     BITMASK * generate a bitmask for the 3 and 4 bits
00001D1E                          1803      
00001D1E  CC82                    1804      AND.L   D2,D6
00001D20                          1805      
00001D20  0C46 0008               1806      CMPI    #%0000000000001000,D6 *is it a logical shift
00001D24  6700 001A               1807      BEQ     LS
00001D28                          1808      
00001D28  0C46 0000               1809      CMPI    #%0000000000000000,D6 *is it an arithmatic shift
00001D2C  6700 0048               1810      BEQ     AS
00001D30                          1811      
00001D30  0C46 0018               1812      CMPI    #%0000000000011000,D6 *is it a rorate?
00001D34  6700 0076               1813      BEQ     RO
00001D38                          1814  
00001D38  6100 0798               1815      BSR     UNKNOWNOP *if nothing above, we don't know what it is
00001D3C  6000 0158               1816      BRA     ENDOP1110
00001D40                          1817      
00001D40                          1818  LS
00001D40  7C08                    1819      MOVE.L  #8,D6
00001D42  7E08                    1820      MOVE.L  #8,D7
00001D44                          1821      
00001D44  6100 09F6               1822      BSR     BITMASK
00001D48                          1823      
00001D48  CC82                    1824      AND.L   D2,D6
00001D4A                          1825      
00001D4A  0C46 0000               1826      CMPI    #0,D6 * is it a left shift?
00001D4E  6700 0016               1827      BEQ     LSR
00001D52                          1828      
00001D52  6000 0002               1829      BRA     LSL * if not a left shift, must be right
00001D56                          1830  
00001D56                          1831  LSL
00001D56                          1832  
00001D56  43F9 000027F6           1833      LEA     LSLOP,A1            * formatting
00001D5C  103C 000E               1834      MOVE.B  #14,D0              * Trap #14 prints out LSL
00001D60  4E4F                    1835      TRAP    #15                 * Perform Trap #14
00001D62                          1836      
00001D62  6000 007E               1837      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001D66                          1838                                  * prints the registers and imm data
00001D66                          1839  LSR
00001D66                          1840  
00001D66  43F9 000027FA           1841      LEA     LSROP,A1            * formatting
00001D6C  103C 000E               1842      MOVE.B  #14,D0              * Trap #14 prints out LSR
00001D70  4E4F                    1843      TRAP    #15                 * Perform Trap #14
00001D72                          1844      
00001D72  6000 006E               1845      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001D76                          1846                                  * prints the registers and imm data
00001D76                          1847  
00001D76                          1848  AS
00001D76  7C08                    1849      MOVE.L  #8,D6
00001D78  7E08                    1850      MOVE.L  #8,D7
00001D7A                          1851      
00001D7A  6100 09C0               1852      BSR     BITMASK
00001D7E                          1853      
00001D7E  CC82                    1854      AND.L   D2,D6
00001D80                          1855      
00001D80  0C46 0000               1856      CMPI    #0,D6 * is it a left shift?
00001D84  6700 0016               1857      BEQ     ASR
00001D88                          1858      
00001D88  6000 0002               1859      BRA     ASL * if not a left shift, must be right
00001D8C                          1860      
00001D8C                          1861  ASL
00001D8C                          1862  
00001D8C  43F9 000027FE           1863      LEA     ASLOP,A1            * formatting
00001D92  103C 000E               1864      MOVE.B  #14,D0              * Trap #14 prints out ASL
00001D96  4E4F                    1865      TRAP    #15                 * Perform Trap #14
00001D98                          1866      
00001D98  6000 0048               1867      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001D9C                          1868                                  * prints the registers and imm data
00001D9C                          1869  ASR
00001D9C                          1870  
00001D9C  43F9 00002802           1871      LEA     ASROP,A1            * formatting
00001DA2  103C 000E               1872      MOVE.B  #14,D0              * Trap #14 prints out ASR
00001DA6  4E4F                    1873      TRAP    #15                 * Perform Trap #14
00001DA8                          1874      
00001DA8  6000 0038               1875      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001DAC                          1876                                  * prints the registers and imm data
00001DAC                          1877  RO
00001DAC  7C08                    1878      MOVE.L  #8,D6
00001DAE  7E08                    1879      MOVE.L  #8,D7
00001DB0                          1880      
00001DB0  6100 098A               1881      BSR     BITMASK
00001DB4                          1882      
00001DB4  CC82                    1883      AND.L   D2,D6
00001DB6                          1884      
00001DB6  0C46 0000               1885      CMPI    #0,D6 * is it a left shift?
00001DBA  6700 0016               1886      BEQ     ROR
00001DBE                          1887      
00001DBE  6000 0002               1888      BRA     ROL * if not a left shift, must be right
00001DC2                          1889  
00001DC2                          1890  ROL
00001DC2                          1891  
00001DC2  43F9 00002806           1892      LEA     ROLOP,A1            * formatting
00001DC8  103C 000E               1893      MOVE.B  #14,D0              * Trap #14 prints out ROL
00001DCC  4E4F                    1894      TRAP    #15                 * Perform Trap #14
00001DCE                          1895      
00001DCE  6000 0012               1896      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001DD2                          1897                                  * prints the registers and imm data
00001DD2                          1898  ROR
00001DD2                          1899  
00001DD2  43F9 0000280A           1900      LEA     ROROP,A1            * formatting
00001DD8  103C 000E               1901      MOVE.B  #14,D0              * Trap #14 prints out ROR
00001DDC  4E4F                    1902      TRAP    #15                 * Perform Trap #14
00001DDE                          1903      
00001DDE  6000 0002               1904      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001DE2                          1905                                  * prints the registers and imm data
00001DE2                          1906  
00001DE2                          1907  OP1110GENERIC
00001DE2                          1908  
00001DE2  6100 0452               1909      BSR     SIZE67
00001DE6                          1910      
00001DE6  7C05                    1911      MOVE.L  #5,D6
00001DE8  7E05                    1912      MOVE.L  #5,D7
00001DEA                          1913      
00001DEA  6100 0950               1914      BSR     BITMASK
00001DEE                          1915      
00001DEE  CC82                    1916      AND.L   D2,D6
00001DF0                          1917      
00001DF0  0C46 0020               1918      CMPI    #%0000000000100000,D6   *is it a data reg?
00001DF4  6700 0074               1919      BEQ     OP1110DATAREG
00001DF8                          1920      
00001DF8  43F9 00002860           1921      LEA     IMD,A1              * formatting
00001DFE  103C 000E               1922      MOVE.B  #14,D0              * Trap #14 prints out pound #
00001E02  4E4F                    1923      TRAP    #15                 * Perform Trap #14
00001E04                          1924      
00001E04  7C09                    1925      MOVE.L  #9,D6
00001E06  7E0B                    1926      MOVE.L  #11,D7
00001E08                          1927      
00001E08  6100 0932               1928      BSR     BITMASK
00001E0C                          1929      
00001E0C  CC82                    1930      AND.L   D2,D6
00001E0E                          1931      
00001E0E  0C46 0000               1932      CMPI    #0,D6 * special case, if zero print #8 not #0
00001E12  6700 002E               1933      BEQ     OP1110IMMEIGHT
00001E16                          1934      
00001E16  E08E                    1935      LSR.L   #8,D6
00001E18  E28E                    1936      LSR.L   #1,D6
00001E1A                          1937      
00001E1A  2206                    1938      MOVE.L  D6,D1              * formatting
00001E1C  103C 0003               1939      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001E20  4E4F                    1940      TRAP    #15                * Perform Trap #14
00001E22                          1941      
00001E22  43F9 00002862           1942      LEA     COMMA,A1            * formatting
00001E28  103C 000E               1943      MOVE.B  #14,D0              * Trap #14 prints out comma
00001E2C  4E4F                    1944      TRAP    #15                 * Perform Trap #1
00001E2E                          1945      
00001E2E                          1946      * in order to use the eahlpers, we need to do some bit manipulation
00001E2E                          1947      * clearing the bits below lets our helper know that the mode is Dn
00001E2E  0882 0003               1948      BCLR    #3,D2
00001E32  0882 0004               1949      BCLR    #4,D2
00001E36  0882 0005               1950      BCLR    #5,D2
00001E3A                          1951      
00001E3A  6100 00B4               1952      BSR     EAHELPER05
00001E3E                          1953      
00001E3E  6000 0056               1954      BRA     ENDOP1110
00001E42                          1955      
00001E42                          1956  OP1110IMMEIGHT
00001E42                          1957  
00001E42  7208                    1958      MOVE.L  #8,D1              * formatting
00001E44  103C 0003               1959      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001E48  4E4F                    1960      TRAP    #15                * Perform Trap #14
00001E4A                          1961      
00001E4A  43F9 00002862           1962      LEA     COMMA,A1            * formatting
00001E50  103C 000E               1963      MOVE.B  #14,D0              * Trap #14 prints out comma
00001E54  4E4F                    1964      TRAP    #15                 * Perform Trap #1
00001E56                          1965      
00001E56                          1966      * in order to use the eahlpers, we need to do some bit manipulation
00001E56                          1967      * clearing the bits below lets our helper know that the mode is Dn
00001E56  0882 0003               1968      BCLR    #3,D2
00001E5A  0882 0004               1969      BCLR    #4,D2
00001E5E  0882 0005               1970      BCLR    #5,D2
00001E62                          1971      
00001E62  6100 008C               1972      BSR     EAHELPER05
00001E66                          1973      
00001E66  6000 002E               1974      BRA     ENDOP1110
00001E6A                          1975  
00001E6A                          1976  OP1110DATAREG
00001E6A                          1977  
00001E6A                          1978      * in order to use the eahlpers, we need to do some bit manipulation
00001E6A                          1979      * clearing the bits below lets our helper know that the mode is Dn
00001E6A  0882 0003               1980      BCLR    #3,D2
00001E6E  0882 0004               1981      BCLR    #4,D2
00001E72  0882 0005               1982      BCLR    #5,D2
00001E76  0882 0006               1983      BCLR    #6,D2
00001E7A  0882 0007               1984      BCLR    #7,D2
00001E7E  0882 0008               1985      BCLR    #8,D2
00001E82                          1986      
00001E82  6100 002A               1987      BSR     EAHELPER611
00001E86                          1988      
00001E86  43F9 00002862           1989      LEA     COMMA,A1            * formatting
00001E8C  103C 000E               1990      MOVE.B  #14,D0              * Trap #14 prints out comma
00001E90  4E4F                    1991      TRAP    #15                 * Perform Trap #14
00001E92                          1992      
00001E92  6100 005C               1993      BSR     EAHELPER05
00001E96                          1994  
00001E96                          1995  ENDOP1110
00001E96                          1996  
00001E96  43F9 000027A5           1997      LEA     NEWLINE,A1          * formatting
00001E9C  103C 000E               1998      MOVE.B  #14,D0              * Trap #14 prints out a new line
00001EA0  4E4F                    1999      TRAP    #15                 * Perform Trap #14
00001EA2                          2000      
00001EA2  4C9F 03FF               2001      MOVEM   (A7)+,D0-D7/A0-A1   * Caller saved
00001EA6  4E75                    2002      RTS
00001EA8                          2003  
00001EA8                          2004  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001EA8                          2005  *-----------------------------------------------------------------------------
00001EA8                          2006  
00001EA8                          2007  
00001EA8                          2008  
00001EA8                          2009  *-----------------------------------------------------------------------------
00001EA8                          2010  *-----------------------------------------------------------------------------
00001EA8                          2011  * NAME: OP_1111   ()
00001EA8                          2012  * DESCRIPTION:    a
00001EA8                          2013  * PRE-CONDITION:  b
00001EA8                          2014  * POST-CONDITION: c
00001EA8                          2015  * REGISTERS:      d
00001EA8                          2016  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001EA8                          2017  OP1111
00001EA8                          2018  
00001EA8  6100 0628               2019      BSR     UNKNOWNOP
00001EAC  4E75                    2020      RTS
00001EAE                          2021  
00001EAE                          2022  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001EAE                          2023  *-----------------------------------------------------------------------------
00001EAE                          2024  
00001EAE                          2025  
00001EAE                          2026  
00001EAE                          2027  *-----------------------------------------------------------------------------
00001EAE                          2028  *-----------------------------------------------------------------------------
00001EAE                          2029  * NAME:           EAHELPER611
00001EAE                          2030  * DESCRIPTION:    a
00001EAE                          2031  * PRE-CONDITION:  D2 contains the instruction to print modes for.
00001EAE                          2032  *                 D5 contains the size of the data to be printed
00001EAE                          2033  * POST-CONDITION: Determines if mode is direct, if it's not, passes D2 to 
00001EAE                          2034  *                 EAHELPER05 to print.
00001EAE                          2035  * REGISTERS:      a
00001EAE                          2036  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001EAE                          2037  EAHELPER611
00001EAE  48A7 FFC0               2038      MOVEM  D0-D7/A0-A1,-(A7)    * Push values onto stack
00001EB2                          2039      
00001EB2  3C3C 0006               2040      MOVE.W  #6, D6              * Prep lower value for bitmask
00001EB6  3E3C 0008               2041      MOVE.W  #8, D7              * Prep upper value for bitmask
00001EBA  6100 0880               2042      BSR     BITMASK             * Finalize bitmask setup
00001EBE  CC42                    2043      AND     D2,D6               * Apply bitmask
00001EC0                          2044      
00001EC0                          2045      * to move the mode where EAHELPER50 can process it
00001EC0  7C06                    2046      MOVE.L  #6,D6       * Prep lower value of bitmask
00001EC2  7E08                    2047      MOVE.L  #8,D7       * Prep upper value of bitmask
00001EC4  6100 0876               2048      BSR     BITMASK     * Create bitmask
00001EC8  CC42                    2049      AND     D2,D6       * Apply bitmask
00001ECA                          2050      
00001ECA  4243                    2051      CLR     D3      * prep D3 to store values
00001ECC  3606                    2052      MOVE.W  D6,D3   * store bitmasked value in D3
00001ECE  E64B                    2053      LSR     #3,D3   * move bits 6-8 to 3-5
00001ED0                          2054      
00001ED0                          2055      * to move the register where EAHELPER50 can process it
00001ED0  7C09                    2056      MOVE.L  #9,D6   * Prep lower value for bitmask
00001ED2  7E0B                    2057      MOVE.L  #11,D7  * Prep upper value for bitmask
00001ED4  6100 0866               2058      BSR     BITMASK * create bitmask
00001ED8  CC42                    2059      AND     D2,D6   * apply bitmask
00001EDA                          2060      
00001EDA  4244                    2061      CLR     D4      * prep D3 to store values
00001EDC  3806                    2062      MOVE.W  D6,D4   * store bitmasked value in D3
00001EDE                          2063      
00001EDE  E04C                    2064      LSR     #8,D4   * move bits 9-11 to 0-2
00001EE0  E24C                    2065      LSR     #1,D4   * move bits 9-11 to 0-2
00001EE2                          2066    
00001EE2  8684                    2067      OR.L    D4,D3   * combind the register and mode
00001EE4  2403                    2068      MOVE.L  D3,D2   * put the result in D2 so EAHELPER05 can process it
00001EE6                          2069      
00001EE6  6100 0008               2070      BSR     EAHELPER05
00001EEA                          2071      
00001EEA                          2072  ENDEAHELPER611
00001EEA                          2073      
00001EEA  4C9F 03FF               2074      MOVEM  (A7)+,D0-D7/A0-A1    * Revert back
00001EEE  4E75                    2075      RTS
00001EF0                          2076  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001EF0                          2077  *-----------------------------------------------------------------------------
00001EF0                          2078  
00001EF0                          2079  
00001EF0                          2080  
00001EF0                          2081  *-----------------------------------------------------------------------------
00001EF0                          2082  *-----------------------------------------------------------------------------
00001EF0                          2083  * NAME:           EAHELPER05
00001EF0                          2084  * DESCRIPTION:    a
00001EF0                          2085  * PRE-CONDITION:  D2 contains the instruction to print modes for. Only call
00001EF0                          2086  *                 this sub-routine helper for operations that only have one
00001EF0                          2087  *                 mode register.
00001EF0                          2088  *                 D3 contains the size of immediate it could be, 1 = byte
00001EF0                          2089  *                 2 = word, 3 = long
00001EF0                          2090  * POST-CONDITION: Determines mode, passes D2 to REGHELPER to print.
00001EF0                          2091  * REGISTERS:      a
00001EF0                          2092  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001EF0                          2093  EAHELPER05
00001EF0                          2094      * todo: add code for printing immediate values
00001EF0                          2095      
00001EF0  48A7 FFC0               2096      MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001EF4                          2097      
00001EF4  7C03                    2098      MOVE.L  #3,D6
00001EF6  7E05                    2099      MOVE.L  #5,D7
00001EF8                          2100      
00001EF8  6100 0842               2101      BSR     BITMASK * generate a bitmask to identify the mode
00001EFC                          2102      
00001EFC  CC42                    2103      AND     D2,D6   * mask off the parts of D2 we don't need
00001EFE                          2104      
00001EFE  2A06                    2105      MOVE.L  D6,D5   * store the 3-5 bitmask for later use
00001F00                          2106      
00001F00  0C46 0000               2107      CMPI    #%0000000000000000,D6 * is it data register direct?
00001F04  6600 000A               2108      BNE     NOTDATAREG
00001F08                          2109      
00001F08  6100 012C               2110      BSR     MODE_DN
00001F0C                          2111       
00001F0C  6000 0122               2112      BRA     ENDEAHELPER05
00001F10                          2113      
00001F10                          2114  NOTDATAREG * address register direct
00001F10                          2115      
00001F10  0C46 0008               2116      CMPI    #%0000000000001000,D6 * is it address register direct?
00001F14  6600 000A               2117      BNE     NOTADRDIRECT
00001F18                          2118      
00001F18  6100 021C               2119      BSR     MODE_AN * simply prints out the address register
00001F1C                          2120       
00001F1C  6000 0112               2121      BRA     ENDEAHELPER05
00001F20                          2122      
00001F20                          2123  NOTADRDIRECT * address register indirect
00001F20                          2124          
00001F20  0C46 0010               2125      CMPI    #%0000000000010000,D6 * is it address register indirect?
00001F24  6600 0022               2126      BNE     NOTADRINDIRECT
00001F28                          2127      
00001F28  43F9 00002864           2128      LEA     OBRACK,A1       * Load '('
00001F2E  303C 000E               2129      MOVE.W  #14,D0          * Trap #14 to display message
00001F32  4E4F                    2130      TRAP    #15             * Perform #14
00001F34                          2131          
00001F34                          2132  
00001F34  6100 0200               2133      BSR     MODE_AN * print out an address register
00001F38                          2134      
00001F38  43F9 00002866           2135      LEA     CBRACK,A1       * Load ')'
00001F3E  303C 000E               2136      MOVE.W  #14,D0          * Trap #14 to display message
00001F42  4E4F                    2137      TRAP    #15             * Perform #14
00001F44                          2138       
00001F44  6000 00EA               2139      BRA     ENDEAHELPER05
00001F48                          2140      
00001F48                          2141  NOTADRINDIRECT * address register indirect, post increment
00001F48                          2142      
00001F48  0C46 0018               2143      CMPI    #%0000000000011000,D6 * is it address register indirect post increment?
00001F4C  6600 002E               2144      BNE     NOTADRINDIRECTPOST
00001F50                          2145      
00001F50  43F9 00002864           2146      LEA     OBRACK,A1       * Load '('
00001F56  303C 000E               2147      MOVE.W  #14,D0          * Trap #14 to display message
00001F5A  4E4F                    2148      TRAP    #15             * Perform #14
00001F5C                          2149          
00001F5C                          2150  
00001F5C  6100 01D8               2151      BSR     MODE_AN * print out an address register
00001F60                          2152      
00001F60  43F9 00002866           2153      LEA     CBRACK,A1       * Load ')'
00001F66  303C 000E               2154      MOVE.W  #14,D0          * Trap #14 to display message
00001F6A  4E4F                    2155      TRAP    #15             * Perform #14
00001F6C                          2156      
00001F6C  43F9 00002868           2157      LEA     PLUS,A1       * Load '+'
00001F72  303C 000E               2158      MOVE.W  #14,D0          * Trap #14 to display message
00001F76  4E4F                    2159      TRAP    #15             * Perform #14
00001F78                          2160       
00001F78  6000 00B6               2161      BRA     ENDEAHELPER05
00001F7C                          2162      
00001F7C                          2163  NOTADRINDIRECTPOST * address register indirect, pre decrement
00001F7C                          2164      
00001F7C  0C46 0020               2165      CMPI    #%0000000000100000,D6 * is it address register indirect pre decrement?
00001F80  6600 002E               2166      BNE     NOTADRINDIRECTPRE
00001F84                          2167      
00001F84  43F9 0000286A           2168      LEA     MINUS,A1       * Load '-'
00001F8A  303C 000E               2169      MOVE.W  #14,D0          * Trap #14 to display message
00001F8E  4E4F                    2170      TRAP    #15             * Perform #14
00001F90                          2171      
00001F90  43F9 00002864           2172      LEA     OBRACK,A1       * Load '('
00001F96  303C 000E               2173      MOVE.W  #14,D0          * Trap #14 to display message
00001F9A  4E4F                    2174      TRAP    #15             * Perform #14
00001F9C                          2175          
00001F9C                          2176  
00001F9C  6100 0198               2177      BSR     MODE_AN * print out an address register
00001FA0                          2178      
00001FA0  43F9 00002866           2179      LEA     CBRACK,A1       * Load ')'
00001FA6  303C 000E               2180      MOVE.W  #14,D0          * Trap #14 to display message
00001FAA  4E4F                    2181      TRAP    #15             * Perform #14
00001FAC                          2182       
00001FAC  6000 0082               2183      BRA     ENDEAHELPER05
00001FB0                          2184  
00001FB0                          2185  NOTADRINDIRECTPRE
00001FB0                          2186  
00001FB0  0C46 0038               2187      CMPI    #%0000000000111000,D6 * is it immediate?
00001FB4  6600 0076               2188      BNE     NOTIMMEDIATE
00001FB8                          2189  
00001FB8  0C43 0001               2190      CMPI    #1,D3 * is it a byte?
00001FBC  6600 0024               2191      BNE     NOTIMMBYTE
00001FC0                          2192      
00001FC0  43F9 00002860           2193      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001FC6  103C 000E               2194      MOVE.B  #14,D0
00001FCA  4E4F                    2195      TRAP    #15
00001FCC                          2196      
00001FCC  7C00                    2197      MOVE.L  #0, D6              * Prep lower value for bitmask
00001FCE  7E07                    2198      MOVE.L  #7, D7              * Prep upper value for bitmask
00001FD0  6100 076A               2199      BSR     BITMASK             * Finalize bitmask setup
00001FD4                          2200          
00001FD4  321A                    2201      MOVE.W  (A2)+,D1
00001FD6                          2202      
00001FD6  C286                    2203      AND.L     D6,D1
00001FD8                          2204          
00001FD8  103C 0003               2205      MOVE.B  #3,D0   
00001FDC  4E4F                    2206      TRAP    #15      * Perform Trap #3
00001FDE                          2207      
00001FDE  6000 0050               2208      BRA     ENDEAHELPER05
00001FE2                          2209  
00001FE2                          2210  NOTIMMBYTE
00001FE2                          2211      
00001FE2  0C43 0002               2212      CMPI    #2,D3 * is it a word?
00001FE6  6600 0024               2213      BNE     NOTIMMWORD
00001FEA                          2214      
00001FEA  43F9 00002860           2215      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001FF0  103C 000E               2216      MOVE.B  #14,D0
00001FF4  4E4F                    2217      TRAP    #15
00001FF6                          2218      
00001FF6  7C00                    2219      MOVE.L  #0, D6              * Prep lower value for bitmask
00001FF8  7E0F                    2220      MOVE.L  #15, D7             * Prep upper value for bitmask
00001FFA  6100 0740               2221      BSR     BITMASK             * Finalize bitmask setup
00001FFE                          2222          
00001FFE  321A                    2223      MOVE.W  (A2)+,D1
00002000                          2224      
00002000  C286                    2225      AND.L    D6,D1               * Apply bitmask
00002002                          2226          
00002002  103C 0003               2227      MOVE.B  #3,D0   
00002006  4E4F                    2228      TRAP    #15      * Perform Trap #3
00002008                          2229      
00002008  6000 0026               2230      BRA     ENDEAHELPER05
0000200C                          2231      
0000200C                          2232  NOTIMMWORD
0000200C  0C43 0003               2233      CMPI    #3,D3 * is it a long?
00002010  6600 001A               2234      BNE     NOTIMMEDIATE
00002014                          2235      
00002014  43F9 00002860           2236      LEA     IMD,A1 *print out the '#' indicating an immediate value
0000201A  103C 000E               2237      MOVE.B  #14,D0
0000201E  4E4F                    2238      TRAP    #15
00002020                          2239          
00002020  221A                    2240      MOVE.L  (A2)+,D1
00002022                          2241          
00002022  103C 0003               2242      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00002026  4E4F                    2243      TRAP    #15      * Perform Trap #3
00002028                          2244      
00002028  6000 0006               2245      BRA     ENDEAHELPER05
0000202C                          2246  
0000202C                          2247  NOTIMMEDIATE    
0000202C                          2248  
0000202C                          2249  
0000202C  6100 04A4               2250      BSR     UNKNOWNOP
00002030                          2251      
00002030                          2252  ENDEAHELPER05
00002030  4C9F 03FF               2253      MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00002034  4E75                    2254      RTS
00002036                          2255  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002036                          2256  *-----------------------------------------------------------------------------
00002036                          2257  
00002036                          2258  
00002036                          2259  
00002036                          2260  *-----------------------------------------------------------------------------
00002036                          2261  *-----------------------------------------------------------------------------
00002036                          2262  * NAME:           MODE_DN
00002036                          2263  * DESCRIPTION:    Generalize the EA part of the project.
00002036                          2264  * PRE-CONDITION:  The mode must have been correctly identified. All modes
00002036                          2265  *                 must be called by RTS.
00002036                          2266  * POST-CONDITION: After the EA, the entire op will head back to the BSR that
00002036                          2267  *                 called it.
00002036                          2268  * REGISTERS:      a
00002036                          2269  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002036                          2270  * ---> Dn
00002036                          2271  MODE_DN
00002036  48A7 FFC0               2272          MOVEM   D0-D7/A0-A1,-(A7) * save stuff
0000203A                          2273  
0000203A  3C3C 0000               2274          MOVE.W  #0, D6              * Prep lower value for bitmask
0000203E  3E3C 0002               2275          MOVE.W  #2, D7              * Prep upper value for bitmask
00002042  6100 06F8               2276          BSR     BITMASK             * Finalize bitmask setup
00002046  CC42                    2277          AND     D2,D6               * Apply bitmask
00002048                          2278          
00002048  0C46 0000               2279          CMPI    #%000000000000000, D6   * Data Register D0?
0000204C  6600 000A               2280          BNE     NOTD0
00002050                          2281          
00002050  6100 0074               2282          BSR     PRINTD0
00002054  6000 006A               2283          BRA     ENDMODE_DN
00002058                          2284  NOTD0      
00002058  0C46 0001               2285          CMPI    #%000000000000001, D6   * Data Register D1?
0000205C  6600 000A               2286          BNE     NOTD1
00002060                          2287          
00002060  6100 0072               2288          BSR     PRINTD1
00002064  6000 005A               2289          BRA     ENDMODE_DN
00002068                          2290  NOTD1
00002068  0C46 0002               2291          CMPI    #%000000000000010, D6   * Data Register D2?
0000206C  6600 000A               2292          BNE     NOTD2
00002070                          2293          
00002070  6100 0070               2294          BSR     PRINTD2
00002074  6000 004A               2295          BRA     ENDMODE_DN
00002078                          2296  NOTD2
00002078  0C46 0003               2297          CMPI    #%000000000000011, D6   * Data Register D3?
0000207C  6600 000A               2298          BNE     NOTD3
00002080                          2299          
00002080  6100 006E               2300          BSR     PRINTD3
00002084  6000 003A               2301          BRA     ENDMODE_DN
00002088                          2302  NOTD3
00002088  0C46 0004               2303          CMPI    #%000000000000100, D6   * Data Register D4?
0000208C  6600 000A               2304          BNE     NOTD4
00002090                          2305          
00002090  6100 006C               2306          BSR     PRINTD4
00002094  6000 002A               2307          BRA     ENDMODE_DN
00002098                          2308  NOTD4
00002098  0C46 0005               2309          CMPI    #%000000000000101, D6   * Data Register D5?
0000209C  6600 000A               2310          BNE     NOTD5
000020A0                          2311          
000020A0  6100 006A               2312          BSR     PRINTD5
000020A4  6000 001A               2313          BRA     ENDMODE_DN
000020A8                          2314  NOTD5
000020A8  0C46 0006               2315          CMPI    #%000000000000110, D6   * Data Register D6?
000020AC  6600 000A               2316          BNE     NOTD6
000020B0                          2317          
000020B0  6100 0068               2318          BSR     PRINTD6
000020B4  6000 000A               2319          BRA     ENDMODE_DN
000020B8                          2320  NOTD6
000020B8  6100 006E               2321          BSR     PRINTD7
000020BC  6000 0002               2322          BRA     ENDMODE_DN
000020C0                          2323          
000020C0                          2324  ENDMODE_DN
000020C0  4C9F 03FF               2325          MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
000020C4  4E75                    2326          RTS
000020C6                          2327  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000020C6                          2328  *-----------------------------------------------------------------------------
000020C6                          2329  
000020C6                          2330  
000020C6                          2331  
000020C6                          2332  *-----------------------------------------------------------------------------
000020C6                          2333  *-----------------------------------------------------------------------------
000020C6                          2334  * NAME:           PRINTD0
000020C6                          2335  * DESCRIPTION:    Simply prints D0, D1, ..., up to D7.
000020C6                          2336  * PRE-CONDITION:  a
000020C6                          2337  * POST-CONDITION: a
000020C6                          2338  * REGISTERS:      a
000020C6                          2339  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000020C6                          2340  PRINTD0
000020C6  43F9 00002894           2341          LEA     __D0, A1        * Load 'D0'
000020CC  103C 000E               2342          MOVE.B  #14, D0         * Load Trap #14 to print out
000020D0  4E4F                    2343          TRAP    #15             * Perform Trap #14
000020D2  4E75                    2344          RTS
000020D4                          2345  PRINTD1
000020D4  43F9 00002897           2346          LEA     __D1, A1        * Load 'D1'
000020DA  103C 000E               2347          MOVE.B  #14, D0         * Load Trap #14 to print out
000020DE  4E4F                    2348          TRAP    #15             * Perform Trap #14
000020E0  4E75                    2349          RTS      
000020E2                          2350  PRINTD2
000020E2  43F9 0000289A           2351          LEA     __D2, A1        * Load 'D2'
000020E8  103C 000E               2352          MOVE.B  #14, D0         * Load Trap #14 to print out
000020EC  4E4F                    2353          TRAP    #15             * Perform Trap #14
000020EE  4E75                    2354          RTS      
000020F0                          2355  PRINTD3
000020F0  43F9 0000289D           2356          LEA     __D3, A1        * Load 'D3'
000020F6  103C 000E               2357          MOVE.B  #14, D0         * Load Trap #14 to print out
000020FA  4E4F                    2358          TRAP    #15             * Perform Trap #14
000020FC  4E75                    2359          RTS      
000020FE                          2360  PRINTD4
000020FE  43F9 000028A0           2361          LEA     __D4, A1        * Load 'D4'
00002104  103C 000E               2362          MOVE.B  #14, D0         * Load Trap #14 to print out
00002108  4E4F                    2363          TRAP    #15             * Perform Trap #14
0000210A  4E75                    2364          RTS       
0000210C                          2365  PRINTD5
0000210C  43F9 000028A3           2366          LEA     __D5, A1        * Load 'D5'
00002112  103C 000E               2367          MOVE.B  #14, D0         * Load Trap #14 to print out
00002116  4E4F                    2368          TRAP    #15             * Perform Trap #14
00002118  4E75                    2369          RTS      
0000211A                          2370  PRINTD6
0000211A  43F9 000028A6           2371          LEA     __D6, A1        * Load 'D6'
00002120  103C 000E               2372          MOVE.B  #14, D0         * Load Trap #14 to print out
00002124  4E4F                    2373          TRAP    #15             * Perform Trap #14
00002126  4E75                    2374          RTS
00002128                          2375  PRINTD7
00002128  43F9 000028A9           2376          LEA     __D7, A1        * Load 'D7'
0000212E  103C 000E               2377          MOVE.B  #14, D0         * Load Trap #14 to print out
00002132  4E4F                    2378          TRAP    #15             * Perform Trap #14
00002134  4E75                    2379          RTS
00002136                          2380  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002136                          2381  *-----------------------------------------------------------------------------
00002136                          2382  
00002136                          2383  
00002136                          2384  
00002136                          2385  *-----------------------------------------------------------------------------
00002136                          2386  *-----------------------------------------------------------------------------
00002136                          2387  * NAME:           MODE_AN
00002136                          2388  * DESCRIPTION:    Simply chooses to print A0-A7.
00002136                          2389  * PRE-CONDITION:  a
00002136                          2390  * POST-CONDITION: a
00002136                          2391  * REGISTERS:      a
00002136                          2392  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002136                          2393  MODE_AN
00002136  48A7 FFC0               2394          MOVEM   D0-D7/A0-A1,-(A7)   * Save information
0000213A                          2395  
0000213A  3C3C 0000               2396          MOVE.W  #0, D6              * Prep lower value for bitmask
0000213E  3E3C 0002               2397          MOVE.W  #2, D7              * Prep upper value for bitmask
00002142  6100 05F8               2398          BSR     BITMASK             * Finalize bitmask setup
00002146  CC42                    2399          AND     D2,D6               * Apply bitmask
00002148                          2400          
00002148  0C46 0000               2401          CMPI    #%000000000000000, D6   * Address Register A0?
0000214C  6600 000A               2402          BNE     NOTA0
00002150                          2403          
00002150  6100 0074               2404          BSR     PRINTA0
00002154                          2405          
00002154  6000 006A               2406          BRA     ENDMODE_AN
00002158                          2407  NOTA0      
00002158  0C46 0001               2408          CMPI    #%000000000000001, D6   * Address Register A1?
0000215C  6600 000A               2409          BNE     NOTA1
00002160                          2410          
00002160  6100 0072               2411          BSR     PRINTA1
00002164                          2412          
00002164  6000 005A               2413          BRA     ENDMODE_AN
00002168                          2414  NOTA1
00002168  0C46 0002               2415          CMPI    #%000000000000010, D6   * Address Register A2?
0000216C  6600 000A               2416          BNE     NOTA2
00002170                          2417          
00002170  6100 0070               2418          BSR     PRINTA2
00002174                          2419          
00002174  6000 004A               2420          BRA     ENDMODE_AN
00002178                          2421  NOTA2
00002178  0C46 0003               2422          CMPI    #%000000000000011, D6   * Address Register A3?
0000217C  6600 000A               2423          BNE     NOTA3
00002180                          2424          
00002180  6100 006E               2425          BSR     PRINTA3
00002184                          2426          
00002184  6000 003A               2427          BRA     ENDMODE_AN
00002188                          2428  NOTA3
00002188  0C46 0004               2429          CMPI    #%000000000000100, D6   * Address Register A4?
0000218C  6600 000A               2430          BNE     NOTA4
00002190                          2431          
00002190  6100 006C               2432          BSR     PRINTA4
00002194                          2433          
00002194  6000 002A               2434          BRA     ENDMODE_AN
00002198                          2435  NOTA4
00002198  0C46 0005               2436          CMPI    #%000000000000101, D6   * Address Register A5?
0000219C  6600 000A               2437          BNE     NOTA5
000021A0                          2438          
000021A0  6100 006A               2439          BSR     PRINTA5
000021A4                          2440          
000021A4  6000 001A               2441          BRA     ENDMODE_AN
000021A8                          2442  NOTA5
000021A8  0C46 0006               2443          CMPI    #%000000000000110, D6   * Address Register A6?
000021AC  6600 000A               2444          BNE     NOTA6
000021B0                          2445          
000021B0  6100 0068               2446          BSR     PRINTA6
000021B4                          2447          
000021B4  6000 000A               2448          BRA     ENDMODE_AN
000021B8                          2449  NOTA6
000021B8  6100 006E               2450          BSR     PRINTA7
000021BC                          2451          
000021BC  6000 0002               2452          BRA     ENDMODE_AN
000021C0                          2453  ENDMODE_AN
000021C0  4C9F 03FF               2454          MOVEM   (A7)+,D0-D7/A0-A1   * Restore registers
000021C4  4E75                    2455          RTS
000021C6                          2456  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000021C6                          2457  *-----------------------------------------------------------------------------
000021C6                          2458  
000021C6                          2459  
000021C6                          2460  
000021C6                          2461  *-----------------------------------------------------------------------------
000021C6                          2462  *-----------------------------------------------------------------------------
000021C6                          2463  * NAME:           PRINTA0
000021C6                          2464  * DESCRIPTION:    Simply print out the address register.
000021C6                          2465  * PRE-CONDITION:  a
000021C6                          2466  * POST-CONDITION: a
000021C6                          2467  * REGISTERS:      a
000021C6                          2468  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000021C6                          2469  PRINTA0
000021C6  43F9 0000287C           2470          LEA     __A0, A1        * Load 'A0'
000021CC  103C 000E               2471          MOVE.B  #14, D0         * Load Trap #14 to print out
000021D0  4E4F                    2472          TRAP    #15             * Perform Trap #14
000021D2  4E75                    2473          RTS
000021D4                          2474  
000021D4                          2475  PRINTA1
000021D4  43F9 0000287F           2476          LEA     __A1, A1        * Load 'A1'
000021DA  103C 000E               2477          MOVE.B  #14, D0         * Load Trap #14 to print out
000021DE  4E4F                    2478          TRAP    #15             * Perform Trap #14
000021E0  4E75                    2479          RTS
000021E2                          2480          
000021E2                          2481  PRINTA2
000021E2  43F9 00002882           2482          LEA     __A2, A1        * Load 'A2'
000021E8  103C 000E               2483          MOVE.B  #14, D0         * Load Trap #14 to print out
000021EC  4E4F                    2484          TRAP    #15             * Perform Trap #14
000021EE  4E75                    2485          RTS
000021F0                          2486  
000021F0                          2487  PRINTA3
000021F0  43F9 00002885           2488          LEA     __A3, A1        * Load 'A3'
000021F6  103C 000E               2489          MOVE.B  #14, D0         * Load Trap #14 to print out
000021FA  4E4F                    2490          TRAP    #15             * Perform Trap #14
000021FC  4E75                    2491          RTS
000021FE                          2492  
000021FE                          2493  PRINTA4
000021FE  43F9 00002888           2494          LEA     __A4, A1        * Load 'A4'
00002204  103C 000E               2495          MOVE.B  #14, D0         * Load Trap #14 to print out
00002208  4E4F                    2496          TRAP    #15             * Perform Trap #14
0000220A  4E75                    2497          RTS
0000220C                          2498  
0000220C                          2499  PRINTA5
0000220C  43F9 0000288B           2500          LEA     __A5, A1        * Load 'A5'
00002212  103C 000E               2501          MOVE.B  #14, D0         * Load Trap #14 to print out
00002216  4E4F                    2502          TRAP    #15             * Perform Trap #14
00002218  4E75                    2503          RTS
0000221A                          2504  
0000221A                          2505  PRINTA6
0000221A  43F9 0000288E           2506          LEA     __A6, A1        * Load 'A6'
00002220  103C 000E               2507          MOVE.B  #14, D0         * Load Trap #14 to print out
00002224  4E4F                    2508          TRAP    #15             * Perform Trap #14
00002226  4E75                    2509          RTS
00002228                          2510  
00002228                          2511  PRINTA7
00002228  43F9 00002891           2512          LEA     __A7, A1        * Load 'A7'
0000222E  103C 000E               2513          MOVE.B  #14, D0         * Load Trap #14 to print out
00002232  4E4F                    2514          TRAP    #15             * Perform Trap #14
00002234  4E75                    2515          RTS
00002236                          2516  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002236                          2517  *-----------------------------------------------------------------------------
00002236                          2518  
00002236                          2519  
00002236                          2520  
00002236                          2521  *-----------------------------------------------------------------------------
00002236                          2522  *-----------------------------------------------------------------------------
00002236                          2523  * NAME:           SIZE67
00002236                          2524  * DESCRIPTION:    Called if the size is stored in bits 6 to 7.
00002236                          2525  * PRE-CONDITION:  a
00002236                          2526  * POST-CONDITION: a
00002236                          2527  * REGISTERS:      a
00002236                          2528  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002236                          2529  SIZE67
00002236  48A7 FFFE               2530          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
0000223A  3C3C 0006               2531          MOVE.W  #6, D6              * Prep lower value for bitmask
0000223E  3E3C 0007               2532          MOVE.W  #7, D7              * Prep upper value for bitmask
00002242  6100 04F8               2533          BSR     BITMASK             * Finalize bitmask setup
00002246  CC42                    2534          AND     D2,D6               * Apply bitmask     
00002248                          2535  
00002248  0C46 0000               2536          CMPI    #%0000000000000000, D6   * is it a BYTE?
0000224C  6600 000A               2537          BNE     NOT67BYTE
00002250                          2538          
00002250  6100 009C               2539          BSR     PRINTBYTE               * Branch to handle BYTE sizes
00002254  6000 001E               2540          BRA     END67
00002258                          2541  NOT67BYTE        
00002258  0C46 0040               2542          CMPI    #%0000000001000000, D6   * is it a WORD?
0000225C  6600 000A               2543          BNE     NOT67WORD
00002260                          2544          
00002260  6100 009A               2545          BSR     PRINTWORD               * Branch to handle WORD sizes
00002264  6000 000E               2546          BRA     END67
00002268                          2547  NOT67WORD
00002268  0C46 0080               2548          CMPI    #%0000000010000000, D6   * is it a LONG?
0000226C  6600 0006               2549          BNE     END67
00002270                          2550          
00002270  6100 0098               2551          BSR     PRINTLONG               * Branch to handle LONG sizes
00002274                          2552  END67
00002274  4C9F 7FFF               2553          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
00002278  4E75                    2554          RTS                             * Return. Size handling is finished.
0000227A                          2555  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000227A                          2556  *-----------------------------------------------------------------------------
0000227A                          2557  
0000227A                          2558  
0000227A                          2559  
0000227A                          2560  *-----------------------------------------------------------------------------
0000227A                          2561  *-----------------------------------------------------------------------------
0000227A                          2562  * NAME:           SIZE68
0000227A                          2563  * DESCRIPTION:    Called if the size is stored in bits 6 to 8.
0000227A                          2564  * PRE-CONDITION:  a
0000227A                          2565  * POST-CONDITION: a
0000227A                          2566  * REGISTERS:      a
0000227A                          2567  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000227A                          2568  SIZE68
0000227A                          2569  
0000227A  48A7 FFFE               2570          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
0000227E  3C3C 0006               2571          MOVE.W  #6, D6              * Prep lower value for bitmask
00002282  3E3C 0008               2572          MOVE.W  #8, D7              * Prep upper value for bitmask
00002286  6100 04B4               2573          BSR     BITMASK             * Finalize bitmask setup
0000228A  CC42                    2574          AND     D2,D6               * Apply bitmask       
0000228C                          2575  
0000228C  0C46 0000               2576          CMPI    #%0000000000000000, D6  * is it a BYTE?
00002290  6700 003E               2577          BEQ     PRINTBYTE68               * Branch to handle BYTE sizes
00002294  0C46 0100               2578          CMPI    #%0000000100000000, D6  * is it a BYTE?
00002298  6700 0036               2579          BEQ     PRINTBYTE68               * Branch to handle BYTE sizes 
0000229C                          2580        
0000229C  0C46 0040               2581          CMPI    #%0000000001000000, D6  * is it a WORD?
000022A0  6700 0036               2582          BEQ     PRINTWORD68               * Branch to handle BYTE sizes
000022A4  0C46 0140               2583          CMPI    #%0000000101000000, D6  * is it a WORD?
000022A8  6700 002E               2584          BEQ     PRINTWORD68               * Branch to handle BYTE sizes
000022AC  0C46 00C0               2585          CMPI    #%0000000011000000, D6  * is it a WORD (ADDA)?
000022B0  6700 0026               2586          BEQ     PRINTWORD68               * Branch to handle BYTE sizes
000022B4                          2587  
000022B4  0C46 0080               2588          CMPI    #%0000000010000000, D6  * is it a LONG?
000022B8  6700 0026               2589          BEQ     PRINTLONG68               * Branch to handle BYTE sizes
000022BC  0C46 0180               2590          CMPI    #%0000000110000000, D6  * is it a LONG?
000022C0  6700 001E               2591          BEQ     PRINTLONG68               * Branch to handle BYTE sizes
000022C4  0C46 01C0               2592          CMPI    #%0000000111000000, D6  * is it a LONG (ADDA)?
000022C8  6700 0016               2593          BEQ     PRINTLONG68               * Branch to handle BYTE sizes
000022CC                          2594  
000022CC  6000 001A               2595          BRA     END68
000022D0                          2596          
000022D0                          2597  PRINTBYTE68
000022D0  6100 001C               2598          BSR     PRINTBYTE
000022D4  6000 0012               2599          BRA     END68
000022D8                          2600  
000022D8                          2601  PRINTWORD68
000022D8  6100 0022               2602          BSR     PRINTWORD
000022DC  6000 000A               2603          BRA     END68
000022E0                          2604          
000022E0                          2605  PRINTLONG68
000022E0  6100 0028               2606          BSR     PRINTLONG
000022E4  6000 0002               2607          BRA     END68
000022E8                          2608  
000022E8                          2609  END68
000022E8  4C9F 7FFF               2610          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
000022EC  4E75                    2611          RTS                             * Return. Size handling is finished.
000022EE                          2612  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000022EE                          2613  *-----------------------------------------------------------------------------
000022EE                          2614  
000022EE                          2615  
000022EE                          2616  
000022EE                          2617  *-----------------------------------------------------------------------------
000022EE                          2618  *-----------------------------------------------------------------------------
000022EE                          2619  * NAME:           PRINTBYTE
000022EE                          2620  * DESCRIPTION:    a
000022EE                          2621  * PRE-CONDITION:  a
000022EE                          2622  * POST-CONDITION: a
000022EE                          2623  * REGISTERS:      a
000022EE                          2624  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000022EE                          2625  PRINTBYTE
000022EE  43F9 00002870           2626          LEA     __B,A1      * Load '.B ' into A1
000022F4  103C 000E               2627          MOVE.B  #14,D0      * Trap #14 setup to print
000022F8  4E4F                    2628          TRAP    #15         * Perform Trap #14
000022FA  4E75                    2629          RTS                 * Return to SIZE67/SIZE68
000022FC                          2630          
000022FC                          2631  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000022FC                          2632  *-----------------------------------------------------------------------------
000022FC                          2633  
000022FC                          2634  
000022FC                          2635  
000022FC                          2636  *-----------------------------------------------------------------------------
000022FC                          2637  *-----------------------------------------------------------------------------
000022FC                          2638  * NAME:           PRINTWORD
000022FC                          2639  * DESCRIPTION:    a
000022FC                          2640  * PRE-CONDITION:  a
000022FC                          2641  * POST-CONDITION: a
000022FC                          2642  * REGISTERS:      a
000022FC                          2643  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000022FC                          2644  PRINTWORD
000022FC  43F9 00002874           2645          LEA     __W,A1      * Load '.W ' into A1
00002302  103C 000E               2646          MOVE.B  #14,D0      * Trap #14 setup to print
00002306  4E4F                    2647          TRAP    #15         * Perform Trap #14
00002308  4E75                    2648          RTS                 * Return to SIZE67/SIZE68
0000230A                          2649          
0000230A                          2650  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000230A                          2651  *-----------------------------------------------------------------------------
0000230A                          2652  
0000230A                          2653  
0000230A                          2654  
0000230A                          2655  *-----------------------------------------------------------------------------
0000230A                          2656  *-----------------------------------------------------------------------------
0000230A                          2657  * NAME:           PRINTLONG
0000230A                          2658  * DESCRIPTION:    a
0000230A                          2659  * PRE-CONDITION:  a
0000230A                          2660  * POST-CONDITION: a
0000230A                          2661  * REGISTERS:      a
0000230A                          2662  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000230A                          2663  PRINTLONG
0000230A  43F9 00002878           2664          LEA     __L,A1      * Load '.L ' into A1
00002310  103C 000E               2665          MOVE.B  #14,D0      * Trap #14 setup to print
00002314  4E4F                    2666          TRAP    #15         * Perform Trap #14
00002316  4E75                    2667          RTS                 * Return to SIZE67/SIZE68
00002318                          2668          
00002318                          2669  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002318                          2670  *-----------------------------------------------------------------------------
00002318                          2671  
00002318                          2672  
00002318                          2673  
00002318                          2674  *-----------------------------------------------------------------------------
00002318                          2675  *-----------------------------------------------------------------------------
00002318                          2676  * NAME:           MOVEMHELPERPOST
00002318                          2677  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
00002318                          2678  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
00002318                          2679  * POST-CONDITION: The registers being saved are printed
00002318                          2680  * REGISTERS:      A2
00002318                          2681  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002318                          2682  MOVEMHELPERPOST
00002318  48A7 FFFE               2683          MOVEM  D0-D7/A0-A6,-(A7)
0000231C                          2684          
0000231C  4285                    2685          CLR.L   D5  * to be used as a loop counter
0000231E  4284                    2686          CLR.L   D4  * == 1 if we have printed any registers (for fencepost issue)
00002320  4283                    2687          CLR.L   D3  * == 1 if we are in a range
00002322  4286                    2688          CLR.L   D6  * == 1 if we have already printed the slash or dash
00002324  4287                    2689          CLR.L   D7  * == counts the number of registers in a range
00002326  1C3C 0001               2690          MOVE.B  #1,D6 * to fix fencepost issue
0000232A  4282                    2691          CLR.L   D2
0000232C  3412                    2692          MOVE.W  (A2),D2
0000232E                          2693          
0000232E                          2694  DLOOP * loop to print out the data register portion of the addresses being saved
0000232E                          2695  
0000232E  E25A                    2696          ROR     #1,D2
00002330  6500 0006               2697          BCS     DVALID
00002334                          2698          
00002334  6000 0064               2699          BRA     DINVALID
00002338                          2700          
00002338                          2701  DVALID
00002338  0C43 0000               2702          CMPI    #0,D3
0000233C  6700 0020               2703          BEQ     DFORWARDVALID * we are not in a range
00002340                          2704          
00002340  5247                    2705          ADDI    #1,D7 *increment number of regs in range
00002342                          2706          
00002342  0C46 0001               2707          CMPI    #1,D6   *have we already printed a symbol?
00002346  6700 0086               2708          BEQ     DLOOPITER
0000234A                          2709          
0000234A  43F9 0000286E           2710          LEA     DASH,A1    *print a dash
00002350  103C 000E               2711          MOVE.B  #14,D0
00002354  4E4F                    2712          TRAP    #15
00002356                          2713          
00002356  1C3C 0001               2714          MOVE.B  #1,D6 * indicates a symbol has been printed
0000235A                          2715          
0000235A  6000 0072               2716          BRA     DLOOPITER
0000235E                          2717          
0000235E                          2718  DFORWARDVALID
0000235E                          2719          * not in a range yet, print
0000235E                          2720          
0000235E  0C44 0000               2721          CMPI    #0,D4
00002362  6700 000E               2722          BEQ     DNOSLASH
00002366                          2723                  
00002366  43F9 0000286C           2724          LEA     SLASH,A1
0000236C  103C 000E               2725          MOVE.B  #14,D0
00002370  4E4F                    2726          TRAP    #15
00002372                          2727          
00002372                          2728  DNOSLASH
00002372                          2729  
00002372  183C 0001               2730          MOVE.B  #1,D4 * we have printed something, now slashes are fair game
00002376                          2731          
00002376  1C3C 0001               2732          MOVE.B  #1,D6   * we have printed a symbol
0000237A                          2733          
0000237A  43F9 00002856           2734          LEA     ASCII_D,A1
00002380  103C 000E               2735          MOVE.B  #14,D0
00002384  4E4F                    2736          TRAP    #15
00002386                          2737          
00002386  2205                    2738          MOVE.L  D5,D1
00002388  103C 0003               2739          MOVE.B  #3,D0
0000238C  4E4F                    2740          TRAP    #15
0000238E                          2741  
0000238E  163C 0001               2742          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
00002392  1C3C 0000               2743          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
00002396                          2744          
00002396  6000 0036               2745          BRA     DLOOPITER
0000239A                          2746  
0000239A                          2747  
0000239A                          2748  DINVALID
0000239A                          2749  
0000239A                          2750          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
0000239A                          2751          
0000239A  0C43 0001               2752          CMPI    #1,D3
0000239E  6600 002E               2753          BNE     DLOOPITER
000023A2                          2754          
000023A2  163C 0000               2755          MOVE.B  #0,D3
000023A6                          2756          
000023A6  0C47 0001               2757          CMPI    #1,D7
000023AA  6D00 0020               2758          BLT     DLOOPITERCLR
000023AE                          2759          
000023AE  43F9 00002856           2760          LEA     ASCII_D,A1
000023B4  103C 000E               2761          MOVE.B  #14,D0
000023B8  4E4F                    2762          TRAP    #15
000023BA                          2763          
000023BA  2205                    2764          MOVE.L  D5,D1
000023BC                          2765          
000023BC  0641 FFFF               2766          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
000023C0                          2767          
000023C0  103C 0003               2768          MOVE.B  #3,D0
000023C4  4E4F                    2769          TRAP    #15
000023C6                          2770          
000023C6  4287                    2771          CLR.L   D7
000023C8                          2772          
000023C8  6000 0004               2773          BRA     DLOOPITER
000023CC                          2774          
000023CC                          2775  DLOOPITERCLR        
000023CC  4287                    2776          CLR.L   D7
000023CE                          2777  
000023CE                          2778  DLOOPITER
000023CE                          2779          
000023CE  0C45 0008               2780          CMPI    #8,D5
000023D2  6700 0008               2781          BEQ     DLOOPDONE
000023D6                          2782  
000023D6  5245                    2783          ADDI    #1,D5
000023D8  6000 FF54               2784          BRA     DLOOP
000023DC                          2785  
000023DC                          2786  DLOOPDONE
000023DC                          2787  
000023DC  7A09                    2788          MOVE.L  #9,D5  * to be used as a loop counter
000023DE  4283                    2789          CLR.L   D3  * == 1 if we are in a range
000023E0  4286                    2790          CLR.L   D6  * == 1 if we have already printed the slash or dash
000023E2  4287                    2791          CLR.L   D7  * count of registers in a range
000023E4  1C3C 0001               2792          MOVE.B  #1,D6 * to fix fencepost issue     
000023E8                          2793  
000023E8                          2794  ALOOP * loop to print out the data register portion of the addresses being saved
000023E8                          2795  
000023E8  E25A                    2796          ROR     #1,D2
000023EA  6500 0006               2797          BCS     AVALID
000023EE                          2798          
000023EE  6000 0068               2799          BRA     AINVALID
000023F2                          2800          
000023F2                          2801  AVALID
000023F2  0C43 0000               2802          CMPI    #0,D3
000023F6  6700 0020               2803          BEQ     AFORWARDVALID * we are not in a range
000023FA                          2804          
000023FA  5247                    2805          ADDI    #1,D7 *increment number of regs in range
000023FC                          2806          
000023FC  0C46 0001               2807          CMPI    #1,D6   *have we already printed a symbol?
00002400  6700 008E               2808          BEQ     ALOOPITER
00002404                          2809          
00002404  43F9 0000286E           2810          LEA     DASH,A1    *print a dash
0000240A  103C 000E               2811          MOVE.B  #14,D0
0000240E  4E4F                    2812          TRAP    #15
00002410                          2813          
00002410  1C3C 0001               2814          MOVE.B  #1,D6 * indicates a symbol has been printed
00002414                          2815          
00002414  6000 007A               2816          BRA     ALOOPITER
00002418                          2817          
00002418                          2818  AFORWARDVALID
00002418                          2819          * not in a range yet, print
00002418                          2820          
00002418                          2821                  
00002418  0C44 0000               2822          CMPI    #0,D4
0000241C  6700 000E               2823          BEQ     ANOSLASH
00002420                          2824                  
00002420  43F9 0000286C           2825          LEA     SLASH,A1
00002426  103C 000E               2826          MOVE.B  #14,D0
0000242A  4E4F                    2827          TRAP    #15
0000242C                          2828          
0000242C                          2829  ANOSLASH
0000242C                          2830  
0000242C  183C 0001               2831          MOVE.B  #1,D4   * we have printed something, now slashes are fair game
00002430                          2832          
00002430  1C3C 0001               2833          MOVE.B  #1,D6   * we have printed a symbol
00002434                          2834          
00002434  43F9 00002850           2835          LEA     ASCII_A,A1
0000243A  103C 000E               2836          MOVE.B  #14,D0
0000243E  4E4F                    2837          TRAP    #15
00002440                          2838          
00002440  2205                    2839          MOVE.L  D5,D1
00002442                          2840          
00002442  0641 FFF8               2841          ADDI    #-8,D1 * it's A, need to adjust by 8
00002446                          2842          
00002446  103C 0003               2843          MOVE.B  #3,D0
0000244A  4E4F                    2844          TRAP    #15
0000244C                          2845  
0000244C  163C 0001               2846          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
00002450  1C3C 0000               2847          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
00002454                          2848          
00002454  6000 003A               2849          BRA     ALOOPITER
00002458                          2850  
00002458                          2851  
00002458                          2852  AINVALID
00002458                          2853  
00002458                          2854          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
00002458                          2855          
00002458  0C43 0001               2856          CMPI    #1,D3
0000245C  6600 0032               2857          BNE     ALOOPITER
00002460                          2858          
00002460  163C 0000               2859          MOVE.B  #0,D3
00002464                          2860          
00002464  0C47 0001               2861          CMPI    #1,D7
00002468  6D00 0024               2862          BLT     ALOOPITERCLR
0000246C                          2863          
0000246C  43F9 00002850           2864          LEA     ASCII_A,A1
00002472  103C 000E               2865          MOVE.B  #14,D0
00002476  4E4F                    2866          TRAP    #15
00002478                          2867          
00002478  2205                    2868          MOVE.L  D5,D1
0000247A                          2869          
0000247A  0641 FFFF               2870          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
0000247E  0641 FFF8               2871          ADDI    #-8,D1 * it's A, need to adjust by 8
00002482                          2872          
00002482  103C 0003               2873          MOVE.B  #3,D0
00002486  4E4F                    2874          TRAP    #15
00002488                          2875          
00002488  4287                    2876          CLR.L   D7
0000248A                          2877          
0000248A  6000 0004               2878          BRA     ALOOPITER
0000248E                          2879          
0000248E                          2880  ALOOPITERCLR
0000248E                          2881          
0000248E  4287                    2882          CLR.L   D7
00002490                          2883  
00002490                          2884  ALOOPITER
00002490                          2885          
00002490  0C45 0010               2886          CMPI     #16,D5
00002494  6700 0008               2887          BEQ     ALOOPDONE
00002498                          2888  
00002498  5245                    2889          ADDI    #1,D5
0000249A  6000 FF4C               2890          BRA     ALOOP
0000249E                          2891  
0000249E                          2892  ALOOPDONE
0000249E                          2893          
0000249E  4C9F 7FFF               2894          MOVEM    (A7)+,D0-D7/A0-A6
000024A2  4E75                    2895          RTS
000024A4                          2896  
000024A4                          2897          
000024A4                          2898  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000024A4                          2899  *-----------------------------------------------------------------------------
000024A4                          2900  
000024A4                          2901  
000024A4                          2902  
000024A4                          2903  
000024A4                          2904  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000024A4                          2905  *-----------------------------------------------------------------------------
000024A4                          2906  *-----------------------------------------------------------------------------
000024A4                          2907  * NAME:           MOVEMHELPERPRE
000024A4                          2908  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
000024A4                          2909  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
000024A4                          2910  * POST-CONDITION: The registers being saved are printed
000024A4                          2911  * REGISTERS:      A2
000024A4                          2912  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000024A4                          2913  MOVEMHELPERPRE
000024A4                          2914  
000024A4  48A7 7F00               2915      MOVEM   D1-D7,-(A7)
000024A8                          2916  
000024A8  3412                    2917      MOVE.W  (A2),D2 * move the data we need to proccess into D2
000024AA  7800                    2918      MOVE.L  #0,D4
000024AC  4287                    2919      CLR.L    D7 * put the flipped bits here
000024AE                          2920      
000024AE                          2921      *the following block of code moves bits
000024AE                          2922      *into the same position they would be in if
000024AE                          2923      *the MOVEM was post inc, then simply uses post
000024AE                          2924      *inc to print the registers being saved
000024AE                          2925  PRELOOP
000024AE  E35A                    2926      ROL.W   #1,D2
000024B0                          2927      
000024B0  6500 0006               2928      BCS     PRESETBIT
000024B4  6000 0004               2929      BRA     PRELOOPITER
000024B8                          2930      
000024B8                          2931  PRESETBIT
000024B8  09C7                    2932      BSET    D4,D7
000024BA                          2933  
000024BA                          2934  PRELOOPITER
000024BA  0C44 000F               2935      CMPI    #15,D4
000024BE  6700 0006               2936      BEQ     PRELOOPDONE
000024C2                          2937      
000024C2  5244                    2938      ADDI    #1,D4
000024C4  60E8                    2939      BRA     PRELOOP
000024C6                          2940  
000024C6                          2941  PRELOOPDONE
000024C6                          2942  
000024C6  3487                    2943      MOVE.W  D7,(A2)    
000024C8  4C9F 00FE               2944      MOVEM   (A7)+,D1-D7
000024CC                          2945  
000024CC  6100 FE4A               2946      BSR MOVEMHELPERPOST
000024D0                          2947  
000024D0  4E75                    2948      RTS
000024D2                          2949  
000024D2                          2950  
000024D2                          2951  
000024D2                          2952          
000024D2                          2953  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000024D2                          2954  *-----------------------------------------------------------------------------
000024D2                          2955  
000024D2                          2956  
000024D2                          2957  
000024D2                          2958  *-----------------------------------------------------------------------------
000024D2                          2959  *-----------------------------------------------------------------------------
000024D2                          2960  * NAME:           UNKNOWNOP
000024D2                          2961  * DESCRIPTION:    a
000024D2                          2962  * PRE-CONDITION:  D2 contains the instruction to print. D2 has already been
000024D2                          2963  *                 identified as an unknown operation.
000024D2                          2964  * POST-CONDITION: D2 is no longer the opcode.
000024D2                          2965  * REGISTERS:      a
000024D2                          2966  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000024D2                          2967  UNKNOWNOP
000024D2  48A7 FFC0               2968          MOVEM   D0-D7/A0-A1,-(A7)
000024D6                          2969          
000024D6  43F9 00002812           2970          LEA     DATA,A1 * load " DATA $" into register A1
000024DC  700E                    2971          MOVE.L  #14,D0  * print the string stored in A1
000024DE  4E4F                    2972          TRAP    #15
000024E0                          2973          
000024E0  E18A                    2974          LSL.L   #8,D2
000024E2  E18A                    2975          LSL.L   #8,D2
000024E4                          2976          
000024E4  2C42                    2977          MOVE.L  D2,A6
000024E6                          2978          
000024E6  7604                    2979          MOVE.L  #4,D3
000024E8                          2980          
000024E8  6100 0012               2981          BSR     PRINT_ASCII_HEX_CHAR
000024EC                          2982  
000024EC  43F9 000027A5           2983          LEA     NEWLINE,A1 * load newline into register A1
000024F2  700E                    2984          MOVE.L  #14,D0  * print the string stored in A1
000024F4  4E4F                    2985          TRAP    #15
000024F6                          2986  
000024F6  4C9F 03FF               2987          MOVEM   (A7)+,D0-D7/A0-A1
000024FA  4E75                    2988          RTS
000024FC                          2989  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000024FC                          2990  *-----------------------------------------------------------------------------
000024FC                          2991  
000024FC                          2992  
000024FC                          2993  
000024FC                          2994  *-----------------------------------------------------------------------------
000024FC                          2995  *-----------------------------------------------------------------------------
000024FC                          2996  * NAME: Print ASCII hex char
000024FC                          2997  * DESCRIPTION:    Prints and address register to console in hex (ASCII chars)
000024FC                          2998  * PRE-CONDITION:  A6 contains the register of memory to print.
000024FC                          2999  *                 This parameter would be pre-loaded by, for example:
000024FC                          3000  *                 "LEA FOO_BAR_ADDR,A6" or "LEA $1234FEED,A6"
000024FC                          3001  *                 D3 contains the loops to do (number of nibbles).
000024FC                          3002  * POST-CONDITION: 
000024FC                          3003  * REGISTERS:      
000024FC                          3004  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000024FC                          3005  PRINT_ASCII_HEX_CHAR
000024FC  48E7 FFFC               3006      MOVEM.L     D0-D7/A0-A5,-(A7) * push data to save
00002500  4285                    3007      CLR.L       D5
00002502                          3008      
00002502                          3009      * fence post check (if-statement, check if 0 > chars)
00002502  0C03 0000               3010      CMPI.B      #0,D3
00002506  6700 017C               3011      BEQ         INVALID_ASCII_INPUT * go to very last part if invalid
0000250A                          3012      
0000250A                          3013  *    MOVE.L      A6,D4
0000250A  2E0E                    3014      MOVE.L      A6,D7
0000250C                          3015  PRINT_ASCII_LOOP
0000250C                          3016  *    MOVE.L      A6,D7 * increase a6's pointer position ea. loop
0000250C                          3017  *    MOVE.L      D4,D7 * make a mutable copy
0000250C  E99F                    3018      ROL.L       #4,D7 * roll to next spot
0000250E  48E7 0100               3019      MOVEM.L     D7,-(A7) * save D7
00002512                          3020  
00002512  0287 0000000F           3021      ANDI.L      #HEX_VALUE_MASK_LONG,D7
00002518                          3022      
00002518  0C87 00000000           3023      CMPI.L      #0,D7
0000251E  6D00 0164               3024      BLT         INVALID_ASCII_INPUT
00002522                          3025  
00002522  0C87 0000000F           3026      CMPI.L      #15,D7
00002528  6E00 015A               3027      BGT         INVALID_ASCII_INPUT
0000252C                          3028  
0000252C                          3029      * this might be faster... to do later, after entire assignment done
0000252C                          3030       * CMPI.L      #9,D7
0000252C                          3031       * BLE         PRINT_ASCII_0_TO_9
0000252C                          3032  
0000252C  0C87 00000000           3033      CMPI.L      #0,D7
00002532  6700 0098               3034      BEQ         PRINT_ASCII_0
00002536  0C87 00000001           3035      CMPI.L      #1,D7
0000253C  6700 0098               3036      BEQ         PRINT_ASCII_1
00002540  0C87 00000002           3037      CMPI.L      #2,D7
00002546  6700 0098               3038      BEQ         PRINT_ASCII_2
0000254A  0C87 00000003           3039      CMPI.L      #3,D7
00002550  6700 0098               3040      BEQ         PRINT_ASCII_3
00002554  0C87 00000004           3041      CMPI.L      #4,D7
0000255A  6700 0098               3042      BEQ         PRINT_ASCII_4
0000255E  0C87 00000005           3043      CMPI.L      #5,D7
00002564  6700 0098               3044      BEQ         PRINT_ASCII_5
00002568  0C87 00000006           3045      CMPI.L      #6,D7
0000256E  6700 0098               3046      BEQ         PRINT_ASCII_6
00002572  0C87 00000007           3047      CMPI.L      #7,D7
00002578  6700 0098               3048      BEQ         PRINT_ASCII_7
0000257C  0C87 00000008           3049      CMPI.L      #8,D7
00002582  6700 0098               3050      BEQ         PRINT_ASCII_8
00002586  0C87 00000009           3051      CMPI.L      #9,D7
0000258C  6700 0098               3052      BEQ         PRINT_ASCII_9
00002590  0C87 0000000A           3053      CMPI.L      #10,D7
00002596  6700 0098               3054      BEQ         PRINT_ASCII_A
0000259A  0C87 0000000B           3055      CMPI.L      #11,D7
000025A0  6700 0098               3056      BEQ         PRINT_ASCII_B
000025A4  0C87 0000000C           3057      CMPI.L      #12,D7
000025AA  6700 0098               3058      BEQ         PRINT_ASCII_C
000025AE  0C87 0000000D           3059      CMPI.L      #13,D7
000025B4  6700 0098               3060      BEQ         PRINT_ASCII_D
000025B8  0C87 0000000E           3061      CMPI.L      #14,D7
000025BE  6700 0098               3062      BEQ         PRINT_ASCII_E
000025C2  0C87 0000000F           3063      CMPI.L      #15,D7
000025C8  6700 0098               3064      BEQ         PRINT_ASCII_F
000025CC                          3065  PRINT_ASCII_0
000025CC  43F9 0000283C           3066      LEA         ASCII_0,A1
000025D2  6000 0098               3067      BRA         PRINT_ASCII_CHAR
000025D6                          3068  PRINT_ASCII_1
000025D6  43F9 0000283E           3069      LEA         ASCII_1,A1
000025DC  6000 008E               3070      BRA         PRINT_ASCII_CHAR
000025E0                          3071  PRINT_ASCII_2
000025E0  43F9 00002840           3072      LEA         ASCII_2,A1
000025E6  6000 0084               3073      BRA         PRINT_ASCII_CHAR
000025EA                          3074  PRINT_ASCII_3
000025EA  43F9 00002842           3075      LEA         ASCII_3,A1
000025F0  6000 007A               3076      BRA         PRINT_ASCII_CHAR
000025F4                          3077  PRINT_ASCII_4
000025F4  43F9 00002844           3078      LEA         ASCII_4,A1
000025FA  6000 0070               3079      BRA         PRINT_ASCII_CHAR
000025FE                          3080  PRINT_ASCII_5
000025FE  43F9 00002846           3081      LEA         ASCII_5,A1
00002604  6000 0066               3082      BRA         PRINT_ASCII_CHAR
00002608                          3083  PRINT_ASCII_6
00002608  43F9 00002848           3084      LEA         ASCII_6,A1
0000260E  6000 005C               3085      BRA         PRINT_ASCII_CHAR
00002612                          3086  PRINT_ASCII_7
00002612  43F9 0000284A           3087      LEA         ASCII_7,A1
00002618  6000 0052               3088      BRA         PRINT_ASCII_CHAR
0000261C                          3089  PRINT_ASCII_8
0000261C  43F9 0000284C           3090      LEA         ASCII_8,A1
00002622  6000 0048               3091      BRA         PRINT_ASCII_CHAR
00002626                          3092  PRINT_ASCII_9
00002626  43F9 0000284E           3093      LEA         ASCII_9,A1
0000262C  6000 003E               3094      BRA         PRINT_ASCII_CHAR
00002630                          3095  PRINT_ASCII_A
00002630  43F9 00002850           3096      LEA         ASCII_A,A1
00002636  6000 0034               3097      BRA         PRINT_ASCII_CHAR
0000263A                          3098  PRINT_ASCII_B
0000263A  43F9 00002852           3099      LEA         ASCII_B,A1
00002640  6000 002A               3100      BRA         PRINT_ASCII_CHAR
00002644                          3101  PRINT_ASCII_C
00002644  43F9 00002854           3102      LEA         ASCII_C,A1
0000264A  6000 0020               3103      BRA         PRINT_ASCII_CHAR
0000264E                          3104  PRINT_ASCII_D
0000264E  43F9 00002856           3105      LEA         ASCII_D,A1
00002654  6000 0016               3106      BRA         PRINT_ASCII_CHAR
00002658                          3107  PRINT_ASCII_E
00002658  43F9 00002858           3108      LEA         ASCII_E,A1
0000265E  6000 000C               3109      BRA         PRINT_ASCII_CHAR
00002662                          3110  PRINT_ASCII_F
00002662  43F9 0000285A           3111      LEA         ASCII_F,A1
00002668  6000 0002               3112      BRA         PRINT_ASCII_CHAR
0000266C                          3113  PRINT_ASCII_CHAR
0000266C  103C 000E               3114      MOVE.B      #14,D0
00002670  4E4F                    3115      TRAP        #15
00002672                          3116      
00002672                          3117          
00002672  4287                    3118      CLR.L       D7
00002674  4CDF 0080               3119      MOVEM.L     (A7)+,D7 * copy back D7 from stack, to mutate its' bits
00002678                          3120      
00002678  5205                    3121      ADD.B       #1,D5 * loop until counter stops
0000267A  BA03                    3122      CMP.B       D3,D5
0000267C  6C00 0006               3123      BGE         PRINT_ASCII_FINISH
00002680                          3124      
00002680  6000 FE8A               3125      BRA         PRINT_ASCII_LOOP
00002684                          3126  INVALID_ASCII_INPUT
00002684                          3127  PRINT_ASCII_FINISH
00002684  4CDF 3FFF               3128      MOVEM.L     (A7)+,D0-D7/A0-A5 * pop saved memory
00002688  4E75                    3129      RTS
0000268A                          3130      
0000268A                          3131  PRINTDATA911
0000268A  0C46 0E00               3132      CMPI    #%0000111000000000, D6   * Print 7
0000268E  6700 003C               3133      BEQ     PRINT7   
00002692  0C46 0C00               3134      CMPI    #%0000110000000000, D6   * Print 6
00002696  6700 0042               3135      BEQ     PRINT6
0000269A  0C46 0A00               3136      CMPI    #%0000101000000000, D6   * Print 5
0000269E  6700 0048               3137      BEQ     PRINT5
000026A2  0C46 0800               3138      CMPI    #%0000100000000000, D6   * Print 4
000026A6  6700 004E               3139      BEQ     PRINT4 
000026AA  0C46 0600               3140      CMPI    #%0000011000000000, D6   * Print 3
000026AE  6700 0054               3141      BEQ     PRINT3    
000026B2  0C46 0400               3142      CMPI    #%0000010000000000, D6   * Print 2
000026B6  6700 005A               3143      BEQ     PRINT2   
000026BA  0C46 0200               3144      CMPI    #%0000001000000000, D6   * Print 1
000026BE  6700 0060               3145      BEQ     PRINT1     
000026C2  0C46 0000               3146      CMPI    #%0000000000000000, D6   * Print 0
000026C6  6700 0066               3147      BEQ     PRINT8
000026CA                          3148      
000026CA  4E75                    3149      RTS                             * Fail case  
000026CC                          3150      
000026CC                          3151  PRINT7
000026CC  43F9 0000284A           3152      LEA     ASCII_7, A1
000026D2  103C 000E               3153      MOVE.B      #14,D0
000026D6  4E4F                    3154      TRAP        #15
000026D8  4E75                    3155      RTS
000026DA                          3156      
000026DA                          3157  PRINT6
000026DA  43F9 00002848           3158      LEA     ASCII_6, A1
000026E0  103C 000E               3159      MOVE.B      #14,D0
000026E4  4E4F                    3160      TRAP        #15
000026E6  4E75                    3161      RTS
000026E8                          3162      
000026E8                          3163  PRINT5
000026E8  43F9 00002846           3164      LEA     ASCII_5, A1
000026EE  103C 000E               3165      MOVE.B      #14,D0
000026F2  4E4F                    3166      TRAP        #15
000026F4  4E75                    3167      RTS
000026F6                          3168      
000026F6                          3169  PRINT4
000026F6  43F9 00002844           3170      LEA     ASCII_4, A1
000026FC  103C 000E               3171      MOVE.B      #14,D0
00002700  4E4F                    3172      TRAP        #15
00002702  4E75                    3173      RTS
00002704                          3174      
00002704                          3175  PRINT3
00002704  43F9 00002842           3176      LEA     ASCII_3, A1
0000270A  103C 000E               3177      MOVE.B      #14,D0
0000270E  4E4F                    3178      TRAP        #15
00002710  4E75                    3179      RTS
00002712                          3180      
00002712                          3181  PRINT2
00002712  43F9 00002840           3182      LEA     ASCII_2, A1
00002718  103C 000E               3183      MOVE.B      #14,D0
0000271C  4E4F                    3184      TRAP        #15
0000271E  4E75                    3185      RTS
00002720                          3186      
00002720                          3187  PRINT1
00002720  43F9 0000283E           3188      LEA     ASCII_1, A1
00002726  103C 000E               3189      MOVE.B      #14,D0
0000272A  4E4F                    3190      TRAP        #15
0000272C  4E75                    3191      RTS
0000272E                          3192          
0000272E                          3193  PRINT8
0000272E  43F9 0000284C           3194      LEA     ASCII_8, A1
00002734  103C 000E               3195      MOVE.B      #14,D0
00002738  4E4F                    3196      TRAP        #15
0000273A  4E75                    3197      RTS
0000273C                          3198  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000273C                          3199  *-----------------------------------------------------------------------------
0000273C                          3200  
0000273C                          3201  
0000273C                          3202  
0000273C                          3203  *-----------------------------------------------------------------------------
0000273C                          3204  *-----------------------------------------------------------------------------
0000273C                          3205  * NAME: Bitmask
0000273C                          3206  * DESCRIPTION:    Masks bits in a data register.
0000273C                          3207  * PRE-CONDITION:  D6 contains the starting bit to be masked, and D7 contains
0000273C                          3208  *                 the ending bit.  For example, a starting bit of decimal
0000273C                          3209  *                 value 0 and an ending bit of decimal value 3 will mask the
0000273C                          3210  *                 bits 0, 1, 2, and 3.
0000273C                          3211  * POST-CONDITION: D6 contains the bitmask, ready for use.
0000273C                          3212  * REGISTERS:      D5,D6,D7
0000273C                          3213  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000273C                          3214  BITMASK
0000273C  3F05                    3215          MOVE    D5,-(A7)    * push D5 onto the stack so we can use it to
0000273E  4245                    3216          CLR     D5          * clear D5 so we can use it
00002740                          3217  LOOPBIT 
00002740  0DC5                    3218          BSET    D6,D5       * set the D6th bit in D5 to 1
00002742  5246                    3219          ADD     #1,D6       * increment D6
00002744                          3220  
00002744  BC47                    3221          CMP     D7,D6       * have we finished?
00002746  6E00 0004               3222          BGT     BITMASKDONE * yes
0000274A  60F4                    3223          BRA     LOOPBIT     * no, iterate again
0000274C                          3224  
0000274C                          3225  BITMASKDONE
0000274C  2C05                    3226          MOVE.L  D5,D6
0000274E  3A1F                    3227          MOVE    (A7)+,D5    * restore D5
00002750  4E75                    3228          RTS
00002752                          3229  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002752                          3230  *-----------------------------------------------------------------------------
00002752                          3231  
00002752                          3232  
00002752                          3233  
00002752                          3234  *-----------------------------------------------------------------------------
00002752                          3235  *-----------------------------------------------------------------------------
00002752                          3236  * SECTION: Constants/variables used throughout the program.
00002752                          3237  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002752                          3238  
00002752                          3239  * ---> GENERAL
00002752  =0000000D               3240  CR          EQU     $0D
00002752  =0000000A               3241  LF          EQU     $0A
00002752= 45 4E 54 45 52 20 ...   3242  MSGSTART    DC.B    'ENTER START ADDRESS: ',CR,LF,0
0000276A= 45 4E 54 45 52 20 ...   3243  MSGEND      DC.B    'ENTER END ADDRESS: ',CR,LF,0
00002780= 48 69 74 20 74 68 ...   3244  CONT_MSG    DC.B    'Hit the [ENTER] key to continue...',CR,LF,0
000027A5= 0D 0A 00                3245  NEWLINE     DC.B    CR,LF,0
000027A8                          3246  
000027A8                          3247  * ---> OPS
000027A8= 44 49 56 53 00          3248  DIVSOP      DC.B    'DIVS',0
000027AD= 43 4D 50 00             3249  CMPOP       DC.B    'CMP',0
000027B1= 45 4F 52 00             3250  EOROP       DC.B    'EOR',0
000027B5= 4E 4F 50 00             3251  NOOPERATION DC.B    'NOP',0
000027B9= 4E 45 47 00             3252  NEGOP       DC.B    'NEG',0
000027BD= 4D 4F 56 45 00          3253  MOVEOP      DC.B    'MOVE',0
000027C2= 4D 4F 56 45 41 00       3254  MOVEAOP      DC.B   'MOVEA',0
000027C8= 4D 4F 56 45 4D 00       3255  MOVEMOP     DC.B    'MOVEM',0
000027CE= 4A 53 52 00             3256  JSROP       DC.B    'JSR',0
000027D2= 52 54 53 00             3257  RTSOP       DC.B    'RTS',0
000027D6= 53 55 42 51 00          3258  SUBQOP      DC.B    'SUBQ',0
000027DB= 4C 45 41 00             3259  LEAOP       DC.B    'LEA',0
000027DF= 42 43 4C 52 20 00       3260  BCLROP      DC.B    'BCLR ',0
000027E5= 4D 55 4C 53 00          3261  MULSOP      DC.B    'MULS',0
000027EA= 4F 52 00                3262  OROP        DC.B    'OR',0
000027ED= 4F 52 49 00             3263  ORIOP       DC.B    'ORI',0
000027F1= 43 4D 50 49 00          3264  CMPIOP      DC.B    'CMPI',0
000027F6= 4C 53 4C 00             3265  LSLOP       DC.B    'LSL',0
000027FA= 4C 53 52 00             3266  LSROP       DC.B    'LSR',0
000027FE= 41 53 4C 00             3267  ASLOP       DC.B    'ASL',0
00002802= 41 53 52 00             3268  ASROP       DC.B    'ASR',0
00002806= 52 4F 4C 00             3269  ROLOP       DC.B    'ROL',0
0000280A= 52 4F 52 00             3270  ROROP       DC.B    'ROR',0
0000280E= 53 55 42 00             3271  SUBOP       DC.B    'SUB',0
00002812= 20 44 41 54 41 20 ...   3272  DATA        DC.B    ' DATA $',0
0000281A= 42 43 43 20 00          3273  OP_BCC_MSG  DC.B    'BCC ',0
0000281F= 42 43 53 20 00          3274  OP_BCS_MSG  DC.B    'BCS ',0
00002824= 42 47 45 20 00          3275  OP_BGE_MSG  DC.B    'BGE ',0
00002829= 42 4C 54 20 00          3276  OP_BLT_MSG  DC.B    'BLT ',0
0000282E= 42 56 43 20 00          3277  OP_BVC_MSG  DC.B    'BVC ',0
00002833= 42 52 41 20 00          3278  OP_BRA_MSG  DC.B    'BRA ',0
00002838= 41 44 44 00             3279  OP_ADD_MSG  DC.B    'ADD',0
0000283C                          3280  
0000283C                          3281  * ---> HEX CHARS
0000283C= 30 00                   3282  ASCII_0     DC.B    '0',0
0000283E= 31 00                   3283  ASCII_1     DC.B    '1',0
00002840= 32 00                   3284  ASCII_2     DC.B    '2',0
00002842= 33 00                   3285  ASCII_3     DC.B    '3',0
00002844= 34 00                   3286  ASCII_4     DC.B    '4',0
00002846= 35 00                   3287  ASCII_5     DC.B    '5',0
00002848= 36 00                   3288  ASCII_6     DC.B    '6',0
0000284A= 37 00                   3289  ASCII_7     DC.B    '7',0
0000284C= 38 00                   3290  ASCII_8     DC.B    '8',0
0000284E= 39 00                   3291  ASCII_9     DC.B    '9',0
00002850= 41 00                   3292  ASCII_A     DC.B    'A',0
00002852= 42 00                   3293  ASCII_B     DC.B    'B',0
00002854= 43 00                   3294  ASCII_C     DC.B    'C',0
00002856= 44 00                   3295  ASCII_D     DC.B    'D',0
00002858= 45 00                   3296  ASCII_E     DC.B    'E',0
0000285A= 46 00                   3297  ASCII_F     DC.B    'F',0
0000285C                          3298  
0000285C                          3299  * ---> SPECIAL CHARACTERS
0000285C= 20 00                   3300  SPACE       DC.B    ' ',0
0000285E= 24 00                   3301  DOLLAR      DC.B    '$',0
00002860= 23 00                   3302  IMD         DC.B    '#',0
00002862= 2C 00                   3303  COMMA       DC.B    ',',0
00002864= 28 00                   3304  OBRACK      DC.B    '(',0
00002866= 29 00                   3305  CBRACK      DC.B    ')',0
00002868= 2B 00                   3306  PLUS        DC.B    '+',0
0000286A= 2D 00                   3307  MINUS       DC.B    '-',0
0000286C= 2F 00                   3308  SLASH       DC.B    '/',0
0000286E= 2D 00                   3309  DASH        DC.B    '-',0
00002870                          3310  
00002870                          3311  * ---> B/W/L (BYTE, WORD, LONG, RESPECTIVELY)
00002870= 2E 42 20 00             3312  __B         DC.B    '.B ',0
00002874= 2E 57 20 00             3313  __W         DC.B    '.W ',0
00002878= 2E 4C 20 00             3314  __L         DC.B    '.L ',0
0000287C                          3315  
0000287C                          3316  * ---> ADDRESS REGISTERS A0-A7
0000287C= 41 30 00                3317  __A0        DC.B   'A0',0
0000287F= 41 31 00                3318  __A1        DC.B   'A1',0    
00002882= 41 32 00                3319  __A2        DC.B   'A2',0
00002885= 41 33 00                3320  __A3        DC.B   'A3',0
00002888= 41 34 00                3321  __A4        DC.B   'A4',0
0000288B= 41 35 00                3322  __A5        DC.B   'A5',0
0000288E= 41 36 00                3323  __A6        DC.B   'A6',0
00002891= 41 37 00                3324  __A7        DC.B   'A7',0
00002894                          3325  
00002894                          3326  * ---> DATA REGISTERS D0-D7
00002894= 44 30 00                3327  __D0        DC.B   'D0',0
00002897= 44 31 00                3328  __D1        DC.B   'D1',0
0000289A= 44 32 00                3329  __D2        DC.B   'D2',0
0000289D= 44 33 00                3330  __D3        DC.B   'D3',0
000028A0= 44 34 00                3331  __D4        DC.B   'D4',0
000028A3= 44 35 00                3332  __D5        DC.B   'D5',0
000028A6= 44 36 00                3333  __D6        DC.B   'D6',0
000028A9= 44 37 00                3334  __D7        DC.B   'D7',0
000028AC                          3335  
000028AC                          3336  __COUNTER   DS.B    1       * main loop counter
000028AD                          3337  
000028AD                          3338  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000028AD                          3339  *-----------------------------------------------------------------------------
000028AD                          3340  
000028AD                          3341  
000028AD                          3342  
000028AD                          3343  *-----------------------------------------------------------------------------
000028AD                          3344  *-----------------------------------------------------------------------------
000028AD                          3345  * SECTION: Sample program to run, then attempt testing disassembly on.
000028AD                          3346  * STARTING: 16384
000028AD                          3347  * ENDING:   Any even number before 16384 to continue FOREVER
000028AD                          3348  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00004000                          3349      ORG $4000
00004000                          3350      
00004000  9240                    3351      SUB     D0,D1
00004002  944A                    3352      SUB     A2,D2   * Should be invalid since this is SUBA
00004004  B200                    3353      CMP.B   D0,D1
00004006  B441                    3354      CMP.W   D1,D2
00004008  B682                    3355      CMP.L   D2,D3
0000400A  B248                    3356      CMP     A0,D1
0000400C  B25A                    3357      CMP     (A2)+,D1
0000400E  B101                    3358      EOR.B   D0,D1
00004010  B342                    3359      EOR.W   D1,D2
00004012  B583                    3360      EOR.L   D2,D3
00004014  B150                    3361      EOR     D0,(A0)
00004016  B359                    3362      EOR     D1,(A1)+
00004018  0000 0003               3363      ORI.B   #3,D0 
0000401C  0042 0290               3364      ORI.W   #$290,D2
00004020  0087 0000000A           3365      ORI.L   #%1010,D7   * $1010 == A
00004026  0043 0002               3366      ORI     #2,D3
0000402A  4E71                    3367      NOP
0000402C  103C 009A               3368      MOVE.B   #%10011010, D0
00004030  123C 00A9               3369      MOVE.B   #%10101001, D1
00004034  303C 009A               3370      MOVE.W   #%10011010, D0
00004038  323C 00A9               3371      MOVE.W   #%10101001, D1
0000403C  203C 00011170           3372      MOVE.L   #70000, D0
00004042  223C 00011170           3373      MOVE.L   #70000, D1
00004048  81FC 0001               3374      DIVS     #1, D0
0000404C  D200                    3375      ADD.B    D0,D1
0000404E  4C9F 3C1A               3376      MOVEM    (A7)+,A2-A5/D1/D3-D4
00004052  43F8 27CE               3377      LEA      JSROP,A1
00004056  4467                    3378      NEG.W    -(A7)
00004058  4EB9 000040A2           3379      JSR      END
0000405E  CFFC 0003               3380      MULS.W  #3, D7
00004062  CFC0                    3381      MULS    D0, D7
00004064  C5D9                    3382      MULS    (A1)+, D2
00004066  4E71                    3383      NOP
00004068  C682                    3384      AND.L   D2,D3
0000406A  5146                    3385      SUBQ    #8, D6
0000406C  4E71                    3386      NOP
0000406E  5F81                    3387      SUBQ.L  #7, D1
00004070  4E71                    3388      NOP
00004072  0041 0004               3389      ORI     #4, D1
00004076  4E71                    3390      NOP
00004078  E389                    3391      LSL.L   #1,D1
0000407A  4E71                    3392      NOP
0000407C  E489                    3393      LSR.L   #2,D1
0000407E  4E71                    3394      NOP
00004080  E781                    3395      ASL.L   #3,D1
00004082  4E71                    3396      NOP
00004084  E881                    3397      ASR.L   #4,D1
00004086  4E71                    3398      NOP
00004088  EB99                    3399      ROL.L   #5,D1
0000408A  4E71                    3400      NOP
0000408C  E099                    3401      ROR.L   #8,D1
0000408E  4E71                    3402      NOP
00004090  0881 0002               3403      BCLR    #2,D1
00004094  4E71                    3404      NOP
00004096  DAC1                    3405      ADDA.W  D1,A5
00004098  4E71                    3406      NOP
0000409A  D803                    3407      ADD.B   D3,D4
0000409C  4E71                    3408      NOP
0000409E  6000 0004               3409      BRA     RLLYEND
000040A2                          3410  
000040A2                          3411  END
000040A2  4E75                    3412      RTS
000040A4                          3413      
000040A4                          3414  RLLYEND
000040A4                          3415      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_LONG_OP        1C94
ADDA_PRT            1CD0
ADDA_WORD_OP        1C2C
ADD_ADDA_END        1D00
ADD_ADDA_PRINT      1CE8
ADD_ADDA_SPACE      1CC2
ADD_EA_DN_GENERIC   1CB4
AFORWARDVALID       2418
AINVALID            2458
ALOOP               23E8
ALOOPDONE           249E
ALOOPITER           2490
ALOOPITERCLR        248E
ANOSLASH            242C
AS                  1D76
ASCII_0             283C
ASCII_1             283E
ASCII_2             2840
ASCII_3             2842
ASCII_4             2844
ASCII_5             2846
ASCII_6             2848
ASCII_7             284A
ASCII_8             284C
ASCII_9             284E
ASCII_A             2850
ASCII_B             2852
ASCII_C             2854
ASCII_D             2856
ASCII_E             2858
ASCII_F             285A
ASL                 1D8C
ASLOP               27FE
ASR                 1D9C
ASROP               2802
AVALID              23F2
BCC_BYTE_OFFSET     18DC
BCC_END             18F8
BCLROP              27DF
BITMASK             273C
BITMASKDONE         274C
BYTE_DN_EA          1C4C
BYTE_EA_DN          1BE4
CBRACK              2866
CLEAR_SCREEN        11AE
CMPIOP              27F1
CMPOP               27AD
COMMA               2862
CONT_MSG            2780
CR                  D
DASH                286E
DATA                2812
DFORWARDVALID       235E
DINVALID            239A
DISPLAY1011         1AC4
DIVSOP              27A8
DLOOP               232E
DLOOPDONE           23DC
DLOOPITER           23CE
DLOOPITERCLR        23CC
DNOSLASH            2372
DOLLAR              285E
DONE0100            17C2
DONE1001            1A4C
DONE1011            1AFC
DVALID              2338
EAHELPER05          1EF0
EAHELPER611         1EAE
END                 40A2
END0000             133E
END67               2274
END68               22E8
ENDEAHELPER05       2030
ENDEAHELPER611      1EEA
ENDMODE_AN          21C0
ENDMODE_DN          20C0
ENDOP0001           13B0
ENDOP0010           1422
ENDOP0011           1494
ENDOP1110           1E96
END_OF_LOOP         1182
EOROP               27B1
HEX_VALUE_MASK_LONG  F
IDLE_STATE          118C
IMD                 2860
IMD_SIZE_0000       12BE
INVALID_ASCII_INPUT  2684
ITERATION           116A
JSROP               27CE
LEAOP               27DB
LF                  A
LONG_DN_EA          1C7C
LONG_EA_DN          1C14
LOOP                104C
LOOPBIT             2740
LOOPUNKNOWNOP       1166
LS                  1D40
LSL                 1D56
LSLOP               27F6
LSR                 1D66
LSROP               27FA
MINUS               286A
MODE_AN             2136
MODE_DN             2036
MOVEAOP             27C2
MOVEMHELPERPOST     2318
MOVEMHELPERPRE      24A4
MOVEMOP             27C8
MOVEMTOMEM          15CA
MOVEMTOREG          1530
MOVEOP              27BD
MSGEND              276A
MSGSTART            2752
MULSOP              27E5
NEGOP               27B9
NEWLINE             27A5
NOOPERATION         27B5
NOT0000             1076
NOT0001             1086
NOT0010             1096
NOT0011             10A6
NOT0100             10B6
NOT0101             10C6
NOT0110             10D6
NOT0111             10E6
NOT1000             10F6
NOT1001             1106
NOT1010             1116
NOT1011             1126
NOT1100             1136
NOT1101             1146
NOT1110             1156
NOT67BYTE           2258
NOT67WORD           2268
NOTA0               2158
NOTA1               2168
NOTA2               2178
NOTA3               2188
NOTA4               2198
NOTA5               21A8
NOTA6               21B8
NOTADRDIRECT        1F20
NOTADRINDIRECT      1F48
NOTADRINDIRECTPOST  1F7C
NOTADRINDIRECTPRE   1FB0
NOTBCLR             1286
NOTBCLRDYNA         1238
NOTD0               2058
NOTD1               2068
NOTD2               2078
NOTD3               2088
NOTD4               2098
NOTD5               20A8
NOTD6               20B8
NOTDATAREG          1F10
NOTDIVS             1982
NOTEOR              1AB8
NOTIMMBYTE          1FE2
NOTIMMEDIATE        202C
NOTIMMWORD          200C
NOTJSR              16BA
NOTLONGMOVEM1       1598
NOTLONGMOVEM2       1632
NOTMOVEM            1664
NOTNEG              150C
NOTNOP              14B6
NOTORI              1324
NOTRTS              16DC
OBRACK              2864
OP0000              11BA
OP0001              1344
OP0001MOVE          136E
OP0001MOVEA         137A
OP0010              13B6
OP0010MOVE          13E0
OP0010MOVEA         13EC
OP0011              1428
OP0011MOVE          1452
OP0011MOVEA         145E
OP0100              149A
OP0101              17C8
OP0110              1836
OP0111              18FE
OP1000              1904
OP1000END           1992
OP1001              1998
OP1010              1A52
OP1011              1A58
OP1100              1B02
OP1101              1B8C
OP1110              1D12
OP1110DATAREG       1E6A
OP1110GENERIC       1DE2
OP1110IMMEIGHT      1E42
OP1111              1EA8
OP_0000             0
OP_0001             1000
OP_0010             2000
OP_0011             3000
OP_0100             4000
OP_0101             5000
OP_0110             6000
OP_0111             7000
OP_1000             8000
OP_1001             9000
OP_1010             A000
OP_1011             B000
OP_1100             C000
OP_1101             D000
OP_1110             E000
OP_1111             F000
OP_ADD_MSG          2838
OP_BCC              1880
OP_BCC_MSG          281A
OP_BCS              188A
OP_BCS_MSG          281F
OP_BGE              1894
OP_BGE_MSG          2824
OP_BLT              189E
OP_BLT_MSG          2829
OP_BRA              18B2
OP_BRANCHES_PRINT   18BC
OP_BRA_MSG          2833
OP_BVC              18A8
OP_BVC_MSG          282E
ORIOP               27ED
OROP                27EA
PLUS                2868
PRELOOP             24AE
PRELOOPDONE         24C6
PRELOOPITER         24BA
PRESETBIT           24B8
PRINT1              2720
PRINT1001           19F0
PRINT2              2712
PRINT3              2704
PRINT4              26F6
PRINT5              26E8
PRINT6              26DA
PRINT7              26CC
PRINT8              272E
PRINTA0             21C6
PRINTA1             21D4
PRINTA2             21E2
PRINTA3             21F0
PRINTA4             21FE
PRINTA5             220C
PRINTA6             221A
PRINTA7             2228
PRINTBYTE           22EE
PRINTBYTE68         22D0
PRINTD0             20C6
PRINTD1             20D4
PRINTD2             20E2
PRINTD3             20F0
PRINTD4             20FE
PRINTD5             210C
PRINTD6             211A
PRINTD7             2128
PRINTDATA911        268A
PRINTLONG           230A
PRINTLONG68         22E0
PRINTWORD           22FC
PRINTWORD68         22D8
PRINT_ASCII_0       25CC
PRINT_ASCII_1       25D6
PRINT_ASCII_2       25E0
PRINT_ASCII_3       25EA
PRINT_ASCII_4       25F4
PRINT_ASCII_5       25FE
PRINT_ASCII_6       2608
PRINT_ASCII_7       2612
PRINT_ASCII_8       261C
PRINT_ASCII_9       2626
PRINT_ASCII_A       2630
PRINT_ASCII_B       263A
PRINT_ASCII_C       2644
PRINT_ASCII_CHAR    266C
PRINT_ASCII_D       264E
PRINT_ASCII_E       2658
PRINT_ASCII_F       2662
PRINT_ASCII_FINISH  2684
PRINT_ASCII_HEX_CHAR  24FC
PRINT_ASCII_LOOP    250C
RLLYEND             40A4
RO                  1DAC
ROL                 1DC2
ROLOP               2806
ROR                 1DD2
ROROP               280A
RTSOP               27D2
SIZE67              2236
SIZE68              227A
SKIPLONG            1302
SKIPNOTLONG1        15A4
SKIPNOTLONG2        163E
SLASH               286C
SPACE               285C
START               1000
SUBOP               280E
SUBQOP              27D6
SUB_EA_DN           1A30
TWOWORDLEA          176C
UNKNOWN0000         133A
UNKNOWN0100         17BE
UNKNOWN0101         1830
UNKNOWN1001         1A48
UNKNOWN1011         1AF8
UNKNOWN1100         1B82
UNKNOWNOP           24D2
UNKNOWNOP0001       13AC
UNKNOWNOP0010       141E
UNKNOWNOP0011       1490
WORD_DN_EA          1C64
WORD_EA_DN          1BFC
__A0                287C
__A1                287F
__A2                2882
__A3                2885
__A4                2888
__A5                288B
__A6                288E
__A7                2891
__B                 2870
__COUNTER           28AC
__D0                2894
__D1                2897
__D2                289A
__D3                289D
__D4                28A0
__D5                28A3
__D6                28A6
__D7                28A9
__L                 2878
__W                 2874
