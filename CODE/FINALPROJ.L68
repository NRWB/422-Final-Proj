00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/19/2014 11:53:16 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 68K Decompiler
00000000                             3  * Written by : Nick Bell, Sammy Nimnuch, Caleb Larson
00000000                             4  * Date       : 11/2014
00000000                             5  * Description: This program decompiles other 68K programs
00000000                             6  *              which are loaded into the simulator simultaneously.
00000000                             7  *-----------------------------------------------------------
00000000                             8      
00000000                             9  
00000000                            10  
00000000  =00000000                 11  OP_0000     EQU     %0000
00000000  =00000001                 12  OP_0001     EQU     %0001
00000000  =00000002                 13  OP_0010     EQU     %0010
00000000  =00000003                 14  OP_0011     EQU     %0011
00000000  =00000004                 15  OP_0100     EQU     %0100     
00000000  =00000005                 16  OP_0101     EQU     %0101
00000000  =00000006                 17  OP_0110     EQU     %0110
00000000  =00000007                 18  OP_0111     EQU     %0111
00000000  =00000008                 19  OP_1000     EQU     %1000
00000000  =00000009                 20  OP_1001     EQU     %1001
00000000  =0000000A                 21  OP_1010     EQU     %1010
00000000  =0000000B                 22  OP_1011     EQU     %1011
00000000  =0000000C                 23  OP_1100     EQU     %1100
00000000  =0000000D                 24  OP_1101     EQU     %1101
00000000  =0000000E                 25  OP_1110     EQU     %1110
00000000  =0000000F                 26  OP_1111     EQU     %1111
00000000                            27  
00000000  =0000F000                 28  BITMASK     EQU     $F000      * used to bitmask the first nibble
00000000                            29  
00001000                            30  START:  ORG    $1000            * first instruction of program
00001000                            31  
00001000                            32  * THINK ABOUT ASKING FOR VALID START/END NO NEGATIVE ADDR
00001000                            33  
00001000                            34  * LOAD MSGSTART, ASK FOR INPUT
00001000  43F9 00001074             35          LEA     MSGSTART,A1     * Load MESSAGE START
00001006  103C 000E                 36          MOVE.B  #14,D0          * Trap #14 to display message
0000100A  4E4F                      37          TRAP    #15             * Perform #14
0000100C                            38          
0000100C                            39  * GETS THE STARTING ADDRESS
0000100C  103C 0004                 40          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001010  4E4F                      41          TRAP    #15             * Perform #15
00001012                            42          
00001012                            43  * MOVE IT TO ANOTHER ADDRESS REGISTER
00001012  2441                      44          MOVEA.L D1,A2           * Move the user input into A2. This is the starting address.
00001014                            45  
00001014                            46  * LOAD MSGSTART, ASK FOR INPUT
00001014  43F9 0000108C             47          LEA     MSGEND,A1       * Load MESSAGE END
0000101A  303C 000E                 48          MOVE.W  #14,D0          * Trap #14 to display message
0000101E  4E4F                      49          TRAP    #15             * Perform #14
00001020                            50          
00001020                            51  * GETS THE ENDING ADDRESS
00001020  103C 0004                 52          MOVE.B  #4,D0           * Trap #4 gets an inptu and stores in D1
00001024  4E4F                      53          TRAP    #15             * Perform Trap #4
00001026  2A01                      54          MOVE.L  D1,D5           * Move the ending address into D5. This is the ending address.
00001028                            55          
00001028  43F9 000010A2             56          LEA     NEWLINE,A1      * Store newline variable for seperating operations
0000102E                            57          
0000102E                            58          
0000102E                            59  LOOP    
0000102E  343C F000                 60          MOVE.W  #BITMASK,D2      * Load the bitmask into data register D2
00001032                            61          
00001032  321A                      62          MOVE.W  (A2)+,D1        * Read an operation into D1
00001034                            63          
00001034  C441                      64          AND.W   D1,D2           * Apply this bitmask
00001036                            65          
00001036  E042                      66          ASR     #8,D2           * Shift the bit over to compair
00001038  E842                      67          ASR     #4,D2           * Can only bitshift by 8, we need 12
0000103A                            68          
0000103A  B47C 0004                 69          CMP     #OP_0100,D2     * Does the operation start with 0100?
0000103E  6600 000A                 70          BNE     NEXT16          * No, check next case
00001042  6100 001A                 71          BSR     OP0100
00001046  6000 0008                 72          BRA     ITERATION       * Move to next iteration of the loop
0000104A                            73          
0000104A                            74  NEXT16
0000104A  103C 0003                 75          MOVE.B  #3,D0           * Print out operation we don't recognize
0000104E  4E4F                      76          TRAP    #15             * Perform Trap #3
00001050                            77          
00001050                            78  ITERATION
00001050                            79  
00001050  103C 000E                 80          MOVE.B  #14,D0          * Print a newline
00001054  4E4F                      81          TRAP    #15
00001056                            82  
00001056  BA4A                      83          CMP     A2,D5           * Compare the starting address to ending address
00001058  6700 2FB4                 84          BEQ     END             * If they are equal, branch 
0000105C  60D0                      85          BRA     LOOP            * Otherwise, branch back to LOOP
0000105E                            86  
0000105E                            87  OP0100
0000105E  48A7 C0FE                 88          MOVEM   D0-D1/A0-A6,-(A7) * Push values to the stack to save
00001062                            89          
00001062  43F9 000010A5             90          LEA     NOOPERATION,A1
00001068                            91          
00001068  103C 000E                 92          MOVE.B  #14,D0          * Print a newline
0000106C  4E4F                      93          TRAP    #15
0000106E                            94          
0000106E  4C9F 7F03                 95          MOVEM   (A7)+,D0-D1/A0-A6 * Push values to the stack to pop
00001072                            96          
00001072  4E75                      97          RTS
00001074                            98  
00001074  =0000000D                 99  CR      EQU     $0D
00001074  =0000000A                100  LF      EQU     $0A
00001074= 45 4E 54 45 52 20 ...    101  MSGSTART    DC.B    'ENTER START ADDRESS: ',CR,LF,0
0000108C= 45 4E 54 45 52 20 ...    102  MSGEND      DC.B    'ENTER END ADDRESS: ',CR,LF,0
000010A2= 0D 0A 00                 103  NEWLINE     DC.B    CR,LF,0
000010A5= 4E 4F 50 00              104  NOOPERATION DC.B    'NOP',0
000010A9                           105  
000010A9                           106  * Put variables and constants here
000010A9                           107  
00004000                           108      ORG $4000
00004000                           109  
00004000  4E71                     110      NOP
00004002  103C 009A                111      MOVE.B   #%10011010, D0
00004006  123C 00A9                112      MOVE.B   #%10101001, D1
0000400A  D200                     113      ADD.B    D0,D1
0000400C  4E71                     114      NOP
0000400E                           115  
0000400E                           116  END
0000400E                           117      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BITMASK             F000
CR                  D
END                 400E
ITERATION           1050
LF                  A
LOOP                102E
MSGEND              108C
MSGSTART            1074
NEWLINE             10A2
NEXT16              104A
NOOPERATION         10A5
OP0100              105E
OP_0000             0
OP_0001             1
OP_0010             2
OP_0011             3
OP_0100             4
OP_0101             5
OP_0110             6
OP_0111             7
OP_1000             8
OP_1001             9
OP_1010             A
OP_1011             B
OP_1100             C
OP_1101             D
OP_1110             E
OP_1111             F
START               1000
