00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/27/2014 8:12:33 PM

00000000                             1  *    666
00000000                             2  *   66 66
00000000                             3  *  66   66
00000000                             4  *  66   66         8888
00000000                             5  *  66   66       88   kkkk
00000000                             6  *  66  66       8   88   kk      
00000000                             7  *   66  6      8  88  kkk  kk    
00000000                             8  *    66  6    8  88     kk  k
00000000                             9  *     66 66  88 88        kk
00000000                            10  *     6 _______ 8
00000000                            11  *    6    68k    8
00000000                            12  *   6_____PRO_____8
00000000                            13  *  6               8        68k is as easy as
00000000                            14  *  6    0     0    8        6 - 8 - k !
00000000                            15  *  6   /   V   \   8 
00000000                            16  *  6   \__/ \__/   8        Welcome to our Dissasembler, Professor Nash!
00000000                            17  *    6            8         Enjoy your stay!
00000000                            18  *      6        8      
00000000                            19  *        666888
00000000                            20  *  _____                   __    ___  _    
00000000                            21  * | ____|__ _ ___ _   _   / /_  ( _ )| | __
00000000                            22  * |  _| / _` / __| | | | | '_ \ / _ \| |/ /
00000000                            23  * | |__| (_| \__ \ |_| | | (_) | (_) |   < 
00000000                            24  * |_____\__,_|___/\__, |  \___/ \___/|_|\_\
00000000                            25  *                 |___/           
00000000                            26  *-----------------------------------------------------------
00000000                            27  * Title      : 68K Decompiler
00000000                            28  * Written by : Nick Bell, Sammy Nimnuch, Caleb Larson
00000000                            29  * Date       : 11/2014
00000000                            30  * Description: This program decompiles other 68K programs
00000000                            31  *              which are loaded into the simulator simultaneously.
00000000                            32  *-----------------------------------------------------------
00000000                            33  
00000000                            34  
00000000  =00000000                 35  OP_0000     EQU     %0000000000000000
00000000  =00001000                 36  OP_0001     EQU     %0001000000000000
00000000  =00002000                 37  OP_0010     EQU     %0010000000000000
00000000  =00003000                 38  OP_0011     EQU     %0011000000000000
00000000  =00004000                 39  OP_0100     EQU     %0100000000000000
00000000  =00005000                 40  OP_0101     EQU     %0101000000000000
00000000  =00006000                 41  OP_0110     EQU     %0110000000000000
00000000  =00007000                 42  OP_0111     EQU     %0111000000000000
00000000  =00008000                 43  OP_1000     EQU     %1000000000000000
00000000  =00009000                 44  OP_1001     EQU     %1001000000000000
00000000  =0000A000                 45  OP_1010     EQU     %1010000000000000
00000000  =0000B000                 46  OP_1011     EQU     %1011000000000000
00000000  =0000C000                 47  OP_1100     EQU     %1100000000000000
00000000  =0000D000                 48  OP_1101     EQU     %1101000000000000
00000000  =0000E000                 49  OP_1110     EQU     %1110000000000000
00000000  =0000F000                 50  OP_1111     EQU     %1111000000000000
00000000                            51  
00000000                            52  * BITMASK     EQU     $F000       * used to bitmask the first nibble
00000000                            53  
00001000                            54  START:  ORG    $1000            * first instruction of program
00001000                            55  
00001000                            56  * -----------------------------------
00001000                            57  * Starting and Ending Addresses
00001000                            58  * -----------------------------------
00001000                            59  
00001000                            60  * THINK ABOUT ASKING FOR VALID START/END NO NEGATIVE ADDR
00001000                            61  
00001000                            62  * LOAD MSGSTART, ASK FOR INPUT
00001000  43F9 0000171A             63          LEA     MSGSTART,A1     * Load MESSAGE START
00001006  103C 000E                 64          MOVE.B  #14,D0          * Trap #14 to display message
0000100A  4E4F                      65          TRAP    #15             * Perform #14
0000100C                            66          
0000100C                            67  * GETS THE STARTING ADDRESS
0000100C  103C 0004                 68          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001010  4E4F                      69          TRAP    #15             * Perform #15
00001012                            70          
00001012                            71  * MOVE IT TO ANOTHER ADDRESS REGISTER
00001012  2441                      72          MOVEA.L D1,A2           * Move the user input into A2. This is the starting address.
00001014                            73  
00001014                            74  * LOAD MSGSTART, ASK FOR INPUT
00001014  43F9 00001732             75          LEA     MSGEND,A1       * Load MESSAGE END
0000101A  303C 000E                 76          MOVE.W  #14,D0          * Trap #14 to display message
0000101E  4E4F                      77          TRAP    #15             * Perform #14
00001020                            78          
00001020                            79  * GETS THE ENDING ADDRESS
00001020  103C 0004                 80          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001024  4E4F                      81          TRAP    #15             * Perform Trap #4
00001026  2A01                      82          MOVE.L  D1,D5           * Move the ending address into D5
00001028  43F9 00001748             83          LEA     NEWLINE,A1      * Store newline variable for seper opcodes
0000102E                            84          
0000102E  3E3C 000F                 85          MOVE.W  #15,D7          * prep D7 for bitmask subroutine
00001032  3C3C 000C                 86          MOVE.W  #12,D6          * prep D6 for bitmask subroutine
00001036  6100 06CC                 87          BSR     BITMASK         * obtain a bitmask that goes from 12-15 (inclusive)
0000103A                            88          * MOVE.W  D6,D2           * move the bitmask to D2
0000103A                            89          
0000103A                            90  LOOP    
0000103A                            91          
0000103A                            92          * MOVE.W  #BITMASK,D2     * Load the bitmask into data register D2
0000103A  3F06                      93          MOVE    D6,-(A7)        * save the bitmask on the stack
0000103C  341A                      94          MOVE.W  (A2)+,D2        * Read an operation into D1
0000103E  CC42                      95          AND.W   D2,D6           * Apply this bitmask
00001040                            96          
00001040  BC7C 4000                 97          CMP     #OP_0100,D6     * Does the operation start with 0100?
00001044  6600 0006                 98          BNE     NEXT            * No, check next case
00001048  6000 018C                 99          BRA     OP0100          * Branch to subroutine 0100
0000104C                           100          *BRA     ITERATION       * Move to next iteration of the loop
0000104C                           101          
0000104C                           102  NEXT
0000104C  6100 068C                103          BSR     UNKNOWNOP
00001050                           104          
00001050                           105  ITERATION
00001050  3C1F                     106          MOVE    (A7)+,D6        * restore the bitmask to its previous state
00001052                           107  
00001052                           108          *MOVE.B  #14,D0          * Print a newline
00001052                           109          *TRAP    #15             * Perform Trap #14
00001052                           110  
00001052  BA4A                     111          CMP     A2,D5           * Compare the starting address to ending address
00001054  6700 2FC6                112          BEQ     END             * If they are equal, branch 
00001058  60E0                     113          BRA     LOOP            * Otherwise, branch back to LOOP
0000105A                           114  
0000105A                           115  * --- OP 0000 ------------------------------------------
0000105A                           116  * FUNCTIONS     BCLR, ORI, CMPI
0000105A                           117  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask. 
0000105A                           118  * ADDR REG        
0000105A                           119  * POST COND     All registers return to their previous state.
0000105A                           120  * ------------------------------------------------------
0000105A                           121  OP0000
0000105A  48A7 C0C0                122          MOVEM   D0-D1/A0-A1,-(A7)   * Push values to the stack to save
0000105E  3C3C 0006                123          MOVE.W  #6, D6              * Prep lower value for bitmask
00001062  3E3C 0008                124          MOVE.W  #8, D7              * Prep upper value for bitmask
00001066  6100 069C                125          BSR     BITMASK             * Finalize bitmask setup
0000106A  CC42                     126          AND     D2,D6               * Apply bitmask
0000106C                           127          
0000106C  0C46 0180                128          CMPI    #%0000000110000000, D6  * Are we BCLR?
00001070  6600 0012                129          BNE     NOTBCLR                 * If not, branch to other OP0000 functions
00001074                           130          
00001074  43F9 00001766            131          LEA     BCLROP,A1           * We found BCLR
0000107A  103C 000E                132          MOVE.B  #14,D0              * Trap #14 prints out the data
0000107E  4E4F                     133          TRAP    #15                 * Perform Trap #14
00001080  6000 0276                134          BRA     DONE              * Found the op, move to next iteration
00001084                           135  
00001084                           136  NOTBCLR * Possible options left are ORI or CMPI
00001084  3C3C 0009                137          MOVE.W  #9, D6              * Prep lower value for bitmask
00001088  3E3C 000B                138          MOVE.W  #11, D7             * Prep upper value for bitmask
0000108C  6100 0676                139          BSR     BITMASK             * Finalize bitmask setup
00001090  CC42                     140          AND     D2,D6               * Apply bitmask
00001092                           141          
00001092  0C46 0000                142          CMPI    #%0000000000000000, D6  * Are we ORI?
00001096  6700 000E                143          BEQ     ISORI                   * If ORI, branch to ISORI
0000109A                           144          
0000109A  0C46 0C00                145          CMPI    #%0000110000000000, D6  * Hmm... Maybe we're CMPI?
0000109E  6700 0006                146          BEQ     ISCMPI                  * If CMPI, branch to ISCMPI
000010A2                           147          
000010A2  6600 0636                148          BNE     UNKNOWNOP               * Otherwise, this op is an imposter. 
000010A6                           149                                          * We don't deal too kindly with imposters.
000010A6                           150          
000010A6                           151  ISORI   * TODO
000010A6                           152          
000010A6                           153  
000010A6                           154  ISCMPI
000010A6  43F9 0000176F            155          LEA     CMPIOP, A1          * Load 'CMPI' into the output window
000010AC  103C 000E                156          MOVE.B  #14,D0              * Trap #14 prints out the data in D0
000010B0  4E4F                     157          TRAP    #15                 * Perform Trap #14
000010B2                           158          
000010B2                           159          * Determine the Size
000010B2  3C3C 0006                160          MOVE.W  #6, D6              * Prep lower value for bitmask
000010B6  3E3C 0007                161          MOVE.W  #7, D7              * Prep upper value for bitmask
000010BA  6100 0648                162          BSR     BITMASK             * Finalize bitmask setup
000010BE  CC42                     163          AND     D2,D6               * Apply bitmask
000010C0                           164          
000010C0  0C46 00C0                165          CMPI    #%0000000011000000, D6  * Imposter Op
000010C4  6700 0614                166          BEQ     UNKNOWNOP               * Deal with the imposter
000010C8                           167          
000010C8  0C46 0000                168          CMPI    #%0000000000000000, D6  * The size is a BYTE
000010CC  6700 0012                169          BEQ     CMPIBYTE                * Branch to CMPI.B
000010D0                           170          
000010D0  0C46 0040                171          CMPI    #%0000000001000000, D6  * The size is a WORD
000010D4  6700 0032                172          BEQ     CMPIWORD                * Branch to CMPI.W
000010D8                           173          
000010D8  0C46 0080                174          CMPI    #%0000000010000000, D6  * The size is a LONG
000010DC  6700 0050                175          BEQ     CMPILONG                * Branch to CMPI.L
000010E0                           176          
000010E0                           177  CMPIBYTE
000010E0  43F9 0000178C            178          LEA     __B, A1     * Load .B
000010E6  103C 000E                179          MOVE.B  #14, D0     * Print out data
000010EA  4E4F                     180          TRAP    #15         * Perform Trap #14
000010EC                           181          
000010EC  43F9 00001780            182          LEA     IMD, A1     * Load #
000010F2  103C 000E                183          MOVE.B  #14, D0     * Print out data
000010F6  4E4F                     184          TRAP    #15         * Perform Trap #14
000010F8                           185          
000010F8  361A                     186          MOVE.W  (A2)+,D3    * Advance a word forward to get the value.
000010FA  1203                     187          MOVE.B  D3,D1       * Move the lower byte from D3 into D1
000010FC  3622                     188          MOVE.W  -(A2),D3    * Now go back
000010FE  103C 000E                189          MOVE.B  #14, D0     * Print out the data
00001102  4E4F                     190          TRAP    #15         * Perform Trap #14 
00001104                           191          
00001104  6000 004E                192          BRA     CMPIEA      * Branch to determine Effective Address
00001108                           193          
00001108                           194  CMPIWORD
00001108  43F9 00001790            195          LEA     __W, A1     * Load .W
0000110E  103C 000E                196          MOVE.B  #14, D0     * Print out data
00001112  4E4F                     197          TRAP    #15         * Perform Trap #14
00001114                           198          
00001114  43F9 00001780            199          LEA     IMD, A1     * Load #
0000111A  103C 000E                200          MOVE.B  #14, D0     * Print out data
0000111E  4E4F                     201          TRAP    #15         * Perform Trap #14
00001120                           202          
00001120  361A                     203          MOVE.W  (A2)+,D3    * Advance a word forward to get the value.
00001122  3222                     204          MOVE.W  -(A2),D1    * Copy the immediate Value into D1, then go back
00001124  103C 000E                205          MOVE.B  #14, D0     * Print out the data
00001128  4E4F                     206          TRAP    #15         * Perform Trap #14
0000112A                           207          
0000112A                           208          
0000112A  6000 0028                209          BRA     CMPIEA      * Branch to determine Effective Address
0000112E                           210          
0000112E                           211  CMPILONG
0000112E  43F9 00001794            212          LEA     __L, A1     * Load .L
00001134  103C 000E                213          MOVE.B  #14, D0     * Print out data
00001138  4E4F                     214          TRAP    #15         * Perform Trap #14
0000113A                           215          
0000113A  43F9 00001780            216          LEA     IMD, A1     * Load #
00001140  103C 000E                217          MOVE.B  #14, D0     * Print out data
00001144  4E4F                     218          TRAP    #15         * Perform Trap #14
00001146                           219          
00001146  361A                     220          MOVE.W  (A2)+,D3    * Advance a word forward to get the value.
00001148  2222                     221          MOVE.L  -(A2),D1    * Copy the immediate value (long) into D1, then go back
0000114A  103C 000E                222          MOVE.B  #14, D0     * Print out the data
0000114E  4E4F                     223          TRAP    #15         * Perform Trap #14
00001150                           224          
00001150  6000 0002                225          BRA     CMPIEA      * Branch to determine Effective Address
00001154                           226          
00001154                           227  CMPIEA
00001154                           228          * So far the buffer is CMPI.X #Y ... Now we need to add a comma
00001154  43F9 00001782            229          LEA     COMMA, A1   * Load ,
0000115A  103C 000E                230          MOVE.B  #14, D0     * Print out data
0000115E  4E4F                     231          TRAP    #15         * Perform Trap #14
00001160                           232          
00001160  43F9 00001794            233          LEA     __L, A1     * Load .L
00001166  103C 000E                234          MOVE.B  #14, D0     * Print out data
0000116A  4E4F                     235          TRAP    #15         * Perform Trap #14
0000116C                           236          
0000116C                           237          * Determine the mode
0000116C  3C3C 0003                238          MOVE.W  #3, D6              * Prep lower value for bitmask
00001170  3E3C 0005                239          MOVE.W  #5, D7              * Prep upper value for bitmask
00001174  6100 058E                240          BSR     BITMASK             * Finalize bitmask setup
00001178  CC42                     241          AND     D2,D6               * Apply bitmask
0000117A                           242          
0000117A  0C46 0008                243          CMPI    #%0000000000001000, D6  * Is the Mode 001, an unsupported mode for CMPI?
0000117E  6700 055A                244          BEQ     UNKNOWNOP               * Imposter op
00001182                           245          
00001182  0C46 0028                246          CMPI    #%0000000000101000, D6  * Is the Mode 101, an unsupported mode?
00001186  6700 0552                247          BEQ     UNKNOWNOP               * Imposter op
0000118A                           248          
0000118A  0C46 0030                249          CMPI    #%0000000000110000, D6  * Is the Mode 110, an unsupported mode?
0000118E  6700 054A                250          BEQ     UNKNOWNOP               * Imposter op
00001192                           251  
00001192  0C46 0038                252          CMPI    #%0000000000111000, D6  * Is the Mode 111?
00001196  6700 0008                253          BEQ     CMPIREG                 * Further investigation is needed
0000119A                           254          
0000119A                           255          * will need to call the EA helpers when they are complete
0000119A                           256          
0000119A                           257          * Mode is verified to be valid at this point
0000119A                           258          *CMPI    #%0000000000000000, D6  * AMode = Dn, Reg = Dn
0000119A                           259          *BSR     MODE_DN
0000119A                           260          
0000119A                           261          *CMPI    #%0000000000010000, D6  * AMode = (An), Reg = An
0000119A                           262          *BSR     MODE_AN
0000119A                           263          
0000119A                           264          *CMPI    #%0000000000011000, D6  * AMode = (An)+, Reg = An
0000119A                           265          *BSR     MODE_IAN_POS
0000119A                           266          
0000119A                           267          *CMPI    #%0000000000000000, D6  * AMode = -(An), Reg = An
0000119A                           268          *BSR     MODE_IAN_PRE
0000119A                           269          
0000119A                           270          * Reached End of CMPI. Everything has been printed out
0000119A  4C9F 0303                271          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
0000119E  4E75                     272          RTS
000011A0                           273          
000011A0                           274  CMPIREG
000011A0  3C3C 0000                275          MOVE.W  #0, D6              * Prep lower value for bitmask
000011A4  3E3C 0002                276          MOVE.W  #2, D7              * Prep upper value for bitmask
000011A8  6100 055A                277          BSR     BITMASK             * Finalize bitmask setup
000011AC  CC42                     278          AND     D2,D6               * Apply bitmask
000011AE                           279          
000011AE  0C46 0000                280          CMPI    #%0000000000000000, D6  * Is the Register 000?
000011B2  6700 000A                281          BEQ     CMPIREG000
000011B6                           282          
000011B6  0C46 0001                283          CMPI    #%0000000000000001, D6  * Is the Register 001?
000011BA  6700 0002                284          BEQ     CMPIREG001
000011BE                           285            
000011BE                           286  
000011BE                           287  CMPIREG000  * TODO (xxx).W for CMPI
000011BE                           288  
000011BE                           289  CMPIREG001  * TODO (xxx).L for CMPI
000011BE                           290          
000011BE                           291  
000011BE                           292  
000011BE                           293  * --- OP 0001 ------------------------------------------
000011BE                           294  * FUNCTIONS     MOVE.B
000011BE                           295  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000011BE                           296  * ADDR REG        
000011BE                           297  * POST COND     All registers return to their previous state.
000011BE                           298  * ------------------------------------------------------
000011BE                           299  OP0001  
000011BE                           300  
000011BE                           301  
000011BE                           302  
000011BE                           303  
000011BE                           304  * --- OP 0010 ------------------------------------------
000011BE                           305  * FUNCTIONS     MOVE.L, MOVEA.L,
000011BE                           306  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000011BE                           307  * ADDR REG        
000011BE                           308  * POST COND     All registers return to their previous state.
000011BE                           309  * ------------------------------------------------------
000011BE                           310  OP0010  
000011BE                           311  
000011BE                           312  
000011BE                           313  * --- OP 0011 ------------------------------------------
000011BE                           314  * FUNCTIONS     MOVE.W, MOVEA.W
000011BE                           315  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000011BE                           316  * ADDR REG        
000011BE                           317  * POST COND     All registers return to their previous state.
000011BE                           318  * ------------------------------------------------------
000011BE                           319  OP0011
000011BE  48A7 FFFE                320      MOVEM   D0-D7/A0-A6, -(A7)
000011C2                           321      
000011C2  3C3C 0006                322      MOVE.W  #6,D6
000011C6  3E3C 0008                323      MOVE.W  #8,D7
000011CA                           324      
000011CA  6100 0538                325      BSR     BITMASK
000011CE                           326      
000011CE  CC42                     327      AND.W   D2,D6
000011D0                           328      
000011D0  BC7C 0040                329      CMP     #%0000000001000000,D6
000011D4                           330      *BNE     NEXT15
000011D4  61FE                     331      BSR     * for MOVEA.W
000011D6                           332  
000011D6                           333  
000011D6                           334  * --- OP 0100 ------------------------------------------
000011D6                           335  * FUNCTIONS     NO_OP, MOVEM, LEA, NEG, JSR, RTS
000011D6                           336  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000011D6                           337  * ADDR REG        
000011D6                           338  * POST COND     All registers return to their previous state.
000011D6                           339  * ------------------------------------------------------
000011D6                           340  OP0100  * TODO: lea, movem, neg?
000011D6                           341  
000011D6  48A7 C0C0                342          MOVEM   D0-D1/A0-A1,-(A7) * Push values to the stack to save
000011DA                           343          
000011DA                           344          *NOP
000011DA  0C42 4E71                345          CMPI    #%0100111001110001,D2
000011DE  6600 0012                346          BNE     NOTNOP
000011E2                           347          
000011E2  43F9 0000174B            348          LEA     NOOPERATION,A1
000011E8  103C 000D                349          MOVE.B  #13,D0          * Print a newline
000011EC  4E4F                     350          TRAP    #15
000011EE                           351          
000011EE  6000 0108                352          BRA     DONE *we found it, move on to the next iteration
000011F2                           353  NOTNOP *NEG
000011F2                           354          
000011F2                           355          * prep values for BITMASK subroutine
000011F2  7C08                     356          MOVE.L  #8,D6
000011F4  7E0B                     357          MOVE.L  #11,D7
000011F6                           358          
000011F6  6100 050C                359          BSR     BITMASK
000011FA                           360          
000011FA  CC42                     361          AND     D2,D6                   * apply bitmask
000011FC                           362          
000011FC  0C46 0400                363          CMPI    #%0000010000000000,D6   * are we NEG?
00001200  6600 0046                364          BNE     NOTNEG                  * not neg
00001204                           365          
00001204  7C03                     366          MOVE.L  #3,D6
00001206  7E05                     367          MOVE.L  #5,D7
00001208                           368          
00001208  6100 04FA                369          BSR     BITMASK * generate a bitmask to be used to check mode
0000120C                           370          
0000120C  0C46 0008                371          CMPI    #%0000000000001000,D6 * check to see if it is the unsupported mode
00001210  6700 00E2                372          BEQ     UNKNOWN * if it is, print print out as hex indicating bad op
00001214                           373          
00001214  0C46 0028                374          CMPI    #%0000000000101000,D6 * check to see if it is the unsupported mode
00001218  6700 00DA                375          BEQ     UNKNOWN * if it is, print print out as hex indicating bad op
0000121C                           376          
0000121C  0C46 0030                377          CMPI    #%0000000000110000,D6 * check to see if it is the unsupported mode
00001220  6700 00D2                378          BEQ     UNKNOWN * if it is, print print out as hex indicating bad op
00001224                           379        
00001224                           380          * it is NEG, print
00001224  43F9 0000174F            381          LEA     NEGOP,A1
0000122A  103C 000E                382          MOVE.B  #14,D0
0000122E  4E4F                     383          TRAP    #15
00001230                           384          
00001230  6100 03E2                385          BSR     SIZE67
00001234                           386          
00001234  6100 00CA                387          BSR     EAHELPER05
00001238                           388          
00001238  43F9 00001748            389          LEA     NEWLINE,A1
0000123E  103C 000E                390          MOVE.B  #14,D0
00001242  4E4F                     391          TRAP    #15
00001244                           392          
00001244  6000 00B2                393          BRA     DONE * we found the op, move to next iteration
00001248                           394          
00001248                           395  NOTNEG *MOVEM
00001248                           396  
00001248                           397          * prep values for BITMASK subroutine
00001248  7C07                     398          MOVE.L  #7,D6
0000124A  7E09                     399          MOVE.L  #9,D7
0000124C                           400          
0000124C  6100 04B6                401          BSR     BITMASK
00001250                           402          
00001250  CC42                     403          AND     D2,D6   * apply bitmask
00001252                           404          
00001252  0C46 0080                405          CMPI    #%0000000010000000,D6 * is it MOVEM?
00001256  6600 0014                406          BNE     NOTMOVEM          * it is not MOVEM
0000125A                           407          
0000125A                           408          * make sure it is a valid size and mode for MOVEM
0000125A                           409          
0000125A                           410          * it is MOVEM
0000125A  43F9 00001753            411          LEA     MOVEMOP,A1
00001260  103C 000D                412          MOVE.B  #13,D0          * Print a newline
00001264  4E4F                     413          TRAP    #15
00001266                           414          
00001266                           415          * probably needs its own special code for printing the rest due to uniqueness of movem
00001266                           416          
00001266  341A                     417          MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
00001268                           418          
00001268  6000 008E                419          BRA     DONE          * we found and printed, move on to the next iteration
0000126C                           420          
0000126C                           421  NOTMOVEM *JSR
0000126C                           422          * prep values for BITMASK subroutine
0000126C  7C06                     423          MOVE.L  #6,D6
0000126E  7E08                     424          MOVE.L  #8,D7
00001270                           425          
00001270  6100 0492                426          BSR     BITMASK
00001274                           427          
00001274  CC42                     428          AND     D2,D6   * apply bitmask
00001276                           429          
00001276  0C46 0080                430          CMPI    #%0000000010000000,D6
0000127A  6600 0032                431          BNE     NOTJSR          * it's not JSR
0000127E                           432          
0000127E  43F9 00001759            433          LEA     JSROP,A1
00001284  103C 000E                434          MOVE.B  #14,D0          * Print a newline and JSR
00001288  4E4F                     435          TRAP    #15
0000128A                           436          
0000128A                           437          * print out where we are jumping to
0000128A                           438          
0000128A  341A                     439          MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
0000128C                           440          
0000128C  2202                     441          MOVE.L  D2,D1   * save the opcode to print
0000128E                           442          
0000128E  7410                     443          MOVE.L  #16,D2  * set the base to 16
00001290                           444          
00001290  700F                     445          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
00001292  4E4F                     446          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
00001294                           447          
00001294  341A                     448          MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
00001296                           449          
00001296  2202                     450          MOVE.L  D2,D1   * save the opcode to print
00001298                           451          
00001298  7410                     452          MOVE.L  #16,D2  * set the base to 16
0000129A                           453          
0000129A  700F                     454          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
0000129C  4E4F                     455          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
0000129E                           456          
0000129E  43F9 00001748            457          LEA     NEWLINE,A1
000012A4  103C 000E                458          MOVE.B  #14,D0          * Print a newline
000012A8  4E4F                     459          TRAP    #15
000012AA                           460          
000012AA  6000 004C                461          BRA     DONE          * we already found instruction, next iteration
000012AE                           462  NOTJSR *RTS
000012AE                           463  
000012AE                           464          * prep values for BITMASK subroutine
000012AE  7C06                     465          MOVE.L  #6,D6
000012B0  7E08                     466          MOVE.L  #8,D7
000012B2                           467          
000012B2  6100 0450                468          BSR     BITMASK
000012B6                           469          
000012B6  CC42                     470          AND     D2,D6   * apply bitmask
000012B8                           471          
000012B8  0C46 0040                472          CMPI    #%0000000001000000,D6
000012BC  6600 0012                473          BNE     NOTRTS          * it's not RTS
000012C0                           474          
000012C0  43F9 0000175E            475          LEA     RTSOP,A1
000012C6  103C 000D                476          MOVE.B  #13,D0          * Print a newline and RTS
000012CA  4E4F                     477          TRAP    #15
000012CC                           478          
000012CC  6000 002A                479          BRA     DONE          * we already found instruction, next iteration
000012D0                           480  NOTRTS  *LEA
000012D0                           481         
000012D0                           482          * prep values for BITMASK subroutine
000012D0  7C06                     483          MOVE.L  #6,D6
000012D2  7E08                     484          MOVE.L  #8,D7
000012D4                           485          
000012D4  6100 042E                486          BSR     BITMASK
000012D8                           487          
000012D8  CC42                     488          AND     D2,D6   * apply bitmask
000012DA                           489          
000012DA  0C46 01C0                490          CMPI    #%0000000111000000,D6
000012DE  6600 0014                491          BNE     UNKNOWN          * it's not LEA, we dont know what it is
000012E2                           492          
000012E2                           493          * check to make sure it is a supported mode and size
000012E2                           494          
000012E2  43F9 00001762            495          LEA     LEAOP,A1
000012E8  103C 000D                496          MOVE.B  #13,D0          * Print LEA
000012EC  4E4F                     497          TRAP    #15
000012EE                           498          
000012EE                           499          * call EA helper
000012EE  341A                     500          MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
000012F0                           501                  
000012F0  6000 0006                502          BRA     DONE          * we already found instruction, next iteration
000012F4                           503          
000012F4                           504  UNKNOWN *dont know what it is
000012F4  6100 03E4                505          BSR     UNKNOWNOP
000012F8                           506          
000012F8                           507  DONE
000012F8  4C9F 0303                508          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
000012FC  6000 FD52                509          BRA     ITERATION
00001300                           510          
00001300                           511          
00001300                           512          
00001300                           513  
00001300                           514  * --- OP 0101 ------------------------------------------
00001300                           515  * FUNCTIONS     SUBQ
00001300                           516  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001300                           517  * ADDR REG        
00001300                           518  * POST COND     All registers return to their previous state.
00001300                           519  * ------------------------------------------------------
00001300                           520  OP0101
00001300                           521  * testing branching
00001300                           522  * op op op
00001300                           523  
00001300                           524  
00001300                           525  
00001300                           526  * --- OP 0110 ------------------------------------------
00001300                           527  * FUNCTIONS     BCC, BCS, BGE, BLT, BVC, BRA
00001300                           528  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001300                           529  * ADDR REG        
00001300                           530  * POST COND     All registers return to their previous state.
00001300                           531  * ------------------------------------------------------
00001300                           532  OP0110
00001300                           533  
00001300                           534  
00001300                           535  
00001300                           536  
00001300                           537  * --- OP 0111 ------------------------------------------
00001300                           538  * FUNCTIONS     
00001300                           539  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001300                           540  * ADDR REG        
00001300                           541  * POST COND     All registers return to their previous state.
00001300                           542  * ------------------------------------------------------
00001300                           543  OP0111
00001300                           544  
00001300                           545  
00001300                           546  
00001300                           547  * --- OP 1000 ------------------------------------------
00001300                           548  * FUNCTIONS     DIVS, OR
00001300                           549  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001300                           550  * ADDR REG        
00001300                           551  * POST COND     All registers return to their previous state.
00001300                           552  * ------------------------------------------------------
00001300                           553  OP1000
00001300                           554  
00001300                           555  
00001300                           556  
00001300                           557  * --- OP 1001 ------------------------------------------
00001300                           558  * FUNCTIONS     SUB
00001300                           559  * DATA REG      D0, D1 for output. D2 for entire instruction. D6 for bitmask.
00001300                           560  * ADDR REG        
00001300                           561  * POST COND     All registers return to their previous state.
00001300                           562  * ------------------------------------------------------
00001300                           563  OP1001
00001300                           564  
00001300                           565  
00001300                           566  
00001300                           567  * --- OP 1010 ------------------------------------------
00001300                           568  * FUNCTIONS     
00001300                           569  * DATA REG      D0, D1 for output. D2 for entire instruction. D6 for bitmask.
00001300                           570  * ADDR REG        
00001300                           571  * POST COND     All registers return to their previous state.
00001300                           572  * ------------------------------------------------------
00001300                           573  OP1010
00001300                           574  
00001300                           575  
00001300                           576  * --- OP 1011 ------------------------------------------
00001300                           577  * FUNCTIONS     EOR, CMP 
00001300                           578  * DATA REG      D0, D1 for output. D2 for entire opcode. D6 for bitmask.
00001300                           579  * ADDR REG        
00001300                           580  * POST COND     All registers return to their previous state.
00001300                           581  * ------------------------------------------------------
00001300                           582  OP1011
00001300                           583  
00001300                           584  
00001300                           585  * --- OP 1100 ------------------------------------------
00001300                           586  * FUNCTIONS     MULS
00001300                           587  * DATA REG      D0, D1 for output. D2 for entire opcode. D6 for bitmask.
00001300                           588  * ADDR REG        
00001300                           589  * POST COND     All registers return to their previous state.
00001300                           590  * ------------------------------------------------------
00001300                           591  OP1100
00001300                           592  
00001300                           593  
00001300                           594  
00001300                           595  * --- OP 1101 ------------------------------------------
00001300                           596  * FUNCTIONS     ADD, ADDA,
00001300                           597  * DATA REG      D0, D1 for output. D2 for entire opcode. D6 for bitmask.
00001300                           598  * ADDR REG        
00001300                           599  * POST COND     All registers return to their previous state.
00001300                           600  * ------------------------------------------------------
00001300                           601  OP1101
00001300                           602  
00001300                           603  
00001300                           604  
00001300                           605  * --- OP 1110 ------------------------------------------
00001300                           606  * FUNCTIONS     LSL, LSR, ASL, ASR, ROL, ROR, 
00001300                           607  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001300                           608  * ADDR REG        
00001300                           609  * POST COND     All registers return to their previous state.
00001300                           610  * ------------------------------------------------------
00001300                           611  OP1110
00001300                           612  
00001300                           613  
00001300                           614  
00001300                           615  
00001300                           616  * --- OP 1111 ------------------------------------------
00001300                           617  * FUNCTIONS     
00001300                           618  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001300                           619  * ADDR REG        
00001300                           620  * POST COND     All registers return to their previous state.
00001300                           621  * ------------------------------------------------------
00001300                           622  OP1111
00001300                           623  
00001300                           624  * --- EAHELPER05 ----------------------------------------
00001300                           625  * PRE  COND     D2 contains the instruction we wish to 
00001300                           626  *               print the modes, registers for.
00001300                           627  *               Only call this helper for operations that only
00001300                           628  *               have one mode, register.
00001300                           629  * POST COND     Determines mode, passes D2 to REGHELPER to print
00001300                           630  * ------------------------------------------------------
00001300                           631  *todo: add code for printing immediate values
00001300                           632  EAHELPER05
00001300                           633      
00001300  48A7 FFC0                634      MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001304                           635      
00001304  7C03                     636      MOVE.L  #3,D6
00001306  7E05                     637      MOVE.L  #5,D7
00001308                           638      
00001308  6100 03FA                639      BSR     BITMASK * generate a bitmask to identify the mode
0000130C                           640      
0000130C  CC42                     641      AND     D2,D6   * mask off the parts of D2 we don't need
0000130E                           642      
0000130E  2A06                     643      MOVE.L  D6,D5   * store the 3-5 bitmask for later use
00001310                           644      
00001310  0C46 0000                645      CMPI    #%0000000000000000,D6 * is it data register direct?
00001314  6600 000A                646      BNE     NOTDATAREG
00001318                           647      
00001318  6100 00FA                648      BSR     MODE_DN
0000131C                           649       
0000131C  6000 00F0                650      BRA     ENDEAHELPER05
00001320                           651      
00001320                           652  NOTDATAREG * address register direct
00001320                           653  
00001320  2C05                     654      MOVE.L  D5,D6   * reload the bitmask into D6
00001322                           655      
00001322  CC42                     656      AND     D2,D6   * mask off the parts of D2 we don't need
00001324                           657      
00001324  0C46 0008                658      CMPI    #%0000000000001000,D6 * is it address register direct?
00001328  6600 000A                659      BNE     NOTADRDIRECT
0000132C                           660      
0000132C  6100 01E6                661      BSR     MODE_AN * simply prints out the address register
00001330                           662       
00001330  6000 00DC                663      BRA     ENDEAHELPER05
00001334                           664      
00001334                           665  NOTADRDIRECT * address register indirect
00001334                           666          
00001334  2C05                     667      MOVE.L  D5,D6   * reload the bitmask into D6
00001336                           668      
00001336  CC42                     669      AND     D2,D6   * mask off the parts of D2 we don't need
00001338                           670      
00001338  0C46 0010                671      CMPI    #%0000000000010000,D6 * is it address register indirect?
0000133C  6600 0022                672      BNE     NOTADRINDIRECT
00001340                           673      
00001340  43F9 00001784            674      LEA     OBRACK,A1       * Load '('
00001346  303C 000E                675      MOVE.W  #14,D0          * Trap #14 to display message
0000134A  4E4F                     676      TRAP    #15             * Perform #14
0000134C                           677          
0000134C                           678  
0000134C  6100 01C6                679      BSR     MODE_AN * print out an address register
00001350                           680      
00001350  43F9 00001786            681      LEA     CBRACK,A1       * Load ')'
00001356  303C 000E                682      MOVE.W  #14,D0          * Trap #14 to display message
0000135A  4E4F                     683      TRAP    #15             * Perform #14
0000135C                           684       
0000135C  6000 00B0                685      BRA     ENDEAHELPER05
00001360                           686      
00001360                           687  NOTADRINDIRECT * address register indirect, post increment
00001360                           688              
00001360  2C05                     689      MOVE.L  D5,D6   * reload the bitmask into D6
00001362                           690      
00001362  CC42                     691      AND     D2,D6   * mask off the parts of D2 we don't need
00001364                           692      
00001364  0C46 0018                693      CMPI    #%0000000000011000,D6 * is it address register indirect post increment?
00001368  6600 002E                694      BNE     NOTADRINDIRECTPOST
0000136C                           695      
0000136C  43F9 00001784            696      LEA     OBRACK,A1       * Load '('
00001372  303C 000E                697      MOVE.W  #14,D0          * Trap #14 to display message
00001376  4E4F                     698      TRAP    #15             * Perform #14
00001378                           699          
00001378                           700  
00001378  6100 019A                701      BSR     MODE_AN * print out an address register
0000137C                           702      
0000137C  43F9 00001786            703      LEA     CBRACK,A1       * Load ')'
00001382  303C 000E                704      MOVE.W  #14,D0          * Trap #14 to display message
00001386  4E4F                     705      TRAP    #15             * Perform #14
00001388                           706      
00001388  43F9 00001788            707      LEA     PLUS,A1       * Load '+'
0000138E  303C 000E                708      MOVE.W  #14,D0          * Trap #14 to display message
00001392  4E4F                     709      TRAP    #15             * Perform #14
00001394                           710       
00001394  6000 0078                711      BRA     ENDEAHELPER05
00001398                           712      
00001398                           713  NOTADRINDIRECTPOST * address register indirect, pre decrement
00001398                           714  
00001398  2C05                     715      MOVE.L  D5,D6   * reload the bitmask into D6
0000139A                           716      
0000139A  CC42                     717      AND     D2,D6   * mask off the parts of D2 we don't need
0000139C                           718      
0000139C  0C46 0020                719      CMPI    #%0000000000100000,D6 * is it address register indirect pre decrement?
000013A0  6600 002E                720      BNE     NOTADRINDIRECTPRE
000013A4                           721      
000013A4  43F9 0000178A            722      LEA     MINUS,A1       * Load '-'
000013AA  303C 000E                723      MOVE.W  #14,D0          * Trap #14 to display message
000013AE  4E4F                     724      TRAP    #15             * Perform #14
000013B0                           725      
000013B0  43F9 00001784            726      LEA     OBRACK,A1       * Load '('
000013B6  303C 000E                727      MOVE.W  #14,D0          * Trap #14 to display message
000013BA  4E4F                     728      TRAP    #15             * Perform #14
000013BC                           729          
000013BC                           730  
000013BC  6100 0156                731      BSR     MODE_AN * print out an address register
000013C0                           732      
000013C0  43F9 00001786            733      LEA     CBRACK,A1       * Load ')'
000013C6  303C 000E                734      MOVE.W  #14,D0          * Trap #14 to display message
000013CA  4E4F                     735      TRAP    #15             * Perform #14
000013CC                           736       
000013CC  6000 0040                737      BRA     ENDEAHELPER05
000013D0                           738      
000013D0                           739  NOTADRINDIRECTPRE * immediate
000013D0                           740      
000013D0  2C05                     741      MOVE.L  D5,D6   * reload the bitmask into D6
000013D2                           742      
000013D2  CC42                     743      AND     D2,D6   * mask off the parts of D2 we don't need
000013D4                           744      
000013D4  0C46 0038                745      CMPI    #%0000000000111000,D6 * is it immediate?
000013D8  6600 0030                746      BNE     NOTIMMEDIATE
000013DC                           747  
000013DC  3C3C 0006                748      MOVE.W  #6, D6              * Prep lower value for bitmask
000013E0  3E3C 0007                749      MOVE.W  #7, D7              * Prep upper value for bitmask
000013E4  6100 031E                750      BSR     BITMASK             * Finalize bitmask setup
000013E8  CC42                     751      AND     D2,D6               * Apply bitmask  
000013EA                           752  
000013EA  43F9 00001780            753      LEA     IMD,A1 *print out the '#' indicating an immediate value
000013F0  103C 000E                754      MOVE.B  #14,D0
000013F4  4E4F                     755      TRAP    #15
000013F6                           756          
000013F6  341A                     757      MOVE.W  (A2)+,D2
000013F8                           758      
000013F8  3202                     759      MOVE.W  D2,D1
000013FA                           760      
000013FA  343C 0010                761      MOVE.W  #16,D2
000013FE                           762          
000013FE  103C 000F                763      MOVE.B  #15,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001402  4E4F                     764      TRAP    #15      * Perform Trap #3
00001404                           765  
00001404  3403                     766      MOVE.W  D3,D2
00001406                           767      
00001406  6000 0006                768      BRA     ENDEAHELPER05
0000140A                           769      
0000140A                           770  NOTIMMEDIATE * if none of the previous cases are true, it is a mode not supported by our decompiler
0000140A                           771  
0000140A  6100 02CE                772      BSR     UNKNOWNOP
0000140E                           773      
0000140E                           774  ENDEAHELPER05
0000140E  4C9F 03FF                775      MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001412  4E75                     776      RTS
00001414                           777  
00001414                           778  * --- Effective Address --------------------------------
00001414                           779  * PURPOSE       To generalize the EA part of the project.
00001414                           780  * PRE CON       The Mode must have been correctly identified. All Modes must be called by RTS
00001414                           781  * POST CON      After the EA, the entire op will head back to the BSR that called it.
00001414                           782  * ------------------------------------------------------    
00001414                           783  
00001414                           784  * --- Dn ---------------------------------------------------------    
00001414                           785  MODE_DN
00001414  48A7 FFC0                786          MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001418                           787  
00001418  3C3C 0000                788          MOVE.W  #0, D6              * Prep lower value for bitmask
0000141C  3E3C 0002                789          MOVE.W  #2, D7              * Prep upper value for bitmask
00001420  6100 02E2                790          BSR     BITMASK             * Finalize bitmask setup
00001424  CC42                     791          AND     D2,D6               * Apply bitmask
00001426                           792          
00001426  0C46 0000                793          CMPI    #%000000000000000, D6   * Data Register D0?
0000142A  6600 000A                794          BNE     NOTD0
0000142E                           795          
0000142E  6100 0074                796          BSR     PRINTD0
00001432  6000 006A                797          BRA     ENDMODE_DN
00001436                           798  NOTD0      
00001436  0C46 0001                799          CMPI    #%000000000000001, D6   * Data Register D1?
0000143A  6600 000A                800          BNE     NOTD1
0000143E                           801          
0000143E  6100 0072                802          BSR     PRINTD1
00001442  6000 005A                803          BRA     ENDMODE_DN
00001446                           804  NOTD1
00001446  0C46 0002                805          CMPI    #%000000000000010, D6   * Data Register D2?
0000144A  6600 000A                806          BNE     NOTD2
0000144E                           807          
0000144E  6100 0070                808          BSR     PRINTD2
00001452  6000 004A                809          BRA     ENDMODE_DN
00001456                           810  NOTD2
00001456  0C46 0003                811          CMPI    #%000000000000011, D6   * Data Register D3?
0000145A  6600 000A                812          BNE     NOTD3
0000145E                           813          
0000145E  6100 006E                814          BSR     PRINTD3
00001462  6000 003A                815          BRA     ENDMODE_DN
00001466                           816  NOTD3
00001466  0C46 0004                817          CMPI    #%000000000000100, D6   * Data Register D4?
0000146A  6600 000A                818          BNE     NOTD4
0000146E                           819          
0000146E  6100 006C                820          BSR     PRINTD4
00001472  6000 002A                821          BRA     ENDMODE_DN
00001476                           822  NOTD4
00001476  0C46 0005                823          CMPI    #%000000000000101, D6   * Data Register D5?
0000147A  6600 000A                824          BNE     NOTD5
0000147E                           825          
0000147E  6100 006A                826          BSR     PRINTD5
00001482  6000 001A                827          BRA     ENDMODE_DN
00001486                           828  NOTD5
00001486  0C46 0006                829          CMPI    #%000000000000110, D6   * Data Register D6?
0000148A  6600 000A                830          BNE     NOTD6
0000148E                           831          
0000148E  6100 0068                832          BSR     PRINTD6
00001492  6000 000A                833          BRA     ENDMODE_DN
00001496                           834  NOTD6
00001496  6100 006E                835          BSR     PRINTD7
0000149A  6000 0002                836          BRA     ENDMODE_DN
0000149E                           837          
0000149E                           838  ENDMODE_DN
0000149E  4C9F 03FF                839          MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
000014A2  4E75                     840          RTS
000014A4                           841  
000014A4                           842  *--- PRINTD0 ---------------------------------------
000014A4                           843  *   Simply prints D0|D1...|D7
000014A4                           844  *---------------------------------------------------
000014A4                           845  PRINTD0
000014A4  43F9 000017B0            846          LEA     __D0, A1        * Load 'D0'
000014AA  103C 000E                847          MOVE.B  #14, D0         * Load Trap #14 to print out
000014AE  4E4F                     848          TRAP    #15             * Perform Trap #14
000014B0  4E75                     849          RTS
000014B2                           850  PRINTD1
000014B2  43F9 000017B3            851          LEA     __D1, A1        * Load 'D1'
000014B8  103C 000E                852          MOVE.B  #14, D0         * Load Trap #14 to print out
000014BC  4E4F                     853          TRAP    #15             * Perform Trap #14
000014BE  4E75                     854          RTS      
000014C0                           855  PRINTD2
000014C0  43F9 000017B6            856          LEA     __D2, A1        * Load 'D2'
000014C6  103C 000E                857          MOVE.B  #14, D0         * Load Trap #14 to print out
000014CA  4E4F                     858          TRAP    #15             * Perform Trap #14
000014CC  4E75                     859          RTS      
000014CE                           860  PRINTD3
000014CE  43F9 000017B9            861          LEA     __D3, A1        * Load 'D3'
000014D4  103C 000E                862          MOVE.B  #14, D0         * Load Trap #14 to print out
000014D8  4E4F                     863          TRAP    #15             * Perform Trap #14
000014DA  4E75                     864          RTS      
000014DC                           865  PRINTD4
000014DC  43F9 000017BC            866          LEA     __D4, A1        * Load 'D4'
000014E2  103C 000E                867          MOVE.B  #14, D0         * Load Trap #14 to print out
000014E6  4E4F                     868          TRAP    #15             * Perform Trap #14
000014E8  4E75                     869          RTS       
000014EA                           870  PRINTD5
000014EA  43F9 000017BF            871          LEA     __D5, A1        * Load 'D5'
000014F0  103C 000E                872          MOVE.B  #14, D0         * Load Trap #14 to print out
000014F4  4E4F                     873          TRAP    #15             * Perform Trap #14
000014F6  4E75                     874          RTS      
000014F8                           875  PRINTD6
000014F8  43F9 000017C2            876          LEA     __D6, A1        * Load 'D6'
000014FE  103C 000E                877          MOVE.B  #14, D0         * Load Trap #14 to print out
00001502  4E4F                     878          TRAP    #15             * Perform Trap #14
00001504  4E75                     879          RTS
00001506                           880  PRINTD7
00001506  43F9 000017C5            881          LEA     __D7, A1        * Load 'D7'
0000150C  103C 000E                882          MOVE.B  #14, D0         * Load Trap #14 to print out
00001510  4E4F                     883          TRAP    #15             * Perform Trap #14
00001512  4E75                     884          RTS
00001514                           885  
00001514                           886  * --- MODE_AN ----------------------------------------------------
00001514                           887  *   Simply chooses to print A0-A7
00001514                           888  * ----------------------------------------------------------------
00001514                           889  MODE_AN
00001514  48A7 FFC0                890          MOVEM   D0-D7/A0-A1,-(A7)   * Save information
00001518                           891  
00001518  3C3C 0000                892          MOVE.W  #0, D6              * Prep lower value for bitmask
0000151C  3E3C 0002                893          MOVE.W  #2, D7              * Prep upper value for bitmask
00001520  6100 01E2                894          BSR     BITMASK             * Finalize bitmask setup
00001524  CC42                     895          AND     D2,D6               * Apply bitmask
00001526                           896          
00001526  0C46 0000                897          CMPI    #%000000000000000, D6   * Address Register A0?
0000152A  6600 000A                898          BNE     NOTA0
0000152E                           899          
0000152E  6100 0074                900          BSR     PRINTA0
00001532                           901          
00001532  6000 006A                902          BRA     ENDMODE_AN
00001536                           903  NOTA0      
00001536  0C46 0001                904          CMPI    #%000000000000001, D6   * Address Register A1?
0000153A  6600 000A                905          BNE     NOTA1
0000153E                           906          
0000153E  6100 0072                907          BSR     PRINTA1
00001542                           908          
00001542  6000 005A                909          BRA     ENDMODE_AN
00001546                           910  NOTA1
00001546  0C46 0002                911          CMPI    #%000000000000010, D6   * Address Register A2?
0000154A  6600 000A                912          BNE     NOTA2
0000154E                           913          
0000154E  6100 0070                914          BSR     PRINTA2
00001552                           915          
00001552  6000 004A                916          BRA     ENDMODE_AN
00001556                           917  NOTA2
00001556  0C46 0003                918          CMPI    #%000000000000011, D6   * Address Register A3?
0000155A  6600 000A                919          BNE     NOTA3
0000155E                           920          
0000155E  6100 006E                921          BSR     PRINTA3
00001562                           922          
00001562  6000 003A                923          BRA     ENDMODE_AN
00001566                           924  NOTA3
00001566  0C46 0004                925          CMPI    #%000000000000100, D6   * Address Register A4?
0000156A  6600 000A                926          BNE     NOTA4
0000156E                           927          
0000156E  6100 006C                928          BSR     PRINTA4
00001572                           929          
00001572  6000 002A                930          BRA     ENDMODE_AN
00001576                           931  NOTA4
00001576  0C46 0005                932          CMPI    #%000000000000101, D6   * Address Register A5?
0000157A  6600 000A                933          BNE     NOTA5
0000157E                           934          
0000157E  6100 006A                935          BSR     PRINTA5
00001582                           936          
00001582  6000 001A                937          BRA     ENDMODE_AN
00001586                           938  NOTA5
00001586  0C46 0006                939          CMPI    #%000000000000110, D6   * Address Register A6?
0000158A  6600 000A                940          BNE     NOTA6
0000158E                           941          
0000158E  6100 0068                942          BSR     PRINTA6
00001592                           943          
00001592  6000 000A                944          BRA     ENDMODE_AN
00001596                           945  NOTA6
00001596  6100 006E                946          BSR     PRINTA7
0000159A                           947          
0000159A  6000 0002                948          BRA     ENDMODE_AN
0000159E                           949  ENDMODE_AN
0000159E  4C9F 03FF                950          MOVEM   (A7)+,D0-D7/A0-A1   * Restore registers
000015A2  4E75                     951          RTS
000015A4                           952          
000015A4                           953  * --- Printing out Address Registers -------------------------
000015A4                           954  *   Simply print out the address register
000015A4                           955  * ------------------------------------------------------------
000015A4                           956  PRINTA0
000015A4  43F9 00001798            957          LEA     __A0, A1        * Load 'A0'
000015AA  103C 000E                958          MOVE.B  #14, D0         * Load Trap #14 to print out
000015AE  4E4F                     959          TRAP    #15             * Perform Trap #14
000015B0  4E75                     960          RTS
000015B2                           961  
000015B2                           962  PRINTA1
000015B2  43F9 0000179B            963          LEA     __A1, A1        * Load 'A1'
000015B8  103C 000E                964          MOVE.B  #14, D0         * Load Trap #14 to print out
000015BC  4E4F                     965          TRAP    #15             * Perform Trap #14
000015BE  4E75                     966          RTS
000015C0                           967          
000015C0                           968  PRINTA2
000015C0  43F9 0000179E            969          LEA     __A2, A1        * Load 'A2'
000015C6  103C 000E                970          MOVE.B  #14, D0         * Load Trap #14 to print out
000015CA  4E4F                     971          TRAP    #15             * Perform Trap #14
000015CC  4E75                     972          RTS
000015CE                           973  
000015CE                           974  PRINTA3
000015CE  43F9 000017A1            975          LEA     __A3, A1        * Load 'A3'
000015D4  103C 000E                976          MOVE.B  #14, D0         * Load Trap #14 to print out
000015D8  4E4F                     977          TRAP    #15             * Perform Trap #14
000015DA  4E75                     978          RTS
000015DC                           979  
000015DC                           980  PRINTA4
000015DC  43F9 000017A4            981          LEA     __A4, A1        * Load 'A4'
000015E2  103C 000E                982          MOVE.B  #14, D0         * Load Trap #14 to print out
000015E6  4E4F                     983          TRAP    #15             * Perform Trap #14
000015E8  4E75                     984          RTS
000015EA                           985  
000015EA                           986  PRINTA5
000015EA  43F9 000017A7            987          LEA     __A5, A1        * Load 'A5'
000015F0  103C 000E                988          MOVE.B  #14, D0         * Load Trap #14 to print out
000015F4  4E4F                     989          TRAP    #15             * Perform Trap #14
000015F6  4E75                     990          RTS
000015F8                           991  
000015F8                           992  PRINTA6
000015F8  43F9 000017AA            993          LEA     __A6, A1        * Load 'A6'
000015FE  103C 000E                994          MOVE.B  #14, D0         * Load Trap #14 to print out
00001602  4E4F                     995          TRAP    #15             * Perform Trap #14
00001604  4E75                     996          RTS
00001606                           997  
00001606                           998  PRINTA7
00001606  43F9 000017AD            999          LEA     __A7, A1        * Load 'A7'
0000160C  103C 000E               1000          MOVE.B  #14, D0         * Load Trap #14 to print out
00001610  4E4F                    1001          TRAP    #15             * Perform Trap #14
00001612  4E75                    1002          RTS
00001614                          1003  *--- SIZE67 ---------------------------------------
00001614                          1004  *   Called if the size is stored in bits 6->7
00001614                          1005  *---------------------------------------------------
00001614                          1006          
00001614                          1007  SIZE67  * If the size is stored in bits 6->7
00001614  48A7 FFFE               1008          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
00001618  3C3C 0006               1009          MOVE.W  #6, D6              * Prep lower value for bitmask
0000161C  3E3C 0007               1010          MOVE.W  #7, D7              * Prep upper value for bitmask
00001620  6100 00E2               1011          BSR     BITMASK             * Finalize bitmask setup
00001624  CC42                    1012          AND     D2,D6               * Apply bitmask     
00001626                          1013  
00001626  0C46 0000               1014          CMPI    #%0000000000000000, D6   * is it a BYTE?
0000162A  6600 000A               1015          BNE     NOT67BYTE
0000162E                          1016          
0000162E  6100 0080               1017          BSR     PRINTBYTE               * Branch to handle BYTE sizes
00001632  6000 001E               1018          BRA     END67
00001636                          1019  NOT67BYTE        
00001636  0C46 0040               1020          CMPI    #%0000000001000000, D6   * is it a WORD?
0000163A  6600 000A               1021          BNE     NOT67WORD
0000163E                          1022          
0000163E  6100 007E               1023          BSR     PRINTWORD               * Branch to handle WORD sizes
00001642  6000 000E               1024          BRA     END67
00001646                          1025  NOT67WORD
00001646  0C46 0080               1026          CMPI    #%0000000010000000, D6   * is it a LONG?
0000164A  6600 0006               1027          BNE     END67
0000164E                          1028          
0000164E  6100 007C               1029          BSR     PRINTLONG               * Branch to handle LONG sizes
00001652                          1030  END67
00001652  4C9F 7FFF               1031          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
00001656  4E75                    1032          RTS                             * Return. Size handling is finished.
00001658                          1033  
00001658                          1034  * finish later, need to follow the same format as SIZE67        
00001658                          1035  SIZE68  * If the size is stored in bits 6->8 
00001658  48A7 FFFE               1036          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
0000165C  3C3C 0006               1037          MOVE.W  #6, D6              * Prep lower value for bitmask
00001660  3E3C 0008               1038          MOVE.W  #8, D7              * Prep upper value for bitmask
00001664  6100 009E               1039          BSR     BITMASK             * Finalize bitmask setup
00001668  CC42                    1040          AND     D2,D6               * Apply bitmask          
0000166A                          1041          
0000166A  0C46 0000               1042          CMPI    #%0000000000000000, D6   * is it a BYTE?
0000166E  6100 0040               1043          BSR     PRINTBYTE               * Branch to handle BYTE sizes
00001672  0C46 0100               1044          CMPI    #%0000000100000000, D6   * is it a BYTE?
00001676  6100 0038               1045          BSR     PRINTBYTE               * Branch to handle BYTE sizes 
0000167A                          1046        
0000167A  0C46 0040               1047          CMPI    #%0000000001000000, D6   * is it a WORD?
0000167E  6100 003E               1048          BSR     PRINTWORD               * Branch to handle BYTE sizes
00001682  0C46 0140               1049          CMPI    #%0000000101000000, D6   * is it a WORD?
00001686  6100 0036               1050          BSR     PRINTWORD               * Branch to handle BYTE sizes
0000168A  0C46 00C0               1051          CMPI    #%0000000011000000, D6   * is it a WORD (ADDA)?
0000168E  6100 002E               1052          BSR     PRINTWORD               * Branch to handle BYTE sizes
00001692                          1053  
00001692  0C46 0080               1054          CMPI    #%0000000010000000, D6   * is it a LONG?
00001696  6100 0034               1055          BSR     PRINTLONG               * Branch to handle BYTE sizes
0000169A  0C46 0180               1056          CMPI    #%0000000110000000, D6   * is it a LONG?
0000169E  6100 002C               1057          BSR     PRINTLONG               * Branch to handle BYTE sizes
000016A2  0C46 01C0               1058          CMPI    #%0000000111000000, D6   * is it a LONG (ADDA)?
000016A6  6100 0024               1059          BSR     PRINTLONG               * Branch to handle BYTE sizes
000016AA                          1060  
000016AA  4C9F 7FFF               1061          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
000016AE  4E75                    1062          RTS                             * Return. Size handling is finished.              
000016B0                          1063          
000016B0                          1064  PRINTBYTE
000016B0  43F9 0000178C           1065          LEA     __B,A1      * Load '.B ' into A1
000016B6  103C 000E               1066          MOVE.B  #14,D0      * Trap #14 setup to print
000016BA  4E4F                    1067          TRAP    #15         * Perform Trap #14
000016BC  4E75                    1068          RTS                 * Return to SIZE67/SIZE68
000016BE                          1069          
000016BE                          1070  PRINTWORD
000016BE  43F9 00001790           1071          LEA     __W,A1      * Load '.W ' into A1
000016C4  103C 000E               1072          MOVE.B  #14,D0      * Trap #14 setup to print
000016C8  4E4F                    1073          TRAP    #15         * Perform Trap #14
000016CA  4E75                    1074          RTS                 * Return to SIZE67/SIZE68
000016CC                          1075  
000016CC                          1076  PRINTLONG
000016CC  43F9 00001794           1077          LEA     __L,A1      * Load '.L ' into A1
000016D2  103C 000E               1078          MOVE.B  #14,D0      * Trap #14 setup to print
000016D6  4E4F                    1079          TRAP    #15         * Perform Trap #14
000016D8  4E75                    1080          RTS                 * Return to SIZE67/SIZE68
000016DA                          1081  
000016DA                          1082  * --- UNKNOWNOP ----------------------------------------
000016DA                          1083  * PRE  COND     D2 contains the instruction we wish to print.
000016DA                          1084  *               D2 has already been identified as an unknown operation
000016DA                          1085  * 
000016DA                          1086  * POST COND     D2 is no longer the opcode
000016DA                          1087  * ------------------------------------------------------
000016DA                          1088     
000016DA                          1089  UNKNOWNOP
000016DA  220A                    1090          MOVE.L  A2,D1   * prep the add to print
000016DC                          1091          
000016DC  5581                    1092          SUB.L   #2,D1   * off by two error due to post increment correct
000016DE                          1093          
000016DE  2602                    1094          MOVE.L  D2,D3   * save the opcode to print
000016E0                          1095          
000016E0  7410                    1096          MOVE.L  #16,D2  * set the base to 16
000016E2                          1097          
000016E2  700F                    1098          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000016E4  4E4F                    1099          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000016E6                          1100          
000016E6  43F9 00001774           1101          LEA     DATA,A1 * load " DATA $" into register A1
000016EC  700E                    1102          MOVE.L  #14,D0  * print the string stored in A1
000016EE  4E4F                    1103          TRAP    #15
000016F0                          1104          
000016F0  2203                    1105          MOVE.L  D3,D1   * move the opcode from D3 into D1 to print
000016F2                          1106          
000016F2  103C 000F               1107          MOVE.B  #15,D0   * Indicate we are using trap #15, 15 to in a certain #base
000016F6  4E4F                    1108          TRAP    #15      * Perform Trap #3
000016F8                          1109          
000016F8  43F9 00001748           1110          LEA     NEWLINE,A1 * load newline into register A1
000016FE  700E                    1111          MOVE.L  #14,D0  * print the string stored in A1
00001700  4E4F                    1112          TRAP    #15
00001702                          1113          
00001702  4E75                    1114          RTS
00001704                          1115          *BRA     ITERATION * done with this op, move on to the next iteration
00001704                          1116  
00001704                          1117   * --- BITMASK ----------------------------------------------------------------
00001704                          1118   *@pre      D6 contains the starting bit you want masked, D7 the ending bit
00001704                          1119   *
00001704                          1120   *@post     D6 contains the bitmask, ready for use
00001704                          1121   
00001704                          1122  BITMASK
00001704  3F05                    1123          MOVE    D5,-(A7)    * push D5 onto the stack so we can use it to
00001706  4245                    1124          CLR     D5          * clear D5 so we can use it
00001708                          1125  LOOPBIT 
00001708  0DC5                    1126          BSET    D6,D5       * set the D6th bit in D5 to 1
0000170A  5246                    1127          ADD     #1,D6       * increment D6
0000170C                          1128          
0000170C  BC47                    1129          CMP     D7,D6       * have we finished?
0000170E  6E00 0004               1130          BGT     BITMASKDONE * yes
00001712  60F4                    1131          BRA     LOOPBIT     * no, iterate again
00001714                          1132          
00001714                          1133  BITMASKDONE
00001714                          1134  
00001714  2C05                    1135          MOVE.L  D5,D6
00001716  3A1F                    1136          MOVE    (A7)+,D5    * restore D5
00001718  4E75                    1137          RTS
0000171A                          1138          
0000171A                          1139   * --- OP0100 -----------------------------------------------------------------
0000171A                          1140   * @pre      D2 contains the opcode
0000171A                          1141   *
0000171A                          1142   * @post     all registers are returned to their previous state
0000171A                          1143  
0000171A                          1144  
0000171A                          1145  
0000171A                          1146   * ----------------------------------------------------------------------------
0000171A                          1147   * ----------------------------------------------------------------------------
0000171A                          1148   * Constants for printing information to the console
0000171A                          1149  
0000171A  =0000000D               1150  CR      EQU     $0D
0000171A  =0000000A               1151  LF      EQU     $0A
0000171A= 45 4E 54 45 52 20 ...   1152  MSGSTART    DC.B    'ENTER START ADDRESS: ',CR,LF,0
00001732= 45 4E 54 45 52 20 ...   1153  MSGEND      DC.B    'ENTER END ADDRESS: ',CR,LF,0
00001748= 0D 0A 00                1154  NEWLINE     DC.B    CR,LF,0
0000174B= 4E 4F 50 00             1155  NOOPERATION DC.B    'NOP',0
0000174F= 4E 45 47 00             1156  NEGOP       DC.B    'NEG',0
00001753= 4D 4F 56 45 4D 00       1157  MOVEMOP     DC.B    'MOVEM',0
00001759= 4A 53 52 20 00          1158  JSROP       DC.B    'JSR ',0
0000175E= 52 54 53 00             1159  RTSOP       DC.B    'RTS',0
00001762= 4C 45 41 00             1160  LEAOP       DC.B    'LEA',0
00001766= 42 43 4C 52 00          1161  BCLROP      DC.B    'BCLR',0
0000176B= 4F 52 49 00             1162  ORIOP       DC.B    'ORI',0
0000176F= 43 4D 50 49 00          1163  CMPIOP      DC.B    'CMPI',0
00001774= 20 44 41 54 41 20 ...   1164  DATA        DC.B    ' DATA $',0
0000177C                          1165  
0000177C                          1166   * ----------------------------------------------------------------------------
0000177C                          1167   * ----------------------------------------------------------------------------
0000177C                          1168   * Data defined constants
0000177C                          1169   *   - B/W/L (representing Byte, Word, Long)
0000177C                          1170   *   - A0-A7 (representing the 8 address registers)
0000177C                          1171   *   - D0-D7 (representing the 8 data registers)
0000177C                          1172   * ----------------------------------------------------------------------------
0000177C                          1173  
0000177C= 20 00                   1174  SPACE       DC.B    ' ',0
0000177E= 24 00                   1175  DOLLAR      DC.B    '$',0
00001780= 23 00                   1176  IMD         DC.B    '#',0
00001782= 2C 00                   1177  COMMA       DC.B    ',',0
00001784= 28 00                   1178  OBRACK      DC.B    '(',0
00001786= 29 00                   1179  CBRACK      DC.B    ')',0
00001788= 2B 00                   1180  PLUS        DC.B    '+',0
0000178A= 2D 00                   1181  MINUS       DC.B    '-',0
0000178C= 2E 42 20 00             1182  __B         DC.B    '.B ',0
00001790= 2E 57 20 00             1183  __W         DC.B    '.W ',0
00001794= 2E 4C 20 00             1184  __L         DC.B    '.L ',0
00001798                          1185  
00001798= 41 30 00                1186  __A0        DC.B   'A0',0
0000179B= 41 31 00                1187  __A1        DC.B   'A1',0    
0000179E= 41 32 00                1188  __A2        DC.B   'A2',0
000017A1= 41 33 00                1189  __A3        DC.B   'A3',0
000017A4= 41 34 00                1190  __A4        DC.B   'A4',0
000017A7= 41 35 00                1191  __A5        DC.B   'A5',0
000017AA= 41 36 00                1192  __A6        DC.B   'A6',0
000017AD= 41 37 00                1193  __A7        DC.B   'A7',0
000017B0                          1194  
000017B0= 44 30 00                1195  __D0        DC.B   'D0',0
000017B3= 44 31 00                1196  __D1        DC.B   'D1',0
000017B6= 44 32 00                1197  __D2        DC.B   'D2',0
000017B9= 44 33 00                1198  __D3        DC.B   'D3',0
000017BC= 44 34 00                1199  __D4        DC.B   'D4',0
000017BF= 44 35 00                1200  __D5        DC.B   'D5',0
000017C2= 44 36 00                1201  __D6        DC.B   'D6',0
000017C5= 44 37 00                1202  __D7        DC.B   'D7',0
000017C8                          1203   * ---------------------------------------------------------------------------
000017C8                          1204   * End of definition segment
000017C8                          1205   * ---------------------------------------------------------------------------
000017C8                          1206   * ---------------------------------------------------------------------------
000017C8                          1207  
000017C8                          1208  * Put variables and constants here
000017C8                          1209  
00004000                          1210      ORG $4000
00004000                          1211  
00004000  4E71                    1212      NOP
00004002  103C 009A               1213      MOVE.B   #%10011010, D0
00004006  123C 00A9               1214      MOVE.B   #%10101001, D1
0000400A  D200                    1215      ADD.B    D0,D1
0000400C  48A7 4000               1216      MOVEM    D1,-(A7)
00004010  43F8 1759               1217      LEA      JSROP,A1
00004014  4467                    1218      NEG.W    -(A7)
00004016  4EB9 0000401C           1219      JSR      END
0000401C                          1220  
0000401C                          1221  END
0000401C  4E75                    1222      RTS
0000401E                          1223  RLLYEND
0000401E                          1224      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BCLROP              1766
BITMASK             1704
BITMASKDONE         1714
CBRACK              1786
CMPIBYTE            10E0
CMPIEA              1154
CMPILONG            112E
CMPIOP              176F
CMPIREG             11A0
CMPIREG000          11BE
CMPIREG001          11BE
CMPIWORD            1108
COMMA               1782
CR                  D
DATA                1774
DOLLAR              177E
DONE                12F8
EAHELPER05          1300
END                 401C
END67               1652
ENDEAHELPER05       140E
ENDMODE_AN          159E
ENDMODE_DN          149E
IMD                 1780
ISCMPI              10A6
ISORI               10A6
ITERATION           1050
JSROP               1759
LEAOP               1762
LF                  A
LOOP                103A
LOOPBIT             1708
MINUS               178A
MODE_AN             1514
MODE_DN             1414
MOVEMOP             1753
MSGEND              1732
MSGSTART            171A
NEGOP               174F
NEWLINE             1748
NEXT                104C
NOOPERATION         174B
NOT67BYTE           1636
NOT67WORD           1646
NOTA0               1536
NOTA1               1546
NOTA2               1556
NOTA3               1566
NOTA4               1576
NOTA5               1586
NOTA6               1596
NOTADRDIRECT        1334
NOTADRINDIRECT      1360
NOTADRINDIRECTPOST  1398
NOTADRINDIRECTPRE   13D0
NOTBCLR             1084
NOTD0               1436
NOTD1               1446
NOTD2               1456
NOTD3               1466
NOTD4               1476
NOTD5               1486
NOTD6               1496
NOTDATAREG          1320
NOTIMMEDIATE        140A
NOTJSR              12AE
NOTMOVEM            126C
NOTNEG              1248
NOTNOP              11F2
NOTRTS              12D0
OBRACK              1784
OP0000              105A
OP0001              11BE
OP0010              11BE
OP0011              11BE
OP0100              11D6
OP0101              1300
OP0110              1300
OP0111              1300
OP1000              1300
OP1001              1300
OP1010              1300
OP1011              1300
OP1100              1300
OP1101              1300
OP1110              1300
OP1111              1300
OP_0000             0
OP_0001             1000
OP_0010             2000
OP_0011             3000
OP_0100             4000
OP_0101             5000
OP_0110             6000
OP_0111             7000
OP_1000             8000
OP_1001             9000
OP_1010             A000
OP_1011             B000
OP_1100             C000
OP_1101             D000
OP_1110             E000
OP_1111             F000
ORIOP               176B
PLUS                1788
PRINTA0             15A4
PRINTA1             15B2
PRINTA2             15C0
PRINTA3             15CE
PRINTA4             15DC
PRINTA5             15EA
PRINTA6             15F8
PRINTA7             1606
PRINTBYTE           16B0
PRINTD0             14A4
PRINTD1             14B2
PRINTD2             14C0
PRINTD3             14CE
PRINTD4             14DC
PRINTD5             14EA
PRINTD6             14F8
PRINTD7             1506
PRINTLONG           16CC
PRINTWORD           16BE
RLLYEND             401E
RTSOP               175E
SIZE67              1614
SIZE68              1658
SPACE               177C
START               1000
UNKNOWN             12F4
UNKNOWNOP           16DA
__A0                1798
__A1                179B
__A2                179E
__A3                17A1
__A4                17A4
__A5                17A7
__A6                17AA
__A7                17AD
__B                 178C
__D0                17B0
__D1                17B3
__D2                17B6
__D3                17B9
__D4                17BC
__D5                17BF
__D6                17C2
__D7                17C5
__L                 1794
__W                 1790
