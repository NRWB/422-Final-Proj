00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/11/2014 9:18:38 PM

00000000                             1  *    666
00000000                             2  *   66 66
00000000                             3  *  66   66
00000000                             4  *  66   66         8888
00000000                             5  *  66   66       88   kkkk
00000000                             6  *  66  66       8   88   kk      
00000000                             7  *   66  6      8  88  kkk  kk    
00000000                             8  *    66  6    8  88     kk  k
00000000                             9  *     66 66  88 88        kk
00000000                            10  *     6 _______ 8
00000000                            11  *    6    68k    8
00000000                            12  *   6_____PRO_____8
00000000                            13  *  6               8        68k is as easy as
00000000                            14  *  6    0     0    8        6 - 8 - k !
00000000                            15  *  6   /   V   \   8 
00000000                            16  *  6   \__/ \__/   8        Welcome to our Dissasembler, Professor Nash!
00000000                            17  *    6            8         Enjoy your stay!
00000000                            18  *      6        8      
00000000                            19  *        666888
00000000                            20  *  _____                   __    ___  _    
00000000                            21  * | ____|__ _ ___ _   _   / /_  ( _ )| | __
00000000                            22  * |  _| / _` / __| | | | | '_ \ / _ \| |/ /
00000000                            23  * | |__| (_| \__ \ |_| | | (_) | (_) |   < 
00000000                            24  * |_____\__,_|___/\__, |  \___/ \___/|_|\_\
00000000                            25  *                 |___/           
00000000                            26  *-----------------------------------------------------------
00000000                            27  * Title      : 68K Decompiler
00000000                            28  * Written by : Nick Bell, Sammy Nimnuch, Caleb Larson
00000000                            29  * Date       : 11/2014
00000000                            30  * Description: This program decompiles other 68K programs
00000000                            31  *              which are loaded into the simulator simultaneously.
00000000                            32  *-----------------------------------------------------------
00000000                            33  
00000000                            34  
00000000  =00000000                 35  OP_0000     EQU     %0000000000000000
00000000  =00001000                 36  OP_0001     EQU     %0001000000000000
00000000  =00002000                 37  OP_0010     EQU     %0010000000000000
00000000  =00003000                 38  OP_0011     EQU     %0011000000000000
00000000  =00004000                 39  OP_0100     EQU     %0100000000000000
00000000  =00005000                 40  OP_0101     EQU     %0101000000000000
00000000  =00006000                 41  OP_0110     EQU     %0110000000000000
00000000  =00007000                 42  OP_0111     EQU     %0111000000000000
00000000  =00008000                 43  OP_1000     EQU     %1000000000000000
00000000  =00009000                 44  OP_1001     EQU     %1001000000000000
00000000  =0000A000                 45  OP_1010     EQU     %1010000000000000
00000000  =0000B000                 46  OP_1011     EQU     %1011000000000000
00000000  =0000C000                 47  OP_1100     EQU     %1100000000000000
00000000  =0000D000                 48  OP_1101     EQU     %1101000000000000
00000000  =0000E000                 49  OP_1110     EQU     %1110000000000000
00000000  =0000F000                 50  OP_1111     EQU     %1111000000000000
00000000  =0000000F                 51  HEX_VALUE_MASK_LONG EQU     $0000000F  * mask a hex value in 32-bits
00000000                            52  
00000000                            53  * BITMASK     EQU     $F000       * used to bitmask the first nibble
00000000                            54  
00001000                            55  START:  ORG    $1000            * first instruction of program
00001000                            56  
00001000                            57  * -----------------------------------
00001000                            58  * Starting and Ending Addresses
00001000                            59  * -----------------------------------
00001000                            60  *-----------------------------------------------------------------------------
00001000                            61  *-----------------------------------------------------------------------------
00001000                            62  * NAME: x
00001000                            63  * DESCRIPTION:    a
00001000                            64  * PRE-CONDITION:  b
00001000                            65  * POST-CONDITION: c
00001000                            66  * REGISTERS:      d
00001000                            67  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001000                            68  
00001000                            69  * THINK ABOUT ASKING FOR VALID START/END NO NEGATIVE ADDR
00001000                            70  
00001000                            71  * LOAD MSGSTART, ASK FOR INPUT
00001000  43F9 00002698             72          LEA     MSGSTART,A1     * Load MESSAGE START
00001006  103C 000E                 73          MOVE.B  #14,D0          * Trap #14 to display message
0000100A  4E4F                      74          TRAP    #15             * Perform #14
0000100C                            75          
0000100C                            76  * GETS THE STARTING ADDRESS
0000100C  103C 0004                 77          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001010  4E4F                      78          TRAP    #15             * Perform #15
00001012                            79          
00001012                            80  * MOVE IT TO ANOTHER ADDRESS REGISTER
00001012  2441                      81          MOVEA.L D1,A2           * Move the user input into A2. This is the starting address.
00001014                            82  
00001014                            83  * LOAD MSGSTART, ASK FOR INPUT
00001014  43F9 000026B0             84          LEA     MSGEND,A1       * Load MESSAGE END
0000101A  303C 000E                 85          MOVE.W  #14,D0          * Trap #14 to display message
0000101E  4E4F                      86          TRAP    #15             * Perform #14
00001020                            87          
00001020                            88  * GETS THE ENDING ADDRESS
00001020  103C 0004                 89          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001024  4E4F                      90          TRAP    #15             * Perform Trap #4
00001026  2A01                      91          MOVE.L  D1,D5           * Move the ending address into D5
00001028  43F9 000026EB             92          LEA     NEWLINE,A1      * Store newline variable for seper opcodes
0000102E                            93          
0000102E  3E3C 000F                 94          MOVE.W  #15,D7          * prep D7 for bitmask subroutine
00001032  3C3C 000C                 95          MOVE.W  #12,D6          * prep D6 for bitmask subroutine
00001036  6100 164A                 96          BSR     BITMASK         * obtain a bitmask that goes from 12-15 (inclusive)
0000103A                            97          * MOVE.W  D6,D2           * move the bitmask to D2
0000103A                            98          
0000103A  4279 000027EE             99          CLR     (__COUNTER)              * setup the counter
00001040  33FC 0000 000027EE       100          MOVE    #0,(__COUNTER)           
00001048                           101          
00001048  6100 0164                102          BSR     CLEAR_SCREEN    * clear the prompt for start/end ADDR's
0000104C                           103  LOOP    
0000104C  2C4A                     104          MOVE.L  A2,A6
0000104E  7608                     105          MOVE.L  #8,D3
00001050  6100 13F0                106          BSR     PRINT_ASCII_HEX_CHAR
00001054                           107          
00001054                           108          *MOVE.W  A2,D1           * print what address we are processing
00001054                           109          *MOVE.B  #3,D0
00001054                           110          *TRAP    #15
00001054                           111          
00001054  43F9 0000279E            112          LEA     SPACE,A1        * print a space to seperate the address from the data
0000105A  303C 000E                113          MOVE.W  #14,D0
0000105E  4E4F                     114          TRAP    #15
00001060                           115  
00001060  3F06                     116          MOVE    D6,-(A7)        * save the bitmask on the stack
00001062  341A                     117          MOVE.W  (A2)+,D2        * Read an operation into D2
00001064  CC42                     118          AND.W   D2,D6           * Apply this bitmask
00001066                           119          
00001066  BC7C 0000                120          CMP     #OP_0000,D6     * Does the operation start with 0000?
0000106A  6600 000A                121          BNE     NOT0000         * No, check next case
0000106E  6100 014A                122          BSR     OP0000          * Branch to subroutine 0000
00001072  6000 00F6                123          BRA     ITERATION       * Move to next iteration of the loop
00001076                           124  NOT0000        
00001076  BC7C 1000                125          CMP     #OP_0001,D6     * Does the operation start with 0001?
0000107A  6600 000A                126          BNE     NOT0001         * No, check next case
0000107E  6100 02C4                127          BSR     OP0001          * Branch to subroutine 0001
00001082  6000 00E6                128          BRA     ITERATION       * Move to next iteration of the loop
00001086                           129  NOT0001
00001086  BC7C 2000                130          CMP     #OP_0010,D6     * Does the operation start with 0010?
0000108A  6600 000A                131          BNE     NOT0010         * No, check next case
0000108E  6100 0326                132          BSR     OP0010          * Branch to subroutine 0010
00001092  6000 00D6                133          BRA     ITERATION       * Move to next iteration of the loop
00001096                           134  NOT0010
00001096  BC7C 3000                135          CMP     #OP_0011,D6     * Does the operation start with 0011?
0000109A  6600 000A                136          BNE     NOT0011         * No, check next case
0000109E  6100 0388                137          BSR     OP0011          * Branch to subroutine 0011
000010A2  6000 00C6                138          BRA     ITERATION       * Move to next iteration of the loop
000010A6                           139  NOT0011
000010A6  BC7C 4000                140          CMP     #OP_0100,D6     * Does the operation start with 0100?
000010AA  6600 000A                141          BNE     NOT0100         * No, check next case
000010AE  6100 03EA                142          BSR     OP0100          * Branch to subroutine 0100
000010B2  6000 00B6                143          BRA     ITERATION       * Move to next iteration of the loop
000010B6                           144  NOT0100
000010B6  BC7C 5000                145          CMP     #OP_0101,D6     * Does the operation start with 0101?
000010BA  6600 000A                146          BNE     NOT0101         * No, check next case
000010BE  6100 0708                147          BSR     OP0101          * Branch to subroutine 0101
000010C2  6000 00A6                148          BRA     ITERATION       * Move to next iteration of the loop
000010C6                           149  NOT0101
000010C6  BC7C 6000                150          CMP     #OP_0110,D6     * Does the operation start with 0110?
000010CA  6600 000A                151          BNE     NOT0110         * No, check next case
000010CE  6100 0766                152          BSR     OP0110          * Branch to subroutine 0110
000010D2  6000 0096                153          BRA     ITERATION       * Move to next iteration of the loop
000010D6                           154  NOT0110
000010D6  BC7C 7000                155          CMP     #OP_0111,D6     * Does the operation start with 0111?
000010DA  6600 000A                156          BNE     NOT0111         * No, check next case
000010DE  6100 081E                157          BSR     OP0111          * Branch to subroutine 0111
000010E2  6000 0086                158          BRA     ITERATION       * Move to next iteration of the loop
000010E6                           159  NOT0111
000010E6  BC7C 8000                160          CMP     #OP_1000,D6     * Does the operation start with 1000?
000010EA  6600 000A                161          BNE     NOT1000         * No, check next case
000010EE  6100 0814                162          BSR     OP1000          * Branch to subroutine 1000
000010F2  6000 0076                163          BRA     ITERATION       * Move to next iteration of the loop
000010F6                           164  NOT1000
000010F6  BC7C 9000                165          CMP     #OP_1001,D6     * Does the operation start with 1001?
000010FA  6600 000A                166          BNE     NOT1001         * No, check next case
000010FE  6100 0898                167          BSR     OP1001          * Branch to subroutine 1001
00001102  6000 0066                168          BRA     ITERATION       * Move to next iteration of the loop
00001106                           169  NOT1001
00001106  BC7C A000                170          CMP     #OP_1010,D6     * Does the operation start with 1010?
0000110A  6600 000A                171          BNE     NOT1010         * No, check next case
0000110E  6100 0888                172          BSR     OP1010          * Branch to subroutine 1010
00001112  6000 0056                173          BRA     ITERATION       * Move to next iteration of the loop
00001116                           174  NOT1010
00001116  BC7C B000                175          CMP     #OP_1011,D6     * Does the operation start with 1011?
0000111A  6600 000A                176          BNE     NOT1011         * No, check next case
0000111E  6100 087E                177          BSR     OP1011          * Branch to subroutine 1011
00001122  6000 0046                178          BRA     ITERATION       * Move to next iteration of the loop
00001126                           179  NOT1011
00001126  BC7C C000                180          CMP     #OP_1100,D6     * Does the operation start with 1100?
0000112A  6600 000A                181          BNE     NOT1100         * No, check next case
0000112E  6100 0918                182          BSR     OP1100          * Branch to subroutine 1100
00001132  6000 0036                183          BRA     ITERATION       * Move to next iteration of the loop
00001136                           184  NOT1100
00001136  BC7C D000                185          CMP     #OP_1101,D6     * Does the operation start with 1101?
0000113A  6600 000A                186          BNE     NOT1101         * No, check next case
0000113E  6100 0992                187          BSR     OP1101          * Branch to subroutine 1101
00001142  6000 0026                188          BRA     ITERATION       * Move to next iteration of the loop
00001146                           189  NOT1101
00001146  BC7C E000                190          CMP     #OP_1110,D6     * Does the operation start with 1110?
0000114A  6600 000A                191          BNE     NOT1110         * No, check next case
0000114E  6100 0B08                192          BSR     OP1110          * Branch to subroutine 1110
00001152  6000 0016                193          BRA     ITERATION       * Move to next iteration of the loop
00001156                           194  NOT1110
00001156  BC7C F000                195          CMP     #OP_1111,D6     * Does the operation start with 1111?
0000115A  6600 000A                196          BNE     LOOPUNKNOWNOP   * No, check next case
0000115E  6100 0C8E                197          BSR     OP1111          * Branch to subroutine 1111
00001162  6000 0006                198          BRA     ITERATION       * Move to next iteration of the loop
00001166                           199          
00001166                           200  LOOPUNKNOWNOP
00001166  6100 12B0                201          BSR     UNKNOWNOP
0000116A                           202          
0000116A                           203  ITERATION
0000116A  3C1F                     204          MOVE    (A7)+,D6        * restore the bitmask to its previous state
0000116C                           205      
0000116C  5279 000027EE            206          ADDI    #1,(__COUNTER)           * Track the lines on screen
00001172  0C79 001E 000027EE       207          CMPI    #30,(__COUNTER)
0000117A  6600 0006                208          BNE     END_OF_LOOP     * Not at 30, go loop more
0000117E  6100 000C                209          BSR     IDLE_STATE      * Break to idle, ask to clear screen
00001182                           210  
00001182                           211  END_OF_LOOP
00001182  BA4A                     212          CMP     A2,D5           * Compare the starting address to ending address
00001184  6700 2F18                213          BEQ     END             * If they are equal, branch 
00001188  6000 FEC2                214          BRA     LOOP            * Otherwise, branch back to LOOP
0000118C                           215  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000118C                           216  *-----------------------------------------------------------------------------
0000118C                           217  IDLE_STATE
0000118C  43F9 000026C6            218      LEA     CONT_MSG,A1 * show msg to hit enter in order to continue
00001192  103C 000E                219      MOVE.B  #14,D0
00001196  4E4F                     220      TRAP    #15
00001198                           221      
00001198  103C 0004                222      MOVE.B  #4,D0 * trap task 4 - input
0000119C  4E4F                     223      TRAP    #15
0000119E  0C41 000D                224      CMPI    #$D,D1
000011A2                           225      
000011A2  6100 000A                226      BSR     CLEAR_SCREEN * clear everything, so ready to output another 30
000011A6  42B9 000027EE            227      CLR.L   (__COUNTER)
000011AC  4E75                     228      RTS
000011AE                           229  CLEAR_SCREEN
000011AE  103C 000B                230      MOVE.B  #11,D0
000011B2  323C FF00                231      MOVE.W  #$FF00,D1
000011B6  4E4F                     232      TRAP    #15
000011B8  4E75                     233      RTS
000011BA                           234  
000011BA                           235  
000011BA                           236  *-----------------------------------------------------------------------------
000011BA                           237  *-----------------------------------------------------------------------------
000011BA                           238  * NAME: OP_0000   (BCLR, ORI, CMPI)
000011BA                           239  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000011BA                           240  * PRE-CONDITION:  xyz
000011BA                           241  * POST-CONDITION: All registers return to their previous state, and the output
000011BA                           242  *                 goes to the output console for reading the raw data or the
000011BA                           243  *                 actual instruction.
000011BA                           244  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000011BA                           245  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000011BA                           246  OP0000
000011BA  48A7 FFC0                247          MOVEM   D0-D7/A0-A1,-(A7)   * Push values to the stack to save
000011BE                           248                        
000011BE                           249          * Checking for unsupported mode (An) for BCLR, ORI, and CMPI
000011BE  3C3C 0003                250          MOVE.W  #3, D6              * Prep lower value for bitmask
000011C2  3E3C 0005                251          MOVE.W  #5, D7              * Prep upper value for bitmask
000011C6  6100 14BA                252          BSR     BITMASK             * Finalize bitmask setup
000011CA  CC42                     253          AND     D2,D6               * Apply bitmask
000011CC                           254          
000011CC  0C46 0008                255          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
000011D0  6700 0168                256          BEQ     UNKNOWN0000             * If so, the op is unknown
000011D4                           257          
000011D4                           258          * Checking for BCLR Dynamic
000011D4  3C3C 0006                259          MOVE.W  #6, D6              * Prep lower value for bitmask
000011D8  3E3C 0008                260          MOVE.W  #8, D7              * Prep upper value for bitmask
000011DC  6100 14A4                261          BSR     BITMASK             * Finalize bitmask setup
000011E0  CC42                     262          AND     D2,D6               * Apply bitmask
000011E2                           263          
000011E2  0C46 0180                264          CMPI    #%0000000110000000, D6  * Are we BCLR Dynamic?
000011E6  6600 0050                265          BNE     NOTBCLRDYNA             * If not, branch to BCLR Static or other ops
000011EA                           266  
000011EA                           267          * Confirmed BCLR Dynamic at this point
000011EA  43F9 00002725            268          LEA     BCLROP,A1           * We found BCLR
000011F0  103C 000E                269          MOVE.B  #14,D0              * Trap #14 prints out the data
000011F4  4E4F                     270          TRAP    #15                 * Perform Trap #14
000011F6                           271  
000011F6  43F9 0000279E            272          LEA     SPACE,A1            * Formatting
000011FC  103C 000E                273          MOVE.B  #14,D0              * Trap #14 prints out space
00001200  4E4F                     274          TRAP    #15                 * Perform Trap #14
00001202                           275          
00001202                           276          * Set up for printing out the Register
00001202  0882 0006                277          BCLR    #6,D2               * Clear bit 6
00001206  0882 0007                278          BCLR    #7,D2               * Clear bit 7
0000120A  0882 0008                279          BCLR    #8,D2               * Clear bit 8
0000120E                           280          
0000120E  6100 0BE4                281          BSR     EAHELPER611         * Print out Register
00001212                           282  
00001212  43F9 000027A4            283          LEA     COMMA,A1            * formatting
00001218  103C 000E                284          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000121C  4E4F                     285          TRAP    #15                 * Perform Trap #14
0000121E                           286          
0000121E  4243                     287          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
00001220  08C3 0000                288          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
00001224                           289      
00001224  6100 0C10                290          BSR     EAHELPER05          * Print out data.
00001228                           291          
00001228  43F9 000026EB            292          LEA     NEWLINE,A1          * Formatting
0000122E  103C 000E                293          MOVE.B  #14,D0              * Trap #14 prints out the data
00001232  4E4F                     294          TRAP    #15                 * Perform Trap #14
00001234                           295          
00001234  6000 0108                296          BRA     END0000             * Found the op, move to next iteration
00001238                           297          
00001238                           298  NOTBCLRDYNA     * Possible options left are BCLR Static, ORI, and CMPI
00001238  3C3C 0006                299          MOVE.W  #6, D6              * Prep lower value for bitmask
0000123C  3E3C 000B                300          MOVE.W  #11, D7             * Prep upper value for bitmask
00001240  6100 1440                301          BSR     BITMASK             * Finalize bitmask setup
00001244  CC42                     302          AND     D2,D6               * Apply bitmask
00001246                           303          
00001246  0C46 0880                304          CMPI    #%0000100010000000, D6  * Are we BCLR Static?
0000124A  6600 003A                305          BNE     NOTBCLR                 * If not, branch to other functions
0000124E                           306          
0000124E                           307          * Confirmed BCLR Static at this point
0000124E  43F9 00002725            308          LEA     BCLROP,A1           * We found BCLR
00001254  103C 000E                309          MOVE.B  #14,D0              * Trap #14 prints out the data
00001258  4E4F                     310          TRAP    #15                 * Perform Trap #14
0000125A                           311  
0000125A  43F9 0000279E            312          LEA     SPACE,A1            * Formatting
00001260  103C 000E                313          MOVE.B  #14,D0              * Trap #14 prints out space
00001264  4E4F                     314          TRAP    #15                 * Perform Trap #14
00001266                           315          
00001266  2802                     316          MOVE.L  D2, D4              * Saving values
00001268                           317                  
00001268  43F9 000027A2            318          LEA     IMD, A1             * Formatting
0000126E  103C 000E                319          MOVE.B  #14,D0              * Trap #14 prints out the data
00001272  4E4F                     320          TRAP    #15                 * Perform Trap #14
00001274                           321          
00001274                           322          * Grab next word
00001274  3A1A                     323          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
00001276  E18D                     324          LSL.L   #8, D5              * LSL for first nibble of the word
00001278  E18D                     325          LSL.L   #8, D5              * LSL for second nibble of the word
0000127A  2C45                     326          MOVE.L  D5, A6              * Store D5 into A6, to be used as parameter
0000127C  7604                     327          MOVE.L  #4, D3              * Four most significant bits in D3
0000127E  6100 11C2                328          BSR     PRINT_ASCII_HEX_CHAR    * Perform number print out
00001282                           329  
00001282  6000 007E                330          BRA     SKIPLONG            * Formatting, returning saved values, etc.
00001286                           331          
00001286                           332  NOTBCLR * Possible options left are ORI or CMPI
00001286  3C3C 0009                333          MOVE.W  #9, D6              * Prep lower value for bitmask
0000128A  3E3C 000B                334          MOVE.W  #11, D7             * Prep upper value for bitmask
0000128E  6100 13F2                335          BSR     BITMASK             * Finalize bitmask setup
00001292  CC42                     336          AND     D2,D6               * Apply bitmask
00001294                           337          
00001294  0C46 0000                338          CMPI    #%0000000000000000, D6   * Are we possibly ORI?
00001298  6600 008A                339          BNE     NOTORI                   * If not, branch to NOTORI
0000129C                           340          
0000129C                           341          * Size check to see if unsupported ORI mode
0000129C  3C3C 0006                342          MOVE.W  #6, D6              * Prep lower value for bitmask
000012A0  3E3C 0007                343          MOVE.W  #7, D7              * Prep upper value for bitmask
000012A4  6100 13DC                344          BSR     BITMASK             * Finalize bitmask setup
000012A8  CC42                     345          AND     D2,D6               * Apply bitmask
000012AA                           346          
000012AA  0C46 00C0                347          CMPI    #%0000000011000000, D6  * Are bits 6,7 == 1,1?
000012AE  6700 008A                348          BEQ     UNKNOWN0000             * If so, unknown op. 
000012B2                           349          
000012B2                           350          * Confirmed ORI at this point
000012B2  43F9 00002733            351          LEA     ORIOP, A1           * Load 'ORI' into the output window
000012B8  103C 000E                352          MOVE.B  #14,D0              * Trap #14 prints out the data in D0
000012BC  4E4F                     353          TRAP    #15                 * Perform Trap #14
000012BE                           354  
000012BE                           355  IMD_SIZE_0000        
000012BE  6100 0EBC                356          BSR     SIZE67              * Print the size
000012C2                           357  
000012C2                           358          * Mode check to see the size
000012C2  3C3C 0006                359          MOVE.W  #6, D6              * Prep lower value for bitmask
000012C6  3E3C 0007                360          MOVE.W  #7, D7              * Prep upper value for bitmask
000012CA  6100 13B6                361          BSR     BITMASK             * Finalize bitmask setup
000012CE  CC42                     362          AND     D2,D6               * Apply bitmask
000012D0                           363          
000012D0  2802                     364          MOVE.L  D2, D4              * Saving value
000012D2                           365                  
000012D2  43F9 000027A2            366          LEA     IMD, A1             * Formatting
000012D8  103C 000E                367          MOVE.B  #14,D0              * Trap #14 prints out the data
000012DC  4E4F                     368          TRAP    #15                 * Perform Trap #14
000012DE                           369                 
000012DE                           370          * Grab immediate data
000012DE  3A1A                     371          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
000012E0  E18D                     372          LSL.L   #8, D5               
000012E2  E18D                     373          LSL.L   #8, D5
000012E4  2C45                     374          MOVE.L  D5, A6
000012E6  7604                     375          MOVE.L  #4, D3
000012E8  6100 1158                376          BSR     PRINT_ASCII_HEX_CHAR
000012EC                           377  
000012EC  0C46 0080                378          CMPI    #%0000000010000000, D6   * See if the size is a LONG
000012F0  6600 0010                379          BNE     SKIPLONG    
000012F4                           380          
000012F4                           381          * Grab next word
000012F4  3A1A                     382          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
000012F6  E18D                     383          LSL.L   #8, D5              * LSL to get first nibble of the word
000012F8  E18D                     384          LSL.L   #8, D5              * LSL to get second nibble of the word
000012FA  2C45                     385          MOVE.L  D5, A6              * Store D5 into A6 as a parameter
000012FC  7604                     386          MOVE.L  #4, D3              * Move #4 into D3 to show four bits
000012FE  6100 1142                387          BSR     PRINT_ASCII_HEX_CHAR    * Perform number output
00001302                           388  
00001302                           389  SKIPLONG
00001302  43F9 000027A4            390          LEA     COMMA, A1           * Formatting
00001308  103C 000E                391          MOVE.B  #14,D0              * Trap #14 prints out the data
0000130C  4E4F                     392          TRAP    #15                 * Perform Trap #14
0000130E                           393          
0000130E  2404                     394          MOVE.L  D4, D2              * Return saved value
00001310                           395          
00001310  6100 0B24                396          BSR     EAHELPER05          * Print out the EA
00001314                           397          
00001314  43F9 000026EB            398          LEA     NEWLINE,A1          * Formatting
0000131A  103C 000E                399          MOVE.B  #14,D0              * Trap #14 prints out the data
0000131E  4E4F                     400          TRAP    #15                 * Perform Trap #14
00001320                           401          
00001320  6000 001C                402          BRA     END0000             * Done with op. Move to next iteration
00001324                           403  
00001324                           404  NOTORI  * Possible option left is CMPI
00001324                           405  
00001324  0C46 0C00                406          CMPI    #%0000110000000000, D6  * Are we CMPI?
00001328  6600 0010                407          BNE     UNKNOWN0000             * If not, unknown op
0000132C                           408          
0000132C                           409          * Confirmed CMPI at this point
0000132C  43F9 00002737            410          LEA     CMPIOP, A1          * Formatting
00001332  103C 000E                411          MOVE.B  #14,D0              * Trap #14 prints out the data
00001336  4E4F                     412          TRAP    #15                 * Perform Trap #14
00001338                           413          
00001338  6084                     414          BRA     IMD_SIZE_0000       * Get immediate value and end opcode 0000
0000133A                           415          
0000133A                           416  UNKNOWN0000
0000133A  6100 10DC                417          BSR     UNKNOWNOP          * Unknown op
0000133E                           418  
0000133E                           419  END0000          
0000133E  4C9F 03FF                420          MOVEM   (A7)+,D0-D7/A0-A1   * Push values to the stack to save
00001342  4E75                     421          RTS
00001344                           422  
00001344                           423  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001344                           424  *-----------------------------------------------------------------------------
00001344                           425  
00001344                           426  
00001344                           427  
00001344                           428  *-----------------------------------------------------------------------------
00001344                           429  *-----------------------------------------------------------------------------
00001344                           430  * NAME: OP_0001   (MOVE.B)
00001344                           431  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001344                           432  * PRE-CONDITION:  xyz
00001344                           433  * POST-CONDITION: All registers return to their previous state, and the output
00001344                           434  *                 goes to the output console for reading the raw data or the
00001344                           435  *                 actual instruction.
00001344                           436  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001344                           437  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001344                           438  OP0001  
00001344  48A7 FFC0                439          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
00001348                           440          
00001348  3C3C 0006                441          MOVE.W  #6, D6              * Prep lower value for bitmask
0000134C  3E3C 0008                442          MOVE.W  #8, D7              * Prep upper value for bitmask
00001350  6100 1330                443          BSR     BITMASK             * Finalize bitmask setup
00001354                           444          
00001354  CC42                     445          AND     D2,D6               * Apply bitmask
00001356                           446          
00001356  0C46 0040                447          CMPI    #%0000000001000000,D6
0000135A  6600 0012                448          BNE     OP0001MOVE
0000135E                           449          
0000135E  43F9 00002708            450          LEA     MOVEAOP,A1   * Put 'MOVE' into the window
00001364  103C 000E                451          MOVE.B  #14,D0      * Trap #14 to print out
00001368  4E4F                     452          TRAP    #15         * Perform Trap #14
0000136A                           453          
0000136A  6000 000E                454          BRA     OP0001MOVEA
0000136E                           455          
0000136E                           456  OP0001MOVE
0000136E                           457  
0000136E  43F9 00002703            458          LEA     MOVEOP,A1   * Put 'MOVE' into the window
00001374  103C 000E                459          MOVE.B  #14,D0      * Trap #14 to print out
00001378  4E4F                     460          TRAP    #15         * Perform Trap #14
0000137A                           461          
0000137A                           462  OP0001MOVEA
0000137A                           463  
0000137A  43F9 000027B2            464          LEA     __B,A1   * Put 'MOVE' into the window
00001380  103C 000E                465          MOVE.B  #14,D0      * Trap #14 to print out
00001384  4E4F                     466          TRAP    #15         * Perform Trap #14
00001386                           467          
00001386  7601                     468          MOVE.L  #1,D3
00001388                           469          
00001388  6100 0AAC                470          BSR     EAHELPER05
0000138C                           471          
0000138C  43F9 000027A4            472          LEA     COMMA,A1
00001392  103C 000E                473          MOVE.B  #14,D0
00001396  4E4F                     474          TRAP    #15
00001398                           475          
00001398  6100 0A5A                476          BSR     EAHELPER611
0000139C                           477          
0000139C  43F9 000026EB            478          LEA     NEWLINE,A1
000013A2  103C 000E                479          MOVE.B  #14,D0
000013A6  4E4F                     480          TRAP    #15
000013A8                           481          
000013A8  6000 0006                482          BRA     ENDOP0001
000013AC                           483          
000013AC                           484  UNKNOWNOP0001
000013AC  6100 106A                485          BSR     UNKNOWNOP
000013B0                           486          
000013B0                           487  ENDOP0001
000013B0  4C9F 03FF                488          MOVEM (A7)+,D0-D7/A0-A1
000013B4  4E75                     489          RTS        
000013B6                           490          
000013B6                           491  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000013B6                           492  *-----------------------------------------------------------------------------
000013B6                           493  
000013B6                           494  
000013B6                           495  
000013B6                           496  *-----------------------------------------------------------------------------
000013B6                           497  *-----------------------------------------------------------------------------
000013B6                           498  * NAME: OP_0010   (MOVE.L, MOVEA.L)
000013B6                           499  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000013B6                           500  * PRE-CONDITION:  xyz
000013B6                           501  * POST-CONDITION: All registers return to their previous state, and the output
000013B6                           502  *                 goes to the output console for reading the raw data or the
000013B6                           503  *                 actual instruction.
000013B6                           504  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000013B6                           505  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000013B6                           506  OP0010  
000013B6  48A7 FFC0                507          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
000013BA                           508          
000013BA  3C3C 0006                509          MOVE.W  #6, D6              * Prep lower value for bitmask
000013BE  3E3C 0008                510          MOVE.W  #8, D7              * Prep upper value for bitmask
000013C2  6100 12BE                511          BSR     BITMASK             * Finalize bitmask setup
000013C6                           512          
000013C6  CC42                     513          AND     D2,D6               * Apply bitmask
000013C8                           514          
000013C8  0C46 0040                515          CMPI    #%0000000001000000,D6
000013CC  6600 0012                516          BNE     OP0010MOVE
000013D0                           517          
000013D0  43F9 00002708            518          LEA     MOVEAOP,A1   * Put 'MOVE' into the window
000013D6  103C 000E                519          MOVE.B  #14,D0      * Trap #14 to print out
000013DA  4E4F                     520          TRAP    #15         * Perform Trap #14
000013DC                           521          
000013DC  6000 000E                522          BRA     OP0010MOVEA
000013E0                           523          
000013E0                           524  OP0010MOVE
000013E0                           525  
000013E0  43F9 00002703            526          LEA     MOVEOP,A1   * Put 'MOVE' into the window
000013E6  103C 000E                527          MOVE.B  #14,D0      * Trap #14 to print out
000013EA  4E4F                     528          TRAP    #15         * Perform Trap #14
000013EC                           529          
000013EC                           530  OP0010MOVEA
000013EC                           531  
000013EC  43F9 000027BA            532          LEA     __L,A1   * Put 'MOVE' into the window
000013F2  103C 000E                533          MOVE.B  #14,D0      * Trap #14 to print out
000013F6  4E4F                     534          TRAP    #15         * Perform Trap #14
000013F8                           535          
000013F8  7603                     536          MOVE.L  #3,D3
000013FA                           537          
000013FA  6100 0A3A                538          BSR     EAHELPER05
000013FE                           539          
000013FE  43F9 000027A4            540          LEA     COMMA,A1
00001404  103C 000E                541          MOVE.B  #14,D0
00001408  4E4F                     542          TRAP    #15
0000140A                           543          
0000140A  6100 09E8                544          BSR     EAHELPER611
0000140E                           545          
0000140E  43F9 000026EB            546          LEA     NEWLINE,A1
00001414  103C 000E                547          MOVE.B  #14,D0
00001418  4E4F                     548          TRAP    #15
0000141A                           549          
0000141A  6000 0006                550          BRA     ENDOP0010
0000141E                           551          
0000141E                           552  UNKNOWNOP0010
0000141E  6100 0FF8                553          BSR     UNKNOWNOP
00001422                           554          
00001422                           555  ENDOP0010
00001422  4C9F 03FF                556          MOVEM (A7)+,D0-D7/A0-A1
00001426  4E75                     557          RTS        
00001428                           558  
00001428                           559  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001428                           560  *-----------------------------------------------------------------------------
00001428                           561  
00001428                           562  
00001428                           563  
00001428                           564  *-----------------------------------------------------------------------------
00001428                           565  *-----------------------------------------------------------------------------
00001428                           566  * NAME: OP_0011   (MOVE.W, MOVEA.W)
00001428                           567  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001428                           568  * PRE-CONDITION:  xyz
00001428                           569  * POST-CONDITION: All registers return to their previous state, and the output
00001428                           570  *                 goes to the output console for reading the raw data or the
00001428                           571  *                 actual instruction.
00001428                           572  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001428                           573  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001428                           574  OP0011  
00001428  48A7 FFC0                575          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
0000142C                           576          
0000142C  3C3C 0006                577          MOVE.W  #6, D6              * Prep lower value for bitmask
00001430  3E3C 0008                578          MOVE.W  #8, D7              * Prep upper value for bitmask
00001434  6100 124C                579          BSR     BITMASK             * Finalize bitmask setup
00001438                           580          
00001438  CC42                     581          AND     D2,D6               * Apply bitmask
0000143A                           582          
0000143A  0C46 0040                583          CMPI    #%0000000001000000,D6
0000143E  6600 0012                584          BNE     OP0011MOVE
00001442                           585          
00001442  43F9 00002708            586          LEA     MOVEAOP,A1   * Put 'MOVE' into the window
00001448  103C 000E                587          MOVE.B  #14,D0      * Trap #14 to print out
0000144C  4E4F                     588          TRAP    #15         * Perform Trap #14
0000144E                           589          
0000144E  6000 000E                590          BRA     OP0011MOVEA
00001452                           591          
00001452                           592  OP0011MOVE
00001452                           593  
00001452  43F9 00002703            594          LEA     MOVEOP,A1   * Put 'MOVE' into the window
00001458  103C 000E                595          MOVE.B  #14,D0      * Trap #14 to print out
0000145C  4E4F                     596          TRAP    #15         * Perform Trap #14
0000145E                           597          
0000145E                           598  OP0011MOVEA
0000145E                           599  
0000145E  43F9 000027B6            600          LEA     __W,A1   * Put 'MOVE' into the window
00001464  103C 000E                601          MOVE.B  #14,D0      * Trap #14 to print out
00001468  4E4F                     602          TRAP    #15         * Perform Trap #14
0000146A                           603          
0000146A  7602                     604          MOVE.L  #2,D3
0000146C                           605          
0000146C  6100 09C8                606          BSR     EAHELPER05
00001470                           607          
00001470  43F9 000027A4            608          LEA     COMMA,A1
00001476  103C 000E                609          MOVE.B  #14,D0
0000147A  4E4F                     610          TRAP    #15
0000147C                           611          
0000147C  6100 0976                612          BSR     EAHELPER611
00001480                           613          
00001480  43F9 000026EB            614          LEA     NEWLINE,A1
00001486  103C 000E                615          MOVE.B  #14,D0
0000148A  4E4F                     616          TRAP    #15
0000148C                           617          
0000148C  6000 0006                618          BRA     ENDOP0011
00001490                           619          
00001490                           620  UNKNOWNOP0011
00001490  6100 0F86                621          BSR     UNKNOWNOP
00001494                           622          
00001494                           623  ENDOP0011
00001494  4C9F 03FF                624          MOVEM (A7)+,D0-D7/A0-A1
00001498  4E75                     625          RTS        
0000149A                           626  
0000149A                           627  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000149A                           628  *-----------------------------------------------------------------------------
0000149A                           629  
0000149A                           630  *-----------------------------------------------------------------------------
0000149A                           631  *-----------------------------------------------------------------------------
0000149A                           632  * NAME: OP_0100   (NOP, MOVEM, LEA, NEG, JSR, RTS)
0000149A                           633  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000149A                           634  * PRE-CONDITION:  xyz
0000149A                           635  * POST-CONDITION: All registers return to their previous state, and the output
0000149A                           636  *                 goes to the output console for reading the raw data or the
0000149A                           637  *                 actual instruction.
0000149A                           638  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000149A                           639  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000149A                           640  OP0100  
0000149A                           641  
0000149A  48A7 C0C0                642          MOVEM   D0-D1/A0-A1,-(A7) * Push values to the stack to save
0000149E                           643          
0000149E                           644          *NOP
0000149E  0C42 4E71                645          CMPI    #%0100111001110001,D2
000014A2  6600 0012                646          BNE     NOTNOP
000014A6                           647          
000014A6  43F9 000026FB            648          LEA     NOOPERATION,A1
000014AC  103C 000D                649          MOVE.B  #13,D0          * Print a newline
000014B0  4E4F                     650          TRAP    #15
000014B2                           651          
000014B2  6000 030E                652          BRA     DONE0100 *we found it, move on to the next iteration
000014B6                           653  NOTNOP *NEG
000014B6                           654          
000014B6                           655          * prep values for BITMASK subroutine
000014B6  7C08                     656          MOVE.L  #8,D6
000014B8  7E0B                     657          MOVE.L  #11,D7
000014BA                           658          
000014BA  6100 11C6                659          BSR     BITMASK
000014BE                           660          
000014BE  CC42                     661          AND     D2,D6                   * apply bitmask
000014C0                           662          
000014C0  0C46 0400                663          CMPI    #%0000010000000000,D6   * are we NEG?
000014C4  6600 0046                664          BNE     NOTNEG                  * not neg
000014C8                           665          
000014C8  7C03                     666          MOVE.L  #3,D6
000014CA  7E05                     667          MOVE.L  #5,D7
000014CC                           668          
000014CC  6100 11B4                669          BSR     BITMASK * generate a bitmask to be used to check mode
000014D0                           670          
000014D0  0C46 0008                671          CMPI    #%0000000000001000,D6 * check to see if it is the unsupported mode
000014D4  6700 02E8                672          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
000014D8                           673          
000014D8  0C46 0028                674          CMPI    #%0000000000101000,D6 * check to see if it is the unsupported mode
000014DC  6700 02E0                675          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
000014E0                           676          
000014E0  0C46 0030                677          CMPI    #%0000000000110000,D6 * check to see if it is the unsupported mode
000014E4  6700 02D8                678          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
000014E8                           679        
000014E8                           680          * it is NEG, print
000014E8  43F9 000026FF            681          LEA     NEGOP,A1
000014EE  103C 000E                682          MOVE.B  #14,D0
000014F2  4E4F                     683          TRAP    #15
000014F4                           684          
000014F4  6100 0C86                685          BSR     SIZE67
000014F8                           686          
000014F8  6100 093C                687          BSR     EAHELPER05
000014FC                           688          
000014FC  43F9 000026EB            689          LEA     NEWLINE,A1
00001502  103C 000E                690          MOVE.B  #14,D0
00001506  4E4F                     691          TRAP    #15
00001508                           692          
00001508  6000 02B8                693          BRA     DONE0100 * we found the op, move to next iteration
0000150C                           694          
0000150C                           695  NOTNEG *MOVEM
0000150C                           696  
0000150C                           697          * prep values for BITMASK subroutine
0000150C  7C07                     698          MOVE.L  #7,D6
0000150E  7E09                     699          MOVE.L  #9,D7
00001510                           700          
00001510  6100 1170                701          BSR     BITMASK
00001514                           702          
00001514  CC82                     703          AND.L   D2,D6   * apply bitmask
00001516                           704          
00001516  0C46 0080                705          CMPI    #%0000000010000000,D6 * is it MOVEM?
0000151A  6600 0148                706          BNE     NOTMOVEM          * it is not MOVEM
0000151E                           707          
0000151E  7C0A                     708          MOVE.L  #10,D6
00001520  7E0A                     709          MOVE.L  #10,D7
00001522                           710          
00001522  6100 115E                711          BSR     BITMASK
00001526                           712          
00001526  CC82                     713          AND.L   D2,D6
00001528                           714          
00001528  0C46 0000                715          CMPI    #%0000000000000000,D6 * is it register to memory?
0000152C  6700 009C                716          BEQ     MOVEMTOMEM 
00001530                           717          
00001530                           718  MOVEMTOREG *supported modes: 010 011
00001530                           719  
00001530  7C03                     720          MOVE.L  #3,D6
00001532  7E05                     721          MOVE.L  #5,D7
00001534                           722          
00001534  6100 114C                723          BSR     BITMASK
00001538                           724          
00001538  CC82                     725          AND.L   D2,D6
0000153A                           726          
0000153A  0C46 0000                727          CMPI    #%0000000000000000,D6 * is it an unsupported mode?
0000153E  6700 027E                728          BEQ     UNKNOWN0100
00001542                           729          
00001542  0C46 0008                730          CMPI    #%0000000000001000,D6 * is it an unsupported mode?
00001546  6700 0276                731          BEQ     UNKNOWN0100
0000154A                           732          
0000154A  0C46 0020                733          CMPI    #%0000000000100000,D6 * is it an unsupported mode?
0000154E  6700 026E                734          BEQ     UNKNOWN0100
00001552                           735          
00001552  0C46 0028                736          CMPI    #%0000000000101000,D6 * is it an unsupported mode?
00001556  6700 0266                737          BEQ     UNKNOWN0100
0000155A                           738          
0000155A  0C46 0030                739          CMPI    #%0000000000110000,D6 * is it an unsupported mode?
0000155E  6700 025E                740          BEQ     UNKNOWN0100
00001562                           741          
00001562  0C46 0038                742          CMPI    #%0000000000111000,D6 * is it an unsupported mode?
00001566  6700 0256                743          BEQ     UNKNOWN0100
0000156A                           744          
0000156A  43F9 0000270E            745          LEA     MOVEMOP,A1
00001570  103C 000E                746          MOVE.B  #14,D0          * print MOVEM
00001574  4E4F                     747          TRAP    #15
00001576                           748          
00001576  7C06                     749          MOVE.L  #6,D6
00001578  7E06                     750          MOVE.L  #6,D7
0000157A                           751          
0000157A  6100 1106                752          BSR     BITMASK
0000157E                           753          
0000157E  CC82                     754          AND.L   D2,D6
00001580                           755          
00001580  0C46 0040                756          CMPI    #%0000000001000000,D6 * is it a long op?
00001584  6600 0012                757          BNE     NOTLONGMOVEM1       * no, it is a word
00001588                           758          
00001588  43F9 000027BA            759          LEA     __L,A1
0000158E  103C 000E                760          MOVE.B  #14,D0          * print .L 
00001592  4E4F                     761          TRAP    #15
00001594                           762          
00001594  6000 000E                763          BRA     SKIPNOTLONG1
00001598                           764          
00001598                           765  NOTLONGMOVEM1
00001598                           766  
00001598  43F9 000027B6            767          LEA     __W,A1
0000159E  103C 000E                768          MOVE.B  #14,D0          * print .W 
000015A2  4E4F                     769          TRAP    #15
000015A4                           770                  
000015A4                           771  SKIPNOTLONG1
000015A4                           772  
000015A4  6100 0890                773          BSR     EAHELPER05 * print out the register we are moving from
000015A8                           774          
000015A8  43F9 000027A4            775          LEA     COMMA,A1
000015AE  103C 000E                776          MOVE.B  #14,D0          * print , 
000015B2  4E4F                     777          TRAP    #15
000015B4                           778          
000015B4  6100 0CA8                779          BSR     MOVEMHELPERPOST
000015B8                           780          
000015B8  341A                     781          MOVE.W  (A2)+,D2
000015BA                           782          
000015BA  43F9 000026EB            783          LEA     NEWLINE,A1
000015C0  103C 000E                784          MOVE.B  #14,D0          * print a newline 
000015C4  4E4F                     785          TRAP    #15
000015C6                           786      
000015C6  6000 01FA                787          BRA     DONE0100          * we found and printed, move on to the next iteration
000015CA                           788          
000015CA                           789  MOVEMTOMEM * supported modes 010 100
000015CA                           790  
000015CA  7C03                     791          MOVE.L  #3,D6
000015CC  7E05                     792          MOVE.L  #5,D7
000015CE                           793          
000015CE  6100 10B2                794          BSR     BITMASK
000015D2                           795          
000015D2  CC82                     796          AND.L   D2,D6
000015D4                           797          
000015D4  0C46 0000                798          CMPI    #%0000000000000000,D6 * is it an unsopported mode?
000015D8  6700 01E4                799          BEQ     UNKNOWN0100
000015DC                           800          
000015DC  0C46 0008                801          CMPI    #%0000000000001000,D6 * is it an unsopported mode?
000015E0  6700 01DC                802          BEQ     UNKNOWN0100
000015E4                           803          
000015E4  0C46 0018                804          CMPI    #%0000000000011000,D6 * is it an unsopported mode?
000015E8  6700 01D4                805          BEQ     UNKNOWN0100
000015EC                           806          
000015EC  0C46 0028                807          CMPI    #%0000000000101000,D6 * is it an unsopported mode?
000015F0  6700 01CC                808          BEQ     UNKNOWN0100
000015F4                           809          
000015F4  0C46 0030                810          CMPI    #%0000000000110000,D6 * is it an unsopported mode?
000015F8  6700 01C4                811          BEQ     UNKNOWN0100
000015FC                           812          
000015FC  0C46 0070                813          CMPI    #%0000000001110000,D6 * is it an unsopported mode?
00001600  6700 01BC                814          BEQ     UNKNOWN0100
00001604                           815          
00001604  43F9 0000270E            816          LEA     MOVEMOP,A1
0000160A  103C 000E                817          MOVE.B  #14,D0          * print MOVEM
0000160E  4E4F                     818          TRAP    #15
00001610                           819          
00001610  7C06                     820          MOVE.L  #6,D6
00001612  7E06                     821          MOVE.L  #6,D7
00001614                           822          
00001614  6100 106C                823          BSR     BITMASK
00001618                           824          
00001618  CC82                     825          AND.L   D2,D6
0000161A                           826          
0000161A  0C46 0040                827          CMPI    #%0000000001000000,D6 * is it a long op?
0000161E  6600 0012                828          BNE     NOTLONGMOVEM2       * no, it is a word
00001622                           829          
00001622  43F9 000027BA            830          LEA     __L,A1
00001628  103C 000E                831          MOVE.B  #14,D0          * print .L 
0000162C  4E4F                     832          TRAP    #15
0000162E                           833          
0000162E  6000 000E                834          BRA     SKIPNOTLONG2
00001632                           835          
00001632                           836  NOTLONGMOVEM2
00001632                           837  
00001632  43F9 000027B6            838          LEA     __W,A1
00001638  103C 000E                839          MOVE.B  #14,D0          * print .W 
0000163C  4E4F                     840          TRAP    #15
0000163E                           841                  
0000163E                           842  SKIPNOTLONG2
0000163E                           843  
0000163E  6100 0DAA                844          BSR     MOVEMHELPERPRE
00001642                           845  
00001642  43F9 000027A4            846          LEA     COMMA,A1
00001648  103C 000E                847          MOVE.B  #14,D0          * print , 
0000164C  4E4F                     848          TRAP    #15
0000164E                           849          
0000164E  6100 07E6                850          BSR     EAHELPER05 * print out the register we are moving to
00001652                           851          
00001652  341A                     852          MOVE.W  (A2)+,D2
00001654                           853          
00001654  43F9 000026EB            854          LEA     NEWLINE,A1
0000165A  103C 000E                855          MOVE.B  #14,D0          * print a newline 
0000165E  4E4F                     856          TRAP    #15
00001660                           857      
00001660  6000 0160                858          BRA     DONE0100          * we found and printed, move on to the next iteration
00001664                           859  
00001664                           860  NOTMOVEM *JSR
00001664                           861          * prep values for BITMASK subroutine
00001664  7C06                     862          MOVE.L  #6,D6
00001666  7E08                     863          MOVE.L  #8,D7
00001668                           864          
00001668  6100 1018                865          BSR     BITMASK
0000166C                           866          
0000166C  CC42                     867          AND     D2,D6   * apply bitmask
0000166E                           868          
0000166E  0C46 0080                869          CMPI    #%0000000010000000,D6
00001672  6600 0046                870          BNE     NOTJSR          * it's not JSR
00001676                           871          
00001676  43F9 00002714            872          LEA     JSROP,A1
0000167C  103C 000E                873          MOVE.B  #14,D0          * Print JSR
00001680  4E4F                     874          TRAP    #15
00001682                           875          
00001682  43F9 0000279E            876          LEA     SPACE,A1
00001688  103C 000E                877          MOVE.B  #14,D0          * Print space
0000168C  4E4F                     878          TRAP    #15
0000168E                           879          
0000168E  43F9 000027A0            880          LEA     DOLLAR,A1
00001694  103C 000E                881          MOVE.B  #14,D0          * Print $
00001698  4E4F                     882          TRAP    #15
0000169A                           883          
0000169A                           884          * print out where we are jumping to
0000169A                           885          
0000169A  241A                     886          MOVE.L  (A2)+,D2 * read in the next word of the instruction
0000169C                           887  
0000169C  2E02                     888          MOVE.L  D2,D7
0000169E                           889  
0000169E  2C47                     890          MOVE.L  D7,A6
000016A0                           891          
000016A0  4283                     892          CLR.L   D3
000016A2                           893          
000016A2  163C 0008                894          MOVE.B  #8,D3
000016A6                           895          
000016A6  6100 0D9A                896          BSR     PRINT_ASCII_HEX_CHAR
000016AA                           897          
000016AA                           898          *MOVE.L  D2,D1   * save the opcode to print
000016AA                           899          
000016AA                           900          *MOVE.L  #16,D2  * set the base to 16
000016AA                           901          
000016AA                           902          *MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000016AA                           903          *TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000016AA                           904          
000016AA                           905          *MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
000016AA                           906          
000016AA                           907          *MOVE.L  D2,D1   * save the opcode to print
000016AA                           908          
000016AA                           909          *MOVE.L  #16,D2  * set the base to 16
000016AA                           910          
000016AA                           911          *MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000016AA                           912          *TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000016AA                           913          
000016AA  43F9 000026EB            914          LEA     NEWLINE,A1
000016B0  103C 000E                915          MOVE.B  #14,D0          * Print a newline
000016B4  4E4F                     916          TRAP    #15
000016B6                           917          
000016B6  6000 010A                918          BRA     DONE0100          * we already found instruction, next iteration
000016BA                           919  NOTJSR *RTS
000016BA                           920  
000016BA                           921          * prep values for BITMASK subroutine
000016BA  7C06                     922          MOVE.L  #6,D6
000016BC  7E08                     923          MOVE.L  #8,D7
000016BE                           924          
000016BE  6100 0FC2                925          BSR     BITMASK
000016C2                           926          
000016C2  CC42                     927          AND     D2,D6   * apply bitmask
000016C4                           928          
000016C4  0C46 0040                929          CMPI    #%0000000001000000,D6
000016C8  6600 0012                930          BNE     NOTRTS          * it's not RTS
000016CC                           931          
000016CC  43F9 00002718            932          LEA     RTSOP,A1
000016D2  103C 000D                933          MOVE.B  #13,D0          * Print a newline and RTS
000016D6  4E4F                     934          TRAP    #15
000016D8                           935          
000016D8  6000 00E8                936          BRA     DONE0100          * we already found instruction, next iteration
000016DC                           937  NOTRTS  *LEA
000016DC                           938         
000016DC                           939          * prep values for BITMASK subroutine
000016DC  7C06                     940          MOVE.L  #6,D6
000016DE  7E08                     941          MOVE.L  #8,D7
000016E0                           942          
000016E0  6100 0FA0                943          BSR     BITMASK
000016E4                           944          
000016E4  CC42                     945          AND     D2,D6   * apply bitmask
000016E6                           946          
000016E6  0C46 01C0                947          CMPI    #%0000000111000000,D6
000016EA  6600 00D2                948          BNE     UNKNOWN0100          * it's not LEA, we dont know what it is
000016EE                           949          
000016EE                           950          * prep values for BITMASK subroutine
000016EE  7C03                     951          MOVE.L  #3,D6
000016F0  7E05                     952          MOVE.L  #5,D7
000016F2                           953          
000016F2  6100 0F8E                954          BSR     BITMASK
000016F6                           955          
000016F6  CC42                     956          AND     D2,D6   * apply bitmask
000016F8                           957          
000016F8  0C46 0008                958          CMPI    #%0000000000001000,D6
000016FC  6700 00C0                959          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001700                           960          
00001700  0C46 0018                961          CMPI    #%0000000000011000,D6
00001704  6700 00B8                962          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001708                           963          
00001708  0C46 0020                964          CMPI    #%0000000000100000,D6
0000170C  6700 00B0                965          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001710                           966          
00001710  0C46 0028                967          CMPI    #%0000000000101000,D6
00001714  6700 00A8                968          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001718                           969          
00001718  0C46 0030                970          CMPI    #%0000000000110000,D6
0000171C  6700 00A0                971          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001720                           972          
00001720  0C46 0038                973          CMPI    #%0000000000111000,D6
00001724  6700 0046                974          BEQ     TWOWORDLEA          * it's a two word LEA
00001728                           975          
00001728  43F9 00002721            976          LEA     LEAOP,A1
0000172E  103C 000E                977          MOVE.B  #14,D0          * Print LEA
00001732  4E4F                     978          TRAP    #15
00001734                           979          
00001734  0882 0007                980          BCLR    #7,D2
00001738  0882 0008                981          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
0000173C                           982          
0000173C  43F9 0000279E            983          LEA     SPACE,A1
00001742  103C 000E                984          MOVE.B  #14,D0          * Print SPACE
00001746  4E4F                     985          TRAP    #15
00001748                           986          
00001748  6100 06EC                987          BSR     EAHELPER05
0000174C                           988          
0000174C  43F9 000027A4            989          LEA     COMMA,A1
00001752  103C 000E                990          MOVE.B  #14,D0          * Print COMMA
00001756  4E4F                     991          TRAP    #15
00001758                           992          
00001758  6100 069A                993          BSR     EAHELPER611
0000175C                           994          
0000175C  43F9 000026EB            995          LEA     NEWLINE,A1
00001762  103C 000E                996          MOVE.B  #14,D0          * Start a new line
00001766  4E4F                     997          TRAP    #15
00001768                           998          
00001768                           999          
00001768                          1000          * call EA helper
00001768                          1001          * MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
00001768                          1002                  
00001768  6000 0058               1003          BRA     DONE0100          * we already found instruction, next iteration
0000176C                          1004          
0000176C                          1005  TWOWORDLEA
0000176C                          1006  
0000176C  43F9 00002721           1007          LEA     LEAOP,A1
00001772  103C 000E               1008          MOVE.B  #14,D0   * Print LEA
00001776  4E4F                    1009          TRAP    #15
00001778                          1010          
00001778  43F9 0000279E           1011          LEA     SPACE,A1
0000177E  103C 000E               1012          MOVE.B  #14,D0   * Print SPACE
00001782  4E4F                    1013          TRAP    #15
00001784                          1014  
00001784  321A                    1015          MOVE.W  (A2)+,D1
00001786                          1016          
00001786  7C00                    1017          MOVE.L  #0,D6
00001788  7E0F                    1018          MOVE.L  #15,D7
0000178A                          1019          
0000178A  6100 0EF6               1020          BSR     BITMASK
0000178E                          1021          
0000178E  C286                    1022          AND.L   D6,D1   * shave off bad info
00001790                          1023          
00001790  103C 0003               1024          MOVE.B  #3,D0   * Print the address which was the source
00001794  4E4F                    1025          TRAP    #15
00001796                          1026          
00001796  43F9 000027A4           1027          LEA     COMMA,A1
0000179C  103C 000E               1028          MOVE.B  #14,D0  * Print COMMA
000017A0  4E4F                    1029          TRAP    #15
000017A2                          1030          
000017A2  0882 0007               1031          BCLR    #7,D2
000017A6  0882 0008               1032          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
000017AA                          1033          
000017AA  6100 0648               1034          BSR     EAHELPER611
000017AE                          1035          
000017AE  43F9 000026EB           1036          LEA     NEWLINE,A1
000017B4  103C 000E               1037          MOVE.B  #14,D0          * Start a new line
000017B8  4E4F                    1038          TRAP    #15
000017BA                          1039          
000017BA  6000 0006               1040          BRA     DONE0100
000017BE                          1041          
000017BE                          1042  UNKNOWN0100 *dont know what it is
000017BE  6100 0C58               1043          BSR     UNKNOWNOP
000017C2                          1044          
000017C2                          1045  DONE0100
000017C2  4C9F 0303               1046          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
000017C6  4E75                    1047          RTS
000017C8                          1048          
000017C8                          1049  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000017C8                          1050  *-----------------------------------------------------------------------------
000017C8                          1051        
000017C8                          1052          
000017C8                          1053          
000017C8                          1054  
000017C8                          1055  *-----------------------------------------------------------------------------
000017C8                          1056  *-----------------------------------------------------------------------------
000017C8                          1057  * NAME: OP_0101   (SUBQ)
000017C8                          1058  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000017C8                          1059  * PRE-CONDITION:  xyz
000017C8                          1060  * POST-CONDITION: All registers return to their previous state, and the output
000017C8                          1061  *                 goes to the output console for reading the raw data or the
000017C8                          1062  *                 actual instruction.
000017C8                          1063  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000017C8                          1064  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000017C8                          1065  OP0101
000017C8  48A7 FFC0               1066          MOVEM   D0-D7/A0-A1,-(A7)       * Push values to the stack to save
000017CC                          1067  
000017CC  CC7C 0100               1068          AND     #%0000000100000000, D6  * Baby-Bitmask for the 8th digit.
000017D0  0C46 0100               1069          CMPI    #%0000000100000000, D6  * Is the 8th digit a 1?
000017D4  6700 005A               1070          BEQ     UNKNOWN0101             * If so, unknown op
000017D8                          1071        
000017D8  0C46 0100               1072          CMPI    #%0000000100000000, D6  * Is the size 11, an unsupported value?
000017DC  6700 0052               1073          BEQ     UNKNOWN0101             * If so, unknown op
000017E0                          1074            
000017E0                          1075          * Verified SUBQ at this point
000017E0  43F9 0000271C           1076          LEA     SUBQOP,A1           * Print out SUBQ
000017E6  103C 000E               1077          MOVE.B  #14,D0              * Trap #14 to print out
000017EA  4E4F                    1078          TRAP    #15                 * Perform Trap #14
000017EC                          1079                          
000017EC  6100 098E               1080          BSR     SIZE67              * Print out size
000017F0                          1081          
000017F0  43F9 000027A2           1082          LEA     IMD,A1              * Formatting
000017F6  103C 000E               1083          MOVE.B  #14,D0              * Trap #14 prints out space
000017FA  4E4F                    1084          TRAP    #15                 * Perform Trap #14
000017FC                          1085          
000017FC  3C3C 0009               1086          MOVE.W  #9, D6              * Prep lower value for bitmask
00001800  3E3C 000B               1087          MOVE.W  #11,D7              * Prep upper value for bitmask
00001804  6100 0E7C               1088          BSR     BITMASK             * Finalize bitmask setup
00001808  CC42                    1089          AND     D2,D6               * Apply bitmask
0000180A                          1090          
0000180A  6100 0DC4               1091          BSR     PRINTDATA911        * Special op for immediate in bits 9->11
0000180E                          1092            
0000180E  43F9 000027A4           1093          LEA     COMMA,A1            * Formatting
00001814  103C 000E               1094          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001818  4E4F                    1095          TRAP    #15                 * Perform Trap #14
0000181A                          1096          
0000181A  6100 061A               1097          BSR     EAHELPER05          * Print out the Effective Address
0000181E                          1098          
0000181E  43F9 000026EB           1099          LEA     NEWLINE,A1          * Formatting
00001824  103C 000E               1100          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001828  4E4F                    1101          TRAP    #15                 * Perform Trap #14
0000182A                          1102          
0000182A  4C9F 03FF               1103          MOVEM   (A7)+,D0-D7/A0-A1   * Pop off the stack to return our registers
0000182E  4E75                    1104          RTS
00001830                          1105      
00001830                          1106  UNKNOWN0101
00001830  6100 0BE6               1107          BSR     UNKNOWNOP
00001834  4E75                    1108          RTS
00001836                          1109  
00001836                          1110  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001836                          1111  *-----------------------------------------------------------------------------
00001836                          1112  
00001836                          1113  
00001836                          1114  
00001836                          1115  *-----------------------------------------------------------------------------
00001836                          1116  *-----------------------------------------------------------------------------
00001836                          1117  * NAME: OP_0110   (BCC, BCS, BGE, BLT, BVC, BRA)
00001836                          1118  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001836                          1119  * PRE-CONDITION:  Given the possibilties for 0110, masks the next 4 bits
00001836                          1120  *                 in the instruction and determines what the bits match to a
00001836                          1121  *                 given condition code. If the 8 bit offset is $00, or $FF,
00001836                          1122  *                 this signifies a word or long offset (for $00 and $FF
00001836                          1123  *                 respectively). The 8 bit offset is in 2's comp. form, and
00001836                          1124  *                 should be un-done, then plus or minus to the current
00001836                          1125  *                 program counter (PC) to get the actual memory label to
00001836                          1126  *                 output to console. The word offset signal eats an
00001836                          1127  *                 additional 16 bits and the long offset eats an additional
00001836                          1128  *                 32 bits. The word/long offset are for memory alignment.
00001836                          1129  * POST-CONDITION: All registers return to their previous state, and the output
00001836                          1130  *                 goes to the output console for reading the raw data or the
00001836                          1131  *                 actual instruction.
00001836                          1132  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001836                          1133  *                 A1 (output)
00001836                          1134  * CONDITIONS TABLE:
00001836                          1135  *                Condition Names  - Mnemonic - Condition Code
00001836                          1136  *                --------------------------------------------
00001836                          1137  *                True             -    T     - 0000
00001836                          1138  *                False            -    F     - 0001
00001836                          1139  *                Higher           -    HI    - 0010
00001836                          1140  *                Lower or Same    -    LS    - 0011
00001836                          1141  *                Carry Clear      -    CC    - 0100
00001836                          1142  *                Carry Set        -    CS    - 0101
00001836                          1143  *                Not Equal        -    NE    - 0110
00001836                          1144  *                Equal            -    EQ    - 0111
00001836                          1145  *                Overflow Clear   -    VC    - 1000
00001836                          1146  *                Overflow Set     -    VS    - 1001
00001836                          1147  *                Plus             -    PL    - 1010
00001836                          1148  *                Minus            -    MI    - 1011
00001836                          1149  *                Greater or Equal -    GE    - 1100
00001836                          1150  *                Less Than        -    LT    - 1101
00001836                          1151  *                Greater Than     -    GT    - 1110
00001836                          1152  *                Less or Equal    -    LE    - 1111
00001836                          1153  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001836  48E7 FFFE               1154  OP0110  MOVEM.L D0-D7/A0-A6,-(A7) * Save main method routine vars to stack
0000183A                          1155                          
0000183A  3C3C 0009               1156          MOVE.W  #9,D6  * Move in 9 to D6
0000183E  3E3C 000B               1157          MOVE.W  #11,D7 * Move in 11 to D7
00001842                          1158                                        
00001842  6100 0E3E               1159          BSR     BITMASK * Call BITMASK sub-routine, Returns a bitmask in D6
00001846  CC42                    1160          AND     D2,D6   * apply the BITMASK
00001848                          1161          
00001848  0C46 0400               1162          CMPI    #%0000010000000000,D6 * CASE 1: BCC - BINARY FOR "CARRY CLEAR" FLAG
0000184C  6700 0032               1163          BEQ     OP_BCC
00001850  0C46 0500               1164          CMPI    #%0000010100000000,D6 * CASE 2: BCS - BINARY FOR "CARRY SET" FLAG
00001854  6700 0034               1165          BEQ     OP_BCS
00001858  0C46 0C00               1166          CMPI    #%0000110000000000,D6 * CASE 3: BGE - BINARY FOR "GREATER OR EQUAL" FLAG
0000185C  6700 0036               1167          BEQ     OP_BGE
00001860  0C46 0D00               1168          CMPI    #%0000110100000000,D6 * CASE 4: BLT - BINARY FOR "LESS THAN" FLAG
00001864  6700 0038               1169          BEQ     OP_BLT
00001868  0C46 0800               1170          CMPI    #%0000100000000000,D6 * CASE 5: BVC - BINARY FOR "OVERFLOW CLEAR" FLAG
0000186C  6700 003A               1171          BEQ     OP_BVC
00001870  0C46 0000               1172          CMPI    #%0000000000000000,D6 * CASE 6: BRA - BINARY FOR "BRANCH ALWAYS" FLAG
00001874  6700 003C               1173          BEQ     OP_BRA
00001878  6100 0B9E               1174          BSR     UNKNOWNOP             * don't know what it is, print it out, skip to end
0000187C  6000 007A               1175          BRA     BCC_END
00001880                          1176  
00001880  43F9 0000275C           1177  OP_BCC  LEA     OP_BCC_MSG,A1
00001886  6000 0034               1178          BRA     OP_BRANCHES_PRINT
0000188A  43F9 00002761           1179  OP_BCS  LEA     OP_BCS_MSG,A1
00001890  6000 002A               1180          BRA     OP_BRANCHES_PRINT
00001894  43F9 00002766           1181  OP_BGE  LEA     OP_BGE_MSG,A1
0000189A  6000 0020               1182          BRA     OP_BRANCHES_PRINT
0000189E  43F9 0000276B           1183  OP_BLT  LEA     OP_BLT_MSG,A1
000018A4  6000 0016               1184          BRA     OP_BRANCHES_PRINT
000018A8  43F9 00002770           1185  OP_BVC  LEA     OP_BVC_MSG,A1
000018AE  6000 000C               1186          BRA     OP_BRANCHES_PRINT
000018B2  43F9 00002775           1187  OP_BRA  LEA     OP_BRA_MSG,A1
000018B8  6000 0002               1188          BRA     OP_BRANCHES_PRINT
000018BC                          1189  OP_BRANCHES_PRINT
000018BC  103C 000E               1190          MOVE.B  #14,D0 * print instruction op, chosen from cases directly above
000018C0  4E4F                    1191          TRAP    #15
000018C2                          1192          
000018C2  43F9 000027A0           1193          LEA     DOLLAR,A1
000018C8  103C 000E               1194          MOVE.B  #14,D0 * print raw data hex of the LABEL
000018CC  4E4F                    1195          TRAP    #15
000018CE                          1196          
000018CE  3C3C 0000               1197          MOVE.W  #0,D6                 * Move in 0 to D6 - prep mask
000018D2  3E3C 0007               1198          MOVE.W  #7,D7                 * Move in 7 to D7
000018D6  6100 0DAA               1199          BSR     BITMASK               * Call BITMASK sub-routine, return in D6
000018DA  CC42                    1200          AND     D2,D6                 * AND mask with op bits, get last 8 bits in D6
000018DC                          1201          
000018DC                          1202  *        CMPI    #%00000000,D6         * all 0's == word offset
000018DC                          1203  *        BEQ     BCC_WORD_OFFSET
000018DC                          1204          
000018DC                          1205  *        CMPI    #%11111111,D6         * all F's == long offset
000018DC                          1206  *        BEQ     BCC_LONG_OFFSET
000018DC                          1207  BCC_BYTE_OFFSET
000018DC  4254                    1208          CLR     (A4)
000018DE  2846                    1209          MOVE.L  D6,A4
000018E0  43D4                    1210          LEA     (A4),A1
000018E2  103C 000E               1211          MOVE.B  #14,D0
000018E6  4E4F                    1212          TRAP    #15
000018E8  43F9 000026EB           1213          LEA     NEWLINE,A1
000018EE  103C 000E               1214          MOVE.B  #14,D0
000018F2  4E4F                    1215          TRAP    #15
000018F4                          1216          
000018F4  6000 0002               1217          BRA     BCC_END
000018F8                          1218  *BCC_WORD_OFFSET
000018F8                          1219  *        MOVEM.W (A2)+,A1
000018F8                          1220  *        MOVE.B  #13,D0
000018F8                          1221  *        TRAP    #15
000018F8                          1222  *        BRA     BCC_END
000018F8                          1223  *BCC_LONG_OFFSET
000018F8                          1224  *        MOVEM.L (A2)+,A1
000018F8                          1225  *        MOVE.B  #13,D0
000018F8                          1226  *        TRAP    #15
000018F8                          1227  *        BRA     BCC_END
000018F8                          1228  BCC_END * reload the memory, call RTS
000018F8  4C9F 7FFF               1229          MOVEM   (A7)+,D0-D7/A0-A6 * Pop off the stack to return our registers
000018FC  4E75                    1230          RTS
000018FE                          1231  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000018FE                          1232  *-----------------------------------------------------------------------------
000018FE                          1233  
000018FE                          1234  
000018FE                          1235  
000018FE                          1236  *-----------------------------------------------------------------------------
000018FE                          1237  *-----------------------------------------------------------------------------
000018FE                          1238  * NAME: OP_0111   ()
000018FE                          1239  * DESCRIPTION:    OP code 0111 is not supported. 
000018FE                          1240  * PRE-CONDITION:  
000018FE                          1241  * POST-CONDITION: 
000018FE                          1242  * REGISTERS:
000018FE                          1243  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000018FE                          1244  OP0111
000018FE  6100 0B18               1245      BSR     UNKNOWNOP
00001902  4E75                    1246      RTS
00001904                          1247  
00001904                          1248  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001904                          1249  *-----------------------------------------------------------------------------
00001904                          1250  
00001904                          1251  
00001904                          1252  
00001904                          1253  *-----------------------------------------------------------------------------
00001904                          1254  *-----------------------------------------------------------------------------
00001904                          1255  * NAME: OP_1000   (DIVS, OR)
00001904                          1256  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001904                          1257  * PRE-CONDITION:  xyz
00001904                          1258  * POST-CONDITION: All registers return to their previous state, and the output
00001904                          1259  *                 goes to the output console for reading the raw data or the
00001904                          1260  *                 actual instruction.
00001904                          1261  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001904                          1262  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001904                          1263  OP1000
00001904  48A7 FFC0               1264          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
00001908                          1265  
00001908                          1266          * Check if the EA Mode is 001 since both DIVS and OR do not support it
00001908  3C3C 0003               1267          MOVE.W  #3, D6              * Prep lower value for bitmask
0000190C  3E3C 0005               1268          MOVE.W  #5, D7              * Prep upper value for bitmask
00001910  6100 0D70               1269          BSR     BITMASK             * Finalize bitmask setup
00001914  CC42                    1270          AND     D2,D6               * Apply bitmask
00001916                          1271          
00001916  0C46 0008               1272          CMPI    #%0000000000001000, D6  * Is the mode 001, an unsupported mode?
0000191A  6700 0AFC               1273          BEQ     UNKNOWNOP                 * If so, the op is not supported
0000191E                          1274          
0000191E                          1275          * Checking for DIVS
0000191E  3C3C 0006               1276          MOVE.W  #6, D6              * Prep lower value for bitmask
00001922  3E3C 0008               1277          MOVE.W  #8, D7              * Prep upper value for bitmask
00001926  6100 0D5A               1278          BSR     BITMASK             * Finalize bitmask setup
0000192A  CC42                    1279          AND     D2,D6               * Apply bitmask
0000192C                          1280          
0000192C  0C46 01C0               1281          CMPI    #%0000000111000000, D6  * Are we DIVS?
00001930  6600 0050               1282          BNE     NOTDIVS                 * If not, branch to see if it's OR
00001934                          1283          
00001934  43F9 000026EE           1284          LEA     DIVSOP,A1           * We found DIVS
0000193A  103C 000E               1285          MOVE.B  #14,D0              * Trap #14 prints out the data
0000193E  4E4F                    1286          TRAP    #15                 * Perform Trap #14
00001940                          1287          
00001940  43F9 0000279E           1288          LEA     SPACE,A1            * formatting
00001946  103C 000E               1289          MOVE.B  #14,D0              * Trap #14 prints out space
0000194A  4E4F                    1290          TRAP    #15                 * Perform Trap #14
0000194C                          1291          
0000194C  4243                    1292          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
0000194E  08C3 0000               1293          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
00001952                          1294                                      * to indicate a potential immediate of size word
00001952                          1295          
00001952  6100 04E2               1296          BSR     EAHELPER05          * Print out data
00001956                          1297  
00001956  43F9 000027A4           1298          LEA     COMMA,A1            * formatting
0000195C  103C 000E               1299          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001960  4E4F                    1300          TRAP    #15                 * Perform Trap #14
00001962                          1301          
00001962                          1302          * bit manipulation is needed to make the outlier DIVS work
00001962                          1303          * with the generic EAHELPER611
00001962  0882 0006               1304          BCLR    #6,D2
00001966  0882 0007               1305          BCLR    #7,D2
0000196A  0882 0008               1306          BCLR    #8,D2
0000196E                          1307          
0000196E                          1308          * the above bits were cleared so that eahelper05 knows the destination
0000196E                          1309          * is a data register.
0000196E                          1310          
0000196E  6100 0484               1311          BSR     EAHELPER611 
00001972                          1312  
00001972  43F9 000026EB           1313          LEA     NEWLINE,A1          * We found DIVS
00001978  103C 000E               1314          MOVE.B  #14,D0              * Trap #14 prints out the data
0000197C  4E4F                    1315          TRAP    #15                 * Perform Trap #14
0000197E                          1316          
0000197E  6000 0012               1317          BRA     OP1000END
00001982                          1318          
00001982                          1319  NOTDIVS * It is confirmed OR at this point
00001982  43F9 00002730           1320          LEA     OROP,A1         * We found OR
00001988  103C 000E               1321          MOVE.B  #14,D0          * Trap #14 prints out the data
0000198C  4E4F                    1322          TRAP    #15             * Perform Trap #14
0000198E                          1323          *================================================================
0000198E                          1324          * todo, move the size of the operation into the leading bits of D5
0000198E                          1325          * before subroutine call
0000198E  6100 0464               1326          BSR     EAHELPER611
00001992                          1327  
00001992                          1328  OP1000END
00001992  4C9F 03FF               1329          MOVEM   (A7)+,D0-D7/A0-A1
00001996  4E75                    1330          RTS
00001998                          1331  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001998                          1332  *-----------------------------------------------------------------------------
00001998                          1333  
00001998                          1334  
00001998                          1335  
00001998                          1336  *-----------------------------------------------------------------------------
00001998                          1337  *-----------------------------------------------------------------------------
00001998                          1338  * NAME: OP_1001   (SUB)
00001998                          1339  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001998                          1340  * PRE-CONDITION:  xyz
00001998                          1341  * POST-CONDITION: All registers return to their previous state, and the output
00001998                          1342  *                 goes to the output console for reading the raw data or the
00001998                          1343  *                 actual instruction.
00001998                          1344  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001998                          1345  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001998                          1346  OP1001
00001998                          1347  
00001998                          1348  
00001998                          1349  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001998                          1350  *-----------------------------------------------------------------------------
00001998                          1351  
00001998                          1352  
00001998                          1353  
00001998                          1354  *-----------------------------------------------------------------------------
00001998                          1355  *-----------------------------------------------------------------------------
00001998                          1356  * NAME: OP_1010   ()
00001998                          1357  * DESCRIPTION:    a
00001998                          1358  * PRE-CONDITION:  b
00001998                          1359  * POST-CONDITION: c
00001998                          1360  * REGISTERS:      d
00001998                          1361  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001998                          1362  OP1010
00001998                          1363  
00001998  6100 0A7E               1364      BSR     UNKNOWNOP
0000199C  4E75                    1365      RTS
0000199E                          1366  
0000199E                          1367  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000199E                          1368  *-----------------------------------------------------------------------------
0000199E                          1369  
0000199E                          1370  
0000199E                          1371  
0000199E                          1372  *-----------------------------------------------------------------------------
0000199E                          1373  *-----------------------------------------------------------------------------
0000199E                          1374  * NAME: OP_1011   (EOR, CMP)
0000199E                          1375  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000199E                          1376  * PRE-CONDITION:  xyz
0000199E                          1377  * POST-CONDITION: All registers return to their previous state, and the output
0000199E                          1378  *                 goes to the output console for reading the raw data or the
0000199E                          1379  *                 actual instruction.
0000199E                          1380  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000199E                          1381  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000199E                          1382  OP1011
0000199E                          1383  
0000199E  48A7 FFC0               1384          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
000019A2                          1385  
000019A2  3C3C 0006               1386          MOVE.W  #6, D6              * Prep lower value for bitmask
000019A6  3E3C 0008               1387          MOVE.W  #8, D7              * Prep upper value for bitmask
000019AA  6100 0CD6               1388          BSR     BITMASK             * Finalize bitmask setup
000019AE  CC42                    1389          AND     D2,D6               * Apply bitmask
000019B0                          1390          
000019B0                          1391          * Check to see if opmode is unsupported for both EOR and CMP
000019B0  0C46 00C0               1392          CMPI    #%0000000011000000, D6      * Is the OPMODE 011, unsupported by EOR/CMP?
000019B4  6700 0088               1393          BEQ     UNKNOWN1011                 * If so, the OP is unknown
000019B8  0C46 01C0               1394          CMPI    #%0000000111000000, D6      * Is the OPMODE 111, unsupported by EOR/CMP?
000019BC  6700 0080               1395          BEQ     UNKNOWN1011                 * If so, the OP is unknown
000019C0                          1396          
000019C0                          1397          * Check to see if it is CMP
000019C0  0C46 0000               1398          CMPI    #%0000000000000000, D6      * Is the OPMODE 000, a BYTE for CMP?
000019C4  6700 0038               1399          BEQ     NOTEOR                      * If so, the OP is CMP
000019C8  0C46 0040               1400          CMPI    #%0000000001000000, D6      * Is the OPMODE 000, a WORD for CMP?
000019CC  6700 0030               1401          BEQ     NOTEOR                      * If so, the OP is CMP
000019D0  0C46 0080               1402          CMPI    #%0000000010000000, D6      * Is the OPMODE 000, a LONG for CMP?
000019D4  6700 0028               1403          BEQ     NOTEOR                      * If so, the OP is CMP
000019D8                          1404  
000019D8                          1405          * Check to see EA mode is 001, unsupported by EOR
000019D8  3C3C 0003               1406          MOVE.W  #3, D6              * Prep lower value for bitmask
000019DC  3E3C 0005               1407          MOVE.W  #5, D7              * Prep upper value for bitmask
000019E0  6100 0CA0               1408          BSR     BITMASK             * Finalize bitmask setup
000019E4  CC42                    1409          AND     D2,D6               * Apply bitmask
000019E6                          1410          
000019E6  0C46 0040               1411          CMPI    #%0000000001000000, D6      * Is the mode 001, unsupported for EOR?
000019EA  6700 0052               1412          BEQ     UNKNOWN1011                 * If so, the op is unknown
000019EE                          1413          
000019EE                          1414          * Verified to be EOR at this point
000019EE  43F9 000026F7           1415          LEA     EOROP,A1            * We found EOR
000019F4  103C 000E               1416          MOVE.B  #14,D0              * Trap #14 prints out the data
000019F8  4E4F                    1417          TRAP    #15                 * Perform Trap #14
000019FA                          1418          
000019FA  6000 000E               1419          BRA     DISPLAY1011         * Branch to the end of 1011       
000019FE                          1420  
000019FE                          1421  NOTEOR
000019FE  43F9 000026F3           1422          LEA     CMPOP,A1            * We found CMP
00001A04  103C 000E               1423          MOVE.B  #14,D0              * Trap #14 prints out the data
00001A08  4E4F                    1424          TRAP    #15                 * Perform Trap #14
00001A0A                          1425          
00001A0A                          1426  DISPLAY1011
00001A0A  6100 07B4               1427          BSR     SIZE68
00001A0E                          1428          
00001A0E  6100 0426               1429          BSR     EAHELPER05
00001A12                          1430          
00001A12  43F9 000027A4           1431          LEA     COMMA,A1            * Formatting
00001A18  103C 000E               1432          MOVE.B  #14,D0              * Trap #14 prints out the data
00001A1C  4E4F                    1433          TRAP    #15                 * Perform Trap #14
00001A1E                          1434          
00001A1E  0882 0006               1435          BCLR    #6,D2               * Bit manipulation is 
00001A22  0882 0007               1436          BCLR    #7,D2               * necessary in order to make
00001A26  0882 0008               1437          BCLR    #8,D2               * EAHELPER611 work generically
00001A2A                          1438          
00001A2A  6100 03C8               1439          BSR     EAHELPER611         * Print out EA
00001A2E                          1440          
00001A2E  43F9 000026EB           1441          LEA     NEWLINE,A1          * Formatting
00001A34  103C 000E               1442          MOVE.B  #14,D0              * Trap #14 prints out the data
00001A38  4E4F                    1443          TRAP    #15                 * Perform Trap #14
00001A3A                          1444          
00001A3A  6000 0006               1445          BRA     DONE1011            * Branch to end 1011 and move to next op
00001A3E                          1446          
00001A3E                          1447  UNKNOWN1011
00001A3E  6100 09D8               1448          BSR     UNKNOWNOP           * Unknown op
00001A42                          1449                   
00001A42                          1450  DONE1011
00001A42  4C9F 03FF               1451          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
00001A46  4E75                    1452          RTS                         * Return to main
00001A48                          1453  
00001A48                          1454  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001A48                          1455  *-----------------------------------------------------------------------------
00001A48                          1456  
00001A48                          1457  
00001A48                          1458  
00001A48                          1459  *-----------------------------------------------------------------------------
00001A48                          1460  *-----------------------------------------------------------------------------
00001A48                          1461  * NAME: OP_1100   (MULS)
00001A48                          1462  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001A48                          1463  * PRE-CONDITION:  xyz
00001A48                          1464  * POST-CONDITION: All registers return to their previous state, and the output
00001A48                          1465  *                 goes to the output console for reading the raw data or the
00001A48                          1466  *                 actual instruction.
00001A48                          1467  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001A48                          1468  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001A48                          1469  OP1100
00001A48  48A7 FFC0               1470          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
00001A4C                          1471  
00001A4C                          1472          * Check if the EA Mode is 001 since MULS does not support it
00001A4C  3C3C 0003               1473          MOVE.W  #3, D6              * Prep lower value for bitmask
00001A50  3E3C 0005               1474          MOVE.W  #5, D7              * Prep upper value for bitmask
00001A54  6100 0C2C               1475          BSR     BITMASK             * Finalize bitmask setup
00001A58  CC42                    1476          AND     D2,D6               * Apply bitmask
00001A5A                          1477          
00001A5A  0C46 0008               1478          CMPI    #%0000000000001000, D6    * Is the mode 001, an unsupported mode?
00001A5E  6700 0068               1479          BEQ     UNKNOWN1100               * If so, the op is not supported
00001A62                          1480          
00001A62  3C3C 0006               1481          MOVE.W  #6, D6              * Prep lower value for bitmask
00001A66  3E3C 0008               1482          MOVE.W  #8, D7              * Prep upper value for bitmask
00001A6A  6100 0C16               1483          BSR     BITMASK             * Finalize bitmask setup
00001A6E  CC42                    1484          AND     D2,D6               * Apply bitmask
00001A70                          1485          
00001A70  0C46 01C0               1486          CMPI    #%0000000111000000, D6  * Are we MULS?
00001A74  6600 0052               1487          BNE     UNKNOWN1100             * If not, it is an unknown op
00001A78                          1488          
00001A78  43F9 0000272B           1489          LEA     MULSOP,A1           * We found MULS
00001A7E  103C 000E               1490          MOVE.B  #14,D0              * Trap #14 prints out the data
00001A82  4E4F                    1491          TRAP    #15                 * Perform Trap #14
00001A84                          1492          
00001A84  43F9 0000279E           1493          LEA     SPACE,A1            * formatting
00001A8A  103C 000E               1494          MOVE.B  #14,D0              * Trap #14 prints out space
00001A8E  4E4F                    1495          TRAP    #15                 * Perform Trap #14
00001A90                          1496          
00001A90  4243                    1497          CLR     D3                  * clear D3, it is a parameter
00001A92  08C3 0000               1498          BSET    #0,D3               * of EAHELPER05 to indicate size
00001A96                          1499          
00001A96  6100 039E               1500          BSR     EAHELPER05          * Print out data
00001A9A                          1501  
00001A9A  43F9 000027A4           1502          LEA     COMMA,A1            * formatting
00001AA0  103C 000E               1503          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001AA4  4E4F                    1504          TRAP    #15                 * Perform Trap #14
00001AA6                          1505          
00001AA6  0882 0006               1506          BCLR    #6,D2               * Bit manipulation is 
00001AAA  0882 0007               1507          BCLR    #7,D2               * necessary in order to make
00001AAE  0882 0008               1508          BCLR    #8,D2               * EAHELPER611 work generically
00001AB2                          1509          
00001AB2  6100 0340               1510          BSR     EAHELPER611         * Print out EA
00001AB6                          1511  
00001AB6  43F9 000026EB           1512          LEA     NEWLINE,A1          * Formatting
00001ABC  103C 000E               1513          MOVE.B  #14,D0              * Trap #14 prints out the data
00001AC0  4E4F                    1514          TRAP    #15                 * Perform Trap #14
00001AC2                          1515          
00001AC2  4C9F 03FF               1516          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
00001AC6  4E75                    1517          RTS                         * Return to main
00001AC8                          1518          
00001AC8                          1519  UNKNOWN1100
00001AC8  6100 094E               1520          BSR     UNKNOWNOP
00001ACC                          1521       
00001ACC  4C9F 03FF               1522          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
00001AD0  4E75                    1523          RTS                         * Return to main
00001AD2                          1524          
00001AD2                          1525  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001AD2                          1526  *-----------------------------------------------------------------------------
00001AD2                          1527  
00001AD2                          1528  
00001AD2                          1529  
00001AD2                          1530  
00001AD2                          1531  
00001AD2                          1532  
00001AD2                          1533  *-----------------------------------------------------------------------------
00001AD2                          1534  *-----------------------------------------------------------------------------
00001AD2                          1535  * NAME: OP_1101   (ADD, ADDA)
00001AD2                          1536  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001AD2                          1537  * PRE-CONDITION:  xyz
00001AD2                          1538  * POST-CONDITION: All registers return to their previous state, and the output
00001AD2                          1539  *                 goes to the output console for reading the raw data or the
00001AD2                          1540  *                 actual instruction.
00001AD2                          1541  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001AD2                          1542  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001AD2                          1543  OP1101
00001AD2  48E7 FFFE               1544          MOVEM.L A0-A6/D0-D7,-(A7)
00001AD6                          1545          
00001AD6  3C3C 0006               1546          MOVE.W  #6, D6              * Prep lower value for bitmask
00001ADA  3E3C 0008               1547          MOVE.W  #8, D7              * Prep upper value for bitmask
00001ADE  6100 0BA2               1548          BSR     BITMASK             * Finalize bitmask setup
00001AE2  CC42                    1549          AND     D2,D6               * Apply bitmask
00001AE4  EC4E                    1550          LSR     #6,D6
00001AE6                          1551  
00001AE6  0C06 0000               1552          CMPI.B  #%0000000000000000,D6
00001AEA  6700 003E               1553          BEQ     BYTE_EA_DN
00001AEE                          1554  
00001AEE  0C06 0001               1555          CMPI.B  #%0000000000000001,D6
00001AF2  6700 004E               1556          BEQ     WORD_EA_DN
00001AF6                          1557  
00001AF6  0C06 0002               1558          CMPI.B  #%0000000000000010,D6
00001AFA  6700 005E               1559          BEQ     LONG_EA_DN
00001AFE                          1560  
00001AFE  0C06 0003               1561          CMPI.B  #%0000000000000011,D6
00001B02  6700 006E               1562          BEQ     ADDA_WORD_OP
00001B06                          1563  
00001B06  0C06 0004               1564          CMPI.B  #%0000000000000100,D6
00001B0A  6700 0086               1565          BEQ     BYTE_DN_EA
00001B0E                          1566  
00001B0E  0C06 0005               1567          CMPI.B  #%0000000000000101,D6
00001B12  6700 0096               1568          BEQ     WORD_DN_EA
00001B16                          1569  
00001B16  0C06 0006               1570          CMPI.B  #%0000000000000110,D6
00001B1A  6700 00A6               1571          BEQ     LONG_DN_EA
00001B1E                          1572  
00001B1E  0C06 0007               1573          CMPI.B  #%0000000000000111,D6
00001B22  6700 00B6               1574          BEQ     ADDA_LONG_OP
00001B26                          1575  
00001B26  6000 011E               1576          BRA     ADD_ADDA_END
00001B2A                          1577          
00001B2A                          1578  BYTE_EA_DN
00001B2A  6100 00CE               1579          BSR     ADD_EA_DN_GENERIC       * print out 'ADD' base op name for ADDA too
00001B2E                          1580  
00001B2E  43F9 000027B2           1581          LEA     __B,A1                  * print out size
00001B34  103C 000E               1582          MOVE.B  #14,D0
00001B38  4E4F                    1583          TRAP    #15
00001B3A                          1584  
00001B3A  6100 00CC               1585          BSR     ADD_ADDA_SPACE          * print out space
00001B3E  6000 00EE               1586          BRA     ADD_ADDA_PRINT
00001B42                          1587  
00001B42                          1588  WORD_EA_DN
00001B42  6100 00B6               1589          BSR     ADD_EA_DN_GENERIC
00001B46                          1590  
00001B46  43F9 000027B6           1591          LEA     __W,A1
00001B4C  103C 000E               1592          MOVE.B  #14,D0
00001B50  4E4F                    1593          TRAP    #15
00001B52                          1594          
00001B52  6100 00B4               1595          BSR     ADD_ADDA_SPACE
00001B56  6000 00D6               1596          BRA     ADD_ADDA_PRINT
00001B5A                          1597          
00001B5A                          1598  LONG_EA_DN
00001B5A  6100 009E               1599          BSR     ADD_EA_DN_GENERIC
00001B5E                          1600  
00001B5E  43F9 000027BA           1601          LEA     __L,A1
00001B64  103C 000E               1602          MOVE.B  #14,D0
00001B68  4E4F                    1603          TRAP    #15
00001B6A                          1604  
00001B6A  6100 009C               1605          BSR     ADD_ADDA_SPACE
00001B6E  6000 00BE               1606          BRA     ADD_ADDA_PRINT
00001B72                          1607          
00001B72                          1608  ADDA_WORD_OP
00001B72  6100 0086               1609          BSR     ADD_EA_DN_GENERIC
00001B76                          1610  
00001B76  43F9 00002792           1611          LEA     ASCII_A,A1
00001B7C  103C 000E               1612          MOVE.B  #14,D0
00001B80  4E4F                    1613          TRAP    #15
00001B82                          1614  
00001B82  43F9 000027B6           1615          LEA     __W,A1
00001B88  103C 000E               1616          MOVE.B  #14,D0
00001B8C  4E4F                    1617          TRAP    #15
00001B8E                          1618          
00001B8E  6000 0086               1619          BRA     ADDA_PRT
00001B92                          1620          
00001B92                          1621  BYTE_DN_EA
00001B92  6100 0066               1622          BSR     ADD_EA_DN_GENERIC
00001B96                          1623          
00001B96  43F9 000027B2           1624          LEA     __B,A1
00001B9C  103C 000E               1625          MOVE.B  #14,D0
00001BA0  4E4F                    1626          TRAP    #15
00001BA2                          1627          
00001BA2  6100 0064               1628          BSR     ADD_ADDA_SPACE
00001BA6  6000 0086               1629          BRA     ADD_ADDA_PRINT
00001BAA                          1630  
00001BAA                          1631  WORD_DN_EA
00001BAA  6100 004E               1632          BSR     ADD_EA_DN_GENERIC
00001BAE                          1633  
00001BAE  43F9 000027B6           1634          LEA     __W,A1
00001BB4  103C 000E               1635          MOVE.B  #14,D0
00001BB8  4E4F                    1636          TRAP    #15 
00001BBA                          1637  
00001BBA  6100 004C               1638          BSR     ADD_ADDA_SPACE
00001BBE  6000 006E               1639          BRA     ADD_ADDA_PRINT
00001BC2                          1640  
00001BC2                          1641  LONG_DN_EA
00001BC2  6100 0036               1642          BSR     ADD_EA_DN_GENERIC
00001BC6                          1643          
00001BC6  43F9 000027BA           1644          LEA     __L,A1
00001BCC  103C 000E               1645          MOVE.B  #14,D0
00001BD0  4E4F                    1646          TRAP    #15     
00001BD2                          1647          
00001BD2  6100 0034               1648          BSR     ADD_ADDA_SPACE
00001BD6  6000 0056               1649          BRA     ADD_ADDA_PRINT
00001BDA                          1650  
00001BDA                          1651  ADDA_LONG_OP
00001BDA  6100 001E               1652          BSR     ADD_EA_DN_GENERIC
00001BDE                          1653          
00001BDE  43F9 00002792           1654          LEA     ASCII_A,A1
00001BE4  103C 000E               1655          MOVE.B  #14,D0
00001BE8  4E4F                    1656          TRAP    #15
00001BEA                          1657          
00001BEA  43F9 000027BA           1658          LEA     __L,A1
00001BF0  103C 000E               1659          MOVE.B  #14,D0
00001BF4  4E4F                    1660          TRAP    #15
00001BF6                          1661          
00001BF6  6000 001E               1662          BRA     ADDA_PRT
00001BFA                          1663          
00001BFA                          1664  ADD_EA_DN_GENERIC
00001BFA  43F9 0000277A           1665          LEA     OP_ADD_MSG,A1           * print out 'ADD'
00001C00  103C 000E               1666          MOVE.B  #14,D0
00001C04  4E4F                    1667          TRAP    #15
00001C06  4E75                    1668          RTS
00001C08                          1669          
00001C08                          1670  ADD_ADDA_SPACE
00001C08  43F9 0000279E           1671          LEA     SPACE,A1
00001C0E  103C 000E               1672          MOVE.B  #14,D0
00001C12  4E4F                    1673          TRAP    #15
00001C14  4E75                    1674          RTS
00001C16                          1675  
00001C16                          1676  ADDA_PRT
00001C16  6100 0364               1677          BSR     MODE_DN
00001C1A  43F9 000027A4           1678          LEA     COMMA,A1
00001C20  103C 000E               1679          MOVE.B  #14,D0
00001C24  4E4F                    1680          TRAP    #15
00001C26  6100 0454               1681          BSR     MODE_AN
00001C2A  6000 001A               1682          BRA     ADD_ADDA_END
00001C2E                          1683  
00001C2E                          1684  ADD_ADDA_PRINT
00001C2E                          1685  
00001C2E  6100 0206               1686          BSR     EAHELPER05          * Print out data. TODO: DOESN'T WORK.
00001C32                          1687  
00001C32  43F9 000027A4           1688          LEA     COMMA,A1            * formatting
00001C38  103C 000E               1689          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001C3C  4E4F                    1690          TRAP    #15                 * Perform Trap #14
00001C3E                          1691          
00001C3E  6100 01B4               1692          BSR     EAHELPER611
00001C42  6000 0002               1693          BRA     ADD_ADDA_END
00001C46                          1694          
00001C46                          1695  ADD_ADDA_END
00001C46  43F9 000026EB           1696          LEA     NEWLINE,A1
00001C4C  103C 000E               1697          MOVE.B  #14,D0
00001C50  4E4F                    1698          TRAP    #15
00001C52                          1699          
00001C52  4CDF 7FFF               1700          MOVEM.L (A7)+,A0-A6/D0-D7
00001C56  4E75                    1701          RTS
00001C58                          1702  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001C58                          1703  *-----------------------------------------------------------------------------
00001C58                          1704  
00001C58                          1705  
00001C58                          1706  
00001C58                          1707  *-----------------------------------------------------------------------------
00001C58                          1708  *-----------------------------------------------------------------------------
00001C58                          1709  * NAME: OP_1110   (LSL, LSR, ASL, ASR, ROL, ROR)
00001C58                          1710  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001C58                          1711  * PRE-CONDITION:  xyz
00001C58                          1712  * POST-CONDITION: All registers return to their previous state, and the output
00001C58                          1713  *                 goes to the output console for reading the raw data or the
00001C58                          1714  *                 actual instruction.
00001C58                          1715  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001C58                          1716  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001C58                          1717  OP1110
00001C58                          1718  
00001C58  48A7 FFC0               1719      MOVEM   D0-D7/A0-A1,-(A7)   * Caller saved
00001C5C                          1720  
00001C5C  7C03                    1721      MOVE.L  #3,D6
00001C5E  7E04                    1722      MOVE.L  #4,D7
00001C60                          1723      
00001C60  6100 0A20               1724      BSR     BITMASK * generate a bitmask for the 3 and 4 bits
00001C64                          1725      
00001C64  CC82                    1726      AND.L   D2,D6
00001C66                          1727      
00001C66  0C46 0008               1728      CMPI    #%0000000000001000,D6 *is it a logical shift
00001C6A  6700 001A               1729      BEQ     LS
00001C6E                          1730      
00001C6E  0C46 0000               1731      CMPI    #%0000000000000000,D6 *is it an arithmatic shift
00001C72  6700 0048               1732      BEQ     AS
00001C76                          1733      
00001C76  0C46 0018               1734      CMPI    #%0000000000011000,D6 *is it a rorate?
00001C7A  6700 0076               1735      BEQ     RO
00001C7E                          1736  
00001C7E  6100 0798               1737      BSR     UNKNOWNOP *if nothing above, we don't know what it is
00001C82  6000 0158               1738      BRA     ENDOP1110
00001C86                          1739      
00001C86                          1740  LS
00001C86  7C08                    1741      MOVE.L  #8,D6
00001C88  7E08                    1742      MOVE.L  #8,D7
00001C8A                          1743      
00001C8A  6100 09F6               1744      BSR     BITMASK
00001C8E                          1745      
00001C8E  CC82                    1746      AND.L   D2,D6
00001C90                          1747      
00001C90  0C46 0000               1748      CMPI    #0,D6 * is it a left shift?
00001C94  6700 0016               1749      BEQ     LSR
00001C98                          1750      
00001C98  6000 0002               1751      BRA     LSL * if not a left shift, must be right
00001C9C                          1752  
00001C9C                          1753  LSL
00001C9C                          1754  
00001C9C  43F9 0000273C           1755      LEA     LSLOP,A1            * formatting
00001CA2  103C 000E               1756      MOVE.B  #14,D0              * Trap #14 prints out LSL
00001CA6  4E4F                    1757      TRAP    #15                 * Perform Trap #14
00001CA8                          1758      
00001CA8  6000 007E               1759      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001CAC                          1760                                  * prints the registers and imm data
00001CAC                          1761  LSR
00001CAC                          1762  
00001CAC  43F9 00002740           1763      LEA     LSROP,A1            * formatting
00001CB2  103C 000E               1764      MOVE.B  #14,D0              * Trap #14 prints out LSR
00001CB6  4E4F                    1765      TRAP    #15                 * Perform Trap #14
00001CB8                          1766      
00001CB8  6000 006E               1767      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001CBC                          1768                                  * prints the registers and imm data
00001CBC                          1769  
00001CBC                          1770  AS
00001CBC  7C08                    1771      MOVE.L  #8,D6
00001CBE  7E08                    1772      MOVE.L  #8,D7
00001CC0                          1773      
00001CC0  6100 09C0               1774      BSR     BITMASK
00001CC4                          1775      
00001CC4  CC82                    1776      AND.L   D2,D6
00001CC6                          1777      
00001CC6  0C46 0000               1778      CMPI    #0,D6 * is it a left shift?
00001CCA  6700 0016               1779      BEQ     ASR
00001CCE                          1780      
00001CCE  6000 0002               1781      BRA     ASL * if not a left shift, must be right
00001CD2                          1782      
00001CD2                          1783  ASL
00001CD2                          1784  
00001CD2  43F9 00002744           1785      LEA     ASLOP,A1            * formatting
00001CD8  103C 000E               1786      MOVE.B  #14,D0              * Trap #14 prints out ASL
00001CDC  4E4F                    1787      TRAP    #15                 * Perform Trap #14
00001CDE                          1788      
00001CDE  6000 0048               1789      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001CE2                          1790                                  * prints the registers and imm data
00001CE2                          1791  ASR
00001CE2                          1792  
00001CE2  43F9 00002748           1793      LEA     ASROP,A1            * formatting
00001CE8  103C 000E               1794      MOVE.B  #14,D0              * Trap #14 prints out ASR
00001CEC  4E4F                    1795      TRAP    #15                 * Perform Trap #14
00001CEE                          1796      
00001CEE  6000 0038               1797      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001CF2                          1798                                  * prints the registers and imm data
00001CF2                          1799  RO
00001CF2  7C08                    1800      MOVE.L  #8,D6
00001CF4  7E08                    1801      MOVE.L  #8,D7
00001CF6                          1802      
00001CF6  6100 098A               1803      BSR     BITMASK
00001CFA                          1804      
00001CFA  CC82                    1805      AND.L   D2,D6
00001CFC                          1806      
00001CFC  0C46 0000               1807      CMPI    #0,D6 * is it a left shift?
00001D00  6700 0016               1808      BEQ     ROR
00001D04                          1809      
00001D04  6000 0002               1810      BRA     ROL * if not a left shift, must be right
00001D08                          1811  
00001D08                          1812  ROL
00001D08                          1813  
00001D08  43F9 0000274C           1814      LEA     ROLOP,A1            * formatting
00001D0E  103C 000E               1815      MOVE.B  #14,D0              * Trap #14 prints out ROL
00001D12  4E4F                    1816      TRAP    #15                 * Perform Trap #14
00001D14                          1817      
00001D14  6000 0012               1818      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001D18                          1819                                  * prints the registers and imm data
00001D18                          1820  ROR
00001D18                          1821  
00001D18  43F9 00002750           1822      LEA     ROROP,A1            * formatting
00001D1E  103C 000E               1823      MOVE.B  #14,D0              * Trap #14 prints out ROR
00001D22  4E4F                    1824      TRAP    #15                 * Perform Trap #14
00001D24                          1825      
00001D24  6000 0002               1826      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001D28                          1827                                  * prints the registers and imm data
00001D28                          1828  
00001D28                          1829  OP1110GENERIC
00001D28                          1830  
00001D28  6100 0452               1831      BSR     SIZE67
00001D2C                          1832      
00001D2C  7C05                    1833      MOVE.L  #5,D6
00001D2E  7E05                    1834      MOVE.L  #5,D7
00001D30                          1835      
00001D30  6100 0950               1836      BSR     BITMASK
00001D34                          1837      
00001D34  CC82                    1838      AND.L   D2,D6
00001D36                          1839      
00001D36  0C46 0020               1840      CMPI    #%0000000000100000,D6   *is it a data reg?
00001D3A  6700 0074               1841      BEQ     OP1110DATAREG
00001D3E                          1842      
00001D3E  43F9 000027A2           1843      LEA     IMD,A1              * formatting
00001D44  103C 000E               1844      MOVE.B  #14,D0              * Trap #14 prints out pound #
00001D48  4E4F                    1845      TRAP    #15                 * Perform Trap #14
00001D4A                          1846      
00001D4A  7C09                    1847      MOVE.L  #9,D6
00001D4C  7E0B                    1848      MOVE.L  #11,D7
00001D4E                          1849      
00001D4E  6100 0932               1850      BSR     BITMASK
00001D52                          1851      
00001D52  CC82                    1852      AND.L   D2,D6
00001D54                          1853      
00001D54  0C46 0000               1854      CMPI    #0,D6 * special case, if zero print #8 not #0
00001D58  6700 002E               1855      BEQ     OP1110IMMEIGHT
00001D5C                          1856      
00001D5C  E08E                    1857      LSR.L   #8,D6
00001D5E  E28E                    1858      LSR.L   #1,D6
00001D60                          1859      
00001D60  2206                    1860      MOVE.L  D6,D1              * formatting
00001D62  103C 0003               1861      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001D66  4E4F                    1862      TRAP    #15                * Perform Trap #14
00001D68                          1863      
00001D68  43F9 000027A4           1864      LEA     COMMA,A1            * formatting
00001D6E  103C 000E               1865      MOVE.B  #14,D0              * Trap #14 prints out comma
00001D72  4E4F                    1866      TRAP    #15                 * Perform Trap #1
00001D74                          1867      
00001D74                          1868      * in order to use the eahlpers, we need to do some bit manipulation
00001D74                          1869      * clearing the bits below lets our helper know that the mode is Dn
00001D74  0882 0003               1870      BCLR    #3,D2
00001D78  0882 0004               1871      BCLR    #4,D2
00001D7C  0882 0005               1872      BCLR    #5,D2
00001D80                          1873      
00001D80  6100 00B4               1874      BSR     EAHELPER05
00001D84                          1875      
00001D84  6000 0056               1876      BRA     ENDOP1110
00001D88                          1877      
00001D88                          1878  OP1110IMMEIGHT
00001D88                          1879  
00001D88  7208                    1880      MOVE.L  #8,D1              * formatting
00001D8A  103C 0003               1881      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001D8E  4E4F                    1882      TRAP    #15                * Perform Trap #14
00001D90                          1883      
00001D90  43F9 000027A4           1884      LEA     COMMA,A1            * formatting
00001D96  103C 000E               1885      MOVE.B  #14,D0              * Trap #14 prints out comma
00001D9A  4E4F                    1886      TRAP    #15                 * Perform Trap #1
00001D9C                          1887      
00001D9C                          1888      * in order to use the eahlpers, we need to do some bit manipulation
00001D9C                          1889      * clearing the bits below lets our helper know that the mode is Dn
00001D9C  0882 0003               1890      BCLR    #3,D2
00001DA0  0882 0004               1891      BCLR    #4,D2
00001DA4  0882 0005               1892      BCLR    #5,D2
00001DA8                          1893      
00001DA8  6100 008C               1894      BSR     EAHELPER05
00001DAC                          1895      
00001DAC  6000 002E               1896      BRA     ENDOP1110
00001DB0                          1897  
00001DB0                          1898  OP1110DATAREG
00001DB0                          1899  
00001DB0                          1900      * in order to use the eahlpers, we need to do some bit manipulation
00001DB0                          1901      * clearing the bits below lets our helper know that the mode is Dn
00001DB0  0882 0003               1902      BCLR    #3,D2
00001DB4  0882 0004               1903      BCLR    #4,D2
00001DB8  0882 0005               1904      BCLR    #5,D2
00001DBC  0882 0006               1905      BCLR    #6,D2
00001DC0  0882 0007               1906      BCLR    #7,D2
00001DC4  0882 0008               1907      BCLR    #8,D2
00001DC8                          1908      
00001DC8  6100 002A               1909      BSR     EAHELPER611
00001DCC                          1910      
00001DCC  43F9 000027A4           1911      LEA     COMMA,A1            * formatting
00001DD2  103C 000E               1912      MOVE.B  #14,D0              * Trap #14 prints out comma
00001DD6  4E4F                    1913      TRAP    #15                 * Perform Trap #14
00001DD8                          1914      
00001DD8  6100 005C               1915      BSR     EAHELPER05
00001DDC                          1916  
00001DDC                          1917  ENDOP1110
00001DDC                          1918  
00001DDC  43F9 000026EB           1919      LEA     NEWLINE,A1          * formatting
00001DE2  103C 000E               1920      MOVE.B  #14,D0              * Trap #14 prints out a new line
00001DE6  4E4F                    1921      TRAP    #15                 * Perform Trap #14
00001DE8                          1922      
00001DE8  4C9F 03FF               1923      MOVEM   (A7)+,D0-D7/A0-A1   * Caller saved
00001DEC  4E75                    1924      RTS
00001DEE                          1925  
00001DEE                          1926  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001DEE                          1927  *-----------------------------------------------------------------------------
00001DEE                          1928  
00001DEE                          1929  
00001DEE                          1930  
00001DEE                          1931  *-----------------------------------------------------------------------------
00001DEE                          1932  *-----------------------------------------------------------------------------
00001DEE                          1933  * NAME: OP_1111   ()
00001DEE                          1934  * DESCRIPTION:    a
00001DEE                          1935  * PRE-CONDITION:  b
00001DEE                          1936  * POST-CONDITION: c
00001DEE                          1937  * REGISTERS:      d
00001DEE                          1938  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001DEE                          1939  OP1111
00001DEE                          1940  
00001DEE  6100 0628               1941      BSR     UNKNOWNOP
00001DF2  4E75                    1942      RTS
00001DF4                          1943  
00001DF4                          1944  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001DF4                          1945  *-----------------------------------------------------------------------------
00001DF4                          1946  
00001DF4                          1947  
00001DF4                          1948  
00001DF4                          1949  *-----------------------------------------------------------------------------
00001DF4                          1950  *-----------------------------------------------------------------------------
00001DF4                          1951  * NAME:           EAHELPER611
00001DF4                          1952  * DESCRIPTION:    a
00001DF4                          1953  * PRE-CONDITION:  D2 contains the instruction to print modes for.
00001DF4                          1954  *                 D5 contains the size of the data to be printed
00001DF4                          1955  * POST-CONDITION: Determines if mode is direct, if it's not, passes D2 to 
00001DF4                          1956  *                 EAHELPER05 to print.
00001DF4                          1957  * REGISTERS:      a
00001DF4                          1958  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001DF4                          1959  EAHELPER611
00001DF4  48A7 FFC0               1960      MOVEM  D0-D7/A0-A1,-(A7)    * Push values onto stack
00001DF8                          1961      
00001DF8  3C3C 0006               1962      MOVE.W  #6, D6              * Prep lower value for bitmask
00001DFC  3E3C 0008               1963      MOVE.W  #8, D7              * Prep upper value for bitmask
00001E00  6100 0880               1964      BSR     BITMASK             * Finalize bitmask setup
00001E04  CC42                    1965      AND     D2,D6               * Apply bitmask
00001E06                          1966      
00001E06                          1967      * to move the mode where EAHELPER50 can process it
00001E06  7C06                    1968      MOVE.L  #6,D6       * Prep lower value of bitmask
00001E08  7E08                    1969      MOVE.L  #8,D7       * Prep upper value of bitmask
00001E0A  6100 0876               1970      BSR     BITMASK     * Create bitmask
00001E0E  CC42                    1971      AND     D2,D6       * Apply bitmask
00001E10                          1972      
00001E10  4243                    1973      CLR     D3      * prep D3 to store values
00001E12  3606                    1974      MOVE.W  D6,D3   * store bitmasked value in D3
00001E14  E64B                    1975      LSR     #3,D3   * move bits 6-8 to 3-5
00001E16                          1976      
00001E16                          1977      * to move the register where EAHELPER50 can process it
00001E16  7C09                    1978      MOVE.L  #9,D6   * Prep lower value for bitmask
00001E18  7E0B                    1979      MOVE.L  #11,D7  * Prep upper value for bitmask
00001E1A  6100 0866               1980      BSR     BITMASK * create bitmask
00001E1E  CC42                    1981      AND     D2,D6   * apply bitmask
00001E20                          1982      
00001E20  4244                    1983      CLR     D4      * prep D3 to store values
00001E22  3806                    1984      MOVE.W  D6,D4   * store bitmasked value in D3
00001E24                          1985      
00001E24  E04C                    1986      LSR     #8,D4   * move bits 9-11 to 0-2
00001E26  E24C                    1987      LSR     #1,D4   * move bits 9-11 to 0-2
00001E28                          1988    
00001E28  8684                    1989      OR.L    D4,D3   * combind the register and mode
00001E2A  2403                    1990      MOVE.L  D3,D2   * put the result in D2 so EAHELPER05 can process it
00001E2C                          1991      
00001E2C  6100 0008               1992      BSR     EAHELPER05
00001E30                          1993      
00001E30                          1994  ENDEAHELPER611
00001E30                          1995      
00001E30  4C9F 03FF               1996      MOVEM  (A7)+,D0-D7/A0-A1    * Revert back
00001E34  4E75                    1997      RTS
00001E36                          1998  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001E36                          1999  *-----------------------------------------------------------------------------
00001E36                          2000  
00001E36                          2001  
00001E36                          2002  
00001E36                          2003  *-----------------------------------------------------------------------------
00001E36                          2004  *-----------------------------------------------------------------------------
00001E36                          2005  * NAME:           EAHELPER05
00001E36                          2006  * DESCRIPTION:    a
00001E36                          2007  * PRE-CONDITION:  D2 contains the instruction to print modes for. Only call
00001E36                          2008  *                 this sub-routine helper for operations that only have one
00001E36                          2009  *                 mode register.
00001E36                          2010  *                 D3 contains the size of immediate it could be, 1 = byte
00001E36                          2011  *                 2 = word, 3 = long
00001E36                          2012  * POST-CONDITION: Determines mode, passes D2 to REGHELPER to print.
00001E36                          2013  * REGISTERS:      a
00001E36                          2014  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001E36                          2015  EAHELPER05
00001E36                          2016      * todo: add code for printing immediate values
00001E36                          2017      
00001E36  48A7 FFC0               2018      MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001E3A                          2019      
00001E3A  7C03                    2020      MOVE.L  #3,D6
00001E3C  7E05                    2021      MOVE.L  #5,D7
00001E3E                          2022      
00001E3E  6100 0842               2023      BSR     BITMASK * generate a bitmask to identify the mode
00001E42                          2024      
00001E42  CC42                    2025      AND     D2,D6   * mask off the parts of D2 we don't need
00001E44                          2026      
00001E44  2A06                    2027      MOVE.L  D6,D5   * store the 3-5 bitmask for later use
00001E46                          2028      
00001E46  0C46 0000               2029      CMPI    #%0000000000000000,D6 * is it data register direct?
00001E4A  6600 000A               2030      BNE     NOTDATAREG
00001E4E                          2031      
00001E4E  6100 012C               2032      BSR     MODE_DN
00001E52                          2033       
00001E52  6000 0122               2034      BRA     ENDEAHELPER05
00001E56                          2035      
00001E56                          2036  NOTDATAREG * address register direct
00001E56                          2037      
00001E56  0C46 0008               2038      CMPI    #%0000000000001000,D6 * is it address register direct?
00001E5A  6600 000A               2039      BNE     NOTADRDIRECT
00001E5E                          2040      
00001E5E  6100 021C               2041      BSR     MODE_AN * simply prints out the address register
00001E62                          2042       
00001E62  6000 0112               2043      BRA     ENDEAHELPER05
00001E66                          2044      
00001E66                          2045  NOTADRDIRECT * address register indirect
00001E66                          2046          
00001E66  0C46 0010               2047      CMPI    #%0000000000010000,D6 * is it address register indirect?
00001E6A  6600 0022               2048      BNE     NOTADRINDIRECT
00001E6E                          2049      
00001E6E  43F9 000027A6           2050      LEA     OBRACK,A1       * Load '('
00001E74  303C 000E               2051      MOVE.W  #14,D0          * Trap #14 to display message
00001E78  4E4F                    2052      TRAP    #15             * Perform #14
00001E7A                          2053          
00001E7A                          2054  
00001E7A  6100 0200               2055      BSR     MODE_AN * print out an address register
00001E7E                          2056      
00001E7E  43F9 000027A8           2057      LEA     CBRACK,A1       * Load ')'
00001E84  303C 000E               2058      MOVE.W  #14,D0          * Trap #14 to display message
00001E88  4E4F                    2059      TRAP    #15             * Perform #14
00001E8A                          2060       
00001E8A  6000 00EA               2061      BRA     ENDEAHELPER05
00001E8E                          2062      
00001E8E                          2063  NOTADRINDIRECT * address register indirect, post increment
00001E8E                          2064      
00001E8E  0C46 0018               2065      CMPI    #%0000000000011000,D6 * is it address register indirect post increment?
00001E92  6600 002E               2066      BNE     NOTADRINDIRECTPOST
00001E96                          2067      
00001E96  43F9 000027A6           2068      LEA     OBRACK,A1       * Load '('
00001E9C  303C 000E               2069      MOVE.W  #14,D0          * Trap #14 to display message
00001EA0  4E4F                    2070      TRAP    #15             * Perform #14
00001EA2                          2071          
00001EA2                          2072  
00001EA2  6100 01D8               2073      BSR     MODE_AN * print out an address register
00001EA6                          2074      
00001EA6  43F9 000027A8           2075      LEA     CBRACK,A1       * Load ')'
00001EAC  303C 000E               2076      MOVE.W  #14,D0          * Trap #14 to display message
00001EB0  4E4F                    2077      TRAP    #15             * Perform #14
00001EB2                          2078      
00001EB2  43F9 000027AA           2079      LEA     PLUS,A1       * Load '+'
00001EB8  303C 000E               2080      MOVE.W  #14,D0          * Trap #14 to display message
00001EBC  4E4F                    2081      TRAP    #15             * Perform #14
00001EBE                          2082       
00001EBE  6000 00B6               2083      BRA     ENDEAHELPER05
00001EC2                          2084      
00001EC2                          2085  NOTADRINDIRECTPOST * address register indirect, pre decrement
00001EC2                          2086      
00001EC2  0C46 0020               2087      CMPI    #%0000000000100000,D6 * is it address register indirect pre decrement?
00001EC6  6600 002E               2088      BNE     NOTADRINDIRECTPRE
00001ECA                          2089      
00001ECA  43F9 000027AC           2090      LEA     MINUS,A1       * Load '-'
00001ED0  303C 000E               2091      MOVE.W  #14,D0          * Trap #14 to display message
00001ED4  4E4F                    2092      TRAP    #15             * Perform #14
00001ED6                          2093      
00001ED6  43F9 000027A6           2094      LEA     OBRACK,A1       * Load '('
00001EDC  303C 000E               2095      MOVE.W  #14,D0          * Trap #14 to display message
00001EE0  4E4F                    2096      TRAP    #15             * Perform #14
00001EE2                          2097          
00001EE2                          2098  
00001EE2  6100 0198               2099      BSR     MODE_AN * print out an address register
00001EE6                          2100      
00001EE6  43F9 000027A8           2101      LEA     CBRACK,A1       * Load ')'
00001EEC  303C 000E               2102      MOVE.W  #14,D0          * Trap #14 to display message
00001EF0  4E4F                    2103      TRAP    #15             * Perform #14
00001EF2                          2104       
00001EF2  6000 0082               2105      BRA     ENDEAHELPER05
00001EF6                          2106  
00001EF6                          2107  NOTADRINDIRECTPRE
00001EF6                          2108  
00001EF6  0C46 0038               2109      CMPI    #%0000000000111000,D6 * is it immediate?
00001EFA  6600 0076               2110      BNE     NOTIMMEDIATE
00001EFE                          2111  
00001EFE  0C43 0001               2112      CMPI    #1,D3 * is it a byte?
00001F02  6600 0024               2113      BNE     NOTIMMBYTE
00001F06                          2114      
00001F06  43F9 000027A2           2115      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001F0C  103C 000E               2116      MOVE.B  #14,D0
00001F10  4E4F                    2117      TRAP    #15
00001F12                          2118      
00001F12  7C00                    2119      MOVE.L  #0, D6              * Prep lower value for bitmask
00001F14  7E07                    2120      MOVE.L  #7, D7              * Prep upper value for bitmask
00001F16  6100 076A               2121      BSR     BITMASK             * Finalize bitmask setup
00001F1A                          2122          
00001F1A  321A                    2123      MOVE.W  (A2)+,D1
00001F1C                          2124      
00001F1C  C286                    2125      AND.L     D6,D1
00001F1E                          2126          
00001F1E  103C 0003               2127      MOVE.B  #3,D0   
00001F22  4E4F                    2128      TRAP    #15      * Perform Trap #3
00001F24                          2129      
00001F24  6000 0050               2130      BRA     ENDEAHELPER05
00001F28                          2131  
00001F28                          2132  NOTIMMBYTE
00001F28                          2133      
00001F28  0C43 0002               2134      CMPI    #2,D3 * is it a word?
00001F2C  6600 0024               2135      BNE     NOTIMMWORD
00001F30                          2136      
00001F30  43F9 000027A2           2137      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001F36  103C 000E               2138      MOVE.B  #14,D0
00001F3A  4E4F                    2139      TRAP    #15
00001F3C                          2140      
00001F3C  7C00                    2141      MOVE.L  #0, D6              * Prep lower value for bitmask
00001F3E  7E0F                    2142      MOVE.L  #15, D7             * Prep upper value for bitmask
00001F40  6100 0740               2143      BSR     BITMASK             * Finalize bitmask setup
00001F44                          2144          
00001F44  321A                    2145      MOVE.W  (A2)+,D1
00001F46                          2146      
00001F46  C286                    2147      AND.L    D6,D1               * Apply bitmask
00001F48                          2148          
00001F48  103C 0003               2149      MOVE.B  #3,D0   
00001F4C  4E4F                    2150      TRAP    #15      * Perform Trap #3
00001F4E                          2151      
00001F4E  6000 0026               2152      BRA     ENDEAHELPER05
00001F52                          2153      
00001F52                          2154  NOTIMMWORD
00001F52  0C43 0003               2155      CMPI    #3,D3 * is it a long?
00001F56  6600 001A               2156      BNE     NOTIMMEDIATE
00001F5A                          2157      
00001F5A  43F9 000027A2           2158      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001F60  103C 000E               2159      MOVE.B  #14,D0
00001F64  4E4F                    2160      TRAP    #15
00001F66                          2161          
00001F66  221A                    2162      MOVE.L  (A2)+,D1
00001F68                          2163          
00001F68  103C 0003               2164      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001F6C  4E4F                    2165      TRAP    #15      * Perform Trap #3
00001F6E                          2166      
00001F6E  6000 0006               2167      BRA     ENDEAHELPER05
00001F72                          2168  
00001F72                          2169  NOTIMMEDIATE    
00001F72                          2170  
00001F72                          2171  
00001F72  6100 04A4               2172      BSR     UNKNOWNOP
00001F76                          2173      
00001F76                          2174  ENDEAHELPER05
00001F76  4C9F 03FF               2175      MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001F7A  4E75                    2176      RTS
00001F7C                          2177  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001F7C                          2178  *-----------------------------------------------------------------------------
00001F7C                          2179  
00001F7C                          2180  
00001F7C                          2181  
00001F7C                          2182  *-----------------------------------------------------------------------------
00001F7C                          2183  *-----------------------------------------------------------------------------
00001F7C                          2184  * NAME:           MODE_DN
00001F7C                          2185  * DESCRIPTION:    Generalize the EA part of the project.
00001F7C                          2186  * PRE-CONDITION:  The mode must have been correctly identified. All modes
00001F7C                          2187  *                 must be called by RTS.
00001F7C                          2188  * POST-CONDITION: After the EA, the entire op will head back to the BSR that
00001F7C                          2189  *                 called it.
00001F7C                          2190  * REGISTERS:      a
00001F7C                          2191  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001F7C                          2192  * ---> Dn
00001F7C                          2193  MODE_DN
00001F7C  48A7 FFC0               2194          MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001F80                          2195  
00001F80  3C3C 0000               2196          MOVE.W  #0, D6              * Prep lower value for bitmask
00001F84  3E3C 0002               2197          MOVE.W  #2, D7              * Prep upper value for bitmask
00001F88  6100 06F8               2198          BSR     BITMASK             * Finalize bitmask setup
00001F8C  CC42                    2199          AND     D2,D6               * Apply bitmask
00001F8E                          2200          
00001F8E  0C46 0000               2201          CMPI    #%000000000000000, D6   * Data Register D0?
00001F92  6600 000A               2202          BNE     NOTD0
00001F96                          2203          
00001F96  6100 0074               2204          BSR     PRINTD0
00001F9A  6000 006A               2205          BRA     ENDMODE_DN
00001F9E                          2206  NOTD0      
00001F9E  0C46 0001               2207          CMPI    #%000000000000001, D6   * Data Register D1?
00001FA2  6600 000A               2208          BNE     NOTD1
00001FA6                          2209          
00001FA6  6100 0072               2210          BSR     PRINTD1
00001FAA  6000 005A               2211          BRA     ENDMODE_DN
00001FAE                          2212  NOTD1
00001FAE  0C46 0002               2213          CMPI    #%000000000000010, D6   * Data Register D2?
00001FB2  6600 000A               2214          BNE     NOTD2
00001FB6                          2215          
00001FB6  6100 0070               2216          BSR     PRINTD2
00001FBA  6000 004A               2217          BRA     ENDMODE_DN
00001FBE                          2218  NOTD2
00001FBE  0C46 0003               2219          CMPI    #%000000000000011, D6   * Data Register D3?
00001FC2  6600 000A               2220          BNE     NOTD3
00001FC6                          2221          
00001FC6  6100 006E               2222          BSR     PRINTD3
00001FCA  6000 003A               2223          BRA     ENDMODE_DN
00001FCE                          2224  NOTD3
00001FCE  0C46 0004               2225          CMPI    #%000000000000100, D6   * Data Register D4?
00001FD2  6600 000A               2226          BNE     NOTD4
00001FD6                          2227          
00001FD6  6100 006C               2228          BSR     PRINTD4
00001FDA  6000 002A               2229          BRA     ENDMODE_DN
00001FDE                          2230  NOTD4
00001FDE  0C46 0005               2231          CMPI    #%000000000000101, D6   * Data Register D5?
00001FE2  6600 000A               2232          BNE     NOTD5
00001FE6                          2233          
00001FE6  6100 006A               2234          BSR     PRINTD5
00001FEA  6000 001A               2235          BRA     ENDMODE_DN
00001FEE                          2236  NOTD5
00001FEE  0C46 0006               2237          CMPI    #%000000000000110, D6   * Data Register D6?
00001FF2  6600 000A               2238          BNE     NOTD6
00001FF6                          2239          
00001FF6  6100 0068               2240          BSR     PRINTD6
00001FFA  6000 000A               2241          BRA     ENDMODE_DN
00001FFE                          2242  NOTD6
00001FFE  6100 006E               2243          BSR     PRINTD7
00002002  6000 0002               2244          BRA     ENDMODE_DN
00002006                          2245          
00002006                          2246  ENDMODE_DN
00002006  4C9F 03FF               2247          MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
0000200A  4E75                    2248          RTS
0000200C                          2249  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000200C                          2250  *-----------------------------------------------------------------------------
0000200C                          2251  
0000200C                          2252  
0000200C                          2253  
0000200C                          2254  *-----------------------------------------------------------------------------
0000200C                          2255  *-----------------------------------------------------------------------------
0000200C                          2256  * NAME:           PRINTD0
0000200C                          2257  * DESCRIPTION:    Simply prints D0, D1, ..., up to D7.
0000200C                          2258  * PRE-CONDITION:  a
0000200C                          2259  * POST-CONDITION: a
0000200C                          2260  * REGISTERS:      a
0000200C                          2261  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000200C                          2262  PRINTD0
0000200C  43F9 000027D6           2263          LEA     __D0, A1        * Load 'D0'
00002012  103C 000E               2264          MOVE.B  #14, D0         * Load Trap #14 to print out
00002016  4E4F                    2265          TRAP    #15             * Perform Trap #14
00002018  4E75                    2266          RTS
0000201A                          2267  PRINTD1
0000201A  43F9 000027D9           2268          LEA     __D1, A1        * Load 'D1'
00002020  103C 000E               2269          MOVE.B  #14, D0         * Load Trap #14 to print out
00002024  4E4F                    2270          TRAP    #15             * Perform Trap #14
00002026  4E75                    2271          RTS      
00002028                          2272  PRINTD2
00002028  43F9 000027DC           2273          LEA     __D2, A1        * Load 'D2'
0000202E  103C 000E               2274          MOVE.B  #14, D0         * Load Trap #14 to print out
00002032  4E4F                    2275          TRAP    #15             * Perform Trap #14
00002034  4E75                    2276          RTS      
00002036                          2277  PRINTD3
00002036  43F9 000027DF           2278          LEA     __D3, A1        * Load 'D3'
0000203C  103C 000E               2279          MOVE.B  #14, D0         * Load Trap #14 to print out
00002040  4E4F                    2280          TRAP    #15             * Perform Trap #14
00002042  4E75                    2281          RTS      
00002044                          2282  PRINTD4
00002044  43F9 000027E2           2283          LEA     __D4, A1        * Load 'D4'
0000204A  103C 000E               2284          MOVE.B  #14, D0         * Load Trap #14 to print out
0000204E  4E4F                    2285          TRAP    #15             * Perform Trap #14
00002050  4E75                    2286          RTS       
00002052                          2287  PRINTD5
00002052  43F9 000027E5           2288          LEA     __D5, A1        * Load 'D5'
00002058  103C 000E               2289          MOVE.B  #14, D0         * Load Trap #14 to print out
0000205C  4E4F                    2290          TRAP    #15             * Perform Trap #14
0000205E  4E75                    2291          RTS      
00002060                          2292  PRINTD6
00002060  43F9 000027E8           2293          LEA     __D6, A1        * Load 'D6'
00002066  103C 000E               2294          MOVE.B  #14, D0         * Load Trap #14 to print out
0000206A  4E4F                    2295          TRAP    #15             * Perform Trap #14
0000206C  4E75                    2296          RTS
0000206E                          2297  PRINTD7
0000206E  43F9 000027EB           2298          LEA     __D7, A1        * Load 'D7'
00002074  103C 000E               2299          MOVE.B  #14, D0         * Load Trap #14 to print out
00002078  4E4F                    2300          TRAP    #15             * Perform Trap #14
0000207A  4E75                    2301          RTS
0000207C                          2302  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000207C                          2303  *-----------------------------------------------------------------------------
0000207C                          2304  
0000207C                          2305  
0000207C                          2306  
0000207C                          2307  *-----------------------------------------------------------------------------
0000207C                          2308  *-----------------------------------------------------------------------------
0000207C                          2309  * NAME:           MODE_AN
0000207C                          2310  * DESCRIPTION:    Simply chooses to print A0-A7.
0000207C                          2311  * PRE-CONDITION:  a
0000207C                          2312  * POST-CONDITION: a
0000207C                          2313  * REGISTERS:      a
0000207C                          2314  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000207C                          2315  MODE_AN
0000207C  48A7 FFC0               2316          MOVEM   D0-D7/A0-A1,-(A7)   * Save information
00002080                          2317  
00002080  3C3C 0000               2318          MOVE.W  #0, D6              * Prep lower value for bitmask
00002084  3E3C 0002               2319          MOVE.W  #2, D7              * Prep upper value for bitmask
00002088  6100 05F8               2320          BSR     BITMASK             * Finalize bitmask setup
0000208C  CC42                    2321          AND     D2,D6               * Apply bitmask
0000208E                          2322          
0000208E  0C46 0000               2323          CMPI    #%000000000000000, D6   * Address Register A0?
00002092  6600 000A               2324          BNE     NOTA0
00002096                          2325          
00002096  6100 0074               2326          BSR     PRINTA0
0000209A                          2327          
0000209A  6000 006A               2328          BRA     ENDMODE_AN
0000209E                          2329  NOTA0      
0000209E  0C46 0001               2330          CMPI    #%000000000000001, D6   * Address Register A1?
000020A2  6600 000A               2331          BNE     NOTA1
000020A6                          2332          
000020A6  6100 0072               2333          BSR     PRINTA1
000020AA                          2334          
000020AA  6000 005A               2335          BRA     ENDMODE_AN
000020AE                          2336  NOTA1
000020AE  0C46 0002               2337          CMPI    #%000000000000010, D6   * Address Register A2?
000020B2  6600 000A               2338          BNE     NOTA2
000020B6                          2339          
000020B6  6100 0070               2340          BSR     PRINTA2
000020BA                          2341          
000020BA  6000 004A               2342          BRA     ENDMODE_AN
000020BE                          2343  NOTA2
000020BE  0C46 0003               2344          CMPI    #%000000000000011, D6   * Address Register A3?
000020C2  6600 000A               2345          BNE     NOTA3
000020C6                          2346          
000020C6  6100 006E               2347          BSR     PRINTA3
000020CA                          2348          
000020CA  6000 003A               2349          BRA     ENDMODE_AN
000020CE                          2350  NOTA3
000020CE  0C46 0004               2351          CMPI    #%000000000000100, D6   * Address Register A4?
000020D2  6600 000A               2352          BNE     NOTA4
000020D6                          2353          
000020D6  6100 006C               2354          BSR     PRINTA4
000020DA                          2355          
000020DA  6000 002A               2356          BRA     ENDMODE_AN
000020DE                          2357  NOTA4
000020DE  0C46 0005               2358          CMPI    #%000000000000101, D6   * Address Register A5?
000020E2  6600 000A               2359          BNE     NOTA5
000020E6                          2360          
000020E6  6100 006A               2361          BSR     PRINTA5
000020EA                          2362          
000020EA  6000 001A               2363          BRA     ENDMODE_AN
000020EE                          2364  NOTA5
000020EE  0C46 0006               2365          CMPI    #%000000000000110, D6   * Address Register A6?
000020F2  6600 000A               2366          BNE     NOTA6
000020F6                          2367          
000020F6  6100 0068               2368          BSR     PRINTA6
000020FA                          2369          
000020FA  6000 000A               2370          BRA     ENDMODE_AN
000020FE                          2371  NOTA6
000020FE  6100 006E               2372          BSR     PRINTA7
00002102                          2373          
00002102  6000 0002               2374          BRA     ENDMODE_AN
00002106                          2375  ENDMODE_AN
00002106  4C9F 03FF               2376          MOVEM   (A7)+,D0-D7/A0-A1   * Restore registers
0000210A  4E75                    2377          RTS
0000210C                          2378  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000210C                          2379  *-----------------------------------------------------------------------------
0000210C                          2380  
0000210C                          2381  
0000210C                          2382  
0000210C                          2383  *-----------------------------------------------------------------------------
0000210C                          2384  *-----------------------------------------------------------------------------
0000210C                          2385  * NAME:           PRINTA0
0000210C                          2386  * DESCRIPTION:    Simply print out the address register.
0000210C                          2387  * PRE-CONDITION:  a
0000210C                          2388  * POST-CONDITION: a
0000210C                          2389  * REGISTERS:      a
0000210C                          2390  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000210C                          2391  PRINTA0
0000210C  43F9 000027BE           2392          LEA     __A0, A1        * Load 'A0'
00002112  103C 000E               2393          MOVE.B  #14, D0         * Load Trap #14 to print out
00002116  4E4F                    2394          TRAP    #15             * Perform Trap #14
00002118  4E75                    2395          RTS
0000211A                          2396  
0000211A                          2397  PRINTA1
0000211A  43F9 000027C1           2398          LEA     __A1, A1        * Load 'A1'
00002120  103C 000E               2399          MOVE.B  #14, D0         * Load Trap #14 to print out
00002124  4E4F                    2400          TRAP    #15             * Perform Trap #14
00002126  4E75                    2401          RTS
00002128                          2402          
00002128                          2403  PRINTA2
00002128  43F9 000027C4           2404          LEA     __A2, A1        * Load 'A2'
0000212E  103C 000E               2405          MOVE.B  #14, D0         * Load Trap #14 to print out
00002132  4E4F                    2406          TRAP    #15             * Perform Trap #14
00002134  4E75                    2407          RTS
00002136                          2408  
00002136                          2409  PRINTA3
00002136  43F9 000027C7           2410          LEA     __A3, A1        * Load 'A3'
0000213C  103C 000E               2411          MOVE.B  #14, D0         * Load Trap #14 to print out
00002140  4E4F                    2412          TRAP    #15             * Perform Trap #14
00002142  4E75                    2413          RTS
00002144                          2414  
00002144                          2415  PRINTA4
00002144  43F9 000027CA           2416          LEA     __A4, A1        * Load 'A4'
0000214A  103C 000E               2417          MOVE.B  #14, D0         * Load Trap #14 to print out
0000214E  4E4F                    2418          TRAP    #15             * Perform Trap #14
00002150  4E75                    2419          RTS
00002152                          2420  
00002152                          2421  PRINTA5
00002152  43F9 000027CD           2422          LEA     __A5, A1        * Load 'A5'
00002158  103C 000E               2423          MOVE.B  #14, D0         * Load Trap #14 to print out
0000215C  4E4F                    2424          TRAP    #15             * Perform Trap #14
0000215E  4E75                    2425          RTS
00002160                          2426  
00002160                          2427  PRINTA6
00002160  43F9 000027D0           2428          LEA     __A6, A1        * Load 'A6'
00002166  103C 000E               2429          MOVE.B  #14, D0         * Load Trap #14 to print out
0000216A  4E4F                    2430          TRAP    #15             * Perform Trap #14
0000216C  4E75                    2431          RTS
0000216E                          2432  
0000216E                          2433  PRINTA7
0000216E  43F9 000027D3           2434          LEA     __A7, A1        * Load 'A7'
00002174  103C 000E               2435          MOVE.B  #14, D0         * Load Trap #14 to print out
00002178  4E4F                    2436          TRAP    #15             * Perform Trap #14
0000217A  4E75                    2437          RTS
0000217C                          2438  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000217C                          2439  *-----------------------------------------------------------------------------
0000217C                          2440  
0000217C                          2441  
0000217C                          2442  
0000217C                          2443  *-----------------------------------------------------------------------------
0000217C                          2444  *-----------------------------------------------------------------------------
0000217C                          2445  * NAME:           SIZE67
0000217C                          2446  * DESCRIPTION:    Called if the size is stored in bits 6 to 7.
0000217C                          2447  * PRE-CONDITION:  a
0000217C                          2448  * POST-CONDITION: a
0000217C                          2449  * REGISTERS:      a
0000217C                          2450  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000217C                          2451  SIZE67
0000217C  48A7 FFFE               2452          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
00002180  3C3C 0006               2453          MOVE.W  #6, D6              * Prep lower value for bitmask
00002184  3E3C 0007               2454          MOVE.W  #7, D7              * Prep upper value for bitmask
00002188  6100 04F8               2455          BSR     BITMASK             * Finalize bitmask setup
0000218C  CC42                    2456          AND     D2,D6               * Apply bitmask     
0000218E                          2457  
0000218E  0C46 0000               2458          CMPI    #%0000000000000000, D6   * is it a BYTE?
00002192  6600 000A               2459          BNE     NOT67BYTE
00002196                          2460          
00002196  6100 009C               2461          BSR     PRINTBYTE               * Branch to handle BYTE sizes
0000219A  6000 001E               2462          BRA     END67
0000219E                          2463  NOT67BYTE        
0000219E  0C46 0040               2464          CMPI    #%0000000001000000, D6   * is it a WORD?
000021A2  6600 000A               2465          BNE     NOT67WORD
000021A6                          2466          
000021A6  6100 009A               2467          BSR     PRINTWORD               * Branch to handle WORD sizes
000021AA  6000 000E               2468          BRA     END67
000021AE                          2469  NOT67WORD
000021AE  0C46 0080               2470          CMPI    #%0000000010000000, D6   * is it a LONG?
000021B2  6600 0006               2471          BNE     END67
000021B6                          2472          
000021B6  6100 0098               2473          BSR     PRINTLONG               * Branch to handle LONG sizes
000021BA                          2474  END67
000021BA  4C9F 7FFF               2475          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
000021BE  4E75                    2476          RTS                             * Return. Size handling is finished.
000021C0                          2477  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000021C0                          2478  *-----------------------------------------------------------------------------
000021C0                          2479  
000021C0                          2480  
000021C0                          2481  
000021C0                          2482  *-----------------------------------------------------------------------------
000021C0                          2483  *-----------------------------------------------------------------------------
000021C0                          2484  * NAME:           SIZE68
000021C0                          2485  * DESCRIPTION:    Called if the size is stored in bits 6 to 8.
000021C0                          2486  * PRE-CONDITION:  a
000021C0                          2487  * POST-CONDITION: a
000021C0                          2488  * REGISTERS:      a
000021C0                          2489  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000021C0                          2490  SIZE68
000021C0                          2491  
000021C0  48A7 FFFE               2492          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
000021C4  3C3C 0006               2493          MOVE.W  #6, D6              * Prep lower value for bitmask
000021C8  3E3C 0008               2494          MOVE.W  #8, D7              * Prep upper value for bitmask
000021CC  6100 04B4               2495          BSR     BITMASK             * Finalize bitmask setup
000021D0  CC42                    2496          AND     D2,D6               * Apply bitmask       
000021D2                          2497  
000021D2  0C46 0000               2498          CMPI    #%0000000000000000, D6  * is it a BYTE?
000021D6  6700 003E               2499          BEQ     PRINTBYTE68               * Branch to handle BYTE sizes
000021DA  0C46 0100               2500          CMPI    #%0000000100000000, D6  * is it a BYTE?
000021DE  6700 0036               2501          BEQ     PRINTBYTE68               * Branch to handle BYTE sizes 
000021E2                          2502        
000021E2  0C46 0040               2503          CMPI    #%0000000001000000, D6  * is it a WORD?
000021E6  6700 0036               2504          BEQ     PRINTWORD68               * Branch to handle BYTE sizes
000021EA  0C46 0140               2505          CMPI    #%0000000101000000, D6  * is it a WORD?
000021EE  6700 002E               2506          BEQ     PRINTWORD68               * Branch to handle BYTE sizes
000021F2  0C46 00C0               2507          CMPI    #%0000000011000000, D6  * is it a WORD (ADDA)?
000021F6  6700 0026               2508          BEQ     PRINTWORD68               * Branch to handle BYTE sizes
000021FA                          2509  
000021FA  0C46 0080               2510          CMPI    #%0000000010000000, D6  * is it a LONG?
000021FE  6700 0026               2511          BEQ     PRINTLONG68               * Branch to handle BYTE sizes
00002202  0C46 0180               2512          CMPI    #%0000000110000000, D6  * is it a LONG?
00002206  6700 001E               2513          BEQ     PRINTLONG68               * Branch to handle BYTE sizes
0000220A  0C46 01C0               2514          CMPI    #%0000000111000000, D6  * is it a LONG (ADDA)?
0000220E  6700 0016               2515          BEQ     PRINTLONG68               * Branch to handle BYTE sizes
00002212                          2516  
00002212  6000 001A               2517          BRA     END68
00002216                          2518          
00002216                          2519  PRINTBYTE68
00002216  6100 001C               2520          BSR     PRINTBYTE
0000221A  6000 0012               2521          BRA     END68
0000221E                          2522  
0000221E                          2523  PRINTWORD68
0000221E  6100 0022               2524          BSR     PRINTWORD
00002222  6000 000A               2525          BRA     END68
00002226                          2526          
00002226                          2527  PRINTLONG68
00002226  6100 0028               2528          BSR     PRINTLONG
0000222A  6000 0002               2529          BRA     END68
0000222E                          2530  
0000222E                          2531  END68
0000222E  4C9F 7FFF               2532          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
00002232  4E75                    2533          RTS                             * Return. Size handling is finished.
00002234                          2534  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002234                          2535  *-----------------------------------------------------------------------------
00002234                          2536  
00002234                          2537  
00002234                          2538  
00002234                          2539  *-----------------------------------------------------------------------------
00002234                          2540  *-----------------------------------------------------------------------------
00002234                          2541  * NAME:           PRINTBYTE
00002234                          2542  * DESCRIPTION:    a
00002234                          2543  * PRE-CONDITION:  a
00002234                          2544  * POST-CONDITION: a
00002234                          2545  * REGISTERS:      a
00002234                          2546  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002234                          2547  PRINTBYTE
00002234  43F9 000027B2           2548          LEA     __B,A1      * Load '.B ' into A1
0000223A  103C 000E               2549          MOVE.B  #14,D0      * Trap #14 setup to print
0000223E  4E4F                    2550          TRAP    #15         * Perform Trap #14
00002240  4E75                    2551          RTS                 * Return to SIZE67/SIZE68
00002242                          2552          
00002242                          2553  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002242                          2554  *-----------------------------------------------------------------------------
00002242                          2555  
00002242                          2556  
00002242                          2557  
00002242                          2558  *-----------------------------------------------------------------------------
00002242                          2559  *-----------------------------------------------------------------------------
00002242                          2560  * NAME:           PRINTWORD
00002242                          2561  * DESCRIPTION:    a
00002242                          2562  * PRE-CONDITION:  a
00002242                          2563  * POST-CONDITION: a
00002242                          2564  * REGISTERS:      a
00002242                          2565  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002242                          2566  PRINTWORD
00002242  43F9 000027B6           2567          LEA     __W,A1      * Load '.W ' into A1
00002248  103C 000E               2568          MOVE.B  #14,D0      * Trap #14 setup to print
0000224C  4E4F                    2569          TRAP    #15         * Perform Trap #14
0000224E  4E75                    2570          RTS                 * Return to SIZE67/SIZE68
00002250                          2571          
00002250                          2572  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002250                          2573  *-----------------------------------------------------------------------------
00002250                          2574  
00002250                          2575  
00002250                          2576  
00002250                          2577  *-----------------------------------------------------------------------------
00002250                          2578  *-----------------------------------------------------------------------------
00002250                          2579  * NAME:           PRINTLONG
00002250                          2580  * DESCRIPTION:    a
00002250                          2581  * PRE-CONDITION:  a
00002250                          2582  * POST-CONDITION: a
00002250                          2583  * REGISTERS:      a
00002250                          2584  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002250                          2585  PRINTLONG
00002250  43F9 000027BA           2586          LEA     __L,A1      * Load '.L ' into A1
00002256  103C 000E               2587          MOVE.B  #14,D0      * Trap #14 setup to print
0000225A  4E4F                    2588          TRAP    #15         * Perform Trap #14
0000225C  4E75                    2589          RTS                 * Return to SIZE67/SIZE68
0000225E                          2590          
0000225E                          2591  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000225E                          2592  *-----------------------------------------------------------------------------
0000225E                          2593  
0000225E                          2594  
0000225E                          2595  
0000225E                          2596  *-----------------------------------------------------------------------------
0000225E                          2597  *-----------------------------------------------------------------------------
0000225E                          2598  * NAME:           MOVEMHELPERPOST
0000225E                          2599  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
0000225E                          2600  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
0000225E                          2601  * POST-CONDITION: The registers being saved are printed
0000225E                          2602  * REGISTERS:      A2
0000225E                          2603  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000225E                          2604  MOVEMHELPERPOST
0000225E  48A7 FFFE               2605          MOVEM  D0-D7/A0-A6,-(A7)
00002262                          2606          
00002262  4285                    2607          CLR.L   D5  * to be used as a loop counter
00002264  4284                    2608          CLR.L   D4  * == 1 if we have printed any registers (for fencepost issue)
00002266  4283                    2609          CLR.L   D3  * == 1 if we are in a range
00002268  4286                    2610          CLR.L   D6  * == 1 if we have already printed the slash or dash
0000226A  4287                    2611          CLR.L   D7  * == counts the number of registers in a range
0000226C  1C3C 0001               2612          MOVE.B  #1,D6 * to fix fencepost issue
00002270  4282                    2613          CLR.L   D2
00002272  3412                    2614          MOVE.W  (A2),D2
00002274                          2615          
00002274                          2616  DLOOP * loop to print out the data register portion of the addresses being saved
00002274                          2617  
00002274  E25A                    2618          ROR     #1,D2
00002276  6500 0006               2619          BCS     DVALID
0000227A                          2620          
0000227A  6000 0064               2621          BRA     DINVALID
0000227E                          2622          
0000227E                          2623  DVALID
0000227E  0C43 0000               2624          CMPI    #0,D3
00002282  6700 0020               2625          BEQ     DFORWARDVALID * we are not in a range
00002286                          2626          
00002286  5247                    2627          ADDI    #1,D7 *increment number of regs in range
00002288                          2628          
00002288  0C46 0001               2629          CMPI    #1,D6   *have we already printed a symbol?
0000228C  6700 0086               2630          BEQ     DLOOPITER
00002290                          2631          
00002290  43F9 000027B0           2632          LEA     DASH,A1    *print a dash
00002296  103C 000E               2633          MOVE.B  #14,D0
0000229A  4E4F                    2634          TRAP    #15
0000229C                          2635          
0000229C  1C3C 0001               2636          MOVE.B  #1,D6 * indicates a symbol has been printed
000022A0                          2637          
000022A0  6000 0072               2638          BRA     DLOOPITER
000022A4                          2639          
000022A4                          2640  DFORWARDVALID
000022A4                          2641          * not in a range yet, print
000022A4                          2642          
000022A4  0C44 0000               2643          CMPI    #0,D4
000022A8  6700 000E               2644          BEQ     DNOSLASH
000022AC                          2645                  
000022AC  43F9 000027AE           2646          LEA     SLASH,A1
000022B2  103C 000E               2647          MOVE.B  #14,D0
000022B6  4E4F                    2648          TRAP    #15
000022B8                          2649          
000022B8                          2650  DNOSLASH
000022B8                          2651  
000022B8  183C 0001               2652          MOVE.B  #1,D4 * we have printed something, now slashes are fair game
000022BC                          2653          
000022BC  1C3C 0001               2654          MOVE.B  #1,D6   * we have printed a symbol
000022C0                          2655          
000022C0  43F9 00002798           2656          LEA     ASCII_D,A1
000022C6  103C 000E               2657          MOVE.B  #14,D0
000022CA  4E4F                    2658          TRAP    #15
000022CC                          2659          
000022CC  2205                    2660          MOVE.L  D5,D1
000022CE  103C 0003               2661          MOVE.B  #3,D0
000022D2  4E4F                    2662          TRAP    #15
000022D4                          2663  
000022D4  163C 0001               2664          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
000022D8  1C3C 0000               2665          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
000022DC                          2666          
000022DC  6000 0036               2667          BRA     DLOOPITER
000022E0                          2668  
000022E0                          2669  
000022E0                          2670  DINVALID
000022E0                          2671  
000022E0                          2672          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
000022E0                          2673          
000022E0  0C43 0001               2674          CMPI    #1,D3
000022E4  6600 002E               2675          BNE     DLOOPITER
000022E8                          2676          
000022E8  163C 0000               2677          MOVE.B  #0,D3
000022EC                          2678          
000022EC  0C47 0001               2679          CMPI    #1,D7
000022F0  6D00 0020               2680          BLT     DLOOPITERCLR
000022F4                          2681          
000022F4  43F9 00002798           2682          LEA     ASCII_D,A1
000022FA  103C 000E               2683          MOVE.B  #14,D0
000022FE  4E4F                    2684          TRAP    #15
00002300                          2685          
00002300  2205                    2686          MOVE.L  D5,D1
00002302                          2687          
00002302  0641 FFFF               2688          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
00002306                          2689          
00002306  103C 0003               2690          MOVE.B  #3,D0
0000230A  4E4F                    2691          TRAP    #15
0000230C                          2692          
0000230C  4287                    2693          CLR.L   D7
0000230E                          2694          
0000230E  6000 0004               2695          BRA     DLOOPITER
00002312                          2696          
00002312                          2697  DLOOPITERCLR        
00002312  4287                    2698          CLR.L   D7
00002314                          2699  
00002314                          2700  DLOOPITER
00002314                          2701          
00002314  0C45 0008               2702          CMPI    #8,D5
00002318  6700 0008               2703          BEQ     DLOOPDONE
0000231C                          2704  
0000231C  5245                    2705          ADDI    #1,D5
0000231E  6000 FF54               2706          BRA     DLOOP
00002322                          2707  
00002322                          2708  DLOOPDONE
00002322                          2709  
00002322  7A09                    2710          MOVE.L  #9,D5  * to be used as a loop counter
00002324  4283                    2711          CLR.L   D3  * == 1 if we are in a range
00002326  4286                    2712          CLR.L   D6  * == 1 if we have already printed the slash or dash
00002328  4287                    2713          CLR.L   D7  * count of registers in a range
0000232A  1C3C 0001               2714          MOVE.B  #1,D6 * to fix fencepost issue     
0000232E                          2715  
0000232E                          2716  ALOOP * loop to print out the data register portion of the addresses being saved
0000232E                          2717  
0000232E  E25A                    2718          ROR     #1,D2
00002330  6500 0006               2719          BCS     AVALID
00002334                          2720          
00002334  6000 0068               2721          BRA     AINVALID
00002338                          2722          
00002338                          2723  AVALID
00002338  0C43 0000               2724          CMPI    #0,D3
0000233C  6700 0020               2725          BEQ     AFORWARDVALID * we are not in a range
00002340                          2726          
00002340  5247                    2727          ADDI    #1,D7 *increment number of regs in range
00002342                          2728          
00002342  0C46 0001               2729          CMPI    #1,D6   *have we already printed a symbol?
00002346  6700 008E               2730          BEQ     ALOOPITER
0000234A                          2731          
0000234A  43F9 000027B0           2732          LEA     DASH,A1    *print a dash
00002350  103C 000E               2733          MOVE.B  #14,D0
00002354  4E4F                    2734          TRAP    #15
00002356                          2735          
00002356  1C3C 0001               2736          MOVE.B  #1,D6 * indicates a symbol has been printed
0000235A                          2737          
0000235A  6000 007A               2738          BRA     ALOOPITER
0000235E                          2739          
0000235E                          2740  AFORWARDVALID
0000235E                          2741          * not in a range yet, print
0000235E                          2742          
0000235E                          2743                  
0000235E  0C44 0000               2744          CMPI    #0,D4
00002362  6700 000E               2745          BEQ     ANOSLASH
00002366                          2746                  
00002366  43F9 000027AE           2747          LEA     SLASH,A1
0000236C  103C 000E               2748          MOVE.B  #14,D0
00002370  4E4F                    2749          TRAP    #15
00002372                          2750          
00002372                          2751  ANOSLASH
00002372                          2752  
00002372  183C 0001               2753          MOVE.B  #1,D4   * we have printed something, now slashes are fair game
00002376                          2754          
00002376  1C3C 0001               2755          MOVE.B  #1,D6   * we have printed a symbol
0000237A                          2756          
0000237A  43F9 00002792           2757          LEA     ASCII_A,A1
00002380  103C 000E               2758          MOVE.B  #14,D0
00002384  4E4F                    2759          TRAP    #15
00002386                          2760          
00002386  2205                    2761          MOVE.L  D5,D1
00002388                          2762          
00002388  0641 FFF8               2763          ADDI    #-8,D1 * it's A, need to adjust by 8
0000238C                          2764          
0000238C  103C 0003               2765          MOVE.B  #3,D0
00002390  4E4F                    2766          TRAP    #15
00002392                          2767  
00002392  163C 0001               2768          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
00002396  1C3C 0000               2769          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
0000239A                          2770          
0000239A  6000 003A               2771          BRA     ALOOPITER
0000239E                          2772  
0000239E                          2773  
0000239E                          2774  AINVALID
0000239E                          2775  
0000239E                          2776          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
0000239E                          2777          
0000239E  0C43 0001               2778          CMPI    #1,D3
000023A2  6600 0032               2779          BNE     ALOOPITER
000023A6                          2780          
000023A6  163C 0000               2781          MOVE.B  #0,D3
000023AA                          2782          
000023AA  0C47 0001               2783          CMPI    #1,D7
000023AE  6D00 0024               2784          BLT     ALOOPITERCLR
000023B2                          2785          
000023B2  43F9 00002792           2786          LEA     ASCII_A,A1
000023B8  103C 000E               2787          MOVE.B  #14,D0
000023BC  4E4F                    2788          TRAP    #15
000023BE                          2789          
000023BE  2205                    2790          MOVE.L  D5,D1
000023C0                          2791          
000023C0  0641 FFFF               2792          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
000023C4  0641 FFF8               2793          ADDI    #-8,D1 * it's A, need to adjust by 8
000023C8                          2794          
000023C8  103C 0003               2795          MOVE.B  #3,D0
000023CC  4E4F                    2796          TRAP    #15
000023CE                          2797          
000023CE  4287                    2798          CLR.L   D7
000023D0                          2799          
000023D0  6000 0004               2800          BRA     ALOOPITER
000023D4                          2801          
000023D4                          2802  ALOOPITERCLR
000023D4                          2803          
000023D4  4287                    2804          CLR.L   D7
000023D6                          2805  
000023D6                          2806  ALOOPITER
000023D6                          2807          
000023D6  0C45 0010               2808          CMPI     #16,D5
000023DA  6700 0008               2809          BEQ     ALOOPDONE
000023DE                          2810  
000023DE  5245                    2811          ADDI    #1,D5
000023E0  6000 FF4C               2812          BRA     ALOOP
000023E4                          2813  
000023E4                          2814  ALOOPDONE
000023E4                          2815          
000023E4  4C9F 7FFF               2816          MOVEM    (A7)+,D0-D7/A0-A6
000023E8  4E75                    2817          RTS
000023EA                          2818  
000023EA                          2819          
000023EA                          2820  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000023EA                          2821  *-----------------------------------------------------------------------------
000023EA                          2822  
000023EA                          2823  
000023EA                          2824  
000023EA                          2825  
000023EA                          2826  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000023EA                          2827  *-----------------------------------------------------------------------------
000023EA                          2828  *-----------------------------------------------------------------------------
000023EA                          2829  * NAME:           MOVEMHELPERPRE
000023EA                          2830  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
000023EA                          2831  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
000023EA                          2832  * POST-CONDITION: The registers being saved are printed
000023EA                          2833  * REGISTERS:      A2
000023EA                          2834  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000023EA                          2835  MOVEMHELPERPRE
000023EA                          2836  
000023EA  48A7 7F00               2837      MOVEM   D1-D7,-(A7)
000023EE                          2838  
000023EE  3412                    2839      MOVE.W  (A2),D2 * move the data we need to proccess into D2
000023F0  7800                    2840      MOVE.L  #0,D4
000023F2  4287                    2841      CLR.L    D7 * put the flipped bits here
000023F4                          2842      
000023F4                          2843      *the following block of code moves bits
000023F4                          2844      *into the same position they would be in if
000023F4                          2845      *the MOVEM was post inc, then simply uses post
000023F4                          2846      *inc to print the registers being saved
000023F4                          2847  PRELOOP
000023F4  E35A                    2848      ROL.W   #1,D2
000023F6                          2849      
000023F6  6500 0006               2850      BCS     PRESETBIT
000023FA  6000 0004               2851      BRA     PRELOOPITER
000023FE                          2852      
000023FE                          2853  PRESETBIT
000023FE  09C7                    2854      BSET    D4,D7
00002400                          2855  
00002400                          2856  PRELOOPITER
00002400  0C44 000F               2857      CMPI    #15,D4
00002404  6700 0006               2858      BEQ     PRELOOPDONE
00002408                          2859      
00002408  5244                    2860      ADDI    #1,D4
0000240A  60E8                    2861      BRA     PRELOOP
0000240C                          2862  
0000240C                          2863  PRELOOPDONE
0000240C                          2864  
0000240C  3487                    2865      MOVE.W  D7,(A2)    
0000240E  4C9F 00FE               2866      MOVEM   (A7)+,D1-D7
00002412                          2867  
00002412  6100 FE4A               2868      BSR MOVEMHELPERPOST
00002416                          2869  
00002416  4E75                    2870      RTS
00002418                          2871  
00002418                          2872  
00002418                          2873  
00002418                          2874          
00002418                          2875  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002418                          2876  *-----------------------------------------------------------------------------
00002418                          2877  
00002418                          2878  
00002418                          2879  
00002418                          2880  *-----------------------------------------------------------------------------
00002418                          2881  *-----------------------------------------------------------------------------
00002418                          2882  * NAME:           UNKNOWNOP
00002418                          2883  * DESCRIPTION:    a
00002418                          2884  * PRE-CONDITION:  D2 contains the instruction to print. D2 has already been
00002418                          2885  *                 identified as an unknown operation.
00002418                          2886  * POST-CONDITION: D2 is no longer the opcode.
00002418                          2887  * REGISTERS:      a
00002418                          2888  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002418                          2889  UNKNOWNOP
00002418  48A7 FFC0               2890          MOVEM   D0-D7/A0-A1,-(A7)
0000241C                          2891          
0000241C  43F9 00002754           2892          LEA     DATA,A1 * load " DATA $" into register A1
00002422  700E                    2893          MOVE.L  #14,D0  * print the string stored in A1
00002424  4E4F                    2894          TRAP    #15
00002426                          2895          
00002426  E18A                    2896          LSL.L   #8,D2
00002428  E18A                    2897          LSL.L   #8,D2
0000242A                          2898          
0000242A  2C42                    2899          MOVE.L  D2,A6
0000242C                          2900          
0000242C  7604                    2901          MOVE.L  #4,D3
0000242E                          2902          
0000242E  6100 0012               2903          BSR     PRINT_ASCII_HEX_CHAR
00002432                          2904  
00002432  43F9 000026EB           2905          LEA     NEWLINE,A1 * load newline into register A1
00002438  700E                    2906          MOVE.L  #14,D0  * print the string stored in A1
0000243A  4E4F                    2907          TRAP    #15
0000243C                          2908  
0000243C  4C9F 03FF               2909          MOVEM   (A7)+,D0-D7/A0-A1
00002440  4E75                    2910          RTS
00002442                          2911  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002442                          2912  *-----------------------------------------------------------------------------
00002442                          2913  
00002442                          2914  
00002442                          2915  
00002442                          2916  *-----------------------------------------------------------------------------
00002442                          2917  *-----------------------------------------------------------------------------
00002442                          2918  * NAME: Print ASCII hex char
00002442                          2919  * DESCRIPTION:    Prints and address register to console in hex (ASCII chars)
00002442                          2920  * PRE-CONDITION:  A6 contains the register of memory to print.
00002442                          2921  *                 This parameter would be pre-loaded by, for example:
00002442                          2922  *                 "LEA FOO_BAR_ADDR,A6" or "LEA $1234FEED,A6"
00002442                          2923  *                 D3 contains the loops to do (number of nibbles).
00002442                          2924  * POST-CONDITION: 
00002442                          2925  * REGISTERS:      
00002442                          2926  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002442                          2927  PRINT_ASCII_HEX_CHAR
00002442  48E7 FFFC               2928      MOVEM.L     D0-D7/A0-A5,-(A7) * push data to save
00002446  4285                    2929      CLR.L       D5
00002448                          2930      
00002448                          2931      * fence post check (if-statement, check if 0 > chars)
00002448  0C03 0000               2932      CMPI.B      #0,D3
0000244C  6700 017C               2933      BEQ         INVALID_ASCII_INPUT * go to very last part if invalid
00002450                          2934      
00002450                          2935  *    MOVE.L      A6,D4
00002450  2E0E                    2936      MOVE.L      A6,D7
00002452                          2937  PRINT_ASCII_LOOP
00002452                          2938  *    MOVE.L      A6,D7 * increase a6's pointer position ea. loop
00002452                          2939  *    MOVE.L      D4,D7 * make a mutable copy
00002452  E99F                    2940      ROL.L       #4,D7 * roll to next spot
00002454  48E7 0100               2941      MOVEM.L     D7,-(A7) * save D7
00002458                          2942  
00002458  0287 0000000F           2943      ANDI.L      #HEX_VALUE_MASK_LONG,D7
0000245E                          2944      
0000245E  0C87 00000000           2945      CMPI.L      #0,D7
00002464  6D00 0164               2946      BLT         INVALID_ASCII_INPUT
00002468                          2947  
00002468  0C87 0000000F           2948      CMPI.L      #15,D7
0000246E  6E00 015A               2949      BGT         INVALID_ASCII_INPUT
00002472                          2950  
00002472                          2951      * this might be faster... to do later, after entire assignment done
00002472                          2952       * CMPI.L      #9,D7
00002472                          2953       * BLE         PRINT_ASCII_0_TO_9
00002472                          2954  
00002472  0C87 00000000           2955      CMPI.L      #0,D7
00002478  6700 0098               2956      BEQ         PRINT_ASCII_0
0000247C  0C87 00000001           2957      CMPI.L      #1,D7
00002482  6700 0098               2958      BEQ         PRINT_ASCII_1
00002486  0C87 00000002           2959      CMPI.L      #2,D7
0000248C  6700 0098               2960      BEQ         PRINT_ASCII_2
00002490  0C87 00000003           2961      CMPI.L      #3,D7
00002496  6700 0098               2962      BEQ         PRINT_ASCII_3
0000249A  0C87 00000004           2963      CMPI.L      #4,D7
000024A0  6700 0098               2964      BEQ         PRINT_ASCII_4
000024A4  0C87 00000005           2965      CMPI.L      #5,D7
000024AA  6700 0098               2966      BEQ         PRINT_ASCII_5
000024AE  0C87 00000006           2967      CMPI.L      #6,D7
000024B4  6700 0098               2968      BEQ         PRINT_ASCII_6
000024B8  0C87 00000007           2969      CMPI.L      #7,D7
000024BE  6700 0098               2970      BEQ         PRINT_ASCII_7
000024C2  0C87 00000008           2971      CMPI.L      #8,D7
000024C8  6700 0098               2972      BEQ         PRINT_ASCII_8
000024CC  0C87 00000009           2973      CMPI.L      #9,D7
000024D2  6700 0098               2974      BEQ         PRINT_ASCII_9
000024D6  0C87 0000000A           2975      CMPI.L      #10,D7
000024DC  6700 0098               2976      BEQ         PRINT_ASCII_A
000024E0  0C87 0000000B           2977      CMPI.L      #11,D7
000024E6  6700 0098               2978      BEQ         PRINT_ASCII_B
000024EA  0C87 0000000C           2979      CMPI.L      #12,D7
000024F0  6700 0098               2980      BEQ         PRINT_ASCII_C
000024F4  0C87 0000000D           2981      CMPI.L      #13,D7
000024FA  6700 0098               2982      BEQ         PRINT_ASCII_D
000024FE  0C87 0000000E           2983      CMPI.L      #14,D7
00002504  6700 0098               2984      BEQ         PRINT_ASCII_E
00002508  0C87 0000000F           2985      CMPI.L      #15,D7
0000250E  6700 0098               2986      BEQ         PRINT_ASCII_F
00002512                          2987  PRINT_ASCII_0
00002512  43F9 0000277E           2988      LEA         ASCII_0,A1
00002518  6000 0098               2989      BRA         PRINT_ASCII_CHAR
0000251C                          2990  PRINT_ASCII_1
0000251C  43F9 00002780           2991      LEA         ASCII_1,A1
00002522  6000 008E               2992      BRA         PRINT_ASCII_CHAR
00002526                          2993  PRINT_ASCII_2
00002526  43F9 00002782           2994      LEA         ASCII_2,A1
0000252C  6000 0084               2995      BRA         PRINT_ASCII_CHAR
00002530                          2996  PRINT_ASCII_3
00002530  43F9 00002784           2997      LEA         ASCII_3,A1
00002536  6000 007A               2998      BRA         PRINT_ASCII_CHAR
0000253A                          2999  PRINT_ASCII_4
0000253A  43F9 00002786           3000      LEA         ASCII_4,A1
00002540  6000 0070               3001      BRA         PRINT_ASCII_CHAR
00002544                          3002  PRINT_ASCII_5
00002544  43F9 00002788           3003      LEA         ASCII_5,A1
0000254A  6000 0066               3004      BRA         PRINT_ASCII_CHAR
0000254E                          3005  PRINT_ASCII_6
0000254E  43F9 0000278A           3006      LEA         ASCII_6,A1
00002554  6000 005C               3007      BRA         PRINT_ASCII_CHAR
00002558                          3008  PRINT_ASCII_7
00002558  43F9 0000278C           3009      LEA         ASCII_7,A1
0000255E  6000 0052               3010      BRA         PRINT_ASCII_CHAR
00002562                          3011  PRINT_ASCII_8
00002562  43F9 0000278E           3012      LEA         ASCII_8,A1
00002568  6000 0048               3013      BRA         PRINT_ASCII_CHAR
0000256C                          3014  PRINT_ASCII_9
0000256C  43F9 00002790           3015      LEA         ASCII_9,A1
00002572  6000 003E               3016      BRA         PRINT_ASCII_CHAR
00002576                          3017  PRINT_ASCII_A
00002576  43F9 00002792           3018      LEA         ASCII_A,A1
0000257C  6000 0034               3019      BRA         PRINT_ASCII_CHAR
00002580                          3020  PRINT_ASCII_B
00002580  43F9 00002794           3021      LEA         ASCII_B,A1
00002586  6000 002A               3022      BRA         PRINT_ASCII_CHAR
0000258A                          3023  PRINT_ASCII_C
0000258A  43F9 00002796           3024      LEA         ASCII_C,A1
00002590  6000 0020               3025      BRA         PRINT_ASCII_CHAR
00002594                          3026  PRINT_ASCII_D
00002594  43F9 00002798           3027      LEA         ASCII_D,A1
0000259A  6000 0016               3028      BRA         PRINT_ASCII_CHAR
0000259E                          3029  PRINT_ASCII_E
0000259E  43F9 0000279A           3030      LEA         ASCII_E,A1
000025A4  6000 000C               3031      BRA         PRINT_ASCII_CHAR
000025A8                          3032  PRINT_ASCII_F
000025A8  43F9 0000279C           3033      LEA         ASCII_F,A1
000025AE  6000 0002               3034      BRA         PRINT_ASCII_CHAR
000025B2                          3035  PRINT_ASCII_CHAR
000025B2  103C 000E               3036      MOVE.B      #14,D0
000025B6  4E4F                    3037      TRAP        #15
000025B8                          3038      
000025B8                          3039          
000025B8  4287                    3040      CLR.L       D7
000025BA  4CDF 0080               3041      MOVEM.L     (A7)+,D7 * copy back D7 from stack, to mutate its' bits
000025BE                          3042      
000025BE  5205                    3043      ADD.B       #1,D5 * loop until counter stops
000025C0  BA03                    3044      CMP.B       D3,D5
000025C2  6C00 0006               3045      BGE         PRINT_ASCII_FINISH
000025C6                          3046      
000025C6  6000 FE8A               3047      BRA         PRINT_ASCII_LOOP
000025CA                          3048  INVALID_ASCII_INPUT
000025CA                          3049  PRINT_ASCII_FINISH
000025CA  4CDF 3FFF               3050      MOVEM.L     (A7)+,D0-D7/A0-A5 * pop saved memory
000025CE  4E75                    3051      RTS
000025D0                          3052      
000025D0                          3053  PRINTDATA911
000025D0  0C46 0E00               3054      CMPI    #%0000111000000000, D6   * Print 7
000025D4  6700 003C               3055      BEQ     PRINT7   
000025D8  0C46 0C00               3056      CMPI    #%0000110000000000, D6   * Print 6
000025DC  6700 0042               3057      BEQ     PRINT6
000025E0  0C46 0A00               3058      CMPI    #%0000101000000000, D6   * Print 5
000025E4  6700 0048               3059      BEQ     PRINT5
000025E8  0C46 0800               3060      CMPI    #%0000100000000000, D6   * Print 4
000025EC  6700 004E               3061      BEQ     PRINT4 
000025F0  0C46 0600               3062      CMPI    #%0000011000000000, D6   * Print 3
000025F4  6700 0054               3063      BEQ     PRINT3    
000025F8  0C46 0400               3064      CMPI    #%0000010000000000, D6   * Print 2
000025FC  6700 005A               3065      BEQ     PRINT2   
00002600  0C46 0200               3066      CMPI    #%0000001000000000, D6   * Print 1
00002604  6700 0060               3067      BEQ     PRINT1     
00002608  0C46 0000               3068      CMPI    #%0000000000000000, D6   * Print 0
0000260C  6700 0066               3069      BEQ     PRINT8
00002610                          3070      
00002610  4E75                    3071      RTS                             * Fail case  
00002612                          3072      
00002612                          3073  PRINT7
00002612  43F9 0000278C           3074      LEA     ASCII_7, A1
00002618  103C 000E               3075      MOVE.B      #14,D0
0000261C  4E4F                    3076      TRAP        #15
0000261E  4E75                    3077      RTS
00002620                          3078      
00002620                          3079  PRINT6
00002620  43F9 0000278A           3080      LEA     ASCII_6, A1
00002626  103C 000E               3081      MOVE.B      #14,D0
0000262A  4E4F                    3082      TRAP        #15
0000262C  4E75                    3083      RTS
0000262E                          3084      
0000262E                          3085  PRINT5
0000262E  43F9 00002788           3086      LEA     ASCII_5, A1
00002634  103C 000E               3087      MOVE.B      #14,D0
00002638  4E4F                    3088      TRAP        #15
0000263A  4E75                    3089      RTS
0000263C                          3090      
0000263C                          3091  PRINT4
0000263C  43F9 00002786           3092      LEA     ASCII_4, A1
00002642  103C 000E               3093      MOVE.B      #14,D0
00002646  4E4F                    3094      TRAP        #15
00002648  4E75                    3095      RTS
0000264A                          3096      
0000264A                          3097  PRINT3
0000264A  43F9 00002784           3098      LEA     ASCII_3, A1
00002650  103C 000E               3099      MOVE.B      #14,D0
00002654  4E4F                    3100      TRAP        #15
00002656  4E75                    3101      RTS
00002658                          3102      
00002658                          3103  PRINT2
00002658  43F9 00002782           3104      LEA     ASCII_2, A1
0000265E  103C 000E               3105      MOVE.B      #14,D0
00002662  4E4F                    3106      TRAP        #15
00002664  4E75                    3107      RTS
00002666                          3108      
00002666                          3109  PRINT1
00002666  43F9 00002780           3110      LEA     ASCII_1, A1
0000266C  103C 000E               3111      MOVE.B      #14,D0
00002670  4E4F                    3112      TRAP        #15
00002672  4E75                    3113      RTS
00002674                          3114          
00002674                          3115  PRINT8
00002674  43F9 0000278E           3116      LEA     ASCII_8, A1
0000267A  103C 000E               3117      MOVE.B      #14,D0
0000267E  4E4F                    3118      TRAP        #15
00002680  4E75                    3119      RTS
00002682                          3120  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002682                          3121  *-----------------------------------------------------------------------------
00002682                          3122  
00002682                          3123  
00002682                          3124  
00002682                          3125  *-----------------------------------------------------------------------------
00002682                          3126  *-----------------------------------------------------------------------------
00002682                          3127  * NAME: Bitmask
00002682                          3128  * DESCRIPTION:    Masks bits in a data register.
00002682                          3129  * PRE-CONDITION:  D6 contains the starting bit to be masked, and D7 contains
00002682                          3130  *                 the ending bit.  For example, a starting bit of decimal
00002682                          3131  *                 value 0 and an ending bit of decimal value 3 will mask the
00002682                          3132  *                 bits 0, 1, 2, and 3.
00002682                          3133  * POST-CONDITION: D6 contains the bitmask, ready for use.
00002682                          3134  * REGISTERS:      D5,D6,D7
00002682                          3135  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002682                          3136  BITMASK
00002682  3F05                    3137          MOVE    D5,-(A7)    * push D5 onto the stack so we can use it to
00002684  4245                    3138          CLR     D5          * clear D5 so we can use it
00002686                          3139  LOOPBIT 
00002686  0DC5                    3140          BSET    D6,D5       * set the D6th bit in D5 to 1
00002688  5246                    3141          ADD     #1,D6       * increment D6
0000268A                          3142  
0000268A  BC47                    3143          CMP     D7,D6       * have we finished?
0000268C  6E00 0004               3144          BGT     BITMASKDONE * yes
00002690  60F4                    3145          BRA     LOOPBIT     * no, iterate again
00002692                          3146  
00002692                          3147  BITMASKDONE
00002692  2C05                    3148          MOVE.L  D5,D6
00002694  3A1F                    3149          MOVE    (A7)+,D5    * restore D5
00002696  4E75                    3150          RTS
00002698                          3151  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002698                          3152  *-----------------------------------------------------------------------------
00002698                          3153  
00002698                          3154  
00002698                          3155  
00002698                          3156  *-----------------------------------------------------------------------------
00002698                          3157  *-----------------------------------------------------------------------------
00002698                          3158  * SECTION: Constants/variables used throughout the program.
00002698                          3159  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002698                          3160  
00002698                          3161  * ---> GENERAL
00002698  =0000000D               3162  CR          EQU     $0D
00002698  =0000000A               3163  LF          EQU     $0A
00002698= 45 4E 54 45 52 20 ...   3164  MSGSTART    DC.B    'ENTER START ADDRESS: ',CR,LF,0
000026B0= 45 4E 54 45 52 20 ...   3165  MSGEND      DC.B    'ENTER END ADDRESS: ',CR,LF,0
000026C6= 48 69 74 20 74 68 ...   3166  CONT_MSG    DC.B    'Hit the [ENTER] key to continue...',CR,LF,0
000026EB= 0D 0A 00                3167  NEWLINE     DC.B    CR,LF,0
000026EE                          3168  
000026EE                          3169  * ---> OPS
000026EE= 44 49 56 53 00          3170  DIVSOP      DC.B    'DIVS',0
000026F3= 43 4D 50 00             3171  CMPOP       DC.B    'CMP',0
000026F7= 45 4F 52 00             3172  EOROP       DC.B    'EOR',0
000026FB= 4E 4F 50 00             3173  NOOPERATION DC.B    'NOP',0
000026FF= 4E 45 47 00             3174  NEGOP       DC.B    'NEG',0
00002703= 4D 4F 56 45 00          3175  MOVEOP      DC.B    'MOVE',0
00002708= 4D 4F 56 45 41 00       3176  MOVEAOP      DC.B   'MOVEA',0
0000270E= 4D 4F 56 45 4D 00       3177  MOVEMOP     DC.B    'MOVEM',0
00002714= 4A 53 52 00             3178  JSROP       DC.B    'JSR',0
00002718= 52 54 53 00             3179  RTSOP       DC.B    'RTS',0
0000271C= 53 55 42 51 00          3180  SUBQOP      DC.B    'SUBQ',0
00002721= 4C 45 41 00             3181  LEAOP       DC.B    'LEA',0
00002725= 42 43 4C 52 20 00       3182  BCLROP      DC.B    'BCLR ',0
0000272B= 4D 55 4C 53 00          3183  MULSOP      DC.B    'MULS',0
00002730= 4F 52 00                3184  OROP        DC.B    'OR',0
00002733= 4F 52 49 00             3185  ORIOP       DC.B    'ORI',0
00002737= 43 4D 50 49 00          3186  CMPIOP      DC.B    'CMPI',0
0000273C= 4C 53 4C 00             3187  LSLOP       DC.B    'LSL',0
00002740= 4C 53 52 00             3188  LSROP       DC.B    'LSR',0
00002744= 41 53 4C 00             3189  ASLOP       DC.B    'ASL',0
00002748= 41 53 52 00             3190  ASROP       DC.B    'ASR',0
0000274C= 52 4F 4C 00             3191  ROLOP       DC.B    'ROL',0
00002750= 52 4F 52 00             3192  ROROP       DC.B    'ROR',0
00002754= 20 44 41 54 41 20 ...   3193  DATA        DC.B    ' DATA $',0
0000275C= 42 43 43 20 00          3194  OP_BCC_MSG  DC.B    'BCC ',0
00002761= 42 43 53 20 00          3195  OP_BCS_MSG  DC.B    'BCS ',0
00002766= 42 47 45 20 00          3196  OP_BGE_MSG  DC.B    'BGE ',0
0000276B= 42 4C 54 20 00          3197  OP_BLT_MSG  DC.B    'BLT ',0
00002770= 42 56 43 20 00          3198  OP_BVC_MSG  DC.B    'BVC ',0
00002775= 42 52 41 20 00          3199  OP_BRA_MSG  DC.B    'BRA ',0
0000277A= 41 44 44 00             3200  OP_ADD_MSG  DC.B    'ADD',0
0000277E                          3201  
0000277E                          3202  * ---> HEX CHARS
0000277E= 30 00                   3203  ASCII_0     DC.B    '0',0
00002780= 31 00                   3204  ASCII_1     DC.B    '1',0
00002782= 32 00                   3205  ASCII_2     DC.B    '2',0
00002784= 33 00                   3206  ASCII_3     DC.B    '3',0
00002786= 34 00                   3207  ASCII_4     DC.B    '4',0
00002788= 35 00                   3208  ASCII_5     DC.B    '5',0
0000278A= 36 00                   3209  ASCII_6     DC.B    '6',0
0000278C= 37 00                   3210  ASCII_7     DC.B    '7',0
0000278E= 38 00                   3211  ASCII_8     DC.B    '8',0
00002790= 39 00                   3212  ASCII_9     DC.B    '9',0
00002792= 41 00                   3213  ASCII_A     DC.B    'A',0
00002794= 42 00                   3214  ASCII_B     DC.B    'B',0
00002796= 43 00                   3215  ASCII_C     DC.B    'C',0
00002798= 44 00                   3216  ASCII_D     DC.B    'D',0
0000279A= 45 00                   3217  ASCII_E     DC.B    'E',0
0000279C= 46 00                   3218  ASCII_F     DC.B    'F',0
0000279E                          3219  
0000279E                          3220  * ---> SPECIAL CHARACTERS
0000279E= 20 00                   3221  SPACE       DC.B    ' ',0
000027A0= 24 00                   3222  DOLLAR      DC.B    '$',0
000027A2= 23 00                   3223  IMD         DC.B    '#',0
000027A4= 2C 00                   3224  COMMA       DC.B    ',',0
000027A6= 28 00                   3225  OBRACK      DC.B    '(',0
000027A8= 29 00                   3226  CBRACK      DC.B    ')',0
000027AA= 2B 00                   3227  PLUS        DC.B    '+',0
000027AC= 2D 00                   3228  MINUS       DC.B    '-',0
000027AE= 2F 00                   3229  SLASH       DC.B    '/',0
000027B0= 2D 00                   3230  DASH        DC.B    '-',0
000027B2                          3231  
000027B2                          3232  * ---> B/W/L (BYTE, WORD, LONG, RESPECTIVELY)
000027B2= 2E 42 20 00             3233  __B         DC.B    '.B ',0
000027B6= 2E 57 20 00             3234  __W         DC.B    '.W ',0
000027BA= 2E 4C 20 00             3235  __L         DC.B    '.L ',0
000027BE                          3236  
000027BE                          3237  * ---> ADDRESS REGISTERS A0-A7
000027BE= 41 30 00                3238  __A0        DC.B   'A0',0
000027C1= 41 31 00                3239  __A1        DC.B   'A1',0    
000027C4= 41 32 00                3240  __A2        DC.B   'A2',0
000027C7= 41 33 00                3241  __A3        DC.B   'A3',0
000027CA= 41 34 00                3242  __A4        DC.B   'A4',0
000027CD= 41 35 00                3243  __A5        DC.B   'A5',0
000027D0= 41 36 00                3244  __A6        DC.B   'A6',0
000027D3= 41 37 00                3245  __A7        DC.B   'A7',0
000027D6                          3246  
000027D6                          3247  * ---> DATA REGISTERS D0-D7
000027D6= 44 30 00                3248  __D0        DC.B   'D0',0
000027D9= 44 31 00                3249  __D1        DC.B   'D1',0
000027DC= 44 32 00                3250  __D2        DC.B   'D2',0
000027DF= 44 33 00                3251  __D3        DC.B   'D3',0
000027E2= 44 34 00                3252  __D4        DC.B   'D4',0
000027E5= 44 35 00                3253  __D5        DC.B   'D5',0
000027E8= 44 36 00                3254  __D6        DC.B   'D6',0
000027EB= 44 37 00                3255  __D7        DC.B   'D7',0
000027EE                          3256  
000027EE                          3257  __COUNTER   DS.B    1       * main loop counter
000027EF                          3258  
000027EF                          3259  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000027EF                          3260  *-----------------------------------------------------------------------------
000027EF                          3261  
000027EF                          3262  
000027EF                          3263  
000027EF                          3264  *-----------------------------------------------------------------------------
000027EF                          3265  *-----------------------------------------------------------------------------
000027EF                          3266  * SECTION: Sample program to run, then attempt testing disassembly on.
000027EF                          3267  * STARTING: 16384
000027EF                          3268  * ENDING:   Any even number before 16384 to continue FOREVER
000027EF                          3269  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00004000                          3270      ORG $4000
00004000                          3271      
00004000  B200                    3272      CMP.B   D0,D1
00004002  B441                    3273      CMP.W   D1,D2
00004004  B682                    3274      CMP.L   D2,D3
00004006  B248                    3275      CMP     A0,D1
00004008  B25A                    3276      CMP     (A2)+,D1
0000400A  B101                    3277      EOR.B   D0,D1
0000400C  B342                    3278      EOR.W   D1,D2
0000400E  B583                    3279      EOR.L   D2,D3
00004010  B150                    3280      EOR     D0,(A0)
00004012  B359                    3281      EOR     D1,(A1)+
00004014  0000 0003               3282      ORI.B   #3,D0 
00004018  0042 0290               3283      ORI.W   #$290,D2
0000401C  0087 0000000A           3284      ORI.L   #%1010,D7   * $1010 == A
00004022  0043 0002               3285      ORI     #2,D3
00004026  4E71                    3286      NOP
00004028  103C 009A               3287      MOVE.B   #%10011010, D0
0000402C  123C 00A9               3288      MOVE.B   #%10101001, D1
00004030  303C 009A               3289      MOVE.W   #%10011010, D0
00004034  323C 00A9               3290      MOVE.W   #%10101001, D1
00004038  203C 00011170           3291      MOVE.L   #70000, D0
0000403E  223C 00011170           3292      MOVE.L   #70000, D1
00004044  81FC 0001               3293      DIVS     #1, D0
00004048  D200                    3294      ADD.B    D0,D1
0000404A  4C9F 3C1A               3295      MOVEM    (A7)+,A2-A5/D1/D3-D4
0000404E  43F8 2714               3296      LEA      JSROP,A1
00004052  4467                    3297      NEG.W    -(A7)
00004054  4EB9 0000409E           3298      JSR      END
0000405A  CFFC 0003               3299      MULS.W  #3, D7
0000405E  CFC0                    3300      MULS    D0, D7
00004060  C5D9                    3301      MULS    (A1)+, D2
00004062  4E71                    3302      NOP
00004064  C682                    3303      AND.L   D2,D3
00004066  5146                    3304      SUBQ    #8, D6
00004068  4E71                    3305      NOP
0000406A  5F81                    3306      SUBQ.L  #7, D1
0000406C  4E71                    3307      NOP
0000406E  0041 0004               3308      ORI     #4, D1
00004072  4E71                    3309      NOP
00004074  E389                    3310      LSL.L   #1,D1
00004076  4E71                    3311      NOP
00004078  E489                    3312      LSR.L   #2,D1
0000407A  4E71                    3313      NOP
0000407C  E781                    3314      ASL.L   #3,D1
0000407E  4E71                    3315      NOP
00004080  E881                    3316      ASR.L   #4,D1
00004082  4E71                    3317      NOP
00004084  EB99                    3318      ROL.L   #5,D1
00004086  4E71                    3319      NOP
00004088  E099                    3320      ROR.L   #8,D1
0000408A  4E71                    3321      NOP
0000408C  0881 0002               3322      BCLR    #2,D1
00004090  4E71                    3323      NOP
00004092  DAC1                    3324      ADDA.W  D1,A5
00004094  4E71                    3325      NOP
00004096  D803                    3326      ADD.B   D3,D4
00004098  4E71                    3327      NOP
0000409A  6000 0004               3328      BRA     RLLYEND
0000409E                          3329  
0000409E                          3330  END
0000409E  4E75                    3331      RTS
000040A0                          3332      
000040A0                          3333  RLLYEND
000040A0                          3334      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_LONG_OP        1BDA
ADDA_PRT            1C16
ADDA_WORD_OP        1B72
ADD_ADDA_END        1C46
ADD_ADDA_PRINT      1C2E
ADD_ADDA_SPACE      1C08
ADD_EA_DN_GENERIC   1BFA
AFORWARDVALID       235E
AINVALID            239E
ALOOP               232E
ALOOPDONE           23E4
ALOOPITER           23D6
ALOOPITERCLR        23D4
ANOSLASH            2372
AS                  1CBC
ASCII_0             277E
ASCII_1             2780
ASCII_2             2782
ASCII_3             2784
ASCII_4             2786
ASCII_5             2788
ASCII_6             278A
ASCII_7             278C
ASCII_8             278E
ASCII_9             2790
ASCII_A             2792
ASCII_B             2794
ASCII_C             2796
ASCII_D             2798
ASCII_E             279A
ASCII_F             279C
ASL                 1CD2
ASLOP               2744
ASR                 1CE2
ASROP               2748
AVALID              2338
BCC_BYTE_OFFSET     18DC
BCC_END             18F8
BCLROP              2725
BITMASK             2682
BITMASKDONE         2692
BYTE_DN_EA          1B92
BYTE_EA_DN          1B2A
CBRACK              27A8
CLEAR_SCREEN        11AE
CMPIOP              2737
CMPOP               26F3
COMMA               27A4
CONT_MSG            26C6
CR                  D
DASH                27B0
DATA                2754
DFORWARDVALID       22A4
DINVALID            22E0
DISPLAY1011         1A0A
DIVSOP              26EE
DLOOP               2274
DLOOPDONE           2322
DLOOPITER           2314
DLOOPITERCLR        2312
DNOSLASH            22B8
DOLLAR              27A0
DONE0100            17C2
DONE1011            1A42
DVALID              227E
EAHELPER05          1E36
EAHELPER611         1DF4
END                 409E
END0000             133E
END67               21BA
END68               222E
ENDEAHELPER05       1F76
ENDEAHELPER611      1E30
ENDMODE_AN          2106
ENDMODE_DN          2006
ENDOP0001           13B0
ENDOP0010           1422
ENDOP0011           1494
ENDOP1110           1DDC
END_OF_LOOP         1182
EOROP               26F7
HEX_VALUE_MASK_LONG  F
IDLE_STATE          118C
IMD                 27A2
IMD_SIZE_0000       12BE
INVALID_ASCII_INPUT  25CA
ITERATION           116A
JSROP               2714
LEAOP               2721
LF                  A
LONG_DN_EA          1BC2
LONG_EA_DN          1B5A
LOOP                104C
LOOPBIT             2686
LOOPUNKNOWNOP       1166
LS                  1C86
LSL                 1C9C
LSLOP               273C
LSR                 1CAC
LSROP               2740
MINUS               27AC
MODE_AN             207C
MODE_DN             1F7C
MOVEAOP             2708
MOVEMHELPERPOST     225E
MOVEMHELPERPRE      23EA
MOVEMOP             270E
MOVEMTOMEM          15CA
MOVEMTOREG          1530
MOVEOP              2703
MSGEND              26B0
MSGSTART            2698
MULSOP              272B
NEGOP               26FF
NEWLINE             26EB
NOOPERATION         26FB
NOT0000             1076
NOT0001             1086
NOT0010             1096
NOT0011             10A6
NOT0100             10B6
NOT0101             10C6
NOT0110             10D6
NOT0111             10E6
NOT1000             10F6
NOT1001             1106
NOT1010             1116
NOT1011             1126
NOT1100             1136
NOT1101             1146
NOT1110             1156
NOT67BYTE           219E
NOT67WORD           21AE
NOTA0               209E
NOTA1               20AE
NOTA2               20BE
NOTA3               20CE
NOTA4               20DE
NOTA5               20EE
NOTA6               20FE
NOTADRDIRECT        1E66
NOTADRINDIRECT      1E8E
NOTADRINDIRECTPOST  1EC2
NOTADRINDIRECTPRE   1EF6
NOTBCLR             1286
NOTBCLRDYNA         1238
NOTD0               1F9E
NOTD1               1FAE
NOTD2               1FBE
NOTD3               1FCE
NOTD4               1FDE
NOTD5               1FEE
NOTD6               1FFE
NOTDATAREG          1E56
NOTDIVS             1982
NOTEOR              19FE
NOTIMMBYTE          1F28
NOTIMMEDIATE        1F72
NOTIMMWORD          1F52
NOTJSR              16BA
NOTLONGMOVEM1       1598
NOTLONGMOVEM2       1632
NOTMOVEM            1664
NOTNEG              150C
NOTNOP              14B6
NOTORI              1324
NOTRTS              16DC
OBRACK              27A6
OP0000              11BA
OP0001              1344
OP0001MOVE          136E
OP0001MOVEA         137A
OP0010              13B6
OP0010MOVE          13E0
OP0010MOVEA         13EC
OP0011              1428
OP0011MOVE          1452
OP0011MOVEA         145E
OP0100              149A
OP0101              17C8
OP0110              1836
OP0111              18FE
OP1000              1904
OP1000END           1992
OP1001              1998
OP1010              1998
OP1011              199E
OP1100              1A48
OP1101              1AD2
OP1110              1C58
OP1110DATAREG       1DB0
OP1110GENERIC       1D28
OP1110IMMEIGHT      1D88
OP1111              1DEE
OP_0000             0
OP_0001             1000
OP_0010             2000
OP_0011             3000
OP_0100             4000
OP_0101             5000
OP_0110             6000
OP_0111             7000
OP_1000             8000
OP_1001             9000
OP_1010             A000
OP_1011             B000
OP_1100             C000
OP_1101             D000
OP_1110             E000
OP_1111             F000
OP_ADD_MSG          277A
OP_BCC              1880
OP_BCC_MSG          275C
OP_BCS              188A
OP_BCS_MSG          2761
OP_BGE              1894
OP_BGE_MSG          2766
OP_BLT              189E
OP_BLT_MSG          276B
OP_BRA              18B2
OP_BRANCHES_PRINT   18BC
OP_BRA_MSG          2775
OP_BVC              18A8
OP_BVC_MSG          2770
ORIOP               2733
OROP                2730
PLUS                27AA
PRELOOP             23F4
PRELOOPDONE         240C
PRELOOPITER         2400
PRESETBIT           23FE
PRINT1              2666
PRINT2              2658
PRINT3              264A
PRINT4              263C
PRINT5              262E
PRINT6              2620
PRINT7              2612
PRINT8              2674
PRINTA0             210C
PRINTA1             211A
PRINTA2             2128
PRINTA3             2136
PRINTA4             2144
PRINTA5             2152
PRINTA6             2160
PRINTA7             216E
PRINTBYTE           2234
PRINTBYTE68         2216
PRINTD0             200C
PRINTD1             201A
PRINTD2             2028
PRINTD3             2036
PRINTD4             2044
PRINTD5             2052
PRINTD6             2060
PRINTD7             206E
PRINTDATA911        25D0
PRINTLONG           2250
PRINTLONG68         2226
PRINTWORD           2242
PRINTWORD68         221E
PRINT_ASCII_0       2512
PRINT_ASCII_1       251C
PRINT_ASCII_2       2526
PRINT_ASCII_3       2530
PRINT_ASCII_4       253A
PRINT_ASCII_5       2544
PRINT_ASCII_6       254E
PRINT_ASCII_7       2558
PRINT_ASCII_8       2562
PRINT_ASCII_9       256C
PRINT_ASCII_A       2576
PRINT_ASCII_B       2580
PRINT_ASCII_C       258A
PRINT_ASCII_CHAR    25B2
PRINT_ASCII_D       2594
PRINT_ASCII_E       259E
PRINT_ASCII_F       25A8
PRINT_ASCII_FINISH  25CA
PRINT_ASCII_HEX_CHAR  2442
PRINT_ASCII_LOOP    2452
RLLYEND             40A0
RO                  1CF2
ROL                 1D08
ROLOP               274C
ROR                 1D18
ROROP               2750
RTSOP               2718
SIZE67              217C
SIZE68              21C0
SKIPLONG            1302
SKIPNOTLONG1        15A4
SKIPNOTLONG2        163E
SLASH               27AE
SPACE               279E
START               1000
SUBQOP              271C
TWOWORDLEA          176C
UNKNOWN0000         133A
UNKNOWN0100         17BE
UNKNOWN0101         1830
UNKNOWN1011         1A3E
UNKNOWN1100         1AC8
UNKNOWNOP           2418
UNKNOWNOP0001       13AC
UNKNOWNOP0010       141E
UNKNOWNOP0011       1490
WORD_DN_EA          1BAA
WORD_EA_DN          1B42
__A0                27BE
__A1                27C1
__A2                27C4
__A3                27C7
__A4                27CA
__A5                27CD
__A6                27D0
__A7                27D3
__B                 27B2
__COUNTER           27EE
__D0                27D6
__D1                27D9
__D2                27DC
__D3                27DF
__D4                27E2
__D5                27E5
__D6                27E8
__D7                27EB
__L                 27BA
__W                 27B6
