00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/22/2014 9:58:27 PM

00000000                             1  *    666
00000000                             2  *   66 66
00000000                             3  *  66   66
00000000                             4  *  66   66         8888
00000000                             5  *  66   66       88   kkkk
00000000                             6  *  66  66       8   88   kk      
00000000                             7  *   66  6      8  88  kkk  kk    
00000000                             8  *    66  6    8  88     kk  k
00000000                             9  *     66 66  88 88        kk
00000000                            10  *     6 _______ 8
00000000                            11  *    6    68k    8
00000000                            12  *   6_____PRO_____8
00000000                            13  *  6               8        68k is as easy as
00000000                            14  *  6    0     0    8        6 - 8 - k !
00000000                            15  *  6   /   V   \   8 
00000000                            16  *  6   \__/ \__/   8        Welcome to our Dissasembler, Professor Nash!
00000000                            17  *    6            8         Enjoy your stay!
00000000                            18  *      6        8      
00000000                            19  *        666888
00000000                            20  *  _____                   __    ___  _    
00000000                            21  * | ____|__ _ ___ _   _   / /_  ( _ )| | __
00000000                            22  * |  _| / _` / __| | | | | '_ \ / _ \| |/ /
00000000                            23  * | |__| (_| \__ \ |_| | | (_) | (_) |   < 
00000000                            24  * |_____\__,_|___/\__, |  \___/ \___/|_|\_\
00000000                            25  *                 |___/           
00000000                            26  *-----------------------------------------------------------
00000000                            27  * Title      : 68K Decompiler
00000000                            28  * Written by : Nick Bell, Sammy Nimnuch, Caleb Larson
00000000                            29  * Date       : 11/2014
00000000                            30  * Description: This program decompiles other 68K programs
00000000                            31  *              which are loaded into the simulator simultaneously.
00000000                            32  *-----------------------------------------------------------
00000000                            33  
00000000                            34  
00000000  =00000000                 35  OP_0000     EQU     %0000000000000000
00000000  =00001000                 36  OP_0001     EQU     %0001000000000000
00000000  =00002000                 37  OP_0010     EQU     %0010000000000000
00000000  =00003000                 38  OP_0011     EQU     %0011000000000000
00000000  =00004000                 39  OP_0100     EQU     %0100000000000000
00000000  =00005000                 40  OP_0101     EQU     %0101000000000000
00000000  =00006000                 41  OP_0110     EQU     %0110000000000000
00000000  =00007000                 42  OP_0111     EQU     %0111000000000000
00000000  =00008000                 43  OP_1000     EQU     %1000000000000000
00000000  =00009000                 44  OP_1001     EQU     %1001000000000000
00000000  =0000A000                 45  OP_1010     EQU     %1010000000000000
00000000  =0000B000                 46  OP_1011     EQU     %1011000000000000
00000000  =0000C000                 47  OP_1100     EQU     %1100000000000000
00000000  =0000D000                 48  OP_1101     EQU     %1101000000000000
00000000  =0000E000                 49  OP_1110     EQU     %1110000000000000
00000000  =0000F000                 50  OP_1111     EQU     %1111000000000000
00000000                            51  
00000000                            52  * BITMASK     EQU     $F000       * used to bitmask the first nibble
00000000                            53  
00001000                            54  START:  ORG    $1000            * first instruction of program
00001000                            55  
00001000                            56  * -----------------------------------
00001000                            57  * Starting and Ending Addresses
00001000                            58  * -----------------------------------
00001000                            59  
00001000                            60  * THINK ABOUT ASKING FOR VALID START/END NO NEGATIVE ADDR
00001000                            61  
00001000                            62  * LOAD MSGSTART, ASK FOR INPUT
00001000  43F9 000010FE             63          LEA     MSGSTART,A1     * Load MESSAGE START
00001006  103C 000E                 64          MOVE.B  #14,D0          * Trap #14 to display message
0000100A  4E4F                      65          TRAP    #15             * Perform #14
0000100C                            66          
0000100C                            67  * GETS THE STARTING ADDRESS
0000100C  103C 0004                 68          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001010  4E4F                      69          TRAP    #15             * Perform #15
00001012                            70          
00001012                            71  * MOVE IT TO ANOTHER ADDRESS REGISTER
00001012  2441                      72          MOVEA.L D1,A2           * Move the user input into A2. This is the starting address.
00001014                            73  
00001014                            74  * LOAD MSGSTART, ASK FOR INPUT
00001014  43F9 00001116             75          LEA     MSGEND,A1       * Load MESSAGE END
0000101A  303C 000E                 76          MOVE.W  #14,D0          * Trap #14 to display message
0000101E  4E4F                      77          TRAP    #15             * Perform #14
00001020                            78          
00001020                            79  * GETS THE ENDING ADDRESS
00001020  103C 0004                 80          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001024  4E4F                      81          TRAP    #15             * Perform Trap #4
00001026  2A01                      82          MOVE.L  D1,D5           * Move the ending address into D5
00001028  43F9 0000112C             83          LEA     NEWLINE,A1      * Store newline variable for seper opcodes
0000102E                            84          
0000102E  3E3C 000F                 85          MOVE.W  #15,D7          * prep D7 for bitmask subroutine
00001032  3C3C 000C                 86          MOVE.W  #12,D6          * prep D6 for bitmask subroutine
00001036  6100 00B0                 87          BSR     BITMASK         * obtain a bitmask that goes from 12-15 (inclusive)
0000103A                            88          * MOVE.W  D6,D2           * move the bitmask to D2
0000103A                            89          
0000103A                            90  LOOP    
0000103A                            91          
0000103A                            92          * MOVE.W  #BITMASK,D2     * Load the bitmask into data register D2
0000103A  3F06                      93          MOVE    D6,-(A7)        * save the bitmask
0000103C  341A                      94          MOVE.W  (A2)+,D2        * Read an operation into D1
0000103E  CC42                      95          AND.W   D2,D6           * Apply this bitmask
00001040                            96          
00001040  BC7C 4000                 97          CMP     #OP_0100,D6     * Does the operation start with 0100?
00001044  6600 000A                 98          BNE     NEXT16          * No, check next case
00001048  6100 003A                 99          BSR     OP0100          * Branch to subroutine 0100
0000104C  6000 000A                100          BRA     ITERATION       * Move to next iteration of the loop
00001050                           101          
00001050                           102  NEXT16
00001050  3202                     103          MOVE.W  D2,D1           * Print opcode we don't recognize
00001052                           104  
00001052  103C 0003                105          MOVE.B  #3,D0           * Print out operation we don't recognize
00001056  4E4F                     106          TRAP    #15             * Perform Trap #3
00001058                           107          
00001058                           108  ITERATION
00001058  3C1F                     109          MOVE    (A7)+,D6        * restore the bitmask to its previous state
0000105A                           110  
0000105A  103C 000E                111          MOVE.B  #14,D0          * Print a newline
0000105E  4E4F                     112          TRAP    #15             * Perform Trap #14
00001060                           113  
00001060  BA4A                     114          CMP     A2,D5           * Compare the starting address to ending address
00001062  6700 2FAE                115          BEQ     END             * If they are equal, branch 
00001066  60D2                     116          BRA     LOOP            * Otherwise, branch back to LOOP
00001068                           117  
00001068                           118  * --- OP 0000 ------------------------------------------
00001068                           119  * FUNCTIONS     BCLR, ORI, CMPI
00001068                           120  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask. 
00001068                           121  * ADDR REG        
00001068                           122  * POST COND     All registers return to their previous state.
00001068                           123  * ------------------------------------------------------
00001068                           124  OP0000
00001068                           125          * Compare 8th bit
00001068                           126          * If 8th bit is 1, go to BCLR
00001068                           127              * If bit 7 = 1 and 6 = 0, it is confirmed BCLR
00001068                           128                  * Check if mode and both registers is right
00001068                           129          * Now compare bits 9,10,11
00001068                           130              * If they're 000, go to ORI
00001068                           131                  * Check if size, mode, and register is right
00001068                           132              * If they're 110, go to CMPI
00001068                           133                  * Check if size, mode, and register is right
00001068                           134  
00001068                           135  
00001068                           136  * --- OP 0001 ------------------------------------------
00001068                           137  * FUNCTIONS     MOVE.B
00001068                           138  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001068                           139  * ADDR REG        
00001068                           140  * POST COND     All registers return to their previous state.
00001068                           141  * ------------------------------------------------------
00001068                           142  OP0001  
00001068                           143  
00001068                           144  
00001068                           145  
00001068                           146  
00001068                           147  * --- OP 0010 ------------------------------------------
00001068                           148  * FUNCTIONS     MOVE.L, MOVEA.L,
00001068                           149  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001068                           150  * ADDR REG        
00001068                           151  * POST COND     All registers return to their previous state.
00001068                           152  * ------------------------------------------------------
00001068                           153  OP0010  
00001068                           154  
00001068                           155  
00001068                           156  * --- OP 0011 ------------------------------------------
00001068                           157  * FUNCTIONS     MOVE.W, MOVEA.W
00001068                           158  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001068                           159  * ADDR REG        
00001068                           160  * POST COND     All registers return to their previous state.
00001068                           161  * ------------------------------------------------------
00001068                           162  OP0011
00001068  48A7 FFFE                163      MOVEM   D0-D7/A0-A6, -(A7)
0000106C                           164      
0000106C  3C3C 0006                165      MOVE.W  #6,D6
00001070  3E3C 0008                166      MOVE.W  #8,D7
00001074                           167      
00001074  6100 0072                168      BSR     BITMASK
00001078                           169      
00001078  CC42                     170      AND.W   D2,D6
0000107A                           171      
0000107A  BC7C 0040                172      CMP     #%0000000001000000,D6
0000107E  6600 0004                173      BNE     NEXT15
00001082  61FE                     174      BSR     * for MOVEA.W
00001084                           175      
00001084                           176  NEXT15
00001084                           177  
00001084                           178  
00001084                           179  * --- OP 0100 ------------------------------------------
00001084                           180  * FUNCTIONS     NO_OP, MOVEM, LEA, NEG, JSR, RTS
00001084                           181  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001084                           182  * ADDR REG        
00001084                           183  * POST COND     All registers return to their previous state.
00001084                           184  * ------------------------------------------------------
00001084                           185  OP0100  * TODO: movem, lea, neg, jsr, rts
00001084                           186  
00001084  48A7 C0C0                187          MOVEM   D0-D1/A0-A1,-(A7) * Push values to the stack to save
00001088                           188          
00001088  3C3C 0008                189          MOVE.W  #8,D6
0000108C  3E3C 000B                190          MOVE.W  #11,D7
00001090                           191          
00001090  6100 0056                192          BSR     BITMASK
00001094                           193          
00001094  CC42                     194          AND     D2,D6
00001096                           195          
00001096  0C46 0400                196          CMPI    #%0000010000000000,D6
0000109A  6600 0012                197          BNE     NEXT19
0000109E                           198        
0000109E                           199          * it is NEG
0000109E  43F9 00001133            200          LEA     NEGOP,A1
000010A4  103C 000E                201          MOVE.B  #14,D0          * Print a newline
000010A8  4E4F                     202          TRAP    #15
000010AA                           203          
000010AA  6000 0036                204          BRA     NEXT17
000010AE                           205          
000010AE                           206  NEXT19 * is it MOVEM?
000010AE                           207          * generate a bitmask to see if it's MOVEM or NEG
000010AE  3C3C 0007                208          MOVE.W  #7,D6
000010B2  3E3C 0009                209          MOVE.W  #9,D7
000010B6                           210          
000010B6  6100 0030                211          BSR     BITMASK
000010BA                           212          
000010BA  CC42                     213          AND     D2,D6
000010BC                           214          
000010BC                           215          * if true, it is MOVEM
000010BC  0C46 0080                216          CMPI    #%0000000010000000,D6
000010C0  6600 0014                217          BNE     NEXT18          * it is niether
000010C4                           218          
000010C4                           219          * it is MOVEM
000010C4  43F9 00001137            220          LEA     MOVEMOP,A1
000010CA  103C 000E                221          MOVE.B  #14,D0          * Print a newline
000010CE  4E4F                     222          TRAP    #15
000010D0                           223          
000010D0  341A                     224          MOVE.W  (A2)+,D2        * simply used to advance the pointer
000010D2                           225          
000010D2  6000 000E                226          BRA     NEXT17
000010D6                           227  NEXT18
000010D6                           228          
000010D6  43F9 0000112F            229          LEA     NOOPERATION,A1
000010DC  103C 000E                230          MOVE.B  #14,D0          * Print a newline
000010E0  4E4F                     231          TRAP    #15
000010E2                           232          
000010E2                           233  NEXT17
000010E2  4C9F 0303                234          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
000010E6  4E75                     235          RTS
000010E8                           236          
000010E8                           237          
000010E8                           238          
000010E8                           239  
000010E8                           240  * --- OP 0101 ------------------------------------------
000010E8                           241  * FUNCTIONS     SUBQ
000010E8                           242  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000010E8                           243  * ADDR REG        
000010E8                           244  * POST COND     All registers return to their previous state.
000010E8                           245  * ------------------------------------------------------
000010E8                           246  OP0101
000010E8                           247  
000010E8                           248  
000010E8                           249  
000010E8                           250  * --- OP 0110 ------------------------------------------
000010E8                           251  * FUNCTIONS     BCC, BCS, BGE, BLT, BVC, BRA
000010E8                           252  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000010E8                           253  * ADDR REG        
000010E8                           254  * POST COND     All registers return to their previous state.
000010E8                           255  * ------------------------------------------------------
000010E8                           256  OP0110
000010E8                           257  
000010E8                           258  
000010E8                           259  
000010E8                           260  
000010E8                           261  * --- OP 0111 ------------------------------------------
000010E8                           262  * FUNCTIONS     
000010E8                           263  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000010E8                           264  * ADDR REG        
000010E8                           265  * POST COND     All registers return to their previous state.
000010E8                           266  * ------------------------------------------------------
000010E8                           267  OP0111
000010E8                           268  
000010E8                           269  
000010E8                           270  
000010E8                           271  * --- OP 1000 ------------------------------------------
000010E8                           272  * FUNCTIONS     DIVS, OR
000010E8                           273  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000010E8                           274  * ADDR REG        
000010E8                           275  * POST COND     All registers return to their previous state.
000010E8                           276  * ------------------------------------------------------
000010E8                           277  OP1000
000010E8                           278  
000010E8                           279  
000010E8                           280  
000010E8                           281  * --- OP 1001 ------------------------------------------
000010E8                           282  * FUNCTIONS     SUB
000010E8                           283  * DATA REG      D0, D1 for output. D2 for entire instruction. D6 for bitmask.
000010E8                           284  * ADDR REG        
000010E8                           285  * POST COND     All registers return to their previous state.
000010E8                           286  * ------------------------------------------------------
000010E8                           287  OP1001
000010E8                           288  
000010E8                           289  
000010E8                           290  
000010E8                           291  * --- OP 1010 ------------------------------------------
000010E8                           292  * FUNCTIONS     
000010E8                           293  * DATA REG      D0, D1 for output. D2 for entire instruction. D6 for bitmask.
000010E8                           294  * ADDR REG        
000010E8                           295  * POST COND     All registers return to their previous state.
000010E8                           296  * ------------------------------------------------------
000010E8                           297  OP1010
000010E8                           298  
000010E8                           299  
000010E8                           300  * --- OP 1011 ------------------------------------------
000010E8                           301  * FUNCTIONS     EOR, CMP 
000010E8                           302  * DATA REG      D0, D1 for output. D2 for entire opcode. D6 for bitmask.
000010E8                           303  * ADDR REG        
000010E8                           304  * POST COND     All registers return to their previous state.
000010E8                           305  * ------------------------------------------------------
000010E8                           306  OP1011
000010E8                           307  
000010E8                           308  
000010E8                           309  * --- OP 1100 ------------------------------------------
000010E8                           310  * FUNCTIONS     MULS
000010E8                           311  * DATA REG      D0, D1 for output. D2 for entire opcode. D6 for bitmask.
000010E8                           312  * ADDR REG        
000010E8                           313  * POST COND     All registers return to their previous state.
000010E8                           314  * ------------------------------------------------------
000010E8                           315  OP1100
000010E8                           316  
000010E8                           317  
000010E8                           318  
000010E8                           319  * --- OP 1101 ------------------------------------------
000010E8                           320  * FUNCTIONS     ADD, ADDA,
000010E8                           321  * DATA REG      D0, D1 for output. D2 for entire opcode. D6 for bitmask.
000010E8                           322  * ADDR REG        
000010E8                           323  * POST COND     All registers return to their previous state.
000010E8                           324  * ------------------------------------------------------
000010E8                           325  OP1101
000010E8                           326  
000010E8                           327  
000010E8                           328  
000010E8                           329  * --- OP 1110 ------------------------------------------
000010E8                           330  * FUNCTIONS     LSL, LSR, ASL, ASR, ROL, ROR, 
000010E8                           331  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000010E8                           332  * ADDR REG        
000010E8                           333  * POST COND     All registers return to their previous state.
000010E8                           334  * ------------------------------------------------------
000010E8                           335  OP1110
000010E8                           336  
000010E8                           337  
000010E8                           338  
000010E8                           339  
000010E8                           340  * --- OP 1111 ------------------------------------------
000010E8                           341  * FUNCTIONS     
000010E8                           342  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000010E8                           343  * ADDR REG        
000010E8                           344  * POST COND     All registers return to their previous state.
000010E8                           345  * ------------------------------------------------------
000010E8                           346  OP1111
000010E8                           347  
000010E8                           348  
000010E8                           349  
000010E8                           350  
000010E8                           351  
000010E8                           352  
000010E8                           353   * --- BITMASK ----------------------------------------------------------------
000010E8                           354   *@pre      D6 contains the starting bit you want masked, D7 the ending bit
000010E8                           355   *
000010E8                           356   *@post     D6 contains the bitmask, ready for use
000010E8                           357   
000010E8                           358  BITMASK
000010E8  3F05                     359          MOVE    D5,-(A7)    * push D5 onto the stack so we can use it to
000010EA  4245                     360          CLR     D5          * clear D5 so we can use it
000010EC                           361  LOOPBIT 
000010EC  0DC5                     362          BSET    D6,D5       * set the D6th bit in D5 to 1
000010EE  5246                     363          ADD     #1,D6       * increment D6
000010F0                           364          
000010F0  BC47                     365          CMP     D7,D6       * have we finished?
000010F2  6E00 0004                366          BGT     BITMASKDONE * yes
000010F6  60F4                     367          BRA     LOOPBIT     * no, iterate again
000010F8                           368          
000010F8                           369  BITMASKDONE
000010F8                           370  
000010F8  2C05                     371          MOVE.L  D5,D6
000010FA  3A1F                     372          MOVE    (A7)+,D5    * restore D5
000010FC  4E75                     373          RTS
000010FE                           374          
000010FE                           375   * --- OP0100 -----------------------------------------------------------------
000010FE                           376   * @pre      D2 contains the opcode
000010FE                           377   *
000010FE                           378   * @post     all registers are returned to their previous state
000010FE                           379  
000010FE                           380  
000010FE                           381  
000010FE                           382   * ----------------------------------------------------------------------------
000010FE                           383   * ----------------------------------------------------------------------------
000010FE                           384   * Constants for printing information to the console
000010FE                           385  
000010FE  =0000000D                386  CR      EQU     $0D
000010FE  =0000000A                387  LF      EQU     $0A
000010FE= 45 4E 54 45 52 20 ...    388  MSGSTART    DC.B    'ENTER START ADDRESS: ',CR,LF,0
00001116= 45 4E 54 45 52 20 ...    389  MSGEND      DC.B    'ENTER END ADDRESS: ',CR,LF,0
0000112C= 0D 0A 00                 390  NEWLINE     DC.B    CR,LF,0
0000112F= 4E 4F 50 00              391  NOOPERATION DC.B    'NOP',0
00001133= 4E 45 47 00              392  NEGOP       DC.B    'NEG',0
00001137= 4D 4F 56 45 4D 00        393  MOVEMOP     DC.B    'MOVEM',0
0000113D                           394  
0000113D                           395   * ----------------------------------------------------------------------------
0000113D                           396   * ----------------------------------------------------------------------------
0000113D                           397   * Data defined constants
0000113D                           398   *   - B/W/L (representing Byte, Word, Long)
0000113D                           399   *   - A0-A7 (representing the 8 address registers)
0000113D                           400   *   - D0-D7 (representing the 8 data registers)
0000113D                           401   * ----------------------------------------------------------------------------
0000113D                           402  
0000113D= 42                       403  __B        DC.B    'B'
0000113E= 57                       404  __W        DC.B    'W'
0000113F= 4C                       405  __L        DC.B    'L'
00001140                           406  
00001140= 41 30                    407  __A0        DC.B   'A0'
00001142= 41 31                    408  __A1        DC.B   'A1'    
00001144= 41 32                    409  __A2        DC.B   'A2'
00001146= 41 33                    410  __A3        DC.B   'A3'
00001148= 41 34                    411  __A4        DC.B   'A4'
0000114A= 41 35                    412  __A5        DC.B   'A5'
0000114C= 41 36                    413  __A6        DC.B   'A6'
0000114E= 41 37                    414  __A7        DC.B   'A7'
00001150                           415  
00001150= 44 30                    416  __D0        DC.B   'D0'
00001152= 44 31                    417  __D1        DC.B   'D1'
00001154= 44 32                    418  __D2        DC.B   'D2'
00001156= 44 33                    419  __D3        DC.B   'D3'
00001158= 44 34                    420  __D4        DC.B   'D4'
0000115A= 44 35                    421  __D5        DC.B   'D5'
0000115C= 44 36                    422  __D6        DC.B   'D6'
0000115E= 44 37                    423  __D7        DC.B   'D7'
00001160                           424   * ---------------------------------------------------------------------------
00001160                           425   * End of definition segment
00001160                           426   * ---------------------------------------------------------------------------
00001160                           427   * ---------------------------------------------------------------------------
00001160                           428  
00001160                           429  * Put variables and constants here
00001160                           430  
00004000                           431      ORG $4000
00004000                           432  
00004000  4E71                     433      NOP
00004002  103C 009A                434      MOVE.B   #%10011010, D0
00004006  123C 00A9                435      MOVE.B   #%10101001, D1
0000400A  D200                     436      ADD.B    D0,D1
0000400C  48A7 4000                437      MOVEM    D1,-(A7)
00004010  4443                     438      NEG.W    D3
00004012                           439  
00004012                           440  END
00004012                           441      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BITMASK             10E8
BITMASKDONE         10F8
CR                  D
END                 4012
ITERATION           1058
LF                  A
LOOP                103A
LOOPBIT             10EC
MOVEMOP             1137
MSGEND              1116
MSGSTART            10FE
NEGOP               1133
NEWLINE             112C
NEXT15              1084
NEXT16              1050
NEXT17              10E2
NEXT18              10D6
NEXT19              10AE
NOOPERATION         112F
OP0000              1068
OP0001              1068
OP0010              1068
OP0011              1068
OP0100              1084
OP0101              10E8
OP0110              10E8
OP0111              10E8
OP1000              10E8
OP1001              10E8
OP1010              10E8
OP1011              10E8
OP1100              10E8
OP1101              10E8
OP1110              10E8
OP1111              10E8
OP_0000             0
OP_0001             1000
OP_0010             2000
OP_0011             3000
OP_0100             4000
OP_0101             5000
OP_0110             6000
OP_0111             7000
OP_1000             8000
OP_1001             9000
OP_1010             A000
OP_1011             B000
OP_1100             C000
OP_1101             D000
OP_1110             E000
OP_1111             F000
START               1000
__A0                1140
__A1                1142
__A2                1144
__A3                1146
__A4                1148
__A5                114A
__A6                114C
__A7                114E
__B                 113D
__D0                1150
__D1                1152
__D2                1154
__D3                1156
__D4                1158
__D5                115A
__D6                115C
__D7                115E
__L                 113F
__W                 113E
