00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/27/2014 1:09:06 PM

00000000                             1  *    666
00000000                             2  *   66 66
00000000                             3  *  66   66
00000000                             4  *  66   66         8888
00000000                             5  *  66   66       88   kkkk
00000000                             6  *  66  66       8   88   kk      
00000000                             7  *   66  6      8  88  kkk  kk    
00000000                             8  *    66  6    8  88     kk  k
00000000                             9  *     66 66  88 88        kk
00000000                            10  *     6 _______ 8
00000000                            11  *    6    68k    8
00000000                            12  *   6_____PRO_____8
00000000                            13  *  6               8        68k is as easy as
00000000                            14  *  6    0     0    8        6 - 8 - k !
00000000                            15  *  6   /   V   \   8 
00000000                            16  *  6   \__/ \__/   8        Welcome to our Dissasembler, Professor Nash!
00000000                            17  *    6            8         Enjoy your stay!
00000000                            18  *      6        8      
00000000                            19  *        666888
00000000                            20  *  _____                   __    ___  _    
00000000                            21  * | ____|__ _ ___ _   _   / /_  ( _ )| | __
00000000                            22  * |  _| / _` / __| | | | | '_ \ / _ \| |/ /
00000000                            23  * | |__| (_| \__ \ |_| | | (_) | (_) |   < 
00000000                            24  * |_____\__,_|___/\__, |  \___/ \___/|_|\_\
00000000                            25  *                 |___/           
00000000                            26  *-----------------------------------------------------------
00000000                            27  * Title      : 68K Decompiler
00000000                            28  * Written by : Nick Bell, Sammy Nimnuch, Caleb Larson
00000000                            29  * Date       : 11/2014
00000000                            30  * Description: This program decompiles other 68K programs
00000000                            31  *              which are loaded into the simulator simultaneously.
00000000                            32  *-----------------------------------------------------------
00000000                            33  
00000000                            34  
00000000  =00000000                 35  OP_0000     EQU     %0000000000000000
00000000  =00001000                 36  OP_0001     EQU     %0001000000000000
00000000  =00002000                 37  OP_0010     EQU     %0010000000000000
00000000  =00003000                 38  OP_0011     EQU     %0011000000000000
00000000  =00004000                 39  OP_0100     EQU     %0100000000000000
00000000  =00005000                 40  OP_0101     EQU     %0101000000000000
00000000  =00006000                 41  OP_0110     EQU     %0110000000000000
00000000  =00007000                 42  OP_0111     EQU     %0111000000000000
00000000  =00008000                 43  OP_1000     EQU     %1000000000000000
00000000  =00009000                 44  OP_1001     EQU     %1001000000000000
00000000  =0000A000                 45  OP_1010     EQU     %1010000000000000
00000000  =0000B000                 46  OP_1011     EQU     %1011000000000000
00000000  =0000C000                 47  OP_1100     EQU     %1100000000000000
00000000  =0000D000                 48  OP_1101     EQU     %1101000000000000
00000000  =0000E000                 49  OP_1110     EQU     %1110000000000000
00000000  =0000F000                 50  OP_1111     EQU     %1111000000000000
00000000                            51  
00000000                            52  * BITMASK     EQU     $F000       * used to bitmask the first nibble
00000000                            53  
00001000                            54  START:  ORG    $1000            * first instruction of program
00001000                            55  
00001000                            56  * -----------------------------------
00001000                            57  * Starting and Ending Addresses
00001000                            58  * -----------------------------------
00001000                            59  
00001000                            60  * THINK ABOUT ASKING FOR VALID START/END NO NEGATIVE ADDR
00001000                            61  
00001000                            62  * LOAD MSGSTART, ASK FOR INPUT
00001000  43F9 0000163A             63          LEA     MSGSTART,A1     * Load MESSAGE START
00001006  103C 000E                 64          MOVE.B  #14,D0          * Trap #14 to display message
0000100A  4E4F                      65          TRAP    #15             * Perform #14
0000100C                            66          
0000100C                            67  * GETS THE STARTING ADDRESS
0000100C  103C 0004                 68          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001010  4E4F                      69          TRAP    #15             * Perform #15
00001012                            70          
00001012                            71  * MOVE IT TO ANOTHER ADDRESS REGISTER
00001012  2441                      72          MOVEA.L D1,A2           * Move the user input into A2. This is the starting address.
00001014                            73  
00001014                            74  * LOAD MSGSTART, ASK FOR INPUT
00001014  43F9 00001652             75          LEA     MSGEND,A1       * Load MESSAGE END
0000101A  303C 000E                 76          MOVE.W  #14,D0          * Trap #14 to display message
0000101E  4E4F                      77          TRAP    #15             * Perform #14
00001020                            78          
00001020                            79  * GETS THE ENDING ADDRESS
00001020  103C 0004                 80          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001024  4E4F                      81          TRAP    #15             * Perform Trap #4
00001026  2A01                      82          MOVE.L  D1,D5           * Move the ending address into D5
00001028  43F9 00001668             83          LEA     NEWLINE,A1      * Store newline variable for seper opcodes
0000102E                            84          
0000102E  3E3C 000F                 85          MOVE.W  #15,D7          * prep D7 for bitmask subroutine
00001032  3C3C 000C                 86          MOVE.W  #12,D6          * prep D6 for bitmask subroutine
00001036  6100 05EC                 87          BSR     BITMASK         * obtain a bitmask that goes from 12-15 (inclusive)
0000103A                            88          * MOVE.W  D6,D2           * move the bitmask to D2
0000103A                            89          
0000103A                            90  LOOP    
0000103A                            91          
0000103A                            92          * MOVE.W  #BITMASK,D2     * Load the bitmask into data register D2
0000103A  3F06                      93          MOVE    D6,-(A7)        * save the bitmask
0000103C  341A                      94          MOVE.W  (A2)+,D2        * Read an operation into D1
0000103E  CC42                      95          AND.W   D2,D6           * Apply this bitmask
00001040                            96          
00001040  BC7C 4000                 97          CMP     #OP_0100,D6     * Does the operation start with 0100?
00001044  6600 0006                 98          BNE     NEXT            * No, check next case
00001048  6000 01AC                 99          BRA     OP0100          * Branch to subroutine 0100
0000104C                           100          *BRA     ITERATION       * Move to next iteration of the loop
0000104C                           101          
0000104C                           102  NEXT
0000104C  6100 05AC                103          BSR     UNKNOWNOP
00001050                           104          
00001050                           105  ITERATION
00001050  3C1F                     106          MOVE    (A7)+,D6        * restore the bitmask to its previous state
00001052                           107  
00001052                           108          *MOVE.B  #14,D0          * Print a newline
00001052                           109          *TRAP    #15             * Perform Trap #14
00001052                           110  
00001052  BA4A                     111          CMP     A2,D5           * Compare the starting address to ending address
00001054  6700 2FC6                112          BEQ     END             * If they are equal, branch 
00001058  60E0                     113          BRA     LOOP            * Otherwise, branch back to LOOP
0000105A                           114  
0000105A                           115  * --- OP 0000 ------------------------------------------
0000105A                           116  * FUNCTIONS     BCLR, ORI, CMPI
0000105A                           117  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask. 
0000105A                           118  * ADDR REG        
0000105A                           119  * POST COND     All registers return to their previous state.
0000105A                           120  * ------------------------------------------------------
0000105A                           121  OP0000
0000105A  48A7 C0C0                122          MOVEM   D0-D1/A0-A1,-(A7)   * Push values to the stack to save
0000105E  3C3C 0006                123          MOVE.W  #6, D6              * Prep lower value for bitmask
00001062  3E3C 0008                124          MOVE.W  #8, D7              * Prep upper value for bitmask
00001066  6100 05BC                125          BSR     BITMASK             * Finalize bitmask setup
0000106A  CC42                     126          AND     D2,D6               * Apply bitmask
0000106C                           127          
0000106C  0C46 0180                128          CMPI    #%0000000110000000, D6  * Are we BCLR?
00001070  6600 0012                129          BNE     NOTBCLR                 * If not, branch to other OP0000 functions
00001074                           130          
00001074  43F9 00001686            131          LEA     BCLROP,A1           * We found BCLR
0000107A  103C 000E                132          MOVE.B  #14,D0              * Trap #14 prints out the data
0000107E  4E4F                     133          TRAP    #15                 * Perform Trap #14
00001080  6000 0296                134          BRA     DONE              * Found the op, move to next iteration
00001084                           135  
00001084                           136  NOTBCLR * Possible options left are ORI or CMPI
00001084  3C3C 0009                137          MOVE.W  #9, D6              * Prep lower value for bitmask
00001088  3E3C 000B                138          MOVE.W  #11, D7             * Prep upper value for bitmask
0000108C  6100 0596                139          BSR     BITMASK             * Finalize bitmask setup
00001090  CC42                     140          AND     D2,D6               * Apply bitmask
00001092                           141          
00001092  0C46 0000                142          CMPI    #%0000000000000000, D6  * Are we ORI?
00001096  6700 000E                143          BEQ     ISORI                   * If ORI, branch to ISORI
0000109A                           144          
0000109A  0C46 0C00                145          CMPI    #%0000110000000000, D6  * Hmm... Maybe we're CMPI?
0000109E  6700 0006                146          BEQ     ISCMPI                  * If CMPI, branch to ISCMPI
000010A2                           147          
000010A2  6600 0556                148          BNE     UNKNOWNOP               * Otherwise, this op is an imposter. 
000010A6                           149                                          * We don't deal too kindly with imposters.
000010A6                           150          
000010A6                           151  ISORI   * TODO
000010A6                           152          
000010A6                           153  
000010A6                           154  ISCMPI
000010A6  43F9 0000168F            155          LEA     CMPIOP, A1          * Load 'CMPI' into the output window
000010AC  103C 000E                156          MOVE.B  #14,D0              * Trap #14 prints out the data in D0
000010B0  4E4F                     157          TRAP    #15                 * Perform Trap #14
000010B2                           158          
000010B2                           159          * Determine the Size
000010B2  3C3C 0006                160          MOVE.W  #6, D6              * Prep lower value for bitmask
000010B6  3E3C 0007                161          MOVE.W  #7, D7              * Prep upper value for bitmask
000010BA  6100 0568                162          BSR     BITMASK             * Finalize bitmask setup
000010BE  CC42                     163          AND     D2,D6               * Apply bitmask
000010C0                           164          
000010C0  0C46 00C0                165          CMPI    #%0000000011000000, D6  * Imposter Op
000010C4  6700 0534                166          BEQ     UNKNOWNOP               * Deal with the imposter
000010C8                           167          
000010C8  0C46 0000                168          CMPI    #%0000000000000000, D6  * The size is a BYTE
000010CC  6700 0012                169          BEQ     CMPIBYTE                * Branch to CMPI.B
000010D0                           170          
000010D0  0C46 0040                171          CMPI    #%0000000001000000, D6  * The size is a WORD
000010D4  6700 0032                172          BEQ     CMPIWORD                * Branch to CMPI.W
000010D8                           173          
000010D8  0C46 0080                174          CMPI    #%0000000010000000, D6  * The size is a LONG
000010DC  6700 0050                175          BEQ     CMPILONG                * Branch to CMPI.L
000010E0                           176          
000010E0                           177  CMPIBYTE
000010E0  43F9 000016A2            178          LEA     __B, A1     * Load .B
000010E6  103C 000E                179          MOVE.B  #14, D0     * Print out data
000010EA  4E4F                     180          TRAP    #15         * Perform Trap #14
000010EC                           181          
000010EC  43F9 0000169E            182          LEA     IMD, A1     * Load #
000010F2  103C 000E                183          MOVE.B  #14, D0     * Print out data
000010F6  4E4F                     184          TRAP    #15         * Perform Trap #14
000010F8                           185          
000010F8  361A                     186          MOVE.W  (A2)+,D3    * Advance a word forward to get the value.
000010FA  1203                     187          MOVE.B  D3,D1       * Move the lower byte from D3 into D1
000010FC  3622                     188          MOVE.W  -(A2),D3    * Now go back
000010FE  103C 000E                189          MOVE.B  #14, D0     * Print out the data
00001102  4E4F                     190          TRAP    #15         * Perform Trap #14 
00001104                           191          
00001104  6000 004E                192          BRA     CMPIEA      * Branch to determine Effective Address
00001108                           193          
00001108                           194  CMPIWORD
00001108  43F9 000016A6            195          LEA     __W, A1     * Load .W
0000110E  103C 000E                196          MOVE.B  #14, D0     * Print out data
00001112  4E4F                     197          TRAP    #15         * Perform Trap #14
00001114                           198          
00001114  43F9 0000169E            199          LEA     IMD, A1     * Load #
0000111A  103C 000E                200          MOVE.B  #14, D0     * Print out data
0000111E  4E4F                     201          TRAP    #15         * Perform Trap #14
00001120                           202          
00001120  361A                     203          MOVE.W  (A2)+,D3    * Advance a word forward to get the value.
00001122  3222                     204          MOVE.W  -(A2),D1    * Copy the immediate Value into D1, then go back
00001124  103C 000E                205          MOVE.B  #14, D0     * Print out the data
00001128  4E4F                     206          TRAP    #15         * Perform Trap #14
0000112A                           207          
0000112A                           208          
0000112A  6000 0028                209          BRA     CMPIEA      * Branch to determine Effective Address
0000112E                           210          
0000112E                           211  CMPILONG
0000112E  43F9 000016AA            212          LEA     __L, A1     * Load .L
00001134  103C 000E                213          MOVE.B  #14, D0     * Print out data
00001138  4E4F                     214          TRAP    #15         * Perform Trap #14
0000113A                           215          
0000113A  43F9 0000169E            216          LEA     IMD, A1     * Load #
00001140  103C 000E                217          MOVE.B  #14, D0     * Print out data
00001144  4E4F                     218          TRAP    #15         * Perform Trap #14
00001146                           219          
00001146  361A                     220          MOVE.W  (A2)+,D3    * Advance a word forward to get the value.
00001148  2222                     221          MOVE.L  -(A2),D1    * Copy the immediate value (long) into D1, then go back
0000114A  103C 000E                222          MOVE.B  #14, D0     * Print out the data
0000114E  4E4F                     223          TRAP    #15         * Perform Trap #14
00001150                           224          
00001150  6000 0002                225          BRA     CMPIEA      * Branch to determine Effective Address
00001154                           226          
00001154                           227  CMPIEA
00001154                           228          * So far the buffer is CMPI.X #Y ... Now we need to add a comma
00001154  43F9 000016A0            229          LEA     COMMA, A1   * Load ,
0000115A  103C 000E                230          MOVE.B  #14, D0     * Print out data
0000115E  4E4F                     231          TRAP    #15         * Perform Trap #14
00001160                           232          
00001160  43F9 000016AA            233          LEA     __L, A1     * Load .L
00001166  103C 000E                234          MOVE.B  #14, D0     * Print out data
0000116A  4E4F                     235          TRAP    #15         * Perform Trap #14
0000116C                           236          
0000116C                           237          * Determine the mode
0000116C  3C3C 0003                238          MOVE.W  #3, D6              * Prep lower value for bitmask
00001170  3E3C 0005                239          MOVE.W  #5, D7              * Prep upper value for bitmask
00001174  6100 04AE                240          BSR     BITMASK             * Finalize bitmask setup
00001178  CC42                     241          AND     D2,D6               * Apply bitmask
0000117A                           242          
0000117A  0C46 0008                243          CMPI    #%0000000000001000, D6  * Is the Mode 001, an unsupported mode for CMPI?
0000117E  6700 047A                244          BEQ     UNKNOWNOP               * Imposter op
00001182                           245          
00001182  0C46 0028                246          CMPI    #%0000000000101000, D6  * Is the Mode 101, an unsupported mode?
00001186  6700 0472                247          BEQ     UNKNOWNOP               * Imposter op
0000118A                           248          
0000118A  0C46 0030                249          CMPI    #%0000000000110000, D6  * Is the Mode 110, an unsupported mode?
0000118E  6700 046A                250          BEQ     UNKNOWNOP               * Imposter op
00001192                           251  
00001192  0C46 0038                252          CMPI    #%0000000000111000, D6  * Is the Mode 111?
00001196  6700 0028                253          BEQ     CMPIREG                 * Further investigation is needed
0000119A                           254          
0000119A                           255          * Mode is verified to be valid at this point
0000119A  0C46 0000                256          CMPI    #%0000000000000000, D6  * AMode = Dn, Reg = Dn
0000119E  6100 020A                257          BSR     MODE_DN
000011A2                           258          
000011A2  0C46 0010                259          CMPI    #%0000000000010000, D6  * AMode = (An), Reg = An
000011A6  6100 0202                260          BSR     MODE_IAN
000011AA                           261          
000011AA  0C46 0018                262          CMPI    #%0000000000011000, D6  * AMode = (An)+, Reg = An
000011AE  6100 01FA                263          BSR     MODE_IAN_POS
000011B2                           264          
000011B2  0C46 0000                265          CMPI    #%0000000000000000, D6  * AMode = -(An), Reg = An
000011B6  6100 01F2                266          BSR     MODE_IAN_PRE
000011BA                           267          
000011BA                           268          * Reached End of CMPI. Everything has been printed out
000011BA  4C9F 0303                269          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
000011BE  4E75                     270          RTS
000011C0                           271          
000011C0                           272  CMPIREG
000011C0  3C3C 0000                273          MOVE.W  #0, D6              * Prep lower value for bitmask
000011C4  3E3C 0002                274          MOVE.W  #2, D7              * Prep upper value for bitmask
000011C8  6100 045A                275          BSR     BITMASK             * Finalize bitmask setup
000011CC  CC42                     276          AND     D2,D6               * Apply bitmask
000011CE                           277          
000011CE  0C46 0000                278          CMPI    #%0000000000000000, D6  * Is the Register 000?
000011D2  6700 000A                279          BEQ     CMPIREG000
000011D6                           280          
000011D6  0C46 0001                281          CMPI    #%0000000000000001, D6  * Is the Register 001?
000011DA  6700 0002                282          BEQ     CMPIREG001
000011DE                           283            
000011DE                           284  
000011DE                           285  CMPIREG000  * TODO (xxx).W for CMPI
000011DE                           286  
000011DE                           287  CMPIREG001  * TODO (xxx).L for CMPI
000011DE                           288          
000011DE                           289  
000011DE                           290  
000011DE                           291  * --- OP 0001 ------------------------------------------
000011DE                           292  * FUNCTIONS     MOVE.B
000011DE                           293  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000011DE                           294  * ADDR REG        
000011DE                           295  * POST COND     All registers return to their previous state.
000011DE                           296  * ------------------------------------------------------
000011DE                           297  OP0001  
000011DE                           298  
000011DE                           299  
000011DE                           300  
000011DE                           301  
000011DE                           302  * --- OP 0010 ------------------------------------------
000011DE                           303  * FUNCTIONS     MOVE.L, MOVEA.L,
000011DE                           304  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000011DE                           305  * ADDR REG        
000011DE                           306  * POST COND     All registers return to their previous state.
000011DE                           307  * ------------------------------------------------------
000011DE                           308  OP0010  
000011DE                           309  
000011DE                           310  
000011DE                           311  * --- OP 0011 ------------------------------------------
000011DE                           312  * FUNCTIONS     MOVE.W, MOVEA.W
000011DE                           313  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000011DE                           314  * ADDR REG        
000011DE                           315  * POST COND     All registers return to their previous state.
000011DE                           316  * ------------------------------------------------------
000011DE                           317  OP0011
000011DE  48A7 FFFE                318      MOVEM   D0-D7/A0-A6, -(A7)
000011E2                           319      
000011E2  3C3C 0006                320      MOVE.W  #6,D6
000011E6  3E3C 0008                321      MOVE.W  #8,D7
000011EA                           322      
000011EA  6100 0438                323      BSR     BITMASK
000011EE                           324      
000011EE  CC42                     325      AND.W   D2,D6
000011F0                           326      
000011F0  BC7C 0040                327      CMP     #%0000000001000000,D6
000011F4                           328      *BNE     NEXT15
000011F4  61FE                     329      BSR     * for MOVEA.W
000011F6                           330  
000011F6                           331  
000011F6                           332  * --- OP 0100 ------------------------------------------
000011F6                           333  * FUNCTIONS     NO_OP, MOVEM, LEA, NEG, JSR, RTS
000011F6                           334  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000011F6                           335  * ADDR REG        
000011F6                           336  * POST COND     All registers return to their previous state.
000011F6                           337  * ------------------------------------------------------
000011F6                           338  OP0100  * TODO: lea, movem, neg?
000011F6                           339  
000011F6  48A7 C0C0                340          MOVEM   D0-D1/A0-A1,-(A7) * Push values to the stack to save
000011FA                           341          
000011FA                           342          *NOP
000011FA  0C42 4E71                343          CMPI    #%0100111001110001,D2
000011FE  6600 0012                344          BNE     NOTNOP
00001202                           345          
00001202  43F9 0000166B            346          LEA     NOOPERATION,A1
00001208  103C 000D                347          MOVE.B  #13,D0          * Print a newline
0000120C  4E4F                     348          TRAP    #15
0000120E                           349          
0000120E  6000 0108                350          BRA     DONE *we found it, move on to the next iteration
00001212                           351  NOTNOP *NEG
00001212                           352          
00001212                           353          * prep values for BITMASK subroutine
00001212  7C08                     354          MOVE.L  #8,D6
00001214  7E0B                     355          MOVE.L  #11,D7
00001216                           356          
00001216  6100 040C                357          BSR     BITMASK
0000121A                           358          
0000121A  CC42                     359          AND     D2,D6                   * apply bitmask
0000121C                           360          
0000121C  0C46 0400                361          CMPI    #%0000010000000000,D6   * are we NEG?
00001220  6600 0046                362          BNE     NOTNEG                  * not neg
00001224                           363          
00001224  7C03                     364          MOVE.L  #3,D6
00001226  7E05                     365          MOVE.L  #5,D7
00001228                           366          
00001228  6100 03FA                367          BSR     BITMASK * generate a bitmask to be used to check mode
0000122C                           368          
0000122C  0C46 0008                369          CMPI    #%0000000000001000,D6 * check to see if it is the unsupported mode
00001230  6700 00E2                370          BEQ     UNKNOWN * if it is, print print out as hex indicating bad op
00001234                           371          
00001234  0C46 0028                372          CMPI    #%0000000000101000,D6 * check to see if it is the unsupported mode
00001238  6700 00DA                373          BEQ     UNKNOWN * if it is, print print out as hex indicating bad op
0000123C                           374          
0000123C  0C46 0030                375          CMPI    #%0000000000110000,D6 * check to see if it is the unsupported mode
00001240  6700 00D2                376          BEQ     UNKNOWN * if it is, print print out as hex indicating bad op
00001244                           377        
00001244                           378          * it is NEG, print
00001244  43F9 0000166F            379          LEA     NEGOP,A1
0000124A  103C 000E                380          MOVE.B  #14,D0
0000124E  4E4F                     381          TRAP    #15
00001250                           382          
00001250  6100 02E2                383          BSR     SIZE67
00001254                           384          
00001254  6100 00CA                385          BSR     EAHELPER05
00001258                           386          
00001258  43F9 00001668            387          LEA     NEWLINE,A1
0000125E  103C 000E                388          MOVE.B  #14,D0
00001262  4E4F                     389          TRAP    #15
00001264                           390          
00001264  6000 00B2                391          BRA     DONE * we found the op, move to next iteration
00001268                           392          
00001268                           393  NOTNEG *MOVEM
00001268                           394  
00001268                           395          * prep values for BITMASK subroutine
00001268  7C07                     396          MOVE.L  #7,D6
0000126A  7E09                     397          MOVE.L  #9,D7
0000126C                           398          
0000126C  6100 03B6                399          BSR     BITMASK
00001270                           400          
00001270  CC42                     401          AND     D2,D6   * apply bitmask
00001272                           402          
00001272  0C46 0080                403          CMPI    #%0000000010000000,D6 * is it MOVEM?
00001276  6600 0014                404          BNE     NOTMOVEM          * it is not MOVEM
0000127A                           405          
0000127A                           406          * make sure it is a valid size and mode for MOVEM
0000127A                           407          
0000127A                           408          * it is MOVEM
0000127A  43F9 00001673            409          LEA     MOVEMOP,A1
00001280  103C 000D                410          MOVE.B  #13,D0          * Print a newline
00001284  4E4F                     411          TRAP    #15
00001286                           412          
00001286                           413          * probably needs its own special code for printing the rest due to uniqueness of movem
00001286                           414          
00001286  341A                     415          MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
00001288                           416          
00001288  6000 008E                417          BRA     DONE          * we found and printed, move on to the next iteration
0000128C                           418          
0000128C                           419  NOTMOVEM *JSR
0000128C                           420          * prep values for BITMASK subroutine
0000128C  7C06                     421          MOVE.L  #6,D6
0000128E  7E08                     422          MOVE.L  #8,D7
00001290                           423          
00001290  6100 0392                424          BSR     BITMASK
00001294                           425          
00001294  CC42                     426          AND     D2,D6   * apply bitmask
00001296                           427          
00001296  0C46 0080                428          CMPI    #%0000000010000000,D6
0000129A  6600 0032                429          BNE     NOTJSR          * it's not JSR
0000129E                           430          
0000129E  43F9 00001679            431          LEA     JSROP,A1
000012A4  103C 000E                432          MOVE.B  #14,D0          * Print a newline and JSR
000012A8  4E4F                     433          TRAP    #15
000012AA                           434          
000012AA                           435          * print out where we are jumping to
000012AA                           436          
000012AA  341A                     437          MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
000012AC                           438          
000012AC  2202                     439          MOVE.L  D2,D1   * save the opcode to print
000012AE                           440          
000012AE  7410                     441          MOVE.L  #16,D2  * set the base to 16
000012B0                           442          
000012B0  700F                     443          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000012B2  4E4F                     444          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000012B4                           445          
000012B4  341A                     446          MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
000012B6                           447          
000012B6  2202                     448          MOVE.L  D2,D1   * save the opcode to print
000012B8                           449          
000012B8  7410                     450          MOVE.L  #16,D2  * set the base to 16
000012BA                           451          
000012BA  700F                     452          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000012BC  4E4F                     453          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000012BE                           454          
000012BE  43F9 00001668            455          LEA     NEWLINE,A1
000012C4  103C 000E                456          MOVE.B  #14,D0          * Print a newline
000012C8  4E4F                     457          TRAP    #15
000012CA                           458          
000012CA  6000 004C                459          BRA     DONE          * we already found instruction, next iteration
000012CE                           460  NOTJSR *RTS
000012CE                           461  
000012CE                           462          * prep values for BITMASK subroutine
000012CE  7C06                     463          MOVE.L  #6,D6
000012D0  7E08                     464          MOVE.L  #8,D7
000012D2                           465          
000012D2  6100 0350                466          BSR     BITMASK
000012D6                           467          
000012D6  CC42                     468          AND     D2,D6   * apply bitmask
000012D8                           469          
000012D8  0C46 0040                470          CMPI    #%0000000001000000,D6
000012DC  6600 0012                471          BNE     NOTRTS          * it's not RTS
000012E0                           472          
000012E0  43F9 0000167E            473          LEA     RTSOP,A1
000012E6  103C 000D                474          MOVE.B  #13,D0          * Print a newline and RTS
000012EA  4E4F                     475          TRAP    #15
000012EC                           476          
000012EC  6000 002A                477          BRA     DONE          * we already found instruction, next iteration
000012F0                           478  NOTRTS  *LEA
000012F0                           479         
000012F0                           480          * prep values for BITMASK subroutine
000012F0  7C06                     481          MOVE.L  #6,D6
000012F2  7E08                     482          MOVE.L  #8,D7
000012F4                           483          
000012F4  6100 032E                484          BSR     BITMASK
000012F8                           485          
000012F8  CC42                     486          AND     D2,D6   * apply bitmask
000012FA                           487          
000012FA  0C46 01C0                488          CMPI    #%0000000111000000,D6
000012FE  6600 0014                489          BNE     UNKNOWN          * it's not LEA, we dont know what it is
00001302                           490          
00001302                           491          * check to make sure it is a supported mode and size
00001302                           492          
00001302  43F9 00001682            493          LEA     LEAOP,A1
00001308  103C 000D                494          MOVE.B  #13,D0          * Print LEA
0000130C  4E4F                     495          TRAP    #15
0000130E                           496          
0000130E                           497          * call EA helper
0000130E  341A                     498          MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
00001310                           499                  
00001310  6000 0006                500          BRA     DONE          * we already found instruction, next iteration
00001314                           501          
00001314                           502  UNKNOWN *dont know what it is
00001314  6100 02E4                503          BSR     UNKNOWNOP
00001318                           504          
00001318                           505  DONE
00001318  4C9F 0303                506          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
0000131C  6000 FD32                507          BRA     ITERATION
00001320                           508          
00001320                           509          
00001320                           510          
00001320                           511  
00001320                           512  * --- OP 0101 ------------------------------------------
00001320                           513  * FUNCTIONS     SUBQ
00001320                           514  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001320                           515  * ADDR REG        
00001320                           516  * POST COND     All registers return to their previous state.
00001320                           517  * ------------------------------------------------------
00001320                           518  OP0101
00001320                           519  * testing branching
00001320                           520  * op op op
00001320                           521  
00001320                           522  
00001320                           523  
00001320                           524  * --- OP 0110 ------------------------------------------
00001320                           525  * FUNCTIONS     BCC, BCS, BGE, BLT, BVC, BRA
00001320                           526  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001320                           527  * ADDR REG        
00001320                           528  * POST COND     All registers return to their previous state.
00001320                           529  * ------------------------------------------------------
00001320                           530  OP0110
00001320                           531  
00001320                           532  
00001320                           533  
00001320                           534  
00001320                           535  * --- OP 0111 ------------------------------------------
00001320                           536  * FUNCTIONS     
00001320                           537  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001320                           538  * ADDR REG        
00001320                           539  * POST COND     All registers return to their previous state.
00001320                           540  * ------------------------------------------------------
00001320                           541  OP0111
00001320                           542  
00001320                           543  
00001320                           544  
00001320                           545  * --- OP 1000 ------------------------------------------
00001320                           546  * FUNCTIONS     DIVS, OR
00001320                           547  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001320                           548  * ADDR REG        
00001320                           549  * POST COND     All registers return to their previous state.
00001320                           550  * ------------------------------------------------------
00001320                           551  OP1000
00001320                           552  
00001320                           553  
00001320                           554  
00001320                           555  * --- OP 1001 ------------------------------------------
00001320                           556  * FUNCTIONS     SUB
00001320                           557  * DATA REG      D0, D1 for output. D2 for entire instruction. D6 for bitmask.
00001320                           558  * ADDR REG        
00001320                           559  * POST COND     All registers return to their previous state.
00001320                           560  * ------------------------------------------------------
00001320                           561  OP1001
00001320                           562  
00001320                           563  
00001320                           564  
00001320                           565  * --- OP 1010 ------------------------------------------
00001320                           566  * FUNCTIONS     
00001320                           567  * DATA REG      D0, D1 for output. D2 for entire instruction. D6 for bitmask.
00001320                           568  * ADDR REG        
00001320                           569  * POST COND     All registers return to their previous state.
00001320                           570  * ------------------------------------------------------
00001320                           571  OP1010
00001320                           572  
00001320                           573  
00001320                           574  * --- OP 1011 ------------------------------------------
00001320                           575  * FUNCTIONS     EOR, CMP 
00001320                           576  * DATA REG      D0, D1 for output. D2 for entire opcode. D6 for bitmask.
00001320                           577  * ADDR REG        
00001320                           578  * POST COND     All registers return to their previous state.
00001320                           579  * ------------------------------------------------------
00001320                           580  OP1011
00001320                           581  
00001320                           582  
00001320                           583  * --- OP 1100 ------------------------------------------
00001320                           584  * FUNCTIONS     MULS
00001320                           585  * DATA REG      D0, D1 for output. D2 for entire opcode. D6 for bitmask.
00001320                           586  * ADDR REG        
00001320                           587  * POST COND     All registers return to their previous state.
00001320                           588  * ------------------------------------------------------
00001320                           589  OP1100
00001320                           590  
00001320                           591  
00001320                           592  
00001320                           593  * --- OP 1101 ------------------------------------------
00001320                           594  * FUNCTIONS     ADD, ADDA,
00001320                           595  * DATA REG      D0, D1 for output. D2 for entire opcode. D6 for bitmask.
00001320                           596  * ADDR REG        
00001320                           597  * POST COND     All registers return to their previous state.
00001320                           598  * ------------------------------------------------------
00001320                           599  OP1101
00001320                           600  
00001320                           601  
00001320                           602  
00001320                           603  * --- OP 1110 ------------------------------------------
00001320                           604  * FUNCTIONS     LSL, LSR, ASL, ASR, ROL, ROR, 
00001320                           605  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001320                           606  * ADDR REG        
00001320                           607  * POST COND     All registers return to their previous state.
00001320                           608  * ------------------------------------------------------
00001320                           609  OP1110
00001320                           610  
00001320                           611  
00001320                           612  
00001320                           613  
00001320                           614  * --- OP 1111 ------------------------------------------
00001320                           615  * FUNCTIONS     
00001320                           616  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001320                           617  * ADDR REG        
00001320                           618  * POST COND     All registers return to their previous state.
00001320                           619  * ------------------------------------------------------
00001320                           620  OP1111
00001320                           621  
00001320                           622  * --- EAHELPER05 ----------------------------------------
00001320                           623  * PRE  COND     D2 contains the instruction we wish to 
00001320                           624  *               print the modes, registers for.
00001320                           625  *               Only call this helper for operations that only
00001320                           626  *               have one mode, register.
00001320                           627  * POST COND     Determines mode, passes D2 to REGHELPER to print
00001320                           628  * ------------------------------------------------------
00001320                           629  *todo: add code for printing immediate values
00001320                           630  EAHELPER05
00001320                           631      
00001320  48A7 FFC0                632      MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001324                           633      
00001324  7C03                     634      MOVE.L  #3,D6
00001326  7E05                     635      MOVE.L  #5,D7
00001328                           636      
00001328  6100 02FA                637      BSR     BITMASK * generate a bitmask to identify the mode
0000132C                           638      
0000132C  CC42                     639      AND     D2,D6   * mask off the parts of D2 we don't need
0000132E                           640      
0000132E  2A06                     641      MOVE.L  D6,D5   * store the 3-5 bitmask for later use
00001330                           642      
00001330  0C46 0000                643      CMPI    #%0000000000000000,D6 * is it data register direct?
00001334  6600 000A                644      BNE     NOTDATAREG
00001338                           645      
00001338  6100 0070                646      BSR     MODE_DN
0000133C                           647       
0000133C  6000 0066                648      BRA     ENDEAHELPER05
00001340                           649      
00001340                           650  NOTDATAREG * address register direct
00001340                           651  
00001340  2C05                     652      MOVE.L  D5,D6   * reload the bitmask into D6
00001342                           653      
00001342  CC42                     654      AND     D2,D6   * mask off the parts of D2 we don't need
00001344                           655      
00001344  0C46 0008                656      CMPI    #%0000000000001000,D6 * is it address register direct?
00001348  6600 000A                657      BNE     NOTADRDIRECT
0000134C                           658      
0000134C  6100 015C                659      BSR     MODE_AN
00001350                           660       
00001350  6000 0052                661      BRA     ENDEAHELPER05
00001354                           662      
00001354                           663  NOTADRDIRECT * address register indirect
00001354                           664          
00001354  2C05                     665      MOVE.L  D5,D6   * reload the bitmask into D6
00001356                           666      
00001356  CC42                     667      AND     D2,D6   * mask off the parts of D2 we don't need
00001358                           668      
00001358  0C46 0010                669      CMPI    #%0000000000010000,D6 * is it address register indirect?
0000135C  6600 000A                670      BNE     NOTADRINDIRECT
00001360                           671      
00001360  6100 0048                672      BSR     MODE_IAN
00001364                           673       
00001364  6000 003E                674      BRA     ENDEAHELPER05
00001368                           675      
00001368                           676  NOTADRINDIRECT * address register indirect, post increment
00001368                           677              
00001368  2C05                     678      MOVE.L  D5,D6   * reload the bitmask into D6
0000136A                           679      
0000136A  CC42                     680      AND     D2,D6   * mask off the parts of D2 we don't need
0000136C                           681      
0000136C  0C46 0018                682      CMPI    #%0000000000011000,D6 * is it address register indirect post increment?
00001370  6600 000A                683      BNE     NOTADRINDIRECTPOST
00001374                           684      
Line 685 ERROR: Undefined symbol
00001374  6100 F1B4                685      BSR     MODE_IAN_POST
00001378                           686       
00001378  6000 002A                687      BRA     ENDEAHELPER05
0000137C                           688      
0000137C                           689  NOTADRINDIRECTPOST * address register indirect, pre decrement
0000137C                           690  
0000137C  2C05                     691      MOVE.L  D5,D6   * reload the bitmask into D6
0000137E                           692      
0000137E  CC42                     693      AND     D2,D6   * mask off the parts of D2 we don't need
00001380                           694      
00001380  0C46 0020                695      CMPI    #%0000000000100000,D6 * is it address register indirect pre decrement?
00001384  6600 000A                696      BNE     NOTADRINDIRECTPRE
00001388                           697      
00001388  6100 0020                698      BSR     MODE_IAN_PRE
0000138C                           699       
0000138C  6000 0016                700      BRA     ENDEAHELPER05
00001390                           701      
00001390                           702  NOTADRINDIRECTPRE * immediate
00001390                           703      
00001390  2C05                     704      MOVE.L  D5,D6   * reload the bitmask into D6
00001392                           705      
00001392  CC42                     706      AND     D2,D6   * mask off the parts of D2 we don't need
00001394                           707      
00001394  0C46 0038                708      CMPI    #%0000000000111000,D6 * is it immediate?
00001398  6600 0006                709      BNE     NOTIMMEDIATE
0000139C                           710      
0000139C                           711      * todo, stuff for printing immediate addresses
0000139C                           712      
0000139C  6000 0006                713      BRA     ENDEAHELPER05
000013A0                           714      
000013A0                           715  NOTIMMEDIATE * if none of the previous cases are true, it is a mode not supported by our decompiler
000013A0                           716  
000013A0  6100 0258                717      BSR     UNKNOWNOP
000013A4                           718      
000013A4                           719  ENDEAHELPER05
000013A4  4C9F 03FF                720      MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
000013A8  4E75                     721      RTS
000013AA                           722          
000013AA                           723  
000013AA                           724  MODE_IAN
000013AA                           725  MODE_IAN_POS
000013AA                           726  MODE_IAN_PRE
000013AA                           727  
000013AA                           728  * --- Effective Address --------------------------------
000013AA                           729  * PURPOSE       To generalize the EA part of the project.
000013AA                           730  * PRE CON       The Mode must have been correctly identified. All Modes must be called by RTS
000013AA                           731  * POST CON      After the EA, the entire op will head back to the BSR that called it.
000013AA                           732  * ------------------------------------------------------    
000013AA                           733  
000013AA                           734  * --- Dn ---------------------------------------------------------    
000013AA                           735  MODE_DN
000013AA  48A7 FFC0                736          MOVEM   D0-D7/A0-A1,-(A7) * save stuff
000013AE                           737  
000013AE  3C3C 0000                738          MOVE.W  #0, D6              * Prep lower value for bitmask
000013B2  3E3C 0002                739          MOVE.W  #2, D7              * Prep upper value for bitmask
000013B6  6100 026C                740          BSR     BITMASK             * Finalize bitmask setup
000013BA  CC42                     741          AND     D2,D6               * Apply bitmask
000013BC                           742          
000013BC  0C46 0000                743          CMPI    #%000000000000000, D6   * Data Register D0?
000013C0  6600 000A                744          BNE     NOTD0
000013C4                           745          
000013C4  6100 0074                746          BSR     PRINTD0
000013C8  6000 006A                747          BRA     ENDMODE_DN
000013CC                           748  NOTD0      
000013CC  0C46 0001                749          CMPI    #%000000000000001, D6   * Data Register D1?
000013D0  6600 000A                750          BNE     NOTD1
000013D4                           751          
000013D4  6100 0072                752          BSR     PRINTD1
000013D8  6000 005A                753          BRA     ENDMODE_DN
000013DC                           754  NOTD1
000013DC  0C46 0002                755          CMPI    #%000000000000010, D6   * Data Register D2?
000013E0  6600 000A                756          BNE     NOTD2
000013E4                           757          
000013E4  6100 0070                758          BSR     PRINTD2
000013E8  6000 004A                759          BRA     ENDMODE_DN
000013EC                           760  NOTD2
000013EC  0C46 0003                761          CMPI    #%000000000000011, D6   * Data Register D3?
000013F0  6600 000A                762          BNE     NOTD3
000013F4                           763          
000013F4  6100 006E                764          BSR     PRINTD3
000013F8  6000 003A                765          BRA     ENDMODE_DN
000013FC                           766  NOTD3
000013FC  0C46 0004                767          CMPI    #%000000000000100, D6   * Data Register D4?
00001400  6600 000A                768          BNE     NOTD4
00001404                           769          
00001404  6100 006C                770          BSR     PRINTD4
00001408  6000 002A                771          BRA     ENDMODE_DN
0000140C                           772  NOTD4
0000140C  0C46 0005                773          CMPI    #%000000000000101, D6   * Data Register D5?
00001410  6600 000A                774          BNE     NOTD5
00001414                           775          
00001414  6100 006A                776          BSR     PRINTD5
00001418  6000 001A                777          BRA     ENDMODE_DN
0000141C                           778  NOTD5
0000141C  0C46 0006                779          CMPI    #%000000000000110, D6   * Data Register D6?
00001420  6600 000A                780          BNE     NOTD6
00001424                           781          
00001424  6100 0068                782          BSR     PRINTD6
00001428  6000 000A                783          BRA     ENDMODE_DN
0000142C                           784  NOTD6
0000142C  6100 006E                785          BSR     PRINTD7
00001430  6000 0002                786          BRA     ENDMODE_DN
00001434                           787          
00001434                           788  ENDMODE_DN
00001434                           789          
00001434  4C9F 03FF                790          MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001438  4E75                     791          RTS
0000143A                           792  
0000143A                           793  *--- PRINTD0 ---------------------------------------
0000143A                           794  *   Simply prints D0
0000143A                           795  *---------------------------------------------------
0000143A                           796  PRINTD0
0000143A  43F9 000016C6            797          LEA     __D0, A1        * Load 'D0'
00001440  103C 000E                798          MOVE.B  #14, D0         * Load Trap #14 to print out
00001444  4E4F                     799          TRAP    #15             * Perform Trap #14
00001446  4E75                     800          RTS
00001448                           801          
00001448                           802  *--- PRINTD1 ---------------------------------------
00001448                           803  *   Simply prints D1
00001448                           804  *---------------------------------------------------
00001448                           805  PRINTD1
00001448  43F9 000016C9            806          LEA     __D1, A1        * Load 'D1'
0000144E  103C 000E                807          MOVE.B  #14, D0         * Load Trap #14 to print out
00001452  4E4F                     808          TRAP    #15             * Perform Trap #14
00001454  4E75                     809          RTS
00001456                           810  
00001456                           811  *--- PRINTD2 ---------------------------------------
00001456                           812  *   Simply prints D2
00001456                           813  *---------------------------------------------------        
00001456                           814  PRINTD2
00001456  43F9 000016CC            815          LEA     __D2, A1        * Load 'D2'
0000145C  103C 000E                816          MOVE.B  #14, D0         * Load Trap #14 to print out
00001460  4E4F                     817          TRAP    #15             * Perform Trap #14
00001462  4E75                     818          RTS
00001464                           819  
00001464                           820  *--- PRINTD3 ---------------------------------------
00001464                           821  *   Simply prints D3
00001464                           822  *---------------------------------------------------       
00001464                           823  PRINTD3
00001464  43F9 000016CF            824          LEA     __D3, A1        * Load 'D3'
0000146A  103C 000E                825          MOVE.B  #14, D0         * Load Trap #14 to print out
0000146E  4E4F                     826          TRAP    #15             * Perform Trap #14
00001470  4E75                     827          RTS
00001472                           828  
00001472                           829  *--- PRINTD4 ---------------------------------------
00001472                           830  *   Simply prints D4
00001472                           831  *---------------------------------------------------        
00001472                           832  PRINTD4
00001472  43F9 000016D2            833          LEA     __D4, A1        * Load 'D4'
00001478  103C 000E                834          MOVE.B  #14, D0         * Load Trap #14 to print out
0000147C  4E4F                     835          TRAP    #15             * Perform Trap #14
0000147E  4E75                     836          RTS
00001480                           837  
00001480                           838  *--- PRINTD5 ---------------------------------------
00001480                           839  *   Simply prints D5
00001480                           840  *---------------------------------------------------        
00001480                           841  PRINTD5
00001480  43F9 000016D5            842          LEA     __D5, A1        * Load 'D5'
00001486  103C 000E                843          MOVE.B  #14, D0         * Load Trap #14 to print out
0000148A  4E4F                     844          TRAP    #15             * Perform Trap #14
0000148C  4E75                     845          RTS
0000148E                           846  
0000148E                           847  *--- PRINTD6 ---------------------------------------
0000148E                           848  *   Simply prints D6
0000148E                           849  *---------------------------------------------------        
0000148E                           850  PRINTD6
0000148E  43F9 000016D8            851          LEA     __D6, A1        * Load 'D6'
00001494  103C 000E                852          MOVE.B  #14, D0         * Load Trap #14 to print out
00001498  4E4F                     853          TRAP    #15             * Perform Trap #14
0000149A  4E75                     854          RTS
0000149C                           855  
0000149C                           856  *--- PRINTD7 ---------------------------------------
0000149C                           857  *   Simply prints D7
0000149C                           858  *--------------------------------------------------- 
0000149C                           859  PRINTD7
0000149C  43F9 000016DB            860          LEA     __D7, A1        * Load 'D7'
000014A2  103C 000E                861          MOVE.B  #14, D0         * Load Trap #14 to print out
000014A6  4E4F                     862          TRAP    #15             * Perform Trap #14
000014A8  4E75                     863          RTS
000014AA                           864  
000014AA                           865  * --- An ---------------------------------------------------------
000014AA                           866  MODE_AN
000014AA  48A7 FFC0                867          MOVEM   D0-D7/A0-A1,-(A7)   * Save information
000014AE                           868  
000014AE  3C3C 0000                869          MOVE.W  #0, D6              * Prep lower value for bitmask
000014B2  3E3C 0002                870          MOVE.W  #2, D7              * Prep upper value for bitmask
000014B6  6100 016C                871          BSR     BITMASK             * Finalize bitmask setup
000014BA  CC42                     872          AND     D2,D6               * Apply bitmask
000014BC                           873          
000014BC  0C46 0000                874          CMPI    #%000000000000000, D6   * Data Register D0?
000014C0  6600 000A                875          BNE     NOTA0                   * Branch to Not A0
000014C4                           876          
Line 877 ERROR: Undefined symbol
000014C4  6100 F064                877          BSR     PRINTA0                 * Print out A0 
Line 878 ERROR: Undefined symbol
000014C8  6000 F060                878          BRA     ENDMODE_AN              * Branch to restore section
000014CC                           879  
000014CC                           880  NOTA0      
000014CC  0C46 0001                881          CMPI    #%000000000000001, D6   * Address Register D1?
000014D0  6600 000A                882          BNE     NOTA1
000014D4                           883          
Line 884 ERROR: Undefined symbol
000014D4  6100 F054                884          BSR     PRINTA1
Line 885 ERROR: Undefined symbol
000014D8  6000 F050                885          BRA     ENDMODE_AN
000014DC                           886  NOTA1
000014DC  0C46 0002                887          CMPI    #%000000000000010, D6   * Address Register D2?
000014E0  6600 000A                888          BNE     NOTA2
000014E4                           889          
Line 890 ERROR: Undefined symbol
000014E4  6100 F044                890          BSR     PRINTA2
Line 891 ERROR: Undefined symbol
000014E8  6000 F040                891          BRA     ENDMODE_AN
000014EC                           892  NOTA2
000014EC  0C46 0003                893          CMPI    #%000000000000011, D6   * Address Register D3?
000014F0  6600 000A                894          BNE     NOTA3
000014F4                           895          
Line 896 ERROR: Undefined symbol
000014F4  6100 F034                896          BSR     PRINTA3
Line 897 ERROR: Undefined symbol
000014F8  6000 F030                897          BRA     ENDMODE_AN
000014FC                           898  NOTA3
000014FC  0C46 0004                899          CMPI    #%000000000000100, D6   * Address Register D4?
00001500  6600 000A                900          BNE     NOTA4
00001504                           901          
Line 902 ERROR: Undefined symbol
00001504  6100 F024                902          BSR     PRINTA4
Line 903 ERROR: Undefined symbol
00001508  6000 F020                903          BRA     ENDMODE_AN
0000150C                           904  NOTA4
0000150C  0C46 0005                905          CMPI    #%000000000000101, D6   * Address Register D5?
00001510  6600 000A                906          BNE     NOTA5
00001514                           907          
Line 908 ERROR: Undefined symbol
00001514  6100 F014                908          BSR     PRINTA5
Line 909 ERROR: Undefined symbol
00001518  6000 F010                909          BRA     ENDMODE_AN
0000151C                           910  NOTA5
0000151C  0C46 0006                911          CMPI    #%000000000000110, D6   * Address Register D6?
00001520  6600 000A                912          BNE     NOTA6
00001524                           913          
Line 914 ERROR: Undefined symbol
00001524  6100 F004                914          BSR     PRINTA6
Line 915 ERROR: Undefined symbol
00001528  6000 F000                915          BRA     ENDMODE_AN
0000152C                           916  NOTA6                                   * Address Register D7
Line 917 ERROR: Undefined symbol
0000152C  6100 EFFC                917          BSR     PRINTA7
Line 918 ERROR: Undefined symbol
00001530  6000 EFF8                918          BRA     ENDMODE_AN
00001534                           919  
00001534                           920  
00001534                           921  
00001534                           922  
00001534                           923  *--- SIZE67 ---------------------------------------
00001534                           924  *   Called if the size is stored in bits 6->7
00001534                           925  *---------------------------------------------------
00001534                           926          
00001534                           927  SIZE67  * If the size is stored in bits 6->7
00001534  48A7 FFFE                928          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
00001538  3C3C 0006                929          MOVE.W  #6, D6              * Prep lower value for bitmask
0000153C  3E3C 0007                930          MOVE.W  #7, D7              * Prep upper value for bitmask
00001540  6100 00E2                931          BSR     BITMASK             * Finalize bitmask setup
00001544  CC42                     932          AND     D2,D6               * Apply bitmask     
00001546                           933  
00001546  0C46 0000                934          CMPI    #%0000000000000000, D6   * is it a BYTE?
0000154A  6600 000A                935          BNE     NOT67BYTE
0000154E                           936          
0000154E  6100 0080                937          BSR     PRINTBYTE               * Branch to handle BYTE sizes
00001552  6000 001E                938          BRA     END67
00001556                           939  NOT67BYTE        
00001556  0C46 0040                940          CMPI    #%0000000001000000, D6   * is it a WORD?
0000155A  6600 000A                941          BNE     NOT67WORD
0000155E                           942          
0000155E  6100 007E                943          BSR     PRINTWORD               * Branch to handle WORD sizes
00001562  6000 000E                944          BRA     END67
00001566                           945  NOT67WORD
00001566  0C46 0080                946          CMPI    #%0000000010000000, D6   * is it a LONG?
0000156A  6600 0006                947          BNE     END67
0000156E                           948          
0000156E  6100 007C                949          BSR     PRINTLONG               * Branch to handle LONG sizes
00001572                           950  END67
00001572  4C9F 7FFF                951          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
00001576  4E75                     952          RTS                             * Return. Size handling is finished.
00001578                           953  
00001578                           954  * finish later, need to follow the same format as SIZE67        
00001578                           955  SIZE68  * If the size is stored in bits 6->8 
00001578  48A7 FFFE                956          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
0000157C  3C3C 0006                957          MOVE.W  #6, D6              * Prep lower value for bitmask
00001580  3E3C 0008                958          MOVE.W  #8, D7              * Prep upper value for bitmask
00001584  6100 009E                959          BSR     BITMASK             * Finalize bitmask setup
00001588  CC42                     960          AND     D2,D6               * Apply bitmask          
0000158A                           961          
0000158A  0C46 0000                962          CMPI    #%0000000000000000, D6   * is it a BYTE?
0000158E  6100 0040                963          BSR     PRINTBYTE               * Branch to handle BYTE sizes
00001592  0C46 0100                964          CMPI    #%0000000100000000, D6   * is it a BYTE?
00001596  6100 0038                965          BSR     PRINTBYTE               * Branch to handle BYTE sizes 
0000159A                           966        
0000159A  0C46 0040                967          CMPI    #%0000000001000000, D6   * is it a WORD?
0000159E  6100 003E                968          BSR     PRINTWORD               * Branch to handle BYTE sizes
000015A2  0C46 0140                969          CMPI    #%0000000101000000, D6   * is it a WORD?
000015A6  6100 0036                970          BSR     PRINTWORD               * Branch to handle BYTE sizes
000015AA  0C46 00C0                971          CMPI    #%0000000011000000, D6   * is it a WORD (ADDA)?
000015AE  6100 002E                972          BSR     PRINTWORD               * Branch to handle BYTE sizes
000015B2                           973  
000015B2  0C46 0080                974          CMPI    #%0000000010000000, D6   * is it a LONG?
000015B6  6100 0034                975          BSR     PRINTLONG               * Branch to handle BYTE sizes
000015BA  0C46 0180                976          CMPI    #%0000000110000000, D6   * is it a LONG?
000015BE  6100 002C                977          BSR     PRINTLONG               * Branch to handle BYTE sizes
000015C2  0C46 01C0                978          CMPI    #%0000000111000000, D6   * is it a LONG (ADDA)?
000015C6  6100 0024                979          BSR     PRINTLONG               * Branch to handle BYTE sizes
000015CA                           980  
000015CA  4C9F 7FFF                981          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
000015CE  4E75                     982          RTS                             * Return. Size handling is finished.              
000015D0                           983          
000015D0                           984  PRINTBYTE
000015D0  43F9 000016A2            985          LEA     __B,A1      * Load '.B ' into A1
000015D6  103C 000E                986          MOVE.B  #14,D0      * Trap #14 setup to print
000015DA  4E4F                     987          TRAP    #15         * Perform Trap #14
000015DC  4E75                     988          RTS                 * Return to SIZE67/SIZE68
000015DE                           989          
000015DE                           990  PRINTWORD
000015DE  43F9 000016A6            991          LEA     __W,A1      * Load '.W ' into A1
000015E4  103C 000E                992          MOVE.B  #14,D0      * Trap #14 setup to print
000015E8  4E4F                     993          TRAP    #15         * Perform Trap #14
000015EA  4E75                     994          RTS                 * Return to SIZE67/SIZE68
000015EC                           995  
000015EC                           996  PRINTLONG
000015EC  43F9 000016AA            997          LEA     __L,A1      * Load '.L ' into A1
000015F2  103C 000E                998          MOVE.B  #14,D0      * Trap #14 setup to print
000015F6  4E4F                     999          TRAP    #15         * Perform Trap #14
000015F8  4E75                    1000          RTS                 * Return to SIZE67/SIZE68
000015FA                          1001  
000015FA                          1002  * --- UNKNOWNOP ----------------------------------------
000015FA                          1003  * PRE  COND     D2 contains the instruction we wish to print.
000015FA                          1004  *               D2 has already been identified as an unknown operation
000015FA                          1005  * 
000015FA                          1006  * POST COND     D2 is no longer the opcode
000015FA                          1007  * ------------------------------------------------------
000015FA                          1008     
000015FA                          1009  UNKNOWNOP
000015FA  220A                    1010          MOVE.L  A2,D1   * prep the add to print
000015FC                          1011          
000015FC  5581                    1012          SUB.L   #2,D1   * off by two error due to post increment correct
000015FE                          1013          
000015FE  2602                    1014          MOVE.L  D2,D3   * save the opcode to print
00001600                          1015          
00001600  7410                    1016          MOVE.L  #16,D2  * set the base to 16
00001602                          1017          
00001602  700F                    1018          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
00001604  4E4F                    1019          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
00001606                          1020          
00001606  43F9 00001694           1021          LEA     DATA,A1 * load " DATA $" into register A1
0000160C  700E                    1022          MOVE.L  #14,D0  * print the string stored in A1
0000160E  4E4F                    1023          TRAP    #15
00001610                          1024          
00001610  2203                    1025          MOVE.L  D3,D1   * move the opcode from D3 into D1 to print
00001612                          1026          
00001612  103C 000F               1027          MOVE.B  #15,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001616  4E4F                    1028          TRAP    #15      * Perform Trap #3
00001618                          1029          
00001618  43F9 00001668           1030          LEA     NEWLINE,A1 * load newline into register A1
0000161E  700E                    1031          MOVE.L  #14,D0  * print the string stored in A1
00001620  4E4F                    1032          TRAP    #15
00001622                          1033          
00001622  4E75                    1034          RTS
00001624                          1035          *BRA     ITERATION * done with this op, move on to the next iteration
00001624                          1036  
00001624                          1037   * --- BITMASK ----------------------------------------------------------------
00001624                          1038   *@pre      D6 contains the starting bit you want masked, D7 the ending bit
00001624                          1039   *
00001624                          1040   *@post     D6 contains the bitmask, ready for use
00001624                          1041   
00001624                          1042  BITMASK
00001624  3F05                    1043          MOVE    D5,-(A7)    * push D5 onto the stack so we can use it to
00001626  4245                    1044          CLR     D5          * clear D5 so we can use it
00001628                          1045  LOOPBIT 
00001628  0DC5                    1046          BSET    D6,D5       * set the D6th bit in D5 to 1
0000162A  5246                    1047          ADD     #1,D6       * increment D6
0000162C                          1048          
0000162C  BC47                    1049          CMP     D7,D6       * have we finished?
0000162E  6E00 0004               1050          BGT     BITMASKDONE * yes
00001632  60F4                    1051          BRA     LOOPBIT     * no, iterate again
00001634                          1052          
00001634                          1053  BITMASKDONE
00001634                          1054  
00001634  2C05                    1055          MOVE.L  D5,D6
00001636  3A1F                    1056          MOVE    (A7)+,D5    * restore D5
00001638  4E75                    1057          RTS
0000163A                          1058          
0000163A                          1059   * --- OP0100 -----------------------------------------------------------------
0000163A                          1060   * @pre      D2 contains the opcode
0000163A                          1061   *
0000163A                          1062   * @post     all registers are returned to their previous state
0000163A                          1063  
0000163A                          1064  
0000163A                          1065  
0000163A                          1066   * ----------------------------------------------------------------------------
0000163A                          1067   * ----------------------------------------------------------------------------
0000163A                          1068   * Constants for printing information to the console
0000163A                          1069  
0000163A  =0000000D               1070  CR      EQU     $0D
0000163A  =0000000A               1071  LF      EQU     $0A
0000163A= 45 4E 54 45 52 20 ...   1072  MSGSTART    DC.B    'ENTER START ADDRESS: ',CR,LF,0
00001652= 45 4E 54 45 52 20 ...   1073  MSGEND      DC.B    'ENTER END ADDRESS: ',CR,LF,0
00001668= 0D 0A 00                1074  NEWLINE     DC.B    CR,LF,0
0000166B= 4E 4F 50 00             1075  NOOPERATION DC.B    'NOP',0
0000166F= 4E 45 47 00             1076  NEGOP       DC.B    'NEG',0
00001673= 4D 4F 56 45 4D 00       1077  MOVEMOP     DC.B    'MOVEM',0
00001679= 4A 53 52 20 00          1078  JSROP       DC.B    'JSR ',0
0000167E= 52 54 53 00             1079  RTSOP       DC.B    'RTS',0
00001682= 4C 45 41 00             1080  LEAOP       DC.B    'LEA',0
00001686= 42 43 4C 52 00          1081  BCLROP      DC.B    'BCLR',0
0000168B= 4F 52 49 00             1082  ORIOP       DC.B    'ORI',0
0000168F= 43 4D 50 49 00          1083  CMPIOP      DC.B    'CMPI',0
00001694= 20 44 41 54 41 20 ...   1084  DATA        DC.B    ' DATA $',0
0000169C                          1085  
0000169C                          1086   * ----------------------------------------------------------------------------
0000169C                          1087   * ----------------------------------------------------------------------------
0000169C                          1088   * Data defined constants
0000169C                          1089   *   - B/W/L (representing Byte, Word, Long)
0000169C                          1090   *   - A0-A7 (representing the 8 address registers)
0000169C                          1091   *   - D0-D7 (representing the 8 data registers)
0000169C                          1092   * ----------------------------------------------------------------------------
0000169C                          1093  
0000169C= 20 00                   1094  SPACE      DC.B    ' ',0
0000169E= 23 00                   1095  IMD        DC.B    '#',0
000016A0= 2C 00                   1096  COMMA      DC.B    ',',0
000016A2= 2E 42 20 00             1097  __B        DC.B    '.B ',0
000016A6= 2E 57 20 00             1098  __W        DC.B    '.W ',0
000016AA= 2E 4C 20 00             1099  __L        DC.B    '.L ',0
000016AE                          1100  
000016AE= 41 30 00                1101  __A0        DC.B   'A0',0
000016B1= 41 31 00                1102  __A1        DC.B   'A1',0    
000016B4= 41 32 00                1103  __A2        DC.B   'A2',0
000016B7= 41 33 00                1104  __A3        DC.B   'A3',0
000016BA= 41 34 00                1105  __A4        DC.B   'A4',0
000016BD= 41 35 00                1106  __A5        DC.B   'A5',0
000016C0= 41 36 00                1107  __A6        DC.B   'A6',0
000016C3= 41 37 00                1108  __A7        DC.B   'A7',0
000016C6                          1109  
000016C6= 44 30 00                1110  __D0        DC.B   'D0',0
000016C9= 44 31 00                1111  __D1        DC.B   'D1',0
000016CC= 44 32 00                1112  __D2        DC.B   'D2',0
000016CF= 44 33 00                1113  __D3        DC.B   'D3',0
000016D2= 44 34 00                1114  __D4        DC.B   'D4',0
000016D5= 44 35 00                1115  __D5        DC.B   'D5',0
000016D8= 44 36 00                1116  __D6        DC.B   'D6',0
000016DB= 44 37 00                1117  __D7        DC.B   'D7',0
000016DE                          1118   * ---------------------------------------------------------------------------
000016DE                          1119   * End of definition segment
000016DE                          1120   * ---------------------------------------------------------------------------
000016DE                          1121   * ---------------------------------------------------------------------------
000016DE                          1122  
000016DE                          1123  * Put variables and constants here
000016DE                          1124  
00004000                          1125      ORG $4000
00004000                          1126  
00004000  4E71                    1127      NOP
00004002  103C 009A               1128      MOVE.B   #%10011010, D0
00004006  123C 00A9               1129      MOVE.B   #%10101001, D1
0000400A  D200                    1130      ADD.B    D0,D1
0000400C  48A7 4000               1131      MOVEM    D1,-(A7)
00004010  43F8 1679               1132      LEA      JSROP,A1
00004014  4443                    1133      NEG.W    D3
00004016  4EB9 0000401C           1134      JSR      END
0000401C                          1135  
0000401C                          1136  END
0000401C  4E75                    1137      RTS
0000401E                          1138  RLLYEND
0000401E                          1139      END    START        ; last line of source

17 errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BCLROP              1686
BITMASK             1624
BITMASKDONE         1634
CMPIBYTE            10E0
CMPIEA              1154
CMPILONG            112E
CMPIOP              168F
CMPIREG             11C0
CMPIREG000          11DE
CMPIREG001          11DE
CMPIWORD            1108
COMMA               16A0
CR                  D
DATA                1694
DONE                1318
EAHELPER05          1320
END                 401C
END67               1572
ENDEAHELPER05       13A4
ENDMODE_DN          1434
IMD                 169E
ISCMPI              10A6
ISORI               10A6
ITERATION           1050
JSROP               1679
LEAOP               1682
LF                  A
LOOP                103A
LOOPBIT             1628
MODE_AN             14AA
MODE_DN             13AA
MODE_IAN            13AA
MODE_IAN_POS        13AA
MODE_IAN_PRE        13AA
MOVEMOP             1673
MSGEND              1652
MSGSTART            163A
NEGOP               166F
NEWLINE             1668
NEXT                104C
NOOPERATION         166B
NOT67BYTE           1556
NOT67WORD           1566
NOTA0               14CC
NOTA1               14DC
NOTA2               14EC
NOTA3               14FC
NOTA4               150C
NOTA5               151C
NOTA6               152C
NOTADRDIRECT        1354
NOTADRINDIRECT      1368
NOTADRINDIRECTPOST  137C
NOTADRINDIRECTPRE   1390
NOTBCLR             1084
NOTD0               13CC
NOTD1               13DC
NOTD2               13EC
NOTD3               13FC
NOTD4               140C
NOTD5               141C
NOTD6               142C
NOTDATAREG          1340
NOTIMMEDIATE        13A0
NOTJSR              12CE
NOTMOVEM            128C
NOTNEG              1268
NOTNOP              1212
NOTRTS              12F0
OP0000              105A
OP0001              11DE
OP0010              11DE
OP0011              11DE
OP0100              11F6
OP0101              1320
OP0110              1320
OP0111              1320
OP1000              1320
OP1001              1320
OP1010              1320
OP1011              1320
OP1100              1320
OP1101              1320
OP1110              1320
OP1111              1320
OP_0000             0
OP_0001             1000
OP_0010             2000
OP_0011             3000
OP_0100             4000
OP_0101             5000
OP_0110             6000
OP_0111             7000
OP_1000             8000
OP_1001             9000
OP_1010             A000
OP_1011             B000
OP_1100             C000
OP_1101             D000
OP_1110             E000
OP_1111             F000
ORIOP               168B
PRINTBYTE           15D0
PRINTD0             143A
PRINTD1             1448
PRINTD2             1456
PRINTD3             1464
PRINTD4             1472
PRINTD5             1480
PRINTD6             148E
PRINTD7             149C
PRINTLONG           15EC
PRINTWORD           15DE
RLLYEND             401E
RTSOP               167E
SIZE67              1534
SIZE68              1578
SPACE               169C
START               1000
UNKNOWN             1314
UNKNOWNOP           15FA
__A0                16AE
__A1                16B1
__A2                16B4
__A3                16B7
__A4                16BA
__A5                16BD
__A6                16C0
__A7                16C3
__B                 16A2
__D0                16C6
__D1                16C9
__D2                16CC
__D3                16CF
__D4                16D2
__D5                16D5
__D6                16D8
__D7                16DB
__L                 16AA
__W                 16A6
