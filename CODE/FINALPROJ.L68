00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/11/2014 10:20:34 AM

00000000                             1  *    666
00000000                             2  *   66 66
00000000                             3  *  66   66
00000000                             4  *  66   66         8888
00000000                             5  *  66   66       88   kkkk
00000000                             6  *  66  66       8   88   kk      
00000000                             7  *   66  6      8  88  kkk  kk    
00000000                             8  *    66  6    8  88     kk  k
00000000                             9  *     66 66  88 88        kk
00000000                            10  *     6 _______ 8
00000000                            11  *    6    68k    8
00000000                            12  *   6_____PRO_____8
00000000                            13  *  6               8        68k is as easy as
00000000                            14  *  6    0     0    8        6 - 8 - k !
00000000                            15  *  6   /   V   \   8 
00000000                            16  *  6   \__/ \__/   8        Welcome to our Dissasembler, Professor Nash!
00000000                            17  *    6            8         Enjoy your stay!
00000000                            18  *      6        8      
00000000                            19  *        666888
00000000                            20  *  _____                   __    ___  _    
00000000                            21  * | ____|__ _ ___ _   _   / /_  ( _ )| | __
00000000                            22  * |  _| / _` / __| | | | | '_ \ / _ \| |/ /
00000000                            23  * | |__| (_| \__ \ |_| | | (_) | (_) |   < 
00000000                            24  * |_____\__,_|___/\__, |  \___/ \___/|_|\_\
00000000                            25  *                 |___/           
00000000                            26  *-----------------------------------------------------------
00000000                            27  * Title      : 68K Decompiler
00000000                            28  * Written by : Nick Bell, Sammy Nimnuch, Caleb Larson
00000000                            29  * Date       : 11/2014
00000000                            30  * Description: This program decompiles other 68K programs
00000000                            31  *              which are loaded into the simulator simultaneously.
00000000                            32  *-----------------------------------------------------------
00000000                            33  
00000000                            34  
00000000  =00000000                 35  OP_0000     EQU     %0000000000000000
00000000  =00001000                 36  OP_0001     EQU     %0001000000000000
00000000  =00002000                 37  OP_0010     EQU     %0010000000000000
00000000  =00003000                 38  OP_0011     EQU     %0011000000000000
00000000  =00004000                 39  OP_0100     EQU     %0100000000000000
00000000  =00005000                 40  OP_0101     EQU     %0101000000000000
00000000  =00006000                 41  OP_0110     EQU     %0110000000000000
00000000  =00007000                 42  OP_0111     EQU     %0111000000000000
00000000  =00008000                 43  OP_1000     EQU     %1000000000000000
00000000  =00009000                 44  OP_1001     EQU     %1001000000000000
00000000  =0000A000                 45  OP_1010     EQU     %1010000000000000
00000000  =0000B000                 46  OP_1011     EQU     %1011000000000000
00000000  =0000C000                 47  OP_1100     EQU     %1100000000000000
00000000  =0000D000                 48  OP_1101     EQU     %1101000000000000
00000000  =0000E000                 49  OP_1110     EQU     %1110000000000000
00000000  =0000F000                 50  OP_1111     EQU     %1111000000000000
00000000  =0000000F                 51  HEX_VALUE_MASK_LONG EQU     $0000000F  * mask a hex value in 32-bits
00000000                            52  
00000000                            53  * BITMASK     EQU     $F000       * used to bitmask the first nibble
00000000                            54  
00001000                            55  START:  ORG    $1000            * first instruction of program
00001000                            56  
00001000                            57  * -----------------------------------
00001000                            58  * Starting and Ending Addresses
00001000                            59  * -----------------------------------
00001000                            60  *-----------------------------------------------------------------------------
00001000                            61  *-----------------------------------------------------------------------------
00001000                            62  * NAME: x
00001000                            63  * DESCRIPTION:    a
00001000                            64  * PRE-CONDITION:  b
00001000                            65  * POST-CONDITION: c
00001000                            66  * REGISTERS:      d
00001000                            67  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001000                            68  
00001000                            69  * THINK ABOUT ASKING FOR VALID START/END NO NEGATIVE ADDR
00001000                            70  
00001000                            71  * LOAD MSGSTART, ASK FOR INPUT
00001000  43F9 00002258             72          LEA     MSGSTART,A1     * Load MESSAGE START
00001006  103C 000E                 73          MOVE.B  #14,D0          * Trap #14 to display message
0000100A  4E4F                      74          TRAP    #15             * Perform #14
0000100C                            75          
0000100C                            76  * GETS THE STARTING ADDRESS
0000100C  103C 0004                 77          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001010  4E4F                      78          TRAP    #15             * Perform #15
00001012                            79          
00001012                            80  * MOVE IT TO ANOTHER ADDRESS REGISTER
00001012  2441                      81          MOVEA.L D1,A2           * Move the user input into A2. This is the starting address.
00001014                            82  
00001014                            83  * LOAD MSGSTART, ASK FOR INPUT
00001014  43F9 00002270             84          LEA     MSGEND,A1       * Load MESSAGE END
0000101A  303C 000E                 85          MOVE.W  #14,D0          * Trap #14 to display message
0000101E  4E4F                      86          TRAP    #15             * Perform #14
00001020                            87          
00001020                            88  * GETS THE ENDING ADDRESS
00001020  103C 0004                 89          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001024  4E4F                      90          TRAP    #15             * Perform Trap #4
00001026  2A01                      91          MOVE.L  D1,D5           * Move the ending address into D5
00001028  43F9 00002286             92          LEA     NEWLINE,A1      * Store newline variable for seper opcodes
0000102E                            93          
0000102E  3E3C 000F                 94          MOVE.W  #15,D7          * prep D7 for bitmask subroutine
00001032  3C3C 000C                 95          MOVE.W  #12,D6          * prep D6 for bitmask subroutine
00001036  6100 120A                 96          BSR     BITMASK         * obtain a bitmask that goes from 12-15 (inclusive)
0000103A                            97          * MOVE.W  D6,D2           * move the bitmask to D2
0000103A                            98          
0000103A                            99  LOOP    
0000103A                           100  
0000103A  2C4A                     101          MOVE.L  A2,A6
0000103C  7608                     102          MOVE.L  #8,D3
0000103E  6100 0FC2                103          BSR     PRINT_ASCII_HEX_CHAR
00001042                           104          
00001042                           105          *MOVE.W  A2,D1           * print what address we are processing
00001042                           106          *MOVE.B  #3,D0
00001042                           107          *TRAP    #15
00001042                           108          
00001042  43F9 00002327            109          LEA     SPACE,A1        * print a space to seperate the address from the data
00001048  303C 000E                110          MOVE.W  #14,D0
0000104C  4E4F                     111          TRAP    #15
0000104E                           112  
0000104E  3F06                     113          MOVE    D6,-(A7)        * save the bitmask on the stack
00001050  341A                     114          MOVE.W  (A2)+,D2        * Read an operation into D2
00001052  CC42                     115          AND.W   D2,D6           * Apply this bitmask
00001054                           116          
00001054  BC7C 0000                117          CMP     #OP_0000,D6     * Does the operation start with 0000?
00001058  6600 000A                118          BNE     NOT0000         * No, check next case
0000105C  6100 0106                119          BSR     OP0000          * Branch to subroutine 0000
00001060  6000 00F6                120          BRA     ITERATION       * Move to next iteration of the loop
00001064                           121  NOT0000        
00001064  BC7C 1000                122          CMP     #OP_0001,D6     * Does the operation start with 0001?
00001068  6600 000A                123          BNE     NOT0001         * No, check next case
0000106C  6100 01EC                124          BSR     OP0001          * Branch to subroutine 0001
00001070  6000 00E6                125          BRA     ITERATION       * Move to next iteration of the loop
00001074                           126  NOT0001
00001074  BC7C 2000                127          CMP     #OP_0010,D6     * Does the operation start with 0010?
00001078  6600 000A                128          BNE     NOT0010         * No, check next case
0000107C  6100 0242                129          BSR     OP0010          * Branch to subroutine 0010
00001080  6000 00D6                130          BRA     ITERATION       * Move to next iteration of the loop
00001084                           131  NOT0010
00001084  BC7C 3000                132          CMP     #OP_0011,D6     * Does the operation start with 0011?
00001088  6600 000A                133          BNE     NOT0011         * No, check next case
0000108C  6100 0238                134          BSR     OP0011          * Branch to subroutine 0011
00001090  6000 00C6                135          BRA     ITERATION       * Move to next iteration of the loop
00001094                           136  NOT0011
00001094  BC7C 4000                137          CMP     #OP_0100,D6     * Does the operation start with 0100?
00001098  6600 000A                138          BNE     NOT0100         * No, check next case
0000109C  6100 0236                139          BSR     OP0100          * Branch to subroutine 0100
000010A0  6000 00B6                140          BRA     ITERATION       * Move to next iteration of the loop
000010A4                           141  NOT0100
000010A4  BC7C 5000                142          CMP     #OP_0101,D6     * Does the operation start with 0101?
000010A8  6600 000A                143          BNE     NOT0101         * No, check next case
000010AC  6100 0550                144          BSR     OP0101          * Branch to subroutine 0101
000010B0  6000 00A6                145          BRA     ITERATION       * Move to next iteration of the loop
000010B4                           146  NOT0101
000010B4  BC7C 6000                147          CMP     #OP_0110,D6     * Does the operation start with 0110?
000010B8  6600 000A                148          BNE     NOT0110         * No, check next case
000010BC  6100 05AE                149          BSR     OP0110          * Branch to subroutine 0110
000010C0  6000 0096                150          BRA     ITERATION       * Move to next iteration of the loop
000010C4                           151  NOT0110
000010C4  BC7C 7000                152          CMP     #OP_0111,D6     * Does the operation start with 0111?
000010C8  6600 000A                153          BNE     NOT0111         * No, check next case
000010CC  6100 0652                154          BSR     OP0111          * Branch to subroutine 0111
000010D0  6000 0086                155          BRA     ITERATION       * Move to next iteration of the loop
000010D4                           156  NOT0111
000010D4  BC7C 8000                157          CMP     #OP_1000,D6     * Does the operation start with 1000?
000010D8  6600 000A                158          BNE     NOT1000         * No, check next case
000010DC  6100 0648                159          BSR     OP1000          * Branch to subroutine 1000
000010E0  6000 0076                160          BRA     ITERATION       * Move to next iteration of the loop
000010E4                           161  NOT1000
000010E4  BC7C 9000                162          CMP     #OP_1001,D6     * Does the operation start with 1001?
000010E8  6600 000A                163          BNE     NOT1001         * No, check next case
000010EC  6100 06CC                164          BSR     OP1001          * Branch to subroutine 1001
000010F0  6000 0066                165          BRA     ITERATION       * Move to next iteration of the loop
000010F4                           166  NOT1001
000010F4  BC7C A000                167          CMP     #OP_1010,D6     * Does the operation start with 1010?
000010F8  6600 000A                168          BNE     NOT1010         * No, check next case
000010FC  6100 06BC                169          BSR     OP1010          * Branch to subroutine 1010
00001100  6000 0056                170          BRA     ITERATION       * Move to next iteration of the loop
00001104                           171  NOT1010
00001104  BC7C B000                172          CMP     #OP_1011,D6     * Does the operation start with 1011?
00001108  6600 000A                173          BNE     NOT1011         * No, check next case
0000110C  6100 06B2                174          BSR     OP1011          * Branch to subroutine 1011
00001110  6000 0046                175          BRA     ITERATION       * Move to next iteration of the loop
00001114                           176  NOT1011
00001114  BC7C C000                177          CMP     #OP_1100,D6     * Does the operation start with 1100?
00001118  6600 000A                178          BNE     NOT1100         * No, check next case
0000111C  6100 06A8                179          BSR     OP1100          * Branch to subroutine 1100
00001120  6000 0036                180          BRA     ITERATION       * Move to next iteration of the loop
00001124                           181  NOT1100
00001124  BC7C D000                182          CMP     #OP_1101,D6     * Does the operation start with 1101?
00001128  6600 000A                183          BNE     NOT1101         * No, check next case
0000112C  6100 0722                184          BSR     OP1101          * Branch to subroutine 1101
00001130  6000 0026                185          BRA     ITERATION       * Move to next iteration of the loop
00001134                           186  NOT1101
00001134  BC7C E000                187          CMP     #OP_1110,D6     * Does the operation start with 1110?
00001138  6600 000A                188          BNE     NOT1110         * No, check next case
0000113C  6100 0718                189          BSR     OP1110          * Branch to subroutine 1110
00001140  6000 0016                190          BRA     ITERATION       * Move to next iteration of the loop
00001144                           191  NOT1110
00001144  BC7C F000                192          CMP     #OP_1111,D6     * Does the operation start with 1111?
00001148  6600 000A                193          BNE     LOOPUNKNOWNOP   * No, check next case
0000114C  6100 089E                194          BSR     OP1111          * Branch to subroutine 1111
00001150  6000 0006                195          BRA     ITERATION       * Move to next iteration of the loop
00001154                           196          
00001154                           197  LOOPUNKNOWNOP
00001154  6100 0E82                198          BSR     UNKNOWNOP
00001158                           199          
00001158                           200  ITERATION
00001158  3C1F                     201          MOVE    (A7)+,D6        * restore the bitmask to its previous state
0000115A                           202  
0000115A                           203          *MOVE.B  #14,D0          * Print a newline
0000115A                           204          *TRAP    #15             * Perform Trap #14
0000115A                           205  
0000115A  BA4A                     206          CMP     A2,D5           * Compare the starting address to ending address
0000115C  6700 2EE8                207          BEQ     END             * If they are equal, branch 
00001160  6000 FED8                208          BRA     LOOP            * Otherwise, branch back to LOOP
00001164                           209  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001164                           210  *-----------------------------------------------------------------------------
00001164                           211  
00001164                           212  
00001164                           213  
00001164                           214  *-----------------------------------------------------------------------------
00001164                           215  *-----------------------------------------------------------------------------
00001164                           216  * NAME: OP_0000   (BCLR, ORI, CMPI)
00001164                           217  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001164                           218  * PRE-CONDITION:  xyz
00001164                           219  * POST-CONDITION: All registers return to their previous state, and the output
00001164                           220  *                 goes to the output console for reading the raw data or the
00001164                           221  *                 actual instruction.
00001164                           222  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001164                           223  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001164                           224  OP0000
00001164  48A7 FFC0                225          MOVEM   D0-D7/A0-A1,-(A7)   * Push values to the stack to save
00001168  3C3C 0006                226          MOVE.W  #6, D6              * Prep lower value for bitmask
0000116C  3E3C 0008                227          MOVE.W  #8, D7              * Prep upper value for bitmask
00001170  6100 10D0                228          BSR     BITMASK             * Finalize bitmask setup
00001174  CC42                     229          AND     D2,D6               * Apply bitmask
00001176                           230          
00001176                           231          * TODO: Consider static  AND dynamic BCLR.
00001176                           232          * Only works for Dynamic right now
00001176  0C46 0180                233          CMPI    #%0000000110000000, D6  * Are we BCLR?
0000117A  6600 0066                234          BNE     NOTBCLR                 * If not, branch to other OP0000 functions
0000117E                           235          
0000117E  3C3C 0003                236          MOVE.W  #3, D6              * Prep lower value for bitmask
00001182  3E3C 0005                237          MOVE.W  #5, D7              * Prep upper value for bitmask
00001186  6100 10BA                238          BSR     BITMASK             * Finalize bitmask setup
0000118A  CC42                     239          AND     D2,D6               * Apply bitmask
0000118C                           240          
0000118C                           241          * Checking for unsupported mode
0000118C  0C46 0008                242          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
00001190  6700 00BE                243          BEQ     UNKNOWN0000             * If so, branch to other OP0000 functions
00001194                           244          
00001194                           245          * Confirmed BCLR at this point
00001194  43F9 000022B2            246          LEA     BCLROP,A1           * We found BCLR
0000119A  103C 000E                247          MOVE.B  #14,D0              * Trap #14 prints out the data
0000119E  4E4F                     248          TRAP    #15                 * Perform Trap #14
000011A0                           249  
000011A0  43F9 00002327            250          LEA     SPACE,A1            * Formatting
000011A6  103C 000E                251          MOVE.B  #14,D0              * Trap #14 prints out space
000011AA  4E4F                     252          TRAP    #15                 * Perform Trap #14
000011AC                           253          
000011AC                           254          * Set up for printing out the Register
000011AC  0882 0006                255          BCLR    #6,D2               * Clear bit 6
000011B0  0882 0007                256          BCLR    #7,D2               * Clear bit 7
000011B4  0882 0008                257          BCLR    #8,D2               * Clear bit 8
000011B8                           258          
000011B8  6100 0838                259          BSR     EAHELPER611         * Print out Register
000011BC                           260  
000011BC  43F9 0000232D            261          LEA     COMMA,A1            * formatting
000011C2  103C 000E                262          MOVE.B  #14,D0              * Trap #14 prints out a comma
000011C6  4E4F                     263          TRAP    #15                 * Perform Trap #14
000011C8                           264          
000011C8  4243                     265          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
000011CA  08C3 0000                266          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
000011CE                           267      
000011CE  6100 0864                268          BSR     EAHELPER05          * Print out data.
000011D2                           269          
000011D2  43F9 00002286            270          LEA     NEWLINE,A1          * Formatting
000011D8  103C 000E                271          MOVE.B  #14,D0              * Trap #14 prints out the data
000011DC  4E4F                     272          TRAP    #15                 * Perform Trap #14
000011DE                           273          
000011DE  6000 0074                274          BRA     END0000             * Found the op, move to next iteration
000011E2                           275          
000011E2                           276  NOTBCLR * Possible options left are ORI or CMPI
000011E2  3C3C 0009                277          MOVE.W  #9, D6              * Prep lower value for bitmask
000011E6  3E3C 000B                278          MOVE.W  #11, D7             * Prep upper value for bitmask
000011EA  6100 1056                279          BSR     BITMASK             * Finalize bitmask setup
000011EE  CC42                     280          AND     D2,D6               * Apply bitmask
000011F0                           281          
000011F0  0C46 0000                282          CMPI    #%0000000000000000, D6   * Are we possibly ORI?
000011F4  6600 0052                283          BNE     NOTORI                   * If not, branch to NOTORI
000011F8                           284          
000011F8                           285          * Size check to see if unsupported ORI mode
000011F8  3C3C 0006                286          MOVE.W  #6, D6              * Prep lower value for bitmask
000011FC  3E3C 0007                287          MOVE.W  #7, D7              * Prep upper value for bitmask
00001200  6100 1040                288          BSR     BITMASK             * Finalize bitmask setup
00001204  CC42                     289          AND     D2,D6               * Apply bitmask
00001206                           290          
00001206  0C46 00C0                291          CMPI    #%0000000011000000, D6  * Are bits 6,7 == 1,1?
0000120A  6700 0044                292          BEQ     UNKNOWN0000             * If so, unknown op. 
0000120E                           293          
0000120E                           294          * Mode check to see if unsupported ORI mode
0000120E  3C3C 0003                295          MOVE.W  #3, D6              * Prep lower value for bitmask
00001212  3E3C 0005                296          MOVE.W  #5, D7              * Prep upper value for bitmask
00001216  6100 102A                297          BSR     BITMASK             * Finalize bitmask setup
0000121A  CC42                     298          AND     D2,D6               * Apply bitmask
0000121C                           299          
0000121C  0C46 0008                300          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
00001220  6700 002E                301          BEQ     UNKNOWN0000             * If so, unknown op. 
00001224                           302          
00001224                           303          * Confirmed ORI at this point
00001224                           304          * TODO: Get the immediate data following the instruction and print it out
00001224  43F9 000022C0            305          LEA     ORIOP, A1           * Load 'ORI' into the output window
0000122A  103C 000E                306          MOVE.B  #14,D0              * Trap #14 prints out the data in D0
0000122E  4E4F                     307          TRAP    #15                 * Perform Trap #14
00001230                           308          
00001230  6100 0B58                309          BSR     SIZE67              * Print the size
00001234  6100 07FE                310          BSR     EAHELPER05          * Print out the EA
00001238                           311          
00001238  43F9 00002286            312          LEA     NEWLINE,A1          * Formatting
0000123E  103C 000E                313          MOVE.B  #14,D0              * Trap #14 prints out the data
00001242  4E4F                     314          TRAP    #15                 * Perform Trap #14
00001244                           315          
00001244  6000 000E                316          BRA     END0000             * Done with op. Move to next iteration
00001248                           317          
00001248                           318  NOTORI  * Possible option left is CMPI
00001248  0C46 0C00                319          CMPI    #%0000110000000000, D6  * Are we CMPI?
0000124C  6600 0002                320          BNE     UNKNOWN0000             * If not, unknown op
00001250                           321          
00001250                           322          * TODO: Continue checking for CMPI validity
00001250                           323          
00001250                           324  UNKNOWN0000
00001250  6100 0D86                325          BSR     UNKNOWNOP       * Unknown op
00001254                           326          
00001254                           327  END0000          
00001254  4C9F 03FF                328         MOVEM   (A7)+,D0-D7/A0-A1   * Push values to the stack to save
00001258  4E75                     329         RTS
0000125A                           330  
0000125A                           331  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000125A                           332  *-----------------------------------------------------------------------------
0000125A                           333  
0000125A                           334  
0000125A                           335  
0000125A                           336  *-----------------------------------------------------------------------------
0000125A                           337  *-----------------------------------------------------------------------------
0000125A                           338  * NAME: OP_0001   (MOVE.B)
0000125A                           339  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000125A                           340  * PRE-CONDITION:  xyz
0000125A                           341  * POST-CONDITION: All registers return to their previous state, and the output
0000125A                           342  *                 goes to the output console for reading the raw data or the
0000125A                           343  *                 actual instruction.
0000125A                           344  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000125A                           345  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000125A                           346  OP0001  
0000125A  48A7 FFC0                347          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
0000125E  3C3C 0006                348          MOVE.W  #6, D6              * Prep lower value for bitmask
00001262  3E3C 0008                349          MOVE.W  #8, D7              * Prep upper value for bitmask
00001266  6100 0FDA                350          BSR     BITMASK             * Finalize bitmask setup
0000126A  CC42                     351          AND     D2,D6               * Apply bitmask
0000126C                           352          
0000126C                           353          * I may have fucked off this part, sorry - Caleb
0000126C                           354          * CMPI    #%0000000001000000, D6  * Is the destination mode 001?
0000126C                           355          * BNE     UNKNOWNOP0001                 * If so, it's unknown.
0000126C                           356          
0000126C  43F9 00002296            357          LEA     MOVEOP,A1   * Put 'MOVE' into the window
00001272  103C 000E                358          MOVE.B  #14,D0      * Trap #14 to print out
00001276  4E4F                     359          TRAP    #15         * Perform Trap #14
00001278                           360          
00001278                           361          *-----------------------------------------------------------
00001278                           362          * the following code is to move the size bits into the
00001278                           363          * 0-1 positions of D3 so that eahelper05 case use that as a "parameter"
00001278                           364          * for eahelper05
00001278                           365          
00001278  3C3C 000C                366          MOVE.W  #12, D6              * Prep lower value for bitmask
0000127C  3E3C 000D                367          MOVE.W  #13, D7              * Prep upper value for bitmask
00001280  6100 0FC0                368          BSR     BITMASK             * Finalize bitmask setup
00001284                           369          
00001284  CC42                     370          AND     D2,D6
00001286                           371          
00001286  E04E                     372          LSR     #8,D6
00001288  E84E                     373          LSR     #4,D6
0000128A                           374          
0000128A  4243                     375          CLR     D3
0000128C                           376          
0000128C  1606                     377          MOVE.B  D6,D3
0000128E                           378          
0000128E                           379          *---------------------------------------------------------------
0000128E                           380          
0000128E                           381          
0000128E  6100 0AFA                382          BSR     SIZE67
00001292  6100 07A0                383          BSR     EAHELPER05
00001296                           384          
00001296  43F9 0000232D            385          LEA     COMMA,A1
0000129C  103C 000E                386          MOVE.B  #14,D0
000012A0  4E4F                     387          TRAP    #15
000012A2                           388          
000012A2  6100 074E                389          BSR     EAHELPER611
000012A6                           390          
000012A6  43F9 00002286            391          LEA     NEWLINE,A1
000012AC  103C 000E                392          MOVE.B  #14,D0
000012B0  4E4F                     393          TRAP    #15
000012B2                           394          
000012B2  6000 0006                395          BRA     ENDOP0001
000012B6                           396          *LEA     __B,A1      * Put '.B' into the window
000012B6                           397          *MOVE.B  #14,D0      * Trap #14 to print out
000012B6                           398          *TRAP    #15         * Perform Trap #14
000012B6                           399          
000012B6                           400  UNKNOWNOP0001
000012B6                           401  
000012B6  6100 0D20                402          BSR     UNKNOWNOP
000012BA                           403          
000012BA                           404  ENDOP0001
000012BA                           405  
000012BA  4C9F 03FF                406          MOVEM (A7)+,D0-D7/A0-A1
000012BE  4E75                     407          RTS        
000012C0                           408          
000012C0                           409          * TODO: DETERMINE THE MODE AND REG FOR DESTINATION AND SOURCE
000012C0                           410  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000012C0                           411  *-----------------------------------------------------------------------------
000012C0                           412  
000012C0                           413  
000012C0                           414  
000012C0                           415  *-----------------------------------------------------------------------------
000012C0                           416  *-----------------------------------------------------------------------------
000012C0                           417  * NAME: OP_0010   (MOVE.L, MOVEA.L)
000012C0                           418  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000012C0                           419  * PRE-CONDITION:  xyz
000012C0                           420  * POST-CONDITION: All registers return to their previous state, and the output
000012C0                           421  *                 goes to the output console for reading the raw data or the
000012C0                           422  *                 actual instruction.
000012C0                           423  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000012C0                           424  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000012C0                           425  OP0010
000012C0                           426  
000012C0  6100 0D16                427      BSR     UNKNOWNOP
000012C4  4E75                     428      RTS
000012C6                           429  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000012C6                           430  *-----------------------------------------------------------------------------
000012C6                           431  
000012C6                           432  
000012C6                           433  
000012C6                           434  *-----------------------------------------------------------------------------
000012C6                           435  *-----------------------------------------------------------------------------
000012C6                           436  * NAME: OP_0011   (MOVE.W, MOVEA.W)
000012C6                           437  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000012C6                           438  * PRE-CONDITION:  xyz
000012C6                           439  * POST-CONDITION: All registers return to their previous state, and the output
000012C6                           440  *                 goes to the output console for reading the raw data or the
000012C6                           441  *                 actual instruction.
000012C6                           442  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000012C6                           443  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000012C6                           444  OP0011
000012C6  48A7 FFFE                445      MOVEM   D0-D7/A0-A6, -(A7)
000012CA                           446      
000012CA                           447      *MOVE.W  #6,D6
000012CA                           448      *MOVE.W  #8,D7
000012CA                           449      
000012CA                           450      *BSR     BITMASK
000012CA                           451      
000012CA                           452      *AND.W   D2,D6
000012CA                           453      
000012CA                           454      *CMP     #%0000000001000000,D6
000012CA                           455      *BNE     NEXT15
000012CA                           456      *BSR     * for MOVEA.W
000012CA                           457      
000012CA  4C9F 7FFF                458      MOVEM   (A7)+,D0-D7/A0-A6
000012CE                           459      
000012CE  6100 0D08                460      BSR     UNKNOWNOP
000012D2  4E75                     461      RTS
000012D4                           462  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000012D4                           463  *-----------------------------------------------------------------------------
000012D4                           464  
000012D4                           465  
000012D4                           466  
000012D4                           467  *-----------------------------------------------------------------------------
000012D4                           468  *-----------------------------------------------------------------------------
000012D4                           469  * NAME: OP_0100   (NOP, MOVEM, LEA, NEG, JSR, RTS)
000012D4                           470  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000012D4                           471  * PRE-CONDITION:  xyz
000012D4                           472  * POST-CONDITION: All registers return to their previous state, and the output
000012D4                           473  *                 goes to the output console for reading the raw data or the
000012D4                           474  *                 actual instruction.
000012D4                           475  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000012D4                           476  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000012D4                           477  OP0100  
000012D4                           478          * TODO: movem
000012D4                           479  
000012D4  48A7 C0C0                480          MOVEM   D0-D1/A0-A1,-(A7) * Push values to the stack to save
000012D8                           481          
000012D8                           482          *NOP
000012D8  0C42 4E71                483          CMPI    #%0100111001110001,D2
000012DC  6600 0012                484          BNE     NOTNOP
000012E0                           485          
000012E0  43F9 0000228E            486          LEA     NOOPERATION,A1
000012E6  103C 000D                487          MOVE.B  #13,D0          * Print a newline
000012EA  4E4F                     488          TRAP    #15
000012EC                           489          
000012EC  6000 0306                490          BRA     DONE0100 *we found it, move on to the next iteration
000012F0                           491  NOTNOP *NEG
000012F0                           492          
000012F0                           493          * prep values for BITMASK subroutine
000012F0  7C08                     494          MOVE.L  #8,D6
000012F2  7E0B                     495          MOVE.L  #11,D7
000012F4                           496          
000012F4  6100 0F4C                497          BSR     BITMASK
000012F8                           498          
000012F8  CC42                     499          AND     D2,D6                   * apply bitmask
000012FA                           500          
000012FA  0C46 0400                501          CMPI    #%0000010000000000,D6   * are we NEG?
000012FE  6600 0046                502          BNE     NOTNEG                  * not neg
00001302                           503          
00001302  7C03                     504          MOVE.L  #3,D6
00001304  7E05                     505          MOVE.L  #5,D7
00001306                           506          
00001306  6100 0F3A                507          BSR     BITMASK * generate a bitmask to be used to check mode
0000130A                           508          
0000130A  0C46 0008                509          CMPI    #%0000000000001000,D6 * check to see if it is the unsupported mode
0000130E  6700 02E0                510          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
00001312                           511          
00001312  0C46 0028                512          CMPI    #%0000000000101000,D6 * check to see if it is the unsupported mode
00001316  6700 02D8                513          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
0000131A                           514          
0000131A  0C46 0030                515          CMPI    #%0000000000110000,D6 * check to see if it is the unsupported mode
0000131E  6700 02D0                516          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
00001322                           517        
00001322                           518          * it is NEG, print
00001322  43F9 00002292            519          LEA     NEGOP,A1
00001328  103C 000E                520          MOVE.B  #14,D0
0000132C  4E4F                     521          TRAP    #15
0000132E                           522          
0000132E  6100 0A5A                523          BSR     SIZE67
00001332                           524          
00001332  6100 0700                525          BSR     EAHELPER05
00001336                           526          
00001336  43F9 00002286            527          LEA     NEWLINE,A1
0000133C  103C 000E                528          MOVE.B  #14,D0
00001340  4E4F                     529          TRAP    #15
00001342                           530          
00001342  6000 02B0                531          BRA     DONE0100 * we found the op, move to next iteration
00001346                           532          
00001346                           533  NOTNEG *MOVEM
00001346                           534  
00001346                           535          * prep values for BITMASK subroutine
00001346  7C07                     536          MOVE.L  #7,D6
00001348  7E09                     537          MOVE.L  #9,D7
0000134A                           538          
0000134A  6100 0EF6                539          BSR     BITMASK
0000134E                           540          
0000134E  CC82                     541          AND.L   D2,D6   * apply bitmask
00001350                           542          
00001350  0C46 0080                543          CMPI    #%0000000010000000,D6 * is it MOVEM?
00001354  6600 0148                544          BNE     NOTMOVEM          * it is not MOVEM
00001358                           545          
00001358  7C08                     546          MOVE.L  #8,D6
0000135A  7E08                     547          MOVE.L  #8,D7
0000135C                           548          
0000135C  6100 0EE4                549          BSR     BITMASK
00001360                           550          
00001360  CC82                     551          AND.L   D2,D6
00001362                           552          
00001362  0C46 0100                553          CMPI    #%0000000100000000,D6 * is it register to memory?
00001366  6700 009C                554          BEQ     MOVEMTOMEM 
0000136A                           555          
0000136A                           556  MOVEMTOREG *supported modes: 010 011
0000136A                           557  
0000136A  7C03                     558          MOVE.L  #3,D6
0000136C  7E05                     559          MOVE.L  #5,D7
0000136E                           560          
0000136E  6100 0ED2                561          BSR     BITMASK
00001372                           562          
00001372  CC82                     563          AND.L   D2,D6
00001374                           564          
00001374  0C46 0000                565          CMPI    #%0000000000000000,D6 * is it an unsupported mode?
00001378  6700 0276                566          BEQ     UNKNOWN0100
0000137C                           567          
0000137C  0C46 0008                568          CMPI    #%0000000000001000,D6 * is it an unsupported mode?
00001380  6700 026E                569          BEQ     UNKNOWN0100
00001384                           570          
00001384  0C46 0020                571          CMPI    #%0000000000100000,D6 * is it an unsupported mode?
00001388  6700 0266                572          BEQ     UNKNOWN0100
0000138C                           573          
0000138C  0C46 0028                574          CMPI    #%0000000000101000,D6 * is it an unsupported mode?
00001390  6700 025E                575          BEQ     UNKNOWN0100
00001394                           576          
00001394  0C46 0030                577          CMPI    #%0000000000110000,D6 * is it an unsupported mode?
00001398  6700 0256                578          BEQ     UNKNOWN0100
0000139C                           579          
0000139C  0C46 0038                580          CMPI    #%0000000000111000,D6 * is it an unsupported mode?
000013A0  6700 024E                581          BEQ     UNKNOWN0100
000013A4                           582          
000013A4  43F9 0000229B            583          LEA     MOVEMOP,A1
000013AA  103C 000E                584          MOVE.B  #14,D0          * print MOVEM
000013AE  4E4F                     585          TRAP    #15
000013B0                           586          
000013B0  7C06                     587          MOVE.L  #6,D6
000013B2  7E06                     588          MOVE.L  #6,D7
000013B4                           589          
000013B4  6100 0E8C                590          BSR     BITMASK
000013B8                           591          
000013B8  CC82                     592          AND.L   D2,D6
000013BA                           593          
000013BA  0C46 0040                594          CMPI    #%0000000001000000,D6 * is it a long op?
000013BE  6600 0012                595          BNE     NOTLONGMOVEM1       * no, it is a word
000013C2                           596          
000013C2  43F9 00002343            597          LEA     __L,A1
000013C8  103C 000E                598          MOVE.B  #14,D0          * print .L 
000013CC  4E4F                     599          TRAP    #15
000013CE                           600          
000013CE  6000 000E                601          BRA     SKIPNOTLONG1
000013D2                           602          
000013D2                           603  NOTLONGMOVEM1
000013D2                           604  
000013D2  43F9 0000233F            605          LEA     __W,A1
000013D8  103C 000E                606          MOVE.B  #14,D0          * print .W 
000013DC  4E4F                     607          TRAP    #15
000013DE                           608                  
000013DE                           609  SKIPNOTLONG1
000013DE                           610  
000013DE  6100 0654                611          BSR     EAHELPER05 * print out the register we are moving from
000013E2                           612          
000013E2  43F9 0000232D            613          LEA     COMMA,A1
000013E8  103C 000E                614          MOVE.B  #14,D0          * print , 
000013EC  4E4F                     615          TRAP    #15
000013EE                           616          
000013EE  6100 0A60                617          BSR     MOVEMHELPERPOST
000013F2                           618          
000013F2  341A                     619          MOVE.W  (A2)+,D2
000013F4                           620          
000013F4  43F9 00002286            621          LEA     NEWLINE,A1
000013FA  103C 000E                622          MOVE.B  #14,D0          * print a newline 
000013FE  4E4F                     623          TRAP    #15
00001400                           624      
00001400  6000 01F2                625          BRA     DONE0100          * we found and printed, move on to the next iteration
00001404                           626          
00001404                           627  MOVEMTOMEM * supported modes 010 100
00001404                           628  
00001404  7C03                     629          MOVE.L  #3,D6
00001406  7E05                     630          MOVE.L  #5,D7
00001408                           631          
00001408  6100 0E38                632          BSR     BITMASK
0000140C                           633          
0000140C  CC82                     634          AND.L   D2,D6
0000140E                           635          
0000140E  0C46 0000                636          CMPI    #%0000000000000000,D6 * is it an unsopported mode?
00001412  6700 01DC                637          BEQ     UNKNOWN0100
00001416                           638          
00001416  0C46 0008                639          CMPI    #%0000000000001000,D6 * is it an unsopported mode?
0000141A  6700 01D4                640          BEQ     UNKNOWN0100
0000141E                           641          
0000141E  0C46 0018                642          CMPI    #%0000000000011000,D6 * is it an unsopported mode?
00001422  6700 01CC                643          BEQ     UNKNOWN0100
00001426                           644          
00001426  0C46 0028                645          CMPI    #%0000000000101000,D6 * is it an unsopported mode?
0000142A  6700 01C4                646          BEQ     UNKNOWN0100
0000142E                           647          
0000142E  0C46 0030                648          CMPI    #%0000000000110000,D6 * is it an unsopported mode?
00001432  6700 01BC                649          BEQ     UNKNOWN0100
00001436                           650          
00001436  0C46 0070                651          CMPI    #%0000000001110000,D6 * is it an unsopported mode?
0000143A  6700 01B4                652          BEQ     UNKNOWN0100
0000143E                           653          
0000143E  43F9 0000229B            654          LEA     MOVEMOP,A1
00001444  103C 000E                655          MOVE.B  #14,D0          * print MOVEM
00001448  4E4F                     656          TRAP    #15
0000144A                           657          
0000144A  7C06                     658          MOVE.L  #6,D6
0000144C  7E06                     659          MOVE.L  #6,D7
0000144E                           660          
0000144E  6100 0DF2                661          BSR     BITMASK
00001452                           662          
00001452  CC82                     663          AND.L   D2,D6
00001454                           664          
00001454  0C46 0040                665          CMPI    #%0000000001000000,D6 * is it a long op?
00001458  6600 0012                666          BNE     NOTLONGMOVEM2       * no, it is a word
0000145C                           667          
0000145C  43F9 00002343            668          LEA     __L,A1
00001462  103C 000E                669          MOVE.B  #14,D0          * print .L 
00001466  4E4F                     670          TRAP    #15
00001468                           671          
00001468  6000 000E                672          BRA     SKIPNOTLONG2
0000146C                           673          
0000146C                           674  NOTLONGMOVEM2
0000146C                           675  
0000146C  43F9 0000233F            676          LEA     __W,A1
00001472  103C 000E                677          MOVE.B  #14,D0          * print .W 
00001476  4E4F                     678          TRAP    #15
00001478                           679                  
00001478                           680  SKIPNOTLONG2
00001478                           681  
00001478  6100 0B5E                682          BSR     MOVEMHELPERPRE
0000147C                           683  
0000147C  43F9 0000232D            684          LEA     COMMA,A1
00001482  103C 000E                685          MOVE.B  #14,D0          * print , 
00001486  4E4F                     686          TRAP    #15
00001488                           687          
00001488  6100 05AA                688          BSR     EAHELPER05 * print out the register we are moving to
0000148C                           689          
0000148C  341A                     690          MOVE.W  (A2)+,D2
0000148E                           691          
0000148E  43F9 00002286            692          LEA     NEWLINE,A1
00001494  103C 000E                693          MOVE.B  #14,D0          * print a newline 
00001498  4E4F                     694          TRAP    #15
0000149A                           695      
0000149A  6000 0158                696          BRA     DONE0100          * we found and printed, move on to the next iteration
0000149E                           697  
0000149E                           698  NOTMOVEM *JSR
0000149E                           699          * prep values for BITMASK subroutine
0000149E  7C06                     700          MOVE.L  #6,D6
000014A0  7E08                     701          MOVE.L  #8,D7
000014A2                           702          
000014A2  6100 0D9E                703          BSR     BITMASK
000014A6                           704          
000014A6  CC42                     705          AND     D2,D6   * apply bitmask
000014A8                           706          
000014A8  0C46 0080                707          CMPI    #%0000000010000000,D6
000014AC  6600 003E                708          BNE     NOTJSR          * it's not JSR
000014B0                           709          
000014B0  43F9 000022A1            710          LEA     JSROP,A1
000014B6  103C 000E                711          MOVE.B  #14,D0          * Print a newline and JSR
000014BA  4E4F                     712          TRAP    #15
000014BC                           713          
000014BC  43F9 00002327            714          LEA     SPACE,A1
000014C2  103C 000E                715          MOVE.B  #14,D0          * Print a newline and JSR
000014C6  4E4F                     716          TRAP    #15
000014C8                           717          
000014C8                           718          * print out where we are jumping to
000014C8                           719          
000014C8  341A                     720          MOVE.W  (A2)+,D2 * read in the next word of the instruction 
000014CA                           721          
000014CA  2202                     722          MOVE.L  D2,D1   * save the opcode to print
000014CC                           723          
000014CC  7410                     724          MOVE.L  #16,D2  * set the base to 16
000014CE                           725          
000014CE  700F                     726          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000014D0  4E4F                     727          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000014D2                           728          
000014D2  341A                     729          MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
000014D4                           730          
000014D4  2202                     731          MOVE.L  D2,D1   * save the opcode to print
000014D6                           732          
000014D6  7410                     733          MOVE.L  #16,D2  * set the base to 16
000014D8                           734          
000014D8  700F                     735          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000014DA  4E4F                     736          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000014DC                           737          
000014DC  43F9 00002286            738          LEA     NEWLINE,A1
000014E2  103C 000E                739          MOVE.B  #14,D0          * Print a newline
000014E6  4E4F                     740          TRAP    #15
000014E8                           741          
000014E8  6000 010A                742          BRA     DONE0100          * we already found instruction, next iteration
000014EC                           743  NOTJSR *RTS
000014EC                           744  
000014EC                           745          * prep values for BITMASK subroutine
000014EC  7C06                     746          MOVE.L  #6,D6
000014EE  7E08                     747          MOVE.L  #8,D7
000014F0                           748          
000014F0  6100 0D50                749          BSR     BITMASK
000014F4                           750          
000014F4  CC42                     751          AND     D2,D6   * apply bitmask
000014F6                           752          
000014F6  0C46 0040                753          CMPI    #%0000000001000000,D6
000014FA  6600 0012                754          BNE     NOTRTS          * it's not RTS
000014FE                           755          
000014FE  43F9 000022A5            756          LEA     RTSOP,A1
00001504  103C 000D                757          MOVE.B  #13,D0          * Print a newline and RTS
00001508  4E4F                     758          TRAP    #15
0000150A                           759          
0000150A  6000 00E8                760          BRA     DONE0100          * we already found instruction, next iteration
0000150E                           761  NOTRTS  *LEA
0000150E                           762         
0000150E                           763          * prep values for BITMASK subroutine
0000150E  7C06                     764          MOVE.L  #6,D6
00001510  7E08                     765          MOVE.L  #8,D7
00001512                           766          
00001512  6100 0D2E                767          BSR     BITMASK
00001516                           768          
00001516  CC42                     769          AND     D2,D6   * apply bitmask
00001518                           770          
00001518  0C46 01C0                771          CMPI    #%0000000111000000,D6
0000151C  6600 00D2                772          BNE     UNKNOWN0100          * it's not LEA, we dont know what it is
00001520                           773          
00001520                           774          * prep values for BITMASK subroutine
00001520  7C03                     775          MOVE.L  #3,D6
00001522  7E05                     776          MOVE.L  #5,D7
00001524                           777          
00001524  6100 0D1C                778          BSR     BITMASK
00001528                           779          
00001528  CC42                     780          AND     D2,D6   * apply bitmask
0000152A                           781          
0000152A  0C46 0008                782          CMPI    #%0000000000001000,D6
0000152E  6700 00C0                783          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001532                           784          
00001532  0C46 0018                785          CMPI    #%0000000000011000,D6
00001536  6700 00B8                786          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
0000153A                           787          
0000153A  0C46 0020                788          CMPI    #%0000000000100000,D6
0000153E  6700 00B0                789          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001542                           790          
00001542  0C46 0028                791          CMPI    #%0000000000101000,D6
00001546  6700 00A8                792          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
0000154A                           793          
0000154A  0C46 0030                794          CMPI    #%0000000000110000,D6
0000154E  6700 00A0                795          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001552                           796          
00001552  0C46 0038                797          CMPI    #%0000000000111000,D6
00001556  6700 0046                798          BEQ     TWOWORDLEA          * it's a two word LEA
0000155A                           799          
0000155A                           800          * check to make sure it is a supported mode and size
0000155A                           801          
0000155A  43F9 000022AE            802          LEA     LEAOP,A1
00001560  103C 000E                803          MOVE.B  #14,D0          * Print LEA
00001564  4E4F                     804          TRAP    #15
00001566                           805          
00001566  0882 0007                806          BCLR    #7,D2
0000156A  0882 0008                807          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
0000156E                           808          
0000156E  43F9 00002327            809          LEA     SPACE,A1
00001574  103C 000E                810          MOVE.B  #14,D0          * Print SPACE
00001578  4E4F                     811          TRAP    #15
0000157A                           812          
0000157A  6100 04B8                813          BSR     EAHELPER05
0000157E                           814          
0000157E  43F9 0000232D            815          LEA     COMMA,A1
00001584  103C 000E                816          MOVE.B  #14,D0          * Print COMMA
00001588  4E4F                     817          TRAP    #15
0000158A                           818          
0000158A  6100 0466                819          BSR     EAHELPER611
0000158E                           820          
0000158E  43F9 00002286            821          LEA     NEWLINE,A1
00001594  103C 000E                822          MOVE.B  #14,D0          * Start a new line
00001598  4E4F                     823          TRAP    #15
0000159A                           824          
0000159A                           825          
0000159A                           826          * call EA helper
0000159A                           827          * MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
0000159A                           828                  
0000159A  6000 0058                829          BRA     DONE0100          * we already found instruction, next iteration
0000159E                           830          
0000159E                           831  TWOWORDLEA
0000159E                           832  
0000159E  43F9 000022AE            833          LEA     LEAOP,A1
000015A4  103C 000E                834          MOVE.B  #14,D0   * Print LEA
000015A8  4E4F                     835          TRAP    #15
000015AA                           836          
000015AA  43F9 00002327            837          LEA     SPACE,A1
000015B0  103C 000E                838          MOVE.B  #14,D0   * Print SPACE
000015B4  4E4F                     839          TRAP    #15
000015B6                           840  
000015B6  321A                     841          MOVE.W  (A2)+,D1
000015B8                           842          
000015B8  7C00                     843          MOVE.L  #0,D6
000015BA  7E0F                     844          MOVE.L  #15,D7
000015BC                           845          
000015BC  6100 0C84                846          BSR     BITMASK
000015C0                           847          
000015C0  C286                     848          AND.L   D6,D1   * shave off bad info
000015C2                           849          
000015C2  103C 0003                850          MOVE.B  #3,D0   * Print the address which was the source
000015C6  4E4F                     851          TRAP    #15
000015C8                           852          
000015C8  43F9 0000232D            853          LEA     COMMA,A1
000015CE  103C 000E                854          MOVE.B  #14,D0  * Print COMMA
000015D2  4E4F                     855          TRAP    #15
000015D4                           856          
000015D4  0882 0007                857          BCLR    #7,D2
000015D8  0882 0008                858          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
000015DC                           859          
000015DC  6100 0414                860          BSR     EAHELPER611
000015E0                           861          
000015E0  43F9 00002286            862          LEA     NEWLINE,A1
000015E6  103C 000E                863          MOVE.B  #14,D0          * Start a new line
000015EA  4E4F                     864          TRAP    #15
000015EC                           865          
000015EC  6000 0006                866          BRA     DONE0100
000015F0                           867          
000015F0                           868  UNKNOWN0100 *dont know what it is
000015F0  6100 09E6                869          BSR     UNKNOWNOP
000015F4                           870          
000015F4                           871  DONE0100
000015F4  4C9F 0303                872          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
000015F8  4E75                     873          RTS
000015FA                           874          
000015FA  6000 FB5C                875          BRA     ITERATION
000015FE                           876  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000015FE                           877  *-----------------------------------------------------------------------------        
000015FE                           878          
000015FE                           879          
000015FE                           880  
000015FE                           881  *-----------------------------------------------------------------------------
000015FE                           882  *-----------------------------------------------------------------------------
000015FE                           883  * NAME: OP_0101   (SUBQ)
000015FE                           884  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000015FE                           885  * PRE-CONDITION:  xyz
000015FE                           886  * POST-CONDITION: All registers return to their previous state, and the output
000015FE                           887  *                 goes to the output console for reading the raw data or the
000015FE                           888  *                 actual instruction.
000015FE                           889  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000015FE                           890  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000015FE                           891  OP0101
000015FE  48A7 FFC0                892          MOVEM   D0-D7/A0-A1,-(A7)       * Push values to the stack to save
00001602                           893  
00001602  CC7C 0100                894          AND     #%0000000100000000, D6  * Baby-Bitmask for the 8th digit.
00001606  0C46 0100                895          CMPI    #%0000000100000000, D6  * Is the 8th digit a 1?
0000160A  6700 005A                896          BEQ     UNKNOWN0101             * If so, unknown op
0000160E                           897        
0000160E  0C46 0100                898          CMPI    #%0000000100000000, D6  * Is the size 11, an unsupported value?
00001612  6700 0052                899          BEQ     UNKNOWN0101             * If so, unknown op
00001616                           900            
00001616                           901          * Verified SUBQ at this point
00001616  43F9 000022A9            902          LEA     SUBQOP,A1           * Print out SUBQ
0000161C  103C 000E                903          MOVE.B  #14,D0              * Trap #14 to print out
00001620  4E4F                     904          TRAP    #15                 * Perform Trap #14
00001622                           905                          
00001622  6100 0766                906          BSR     SIZE67              * Print out size
00001626                           907          
00001626  43F9 0000232B            908          LEA     IMD,A1              * Formatting
0000162C  103C 000E                909          MOVE.B  #14,D0              * Trap #14 prints out space
00001630  4E4F                     910          TRAP    #15                 * Perform Trap #14
00001632                           911          
00001632  3C3C 0009                912          MOVE.W  #9, D6              * Prep lower value for bitmask
00001636  3E3C 000B                913          MOVE.W  #11,D7              * Prep upper value for bitmask
0000163A  6100 0C06                914          BSR     BITMASK             * Finalize bitmask setup
0000163E  CC42                     915          AND     D2,D6               * Apply bitmask
00001640                           916          
00001640  6100 0B4E                917          BSR     PRINTDATA911        * Special op for immediate in bits 9->11
00001644                           918            
00001644  43F9 0000232D            919          LEA     COMMA,A1            * Formatting
0000164A  103C 000E                920          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000164E  4E4F                     921          TRAP    #15                 * Perform Trap #14
00001650                           922          
00001650  6100 03E2                923          BSR     EAHELPER05          * Print out the Effective Address
00001654                           924          
00001654  43F9 00002286            925          LEA     NEWLINE,A1          * Formatting
0000165A  103C 000E                926          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000165E  4E4F                     927          TRAP    #15                 * Perform Trap #14
00001660                           928          
00001660  4C9F 03FF                929          MOVEM   (A7)+,D0-D7/A0-A1   * Pop off the stack to return our registers
00001664  4E75                     930          RTS
00001666                           931      
00001666                           932  UNKNOWN0101
00001666  6100 0970                933          BSR     UNKNOWNOP
0000166A  4E75                     934          RTS
0000166C                           935  
0000166C                           936  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000166C                           937  *-----------------------------------------------------------------------------
0000166C                           938  
0000166C                           939  
0000166C                           940  
0000166C                           941  *-----------------------------------------------------------------------------
0000166C                           942  *-----------------------------------------------------------------------------
0000166C                           943  * NAME: OP_0110   (BCC, BCS, BGE, BLT, BVC, BRA)
0000166C                           944  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000166C                           945  * PRE-CONDITION:  Given the possibilties for 0110, masks the next 4 bits
0000166C                           946  *                 in the instruction and determines what the bits match to a
0000166C                           947  *                 given condition code. If the 8 bit offset is $00, or $FF,
0000166C                           948  *                 this signifies a word or long offset (for $00 and $FF
0000166C                           949  *                 respectively). The 8 bit offset is in 2's comp. form, and
0000166C                           950  *                 should be un-done, then plus or minus to the current
0000166C                           951  *                 program counter (PC) to get the actual memory label to
0000166C                           952  *                 output to console. The word offset signal eats an
0000166C                           953  *                 additional 16 bits and the long offset eats an additional
0000166C                           954  *                 32 bits. The word/long offset are for memory alignment.
0000166C                           955  * POST-CONDITION: All registers return to their previous state, and the output
0000166C                           956  *                 goes to the output console for reading the raw data or the
0000166C                           957  *                 actual instruction.
0000166C                           958  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000166C                           959  *                 A1 (output)
0000166C                           960  * CONDITIONS TABLE:
0000166C                           961  *                Condition Names  - Mnemonic - Condition Code
0000166C                           962  *                --------------------------------------------
0000166C                           963  *                True             -    T     - 0000
0000166C                           964  *                False            -    F     - 0001
0000166C                           965  *                Higher           -    HI    - 0010
0000166C                           966  *                Lower or Same    -    LS    - 0011
0000166C                           967  *                Carry Clear      -    CC    - 0100
0000166C                           968  *                Carry Set        -    CS    - 0101
0000166C                           969  *                Not Equal        -    NE    - 0110
0000166C                           970  *                Equal            -    EQ    - 0111
0000166C                           971  *                Overflow Clear   -    VC    - 1000
0000166C                           972  *                Overflow Set     -    VS    - 1001
0000166C                           973  *                Plus             -    PL    - 1010
0000166C                           974  *                Minus            -    MI    - 1011
0000166C                           975  *                Greater or Equal -    GE    - 1100
0000166C                           976  *                Less Than        -    LT    - 1101
0000166C                           977  *                Greater Than     -    GT    - 1110
0000166C                           978  *                Less or Equal    -    LE    - 1111
0000166C                           979  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000166C                           980  OP0110
0000166C  48A7 C0C0                981          MOVEM       D0-D1/A0-A1,-(A7) * Save main method routine vars to stack
00001670                           982          
00001670                           983          * Ready four bits to help distinguish op's with the 0110 prefix
00001670  3C3C 0000                984          MOVE.W  #0,D6                 * Move in 0 to D6 (first arg for the
00001674                           985                                        * BITMASK sub-routine call)
00001674  3E3C 0007                986          MOVE.W  #7,D7                 * Move in 7 to D7 (second arg for the
00001678                           987                                        * BITMASK sub-routine call)
00001678                           988                                        
00001678                           989          * The BITMASK call uses D6 as start bit, D7 as ending bit to mask
00001678  6100 0BC8                990          BSR     BITMASK               * Call BITMASK sub-routine
0000167C                           991                                        * Returns a bitmask in D6
0000167C                           992          
0000167C  CC42                     993          AND     D2,D6                 * And the index op, which was pre-loaded
0000167E                           994                                        * in the main memory loop with the bitmask
0000167E                           995                                        * to use to determine what case we need.
0000167E                           996          
0000167E                           997          * Analyze the 8-bit offset in the instruction for a value of $00 or $FF.
0000167E                           998          * $00 == word offset, $FF == long offset
0000167E                           999       ***CMPI    #%0000000000000000,D6
0000167E                          1000       ***BEQ     BCC_WORD_OFFSET * or maybe flag a mark to grab when printing...?
0000167E                          1001       ***
0000167E                          1002       ***CMPI    #%0000000011111111,D6
0000167E                          1003       ***BEQ     BCC_LONG_OFFSET * or maybe flag a mark to grab when printing...?
0000167E                          1004          
0000167E                          1005          * IF PASSED BOTH CMPI CHECKS (ABOVE),
0000167E                          1006          * THEN THERE IS A 8-BIT OFFSET (NO EXTRA GRABS FROM MEMORY)
0000167E                          1007          
0000167E  3C3C 0009               1008          MOVE.W  #9,D6  * Move in 9 to D6 (1st arg for the BITMASK sub-routine call)
00001682  3E3C 000B               1009          MOVE.W  #11,D7 * Move in 11 to D7 (2nd arg for the BITMASK sub-routine call)
00001686                          1010                                        
00001686                          1011          * The BITMASK call uses D6 as start bit, D7 as ending bit to mask
00001686  6100 0BBA               1012          BSR     BITMASK * Call BITMASK sub-routine, Returns a bitmask in D6
0000168A  CC42                    1013          AND     D2,D6   * apply the BITMASK
0000168C                          1014          
0000168C                          1015          * CASE 1: BCC - BINARY FOR "CARRY CLEAR" FLAG
0000168C  0C46 0400               1016          CMPI    #%0000010000000000,D6
00001690  6700 002A               1017          BEQ     OP_BCC
00001694                          1018          
00001694                          1019          * CASE 2: BCS - BINARY FOR "CARRY SET" FLAG
00001694  0C46 0500               1020          CMPI    #%0000010100000000,D6
00001698  6700 002C               1021          BEQ     OP_BCS
0000169C                          1022          
0000169C                          1023          * CASE 3: BGE - BINARY FOR "GREATER OR EQUAL" FLAG
0000169C  0C46 0C00               1024          CMPI    #%0000110000000000,D6
000016A0  6700 002E               1025          BEQ     OP_BGE
000016A4                          1026          
000016A4                          1027          * CASE 4: BLT - BINARY FOR "LESS THAN" FLAG
000016A4  0C46 0D00               1028          CMPI    #%0000110100000000,D6
000016A8  6700 0030               1029          BEQ     OP_BLT
000016AC                          1030          
000016AC                          1031          * CASE 5: BVC - BINARY FOR "OVERFLOW CLEAR" FLAG
000016AC  0C46 0800               1032          CMPI    #%0000100000000000,D6
000016B0  6700 0032               1033          BEQ     OP_BVC
000016B4                          1034          
000016B4                          1035          * CASE 6: BRA - BINARY FOR "BRANCH ALWAYS" FLAG
000016B4                          1036          * NOTE: A branch to the immediately following instruction automatically
000016B4                          1037          *       uses the 16-bit displacement format because the 8-bit displacement
000016B4                          1038          *       field contains $00 zero offset
000016B4                          1039          * http://68k.hax.com/BRA
000016B4                          1040          * NOTE2 ---> Does this mean, there should be no checks when debugging
000016B4                          1041          *            for word/long offsets?
000016B4  0C46 0000               1042          CMPI    #%0000000000000000,D6
000016B8  6700 0034               1043          BEQ     OP_BRA
000016BC                          1044          
000016BC                          1045          * CASE OTHER: ADDITIONAL FLAGS ALLOWED TO SIMPLY BE "RAW DATA OPS"
000016BC                          1046          ; call raw data print out sub routine
000016BC                          1047  
000016BC                          1048  OP_BCC
000016BC  43F9 000022E9           1049          LEA     OP_BCC_MSG,A1
000016C2  6000 0034               1050          BRA     OP_BRANCHES_PRINT
000016C6                          1051  OP_BCS
000016C6  43F9 000022EE           1052          LEA     OP_BCS_MSG,A1
000016CC  6000 002A               1053          BRA     OP_BRANCHES_PRINT
000016D0                          1054  OP_BGE
000016D0  43F9 000022F3           1055          LEA     OP_BGE_MSG,A1
000016D6  6000 0020               1056          BRA     OP_BRANCHES_PRINT
000016DA                          1057  OP_BLT
000016DA  43F9 000022F8           1058          LEA     OP_BLT_MSG,A1
000016E0  6000 0016               1059          BRA     OP_BRANCHES_PRINT
000016E4                          1060  OP_BVC
000016E4  43F9 000022FD           1061          LEA     OP_BVC_MSG,A1
000016EA  6000 000C               1062          BRA     OP_BRANCHES_PRINT
000016EE                          1063  OP_BRA
000016EE  43F9 00002302           1064          LEA     OP_BRA_MSG,A1
000016F4  6000 0002               1065          BRA     OP_BRANCHES_PRINT
000016F8                          1066  
000016F8                          1067  * NEED TO ADD CHECK FOR EATING ANOTHER WORD/LONG
000016F8                          1068          * need to take an extra word/long offset, given $00 or $FF read from the 8-bit offset?
000016F8                          1069          * assemble output to console
000016F8                          1070  OP_BRANCHES_PRINT
000016F8  103C 000E               1071          MOVE.B  #14,D0 * print instruction op
000016FC  4E4F                    1072          TRAP    #15
000016FE                          1073          
000016FE  43F9 000022E1           1074          LEA     DATA,A1
00001704  103C 000E               1075          MOVE.B  #14,D0 * print raw data hex of the LABEL
00001708  4E4F                    1076          TRAP    #15
0000170A                          1077          
0000170A  1A1A                    1078          MOVE.B  (A2)+,D5 * move 8 bit label addr into d5 and advance main memory program pointer too
0000170C  2845                    1079          MOVE.L  D5,A4 * ready the 8bits into a4
0000170E  43D4                    1080          LEA     (A4),A1 * ready the a4 into a1 for print
00001710  103C 000E               1081          MOVE.B  #14,D0 * print the 8bit addr
00001714  4E4F                    1082          TRAP    #15
00001716                          1083  
00001716  6000 0002               1084          BRA     BCC_END
0000171A                          1085  
0000171A                          1086  BCC_END * reload the memory, call RTS
0000171A  4C9F 0303               1087          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
0000171E  4E75                    1088          RTS
00001720                          1089  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001720                          1090  *-----------------------------------------------------------------------------
00001720                          1091  
00001720                          1092  
00001720                          1093  
00001720                          1094  *-----------------------------------------------------------------------------
00001720                          1095  *-----------------------------------------------------------------------------
00001720                          1096  * NAME: OP_0111   ()
00001720                          1097  * DESCRIPTION:    OP code 0111 is not supported. 
00001720                          1098  * PRE-CONDITION:  
00001720                          1099  * POST-CONDITION: 
00001720                          1100  * REGISTERS:
00001720                          1101  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001720                          1102  OP0111
00001720  6100 08B6               1103      BSR     UNKNOWNOP
00001724  4E75                    1104      RTS
00001726                          1105  
00001726                          1106  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001726                          1107  *-----------------------------------------------------------------------------
00001726                          1108  
00001726                          1109  
00001726                          1110  
00001726                          1111  *-----------------------------------------------------------------------------
00001726                          1112  *-----------------------------------------------------------------------------
00001726                          1113  * NAME: OP_1000   (DIVS, OR)
00001726                          1114  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001726                          1115  * PRE-CONDITION:  xyz
00001726                          1116  * POST-CONDITION: All registers return to their previous state, and the output
00001726                          1117  *                 goes to the output console for reading the raw data or the
00001726                          1118  *                 actual instruction.
00001726                          1119  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001726                          1120  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001726                          1121  OP1000
00001726                          1122          * Saving values to the stack
00001726  48A7 FFC0               1123          MOVEM   D0-D7/A0-A1,-(A7)
0000172A                          1124  
0000172A                          1125          * Check if the EA Mode is 001 since both DIVS and OR do not support it
0000172A  3C3C 0003               1126          MOVE.W  #3, D6              * Prep lower value for bitmask
0000172E  3E3C 0005               1127          MOVE.W  #5, D7              * Prep upper value for bitmask
00001732  6100 0B0E               1128          BSR     BITMASK             * Finalize bitmask setup
00001736  CC42                    1129          AND     D2,D6               * Apply bitmask
00001738                          1130          
00001738  0C46 0008               1131          CMPI    #%0000000000001000, D6  * Is the mode 001, an unsupported mode?
0000173C  6700 089A               1132          BEQ     UNKNOWNOP                 * If so, the op is not supported
00001740                          1133          
00001740                          1134          * Checking for DIVS
00001740  3C3C 0006               1135          MOVE.W  #6, D6              * Prep lower value for bitmask
00001744  3E3C 0008               1136          MOVE.W  #8, D7              * Prep upper value for bitmask
00001748  6100 0AF8               1137          BSR     BITMASK             * Finalize bitmask setup
0000174C  CC42                    1138          AND     D2,D6               * Apply bitmask
0000174E                          1139          
0000174E  0C46 01C0               1140          CMPI    #%0000000111000000, D6  * Are we DIVS?
00001752  6600 0050               1141          BNE     NOTDIVS                 * If not, branch to see if it's OR
00001756                          1142          
00001756  43F9 00002289           1143          LEA     DIVSOP,A1           * We found DIVS
0000175C  103C 000E               1144          MOVE.B  #14,D0              * Trap #14 prints out the data
00001760  4E4F                    1145          TRAP    #15                 * Perform Trap #14
00001762                          1146          
00001762  43F9 00002327           1147          LEA     SPACE,A1            * formatting
00001768  103C 000E               1148          MOVE.B  #14,D0              * Trap #14 prints out space
0000176C  4E4F                    1149          TRAP    #15                 * Perform Trap #14
0000176E                          1150          
0000176E  4243                    1151          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
00001770  08C3 0000               1152          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
00001774                          1153                                      * to indicate a potential immediate of size word
00001774                          1154          
00001774  6100 02BE               1155          BSR     EAHELPER05          * Print out data. TODO: DOESN'T WORK.
00001778                          1156  
00001778  43F9 0000232D           1157          LEA     COMMA,A1            * formatting
0000177E  103C 000E               1158          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001782  4E4F                    1159          TRAP    #15                 * Perform Trap #14
00001784                          1160          
00001784                          1161          * bit manipulation is needed to make the outlier DIVS work
00001784                          1162          * with the generic EAHELPER611
00001784  0882 0006               1163          BCLR    #6,D2
00001788  0882 0007               1164          BCLR    #7,D2
0000178C  0882 0008               1165          BCLR    #8,D2
00001790                          1166          
00001790                          1167          * the above bits were cleared so that eahelper05 knows the destination
00001790                          1168          * is a data register.
00001790                          1169          
00001790  6100 0260               1170          BSR     EAHELPER611 
00001794                          1171  
00001794  43F9 00002286           1172          LEA     NEWLINE,A1          * We found DIVS
0000179A  103C 000E               1173          MOVE.B  #14,D0              * Trap #14 prints out the data
0000179E  4E4F                    1174          TRAP    #15                 * Perform Trap #14
000017A0                          1175          
000017A0  6000 0012               1176          BRA     OP1000END
000017A4                          1177          
000017A4                          1178  NOTDIVS * It is confirmed OR at this point
000017A4  43F9 000022BD           1179          LEA     OROP,A1         * We found OR
000017AA  103C 000E               1180          MOVE.B  #14,D0          * Trap #14 prints out the data
000017AE  4E4F                    1181          TRAP    #15             * Perform Trap #14
000017B0                          1182          *================================================================
000017B0                          1183          * todo, move the size of the operation into the leading bits of D5
000017B0                          1184          * before subroutine call
000017B0  6100 0240               1185          BSR     EAHELPER611
000017B4                          1186  
000017B4                          1187  OP1000END
000017B4  4C9F 03FF               1188          MOVEM   (A7)+,D0-D7/A0-A1
000017B8  4E75                    1189          RTS
000017BA                          1190  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000017BA                          1191  *-----------------------------------------------------------------------------
000017BA                          1192  
000017BA                          1193  
000017BA                          1194  
000017BA                          1195  *-----------------------------------------------------------------------------
000017BA                          1196  *-----------------------------------------------------------------------------
000017BA                          1197  * NAME: OP_1001   (SUB)
000017BA                          1198  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000017BA                          1199  * PRE-CONDITION:  xyz
000017BA                          1200  * POST-CONDITION: All registers return to their previous state, and the output
000017BA                          1201  *                 goes to the output console for reading the raw data or the
000017BA                          1202  *                 actual instruction.
000017BA                          1203  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000017BA                          1204  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000017BA                          1205  OP1001
000017BA                          1206  
000017BA                          1207  
000017BA                          1208  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000017BA                          1209  *-----------------------------------------------------------------------------
000017BA                          1210  
000017BA                          1211  
000017BA                          1212  
000017BA                          1213  *-----------------------------------------------------------------------------
000017BA                          1214  *-----------------------------------------------------------------------------
000017BA                          1215  * NAME: OP_1010   ()
000017BA                          1216  * DESCRIPTION:    a
000017BA                          1217  * PRE-CONDITION:  b
000017BA                          1218  * POST-CONDITION: c
000017BA                          1219  * REGISTERS:      d
000017BA                          1220  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000017BA                          1221  OP1010
000017BA                          1222  
000017BA  6100 081C               1223      BSR     UNKNOWNOP
000017BE  4E75                    1224      RTS
000017C0                          1225  
000017C0                          1226  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000017C0                          1227  *-----------------------------------------------------------------------------
000017C0                          1228  
000017C0                          1229  
000017C0                          1230  
000017C0                          1231  *-----------------------------------------------------------------------------
000017C0                          1232  *-----------------------------------------------------------------------------
000017C0                          1233  * NAME: OP_1011   (EOR, CMP)
000017C0                          1234  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000017C0                          1235  * PRE-CONDITION:  xyz
000017C0                          1236  * POST-CONDITION: All registers return to their previous state, and the output
000017C0                          1237  *                 goes to the output console for reading the raw data or the
000017C0                          1238  *                 actual instruction.
000017C0                          1239  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000017C0                          1240  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000017C0                          1241  OP1011
000017C0                          1242  
000017C0  6100 0816               1243      BSR     UNKNOWNOP
000017C4  4E75                    1244      RTS
000017C6                          1245  
000017C6                          1246  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000017C6                          1247  *-----------------------------------------------------------------------------
000017C6                          1248  
000017C6                          1249  
000017C6                          1250  
000017C6                          1251  *-----------------------------------------------------------------------------
000017C6                          1252  *-----------------------------------------------------------------------------
000017C6                          1253  * NAME: OP_1100   (MULS)
000017C6                          1254  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000017C6                          1255  * PRE-CONDITION:  xyz
000017C6                          1256  * POST-CONDITION: All registers return to their previous state, and the output
000017C6                          1257  *                 goes to the output console for reading the raw data or the
000017C6                          1258  *                 actual instruction.
000017C6                          1259  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000017C6                          1260  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000017C6                          1261  OP1100
000017C6  48A7 FFC0               1262          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
000017CA                          1263  
000017CA                          1264          * Check if the EA Mode is 001 since MULS does not support it
000017CA  3C3C 0003               1265          MOVE.W  #3, D6              * Prep lower value for bitmask
000017CE  3E3C 0005               1266          MOVE.W  #5, D7              * Prep upper value for bitmask
000017D2  6100 0A6E               1267          BSR     BITMASK             * Finalize bitmask setup
000017D6  CC42                    1268          AND     D2,D6               * Apply bitmask
000017D8                          1269          
000017D8  0C46 0008               1270          CMPI    #%0000000000001000, D6    * Is the mode 001, an unsupported mode?
000017DC  6700 0068               1271          BEQ     UNKNOWN1100               * If so, the op is not supported
000017E0                          1272          
000017E0  3C3C 0006               1273          MOVE.W  #6, D6              * Prep lower value for bitmask
000017E4  3E3C 0008               1274          MOVE.W  #8, D7              * Prep upper value for bitmask
000017E8  6100 0A58               1275          BSR     BITMASK             * Finalize bitmask setup
000017EC  CC42                    1276          AND     D2,D6               * Apply bitmask
000017EE                          1277          
000017EE  0C46 01C0               1278          CMPI    #%0000000111000000, D6  * Are we MULS?
000017F2  6600 0052               1279          BNE     UNKNOWN1100             * If not, it is an unknown op
000017F6                          1280          
000017F6  43F9 000022B8           1281          LEA     MULSOP,A1           * We found MULS
000017FC  103C 000E               1282          MOVE.B  #14,D0              * Trap #14 prints out the data
00001800  4E4F                    1283          TRAP    #15                 * Perform Trap #14
00001802                          1284          
00001802  43F9 00002327           1285          LEA     SPACE,A1            * formatting
00001808  103C 000E               1286          MOVE.B  #14,D0              * Trap #14 prints out space
0000180C  4E4F                    1287          TRAP    #15                 * Perform Trap #14
0000180E                          1288          
0000180E  4243                    1289          CLR     D3                  * clear D3, it is a parameter
00001810  08C3 0000               1290          BSET    #0,D3               * of EAHELPER05 to indicate size
00001814                          1291          
00001814  6100 021E               1292          BSR     EAHELPER05          * Print out data
00001818                          1293  
00001818  43F9 0000232D           1294          LEA     COMMA,A1            * formatting
0000181E  103C 000E               1295          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001822  4E4F                    1296          TRAP    #15                 * Perform Trap #14
00001824                          1297          
00001824  0882 0006               1298          BCLR    #6,D2               * Bit manipulation is 
00001828  0882 0007               1299          BCLR    #7,D2               * necessary in order to make
0000182C  0882 0008               1300          BCLR    #8,D2               * EAHELPER611 work generically
00001830                          1301          
00001830  6100 01C0               1302          BSR     EAHELPER611         * Print out EA
00001834                          1303  
00001834  43F9 00002286           1304          LEA     NEWLINE,A1          * Formatting
0000183A  103C 000E               1305          MOVE.B  #14,D0              * Trap #14 prints out the data
0000183E  4E4F                    1306          TRAP    #15                 * Perform Trap #14
00001840                          1307          
00001840  4C9F 03FF               1308          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
00001844  4E75                    1309          RTS                         * Return to main
00001846                          1310          
00001846                          1311  UNKNOWN1100
00001846  6100 0790               1312          BSR     UNKNOWNOP
0000184A                          1313       
0000184A  4C9F 03FF               1314          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
0000184E  4E75                    1315          RTS                         * Return to main
00001850                          1316          
00001850                          1317  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001850                          1318  *-----------------------------------------------------------------------------
00001850                          1319  
00001850                          1320  
00001850                          1321  
00001850                          1322  *-----------------------------------------------------------------------------
00001850                          1323  *-----------------------------------------------------------------------------
00001850                          1324  * NAME: OP_1101   (ADD, ADDA)
00001850                          1325  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001850                          1326  * PRE-CONDITION:  xyz
00001850                          1327  * POST-CONDITION: All registers return to their previous state, and the output
00001850                          1328  *                 goes to the output console for reading the raw data or the
00001850                          1329  *                 actual instruction.
00001850                          1330  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001850                          1331  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001850                          1332  OP1101
00001850                          1333  
00001850  6100 0786               1334      BSR     UNKNOWNOP
00001854  4E75                    1335      RTS
00001856                          1336  
00001856                          1337  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001856                          1338  *-----------------------------------------------------------------------------
00001856                          1339  
00001856                          1340  
00001856                          1341  
00001856                          1342  *-----------------------------------------------------------------------------
00001856                          1343  *-----------------------------------------------------------------------------
00001856                          1344  * NAME: OP_1110   (LSL, LSR, ASL, ASR, ROL, ROR)
00001856                          1345  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001856                          1346  * PRE-CONDITION:  xyz
00001856                          1347  * POST-CONDITION: All registers return to their previous state, and the output
00001856                          1348  *                 goes to the output console for reading the raw data or the
00001856                          1349  *                 actual instruction.
00001856                          1350  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001856                          1351  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001856                          1352  OP1110
00001856                          1353  
00001856  48A7 FFC0               1354      MOVEM   D0-D7/A0-A1,-(A7)   * Caller saved
0000185A                          1355  
0000185A  7C03                    1356      MOVE.L  #3,D6
0000185C  7E04                    1357      MOVE.L  #4,D7
0000185E                          1358      
0000185E  6100 09E2               1359      BSR     BITMASK * generate a bitmask for the 3 and 4 bits
00001862                          1360      
00001862  CC82                    1361      AND.L   D2,D6
00001864                          1362      
00001864  0C46 0008               1363      CMPI    #%0000000000001000,D6 *is it a logical shift
00001868  6700 001A               1364      BEQ     LS
0000186C                          1365      
0000186C  0C46 0000               1366      CMPI    #%0000000000000000,D6 *is it an arithmatic shift
00001870  6700 0048               1367      BEQ     AS
00001874                          1368      
00001874  0C46 0018               1369      CMPI    #%0000000000011000,D6 *is it a rorate?
00001878  6700 0076               1370      BEQ     RO
0000187C                          1371  
0000187C  6100 075A               1372      BSR     UNKNOWNOP *if nothing above, we don't know what it is
00001880  6000 0158               1373      BRA     ENDOP1110
00001884                          1374      
00001884                          1375  LS
00001884  7C08                    1376      MOVE.L  #8,D6
00001886  7E08                    1377      MOVE.L  #8,D7
00001888                          1378      
00001888  6100 09B8               1379      BSR     BITMASK
0000188C                          1380      
0000188C  CC82                    1381      AND.L   D2,D6
0000188E                          1382      
0000188E  0C46 0000               1383      CMPI    #0,D6 * is it a left shift?
00001892  6700 0016               1384      BEQ     LSR
00001896                          1385      
00001896  6000 0002               1386      BRA     LSL * if not a left shift, must be right
0000189A                          1387  
0000189A                          1388  LSL
0000189A                          1389  
0000189A  43F9 000022C9           1390      LEA     LSLOP,A1            * formatting
000018A0  103C 000E               1391      MOVE.B  #14,D0              * Trap #14 prints out LSL
000018A4  4E4F                    1392      TRAP    #15                 * Perform Trap #14
000018A6                          1393      
000018A6  6000 007E               1394      BRA     OP1110GENERIC       * a generic part of OP1110 that
000018AA                          1395                                  * prints the registers and imm data
000018AA                          1396  LSR
000018AA                          1397  
000018AA  43F9 000022CD           1398      LEA     LSROP,A1            * formatting
000018B0  103C 000E               1399      MOVE.B  #14,D0              * Trap #14 prints out LSR
000018B4  4E4F                    1400      TRAP    #15                 * Perform Trap #14
000018B6                          1401      
000018B6  6000 006E               1402      BRA     OP1110GENERIC       * a generic part of OP1110 that
000018BA                          1403                                  * prints the registers and imm data
000018BA                          1404  
000018BA                          1405  AS
000018BA  7C08                    1406      MOVE.L  #8,D6
000018BC  7E08                    1407      MOVE.L  #8,D7
000018BE                          1408      
000018BE  6100 0982               1409      BSR     BITMASK
000018C2                          1410      
000018C2  CC82                    1411      AND.L   D2,D6
000018C4                          1412      
000018C4  0C46 0000               1413      CMPI    #0,D6 * is it a left shift?
000018C8  6700 0016               1414      BEQ     ASR
000018CC                          1415      
000018CC  6000 0002               1416      BRA     ASL * if not a left shift, must be right
000018D0                          1417      
000018D0                          1418  ASL
000018D0                          1419  
000018D0  43F9 000022D1           1420      LEA     ASLOP,A1            * formatting
000018D6  103C 000E               1421      MOVE.B  #14,D0              * Trap #14 prints out ASL
000018DA  4E4F                    1422      TRAP    #15                 * Perform Trap #14
000018DC                          1423      
000018DC  6000 0048               1424      BRA     OP1110GENERIC       * a generic part of OP1110 that
000018E0                          1425                                  * prints the registers and imm data
000018E0                          1426  ASR
000018E0                          1427  
000018E0  43F9 000022D5           1428      LEA     ASROP,A1            * formatting
000018E6  103C 000E               1429      MOVE.B  #14,D0              * Trap #14 prints out ASR
000018EA  4E4F                    1430      TRAP    #15                 * Perform Trap #14
000018EC                          1431      
000018EC  6000 0038               1432      BRA     OP1110GENERIC       * a generic part of OP1110 that
000018F0                          1433                                  * prints the registers and imm data
000018F0                          1434  RO
000018F0  7C08                    1435      MOVE.L  #8,D6
000018F2  7E08                    1436      MOVE.L  #8,D7
000018F4                          1437      
000018F4  6100 094C               1438      BSR     BITMASK
000018F8                          1439      
000018F8  CC82                    1440      AND.L   D2,D6
000018FA                          1441      
000018FA  0C46 0000               1442      CMPI    #0,D6 * is it a left shift?
000018FE  6700 0016               1443      BEQ     ROR
00001902                          1444      
00001902  6000 0002               1445      BRA     ROL * if not a left shift, must be right
00001906                          1446  
00001906                          1447  ROL
00001906                          1448  
00001906  43F9 000022D9           1449      LEA     ROLOP,A1            * formatting
0000190C  103C 000E               1450      MOVE.B  #14,D0              * Trap #14 prints out ROL
00001910  4E4F                    1451      TRAP    #15                 * Perform Trap #14
00001912                          1452      
00001912  6000 0012               1453      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001916                          1454                                  * prints the registers and imm data
00001916                          1455  ROR
00001916                          1456  
00001916  43F9 000022DD           1457      LEA     ROROP,A1            * formatting
0000191C  103C 000E               1458      MOVE.B  #14,D0              * Trap #14 prints out ROR
00001920  4E4F                    1459      TRAP    #15                 * Perform Trap #14
00001922                          1460      
00001922  6000 0002               1461      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001926                          1462                                  * prints the registers and imm data
00001926                          1463  
00001926                          1464  OP1110GENERIC
00001926                          1465  
00001926  6100 0462               1466      BSR     SIZE67
0000192A                          1467      
0000192A  7C05                    1468      MOVE.L  #5,D6
0000192C  7E05                    1469      MOVE.L  #5,D7
0000192E                          1470      
0000192E  6100 0912               1471      BSR     BITMASK
00001932                          1472      
00001932  CC82                    1473      AND.L   D2,D6
00001934                          1474      
00001934  0C46 0020               1475      CMPI    #%0000000000100000,D6   *is it a data reg?
00001938  6700 0074               1476      BEQ     OP1110DATAREG
0000193C                          1477      
0000193C  43F9 0000232B           1478      LEA     IMD,A1              * formatting
00001942  103C 000E               1479      MOVE.B  #14,D0              * Trap #14 prints out pound #
00001946  4E4F                    1480      TRAP    #15                 * Perform Trap #14
00001948                          1481      
00001948  7C09                    1482      MOVE.L  #9,D6
0000194A  7E0B                    1483      MOVE.L  #11,D7
0000194C                          1484      
0000194C  6100 08F4               1485      BSR     BITMASK
00001950                          1486      
00001950  CC82                    1487      AND.L   D2,D6
00001952                          1488      
00001952  0C46 0000               1489      CMPI    #0,D6 * special case, if zero print #8 not #0
00001956  6700 002E               1490      BEQ     OP1110IMMEIGHT
0000195A                          1491      
0000195A  E08E                    1492      LSR.L   #8,D6
0000195C  E28E                    1493      LSR.L   #1,D6
0000195E                          1494      
0000195E  2206                    1495      MOVE.L  D6,D1              * formatting
00001960  103C 0003               1496      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001964  4E4F                    1497      TRAP    #15                * Perform Trap #14
00001966                          1498      
00001966  43F9 0000232D           1499      LEA     COMMA,A1            * formatting
0000196C  103C 000E               1500      MOVE.B  #14,D0              * Trap #14 prints out comma
00001970  4E4F                    1501      TRAP    #15                 * Perform Trap #1
00001972                          1502      
00001972                          1503      * in order to use the eahlpers, we need to do some bit manipulation
00001972                          1504      * clearing the bits below lets our helper know that the mode is Dn
00001972  0882 0003               1505      BCLR    #3,D2
00001976  0882 0004               1506      BCLR    #4,D2
0000197A  0882 0005               1507      BCLR    #5,D2
0000197E                          1508      
0000197E  6100 00B4               1509      BSR     EAHELPER05
00001982                          1510      
00001982  6000 0056               1511      BRA     ENDOP1110
00001986                          1512      
00001986                          1513  OP1110IMMEIGHT
00001986                          1514  
00001986  7208                    1515      MOVE.L  #8,D1              * formatting
00001988  103C 0003               1516      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
0000198C  4E4F                    1517      TRAP    #15                * Perform Trap #14
0000198E                          1518      
0000198E  43F9 0000232D           1519      LEA     COMMA,A1            * formatting
00001994  103C 000E               1520      MOVE.B  #14,D0              * Trap #14 prints out comma
00001998  4E4F                    1521      TRAP    #15                 * Perform Trap #1
0000199A                          1522      
0000199A                          1523      * in order to use the eahlpers, we need to do some bit manipulation
0000199A                          1524      * clearing the bits below lets our helper know that the mode is Dn
0000199A  0882 0003               1525      BCLR    #3,D2
0000199E  0882 0004               1526      BCLR    #4,D2
000019A2  0882 0005               1527      BCLR    #5,D2
000019A6                          1528      
000019A6  6100 008C               1529      BSR     EAHELPER05
000019AA                          1530      
000019AA  6000 002E               1531      BRA     ENDOP1110
000019AE                          1532  
000019AE                          1533  OP1110DATAREG
000019AE                          1534  
000019AE                          1535      * in order to use the eahlpers, we need to do some bit manipulation
000019AE                          1536      * clearing the bits below lets our helper know that the mode is Dn
000019AE  0882 0003               1537      BCLR    #3,D2
000019B2  0882 0004               1538      BCLR    #4,D2
000019B6  0882 0005               1539      BCLR    #5,D2
000019BA  0882 0006               1540      BCLR    #6,D2
000019BE  0882 0007               1541      BCLR    #7,D2
000019C2  0882 0008               1542      BCLR    #8,D2
000019C6                          1543      
000019C6  6100 002A               1544      BSR     EAHELPER611
000019CA                          1545      
000019CA  43F9 0000232D           1546      LEA     COMMA,A1            * formatting
000019D0  103C 000E               1547      MOVE.B  #14,D0              * Trap #14 prints out comma
000019D4  4E4F                    1548      TRAP    #15                 * Perform Trap #14
000019D6                          1549      
000019D6  6100 005C               1550      BSR     EAHELPER05
000019DA                          1551  
000019DA                          1552  ENDOP1110
000019DA                          1553  
000019DA  43F9 00002286           1554      LEA     NEWLINE,A1          * formatting
000019E0  103C 000E               1555      MOVE.B  #14,D0              * Trap #14 prints out a new line
000019E4  4E4F                    1556      TRAP    #15                 * Perform Trap #14
000019E6                          1557      
000019E6  4C9F 03FF               1558      MOVEM   (A7)+,D0-D7/A0-A1   * Caller saved
000019EA  4E75                    1559      RTS
000019EC                          1560  
000019EC                          1561  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000019EC                          1562  *-----------------------------------------------------------------------------
000019EC                          1563  
000019EC                          1564  
000019EC                          1565  
000019EC                          1566  *-----------------------------------------------------------------------------
000019EC                          1567  *-----------------------------------------------------------------------------
000019EC                          1568  * NAME: OP_1111   ()
000019EC                          1569  * DESCRIPTION:    a
000019EC                          1570  * PRE-CONDITION:  b
000019EC                          1571  * POST-CONDITION: c
000019EC                          1572  * REGISTERS:      d
000019EC                          1573  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000019EC                          1574  OP1111
000019EC                          1575  
000019EC  6100 05EA               1576      BSR     UNKNOWNOP
000019F0  4E75                    1577      RTS
000019F2                          1578  
000019F2                          1579  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000019F2                          1580  *-----------------------------------------------------------------------------
000019F2                          1581  
000019F2                          1582  
000019F2                          1583  
000019F2                          1584  *-----------------------------------------------------------------------------
000019F2                          1585  *-----------------------------------------------------------------------------
000019F2                          1586  * NAME:           EAHELPER611
000019F2                          1587  * DESCRIPTION:    a
000019F2                          1588  * PRE-CONDITION:  D2 contains the instruction to print modes for.
000019F2                          1589  *                 D5 contains the size of the data to be printed
000019F2                          1590  * POST-CONDITION: Determines if mode is direct, if it's not, passes D2 to 
000019F2                          1591  *                 EAHELPER05 to print.
000019F2                          1592  * REGISTERS:      a
000019F2                          1593  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000019F2                          1594  EAHELPER611
000019F2  48A7 FFC0               1595      MOVEM  D0-D7/A0-A1,-(A7)    * Push values onto stack
000019F6                          1596      
000019F6  3C3C 0006               1597      MOVE.W  #6, D6              * Prep lower value for bitmask
000019FA  3E3C 0008               1598      MOVE.W  #8, D7              * Prep upper value for bitmask
000019FE  6100 0842               1599      BSR     BITMASK             * Finalize bitmask setup
00001A02  CC42                    1600      AND     D2,D6               * Apply bitmask
00001A04                          1601      
00001A04                          1602      * to move the mode where EAHELPER50 can process it
00001A04  7C06                    1603      MOVE.L  #6,D6       * Prep lower value of bitmask
00001A06  7E08                    1604      MOVE.L  #8,D7       * Prep upper value of bitmask
00001A08  6100 0838               1605      BSR     BITMASK     * Create bitmask
00001A0C  CC42                    1606      AND     D2,D6       * Apply bitmask
00001A0E                          1607      
00001A0E  4243                    1608      CLR     D3      * prep D3 to store values
00001A10  3606                    1609      MOVE.W  D6,D3   * store bitmasked value in D3
00001A12  E64B                    1610      LSR     #3,D3   * move bits 6-8 to 3-5
00001A14                          1611      
00001A14                          1612      * to move the register where EAHELPER50 can process it
00001A14  7C09                    1613      MOVE.L  #9,D6   * Prep lower value for bitmask
00001A16  7E0B                    1614      MOVE.L  #11,D7  * Prep upper value for bitmask
00001A18  6100 0828               1615      BSR     BITMASK * create bitmask
00001A1C  CC42                    1616      AND     D2,D6   * apply bitmask
00001A1E                          1617      
00001A1E  4244                    1618      CLR     D4      * prep D3 to store values
00001A20  3806                    1619      MOVE.W  D6,D4   * store bitmasked value in D3
00001A22                          1620      
00001A22  E04C                    1621      LSR     #8,D4   * move bits 9-11 to 0-2
00001A24  E24C                    1622      LSR     #1,D4   * move bits 9-11 to 0-2
00001A26                          1623    
00001A26  8684                    1624      OR.L    D4,D3   * combind the register and mode
00001A28  2403                    1625      MOVE.L  D3,D2   * put the result in D2 so EAHELPER05 can process it
00001A2A                          1626      
00001A2A  6100 0008               1627      BSR     EAHELPER05
00001A2E                          1628      
00001A2E                          1629  ENDEAHELPER611
00001A2E                          1630      
00001A2E  4C9F 03FF               1631      MOVEM  (A7)+,D0-D7/A0-A1    * Revert back
00001A32  4E75                    1632      RTS
00001A34                          1633  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001A34                          1634  *-----------------------------------------------------------------------------
00001A34                          1635  
00001A34                          1636  
00001A34                          1637  
00001A34                          1638  *-----------------------------------------------------------------------------
00001A34                          1639  *-----------------------------------------------------------------------------
00001A34                          1640  * NAME:           EAHELPER05
00001A34                          1641  * DESCRIPTION:    a
00001A34                          1642  * PRE-CONDITION:  D2 contains the instruction to print modes for. Only call
00001A34                          1643  *                 this sub-routine helper for operations that only have one
00001A34                          1644  *                 mode register.
00001A34                          1645  * POST-CONDITION: Determines mode, passes D2 to REGHELPER to print.
00001A34                          1646  * REGISTERS:      a
00001A34                          1647  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001A34                          1648  EAHELPER05
00001A34                          1649      * todo: add code for printing immediate values
00001A34                          1650      
00001A34  48A7 FFC0               1651      MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001A38                          1652      
00001A38  7C03                    1653      MOVE.L  #3,D6
00001A3A  7E05                    1654      MOVE.L  #5,D7
00001A3C                          1655      
00001A3C  6100 0804               1656      BSR     BITMASK * generate a bitmask to identify the mode
00001A40                          1657      
00001A40  CC42                    1658      AND     D2,D6   * mask off the parts of D2 we don't need
00001A42                          1659      
00001A42  2A06                    1660      MOVE.L  D6,D5   * store the 3-5 bitmask for later use
00001A44                          1661      
00001A44  0C46 0000               1662      CMPI    #%0000000000000000,D6 * is it data register direct?
00001A48  6600 000A               1663      BNE     NOTDATAREG
00001A4C                          1664      
00001A4C  6100 013C               1665      BSR     MODE_DN
00001A50                          1666       
00001A50  6000 0132               1667      BRA     ENDEAHELPER05
00001A54                          1668      
00001A54                          1669  NOTDATAREG * address register direct
00001A54                          1670      
00001A54  0C46 0008               1671      CMPI    #%0000000000001000,D6 * is it address register direct?
00001A58  6600 000A               1672      BNE     NOTADRDIRECT
00001A5C                          1673      
00001A5C  6100 022C               1674      BSR     MODE_AN * simply prints out the address register
00001A60                          1675       
00001A60  6000 0122               1676      BRA     ENDEAHELPER05
00001A64                          1677      
00001A64                          1678  NOTADRDIRECT * address register indirect
00001A64                          1679          
00001A64  0C46 0010               1680      CMPI    #%0000000000010000,D6 * is it address register indirect?
00001A68  6600 0022               1681      BNE     NOTADRINDIRECT
00001A6C                          1682      
00001A6C  43F9 0000232F           1683      LEA     OBRACK,A1       * Load '('
00001A72  303C 000E               1684      MOVE.W  #14,D0          * Trap #14 to display message
00001A76  4E4F                    1685      TRAP    #15             * Perform #14
00001A78                          1686          
00001A78                          1687  
00001A78  6100 0210               1688      BSR     MODE_AN * print out an address register
00001A7C                          1689      
00001A7C  43F9 00002331           1690      LEA     CBRACK,A1       * Load ')'
00001A82  303C 000E               1691      MOVE.W  #14,D0          * Trap #14 to display message
00001A86  4E4F                    1692      TRAP    #15             * Perform #14
00001A88                          1693       
00001A88  6000 00FA               1694      BRA     ENDEAHELPER05
00001A8C                          1695      
00001A8C                          1696  NOTADRINDIRECT * address register indirect, post increment
00001A8C                          1697      
00001A8C  0C46 0018               1698      CMPI    #%0000000000011000,D6 * is it address register indirect post increment?
00001A90  6600 002E               1699      BNE     NOTADRINDIRECTPOST
00001A94                          1700      
00001A94  43F9 0000232F           1701      LEA     OBRACK,A1       * Load '('
00001A9A  303C 000E               1702      MOVE.W  #14,D0          * Trap #14 to display message
00001A9E  4E4F                    1703      TRAP    #15             * Perform #14
00001AA0                          1704          
00001AA0                          1705  
00001AA0  6100 01E8               1706      BSR     MODE_AN * print out an address register
00001AA4                          1707      
00001AA4  43F9 00002331           1708      LEA     CBRACK,A1       * Load ')'
00001AAA  303C 000E               1709      MOVE.W  #14,D0          * Trap #14 to display message
00001AAE  4E4F                    1710      TRAP    #15             * Perform #14
00001AB0                          1711      
00001AB0  43F9 00002333           1712      LEA     PLUS,A1       * Load '+'
00001AB6  303C 000E               1713      MOVE.W  #14,D0          * Trap #14 to display message
00001ABA  4E4F                    1714      TRAP    #15             * Perform #14
00001ABC                          1715       
00001ABC  6000 00C6               1716      BRA     ENDEAHELPER05
00001AC0                          1717      
00001AC0                          1718  NOTADRINDIRECTPOST * address register indirect, pre decrement
00001AC0                          1719      
00001AC0  0C46 0020               1720      CMPI    #%0000000000100000,D6 * is it address register indirect pre decrement?
00001AC4  6600 002E               1721      BNE     NOTADRINDIRECTPRE
00001AC8                          1722      
00001AC8  43F9 00002335           1723      LEA     MINUS,A1       * Load '-'
00001ACE  303C 000E               1724      MOVE.W  #14,D0          * Trap #14 to display message
00001AD2  4E4F                    1725      TRAP    #15             * Perform #14
00001AD4                          1726      
00001AD4  43F9 0000232F           1727      LEA     OBRACK,A1       * Load '('
00001ADA  303C 000E               1728      MOVE.W  #14,D0          * Trap #14 to display message
00001ADE  4E4F                    1729      TRAP    #15             * Perform #14
00001AE0                          1730          
00001AE0                          1731  
00001AE0  6100 01A8               1732      BSR     MODE_AN * print out an address register
00001AE4                          1733      
00001AE4  43F9 00002331           1734      LEA     CBRACK,A1       * Load ')'
00001AEA  303C 000E               1735      MOVE.W  #14,D0          * Trap #14 to display message
00001AEE  4E4F                    1736      TRAP    #15             * Perform #14
00001AF0                          1737       
00001AF0  6000 0092               1738      BRA     ENDEAHELPER05
00001AF4                          1739  
00001AF4                          1740  NOTADRINDIRECTPRE * if none of the previous cases are true, it is a mode not supported by our decompiler
00001AF4                          1741  
00001AF4  0C46 0038               1742      CMPI    #%0000000000111000,D6 * is it immediate?
00001AF8  6600 0086               1743      BNE     NOTIMMEDIATE
00001AFC                          1744  
00001AFC  0C43 0001               1745      CMPI    #1,D3 * is it a byte?
00001B00  6600 0028               1746      BNE     NOTIMMBYTE
00001B04                          1747      
00001B04  43F9 0000232B           1748      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001B0A  103C 000E               1749      MOVE.B  #14,D0
00001B0E  4E4F                    1750      TRAP    #15
00001B10                          1751      
00001B10  3C3C 0000               1752      MOVE.W  #0, D6              * Prep lower value for bitmask
00001B14  3E3C 0007               1753      MOVE.W  #7, D7              * Prep upper value for bitmask
00001B18  6100 0728               1754      BSR     BITMASK             * Finalize bitmask setup
00001B1C                          1755          
00001B1C  321A                    1756      MOVE.W  (A2)+,D1
00001B1E                          1757      
00001B1E  C286                    1758      AND.L     D6,D1
00001B20                          1759          
00001B20  103C 0003               1760      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001B24  4E4F                    1761      TRAP    #15      * Perform Trap #3
00001B26                          1762      
00001B26  6000 005C               1763      BRA     ENDEAHELPER05
00001B2A                          1764  
00001B2A                          1765  NOTIMMBYTE
00001B2A                          1766      
00001B2A  0C43 0002               1767      CMPI    #2,D3 * is it a word?
00001B2E  6600 0028               1768      BNE     NOTIMMWORD
00001B32                          1769      
00001B32  43F9 0000232B           1770      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001B38  103C 000E               1771      MOVE.B  #14,D0
00001B3C  4E4F                    1772      TRAP    #15
00001B3E                          1773      
00001B3E  3C3C 0000               1774      MOVE.W  #0, D6              * Prep lower value for bitmask
00001B42  3E3C 000F               1775      MOVE.W  #15, D7             * Prep upper value for bitmask
00001B46  6100 06FA               1776      BSR     BITMASK             * Finalize bitmask setup
00001B4A                          1777          
00001B4A  321A                    1778      MOVE.W  (A2)+,D1
00001B4C                          1779      
00001B4C  C286                    1780      AND.L     D6,D1               * Apply bitmask
00001B4E                          1781          
00001B4E  103C 0003               1782      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001B52  4E4F                    1783      TRAP    #15      * Perform Trap #3
00001B54                          1784      
00001B54  6000 002E               1785      BRA     ENDEAHELPER05
00001B58                          1786      
00001B58                          1787  NOTIMMWORD
00001B58  0C43 0003               1788      CMPI    #3,D3 * is it a long?
00001B5C  6600 0022               1789      BNE     NOTIMMEDIATE
00001B60                          1790      
00001B60  43F9 0000232B           1791      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001B66  103C 000E               1792      MOVE.B  #14,D0
00001B6A  4E4F                    1793      TRAP    #15
00001B6C                          1794          
00001B6C  221A                    1795      MOVE.L  (A2)+,D1
00001B6E                          1796          
00001B6E  103C 0003               1797      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001B72  4E4F                    1798      TRAP    #15      * Perform Trap #3
00001B74                          1799      
00001B74  321A                    1800      MOVE.W  (A2)+,D1
00001B76                          1801          
00001B76  103C 0003               1802      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001B7A  4E4F                    1803      TRAP    #15      * Perform Trap #3
00001B7C                          1804      
00001B7C  6000 0006               1805      BRA     ENDEAHELPER05
00001B80                          1806  
00001B80                          1807  NOTIMMEDIATE    
00001B80                          1808  
00001B80                          1809  
00001B80  6100 0456               1810      BSR     UNKNOWNOP
00001B84                          1811      
00001B84                          1812  ENDEAHELPER05
00001B84  4C9F 03FF               1813      MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001B88  4E75                    1814      RTS
00001B8A                          1815  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001B8A                          1816  *-----------------------------------------------------------------------------
00001B8A                          1817  
00001B8A                          1818  
00001B8A                          1819  
00001B8A                          1820  *-----------------------------------------------------------------------------
00001B8A                          1821  *-----------------------------------------------------------------------------
00001B8A                          1822  * NAME:           MODE_DN
00001B8A                          1823  * DESCRIPTION:    Generalize the EA part of the project.
00001B8A                          1824  * PRE-CONDITION:  The mode must have been correctly identified. All modes
00001B8A                          1825  *                 must be called by RTS.
00001B8A                          1826  * POST-CONDITION: After the EA, the entire op will head back to the BSR that
00001B8A                          1827  *                 called it.
00001B8A                          1828  * REGISTERS:      a
00001B8A                          1829  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001B8A                          1830  * ---> Dn
00001B8A                          1831  MODE_DN
00001B8A  48A7 FFC0               1832          MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001B8E                          1833  
00001B8E  3C3C 0000               1834          MOVE.W  #0, D6              * Prep lower value for bitmask
00001B92  3E3C 0002               1835          MOVE.W  #2, D7              * Prep upper value for bitmask
00001B96  6100 06AA               1836          BSR     BITMASK             * Finalize bitmask setup
00001B9A  CC42                    1837          AND     D2,D6               * Apply bitmask
00001B9C                          1838          
00001B9C  0C46 0000               1839          CMPI    #%000000000000000, D6   * Data Register D0?
00001BA0  6600 000A               1840          BNE     NOTD0
00001BA4                          1841          
00001BA4  6100 0074               1842          BSR     PRINTD0
00001BA8  6000 006A               1843          BRA     ENDMODE_DN
00001BAC                          1844  NOTD0      
00001BAC  0C46 0001               1845          CMPI    #%000000000000001, D6   * Data Register D1?
00001BB0  6600 000A               1846          BNE     NOTD1
00001BB4                          1847          
00001BB4  6100 0072               1848          BSR     PRINTD1
00001BB8  6000 005A               1849          BRA     ENDMODE_DN
00001BBC                          1850  NOTD1
00001BBC  0C46 0002               1851          CMPI    #%000000000000010, D6   * Data Register D2?
00001BC0  6600 000A               1852          BNE     NOTD2
00001BC4                          1853          
00001BC4  6100 0070               1854          BSR     PRINTD2
00001BC8  6000 004A               1855          BRA     ENDMODE_DN
00001BCC                          1856  NOTD2
00001BCC  0C46 0003               1857          CMPI    #%000000000000011, D6   * Data Register D3?
00001BD0  6600 000A               1858          BNE     NOTD3
00001BD4                          1859          
00001BD4  6100 006E               1860          BSR     PRINTD3
00001BD8  6000 003A               1861          BRA     ENDMODE_DN
00001BDC                          1862  NOTD3
00001BDC  0C46 0004               1863          CMPI    #%000000000000100, D6   * Data Register D4?
00001BE0  6600 000A               1864          BNE     NOTD4
00001BE4                          1865          
00001BE4  6100 006C               1866          BSR     PRINTD4
00001BE8  6000 002A               1867          BRA     ENDMODE_DN
00001BEC                          1868  NOTD4
00001BEC  0C46 0005               1869          CMPI    #%000000000000101, D6   * Data Register D5?
00001BF0  6600 000A               1870          BNE     NOTD5
00001BF4                          1871          
00001BF4  6100 006A               1872          BSR     PRINTD5
00001BF8  6000 001A               1873          BRA     ENDMODE_DN
00001BFC                          1874  NOTD5
00001BFC  0C46 0006               1875          CMPI    #%000000000000110, D6   * Data Register D6?
00001C00  6600 000A               1876          BNE     NOTD6
00001C04                          1877          
00001C04  6100 0068               1878          BSR     PRINTD6
00001C08  6000 000A               1879          BRA     ENDMODE_DN
00001C0C                          1880  NOTD6
00001C0C  6100 006E               1881          BSR     PRINTD7
00001C10  6000 0002               1882          BRA     ENDMODE_DN
00001C14                          1883          
00001C14                          1884  ENDMODE_DN
00001C14  4C9F 03FF               1885          MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001C18  4E75                    1886          RTS
00001C1A                          1887  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001C1A                          1888  *-----------------------------------------------------------------------------
00001C1A                          1889  
00001C1A                          1890  
00001C1A                          1891  
00001C1A                          1892  *-----------------------------------------------------------------------------
00001C1A                          1893  *-----------------------------------------------------------------------------
00001C1A                          1894  * NAME:           PRINTD0
00001C1A                          1895  * DESCRIPTION:    Simply prints D0, D1, ..., up to D7.
00001C1A                          1896  * PRE-CONDITION:  a
00001C1A                          1897  * POST-CONDITION: a
00001C1A                          1898  * REGISTERS:      a
00001C1A                          1899  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001C1A                          1900  PRINTD0
00001C1A  43F9 0000235F           1901          LEA     __D0, A1        * Load 'D0'
00001C20  103C 000E               1902          MOVE.B  #14, D0         * Load Trap #14 to print out
00001C24  4E4F                    1903          TRAP    #15             * Perform Trap #14
00001C26  4E75                    1904          RTS
00001C28                          1905  PRINTD1
00001C28  43F9 00002362           1906          LEA     __D1, A1        * Load 'D1'
00001C2E  103C 000E               1907          MOVE.B  #14, D0         * Load Trap #14 to print out
00001C32  4E4F                    1908          TRAP    #15             * Perform Trap #14
00001C34  4E75                    1909          RTS      
00001C36                          1910  PRINTD2
00001C36  43F9 00002365           1911          LEA     __D2, A1        * Load 'D2'
00001C3C  103C 000E               1912          MOVE.B  #14, D0         * Load Trap #14 to print out
00001C40  4E4F                    1913          TRAP    #15             * Perform Trap #14
00001C42  4E75                    1914          RTS      
00001C44                          1915  PRINTD3
00001C44  43F9 00002368           1916          LEA     __D3, A1        * Load 'D3'
00001C4A  103C 000E               1917          MOVE.B  #14, D0         * Load Trap #14 to print out
00001C4E  4E4F                    1918          TRAP    #15             * Perform Trap #14
00001C50  4E75                    1919          RTS      
00001C52                          1920  PRINTD4
00001C52  43F9 0000236B           1921          LEA     __D4, A1        * Load 'D4'
00001C58  103C 000E               1922          MOVE.B  #14, D0         * Load Trap #14 to print out
00001C5C  4E4F                    1923          TRAP    #15             * Perform Trap #14
00001C5E  4E75                    1924          RTS       
00001C60                          1925  PRINTD5
00001C60  43F9 0000236E           1926          LEA     __D5, A1        * Load 'D5'
00001C66  103C 000E               1927          MOVE.B  #14, D0         * Load Trap #14 to print out
00001C6A  4E4F                    1928          TRAP    #15             * Perform Trap #14
00001C6C  4E75                    1929          RTS      
00001C6E                          1930  PRINTD6
00001C6E  43F9 00002371           1931          LEA     __D6, A1        * Load 'D6'
00001C74  103C 000E               1932          MOVE.B  #14, D0         * Load Trap #14 to print out
00001C78  4E4F                    1933          TRAP    #15             * Perform Trap #14
00001C7A  4E75                    1934          RTS
00001C7C                          1935  PRINTD7
00001C7C  43F9 00002374           1936          LEA     __D7, A1        * Load 'D7'
00001C82  103C 000E               1937          MOVE.B  #14, D0         * Load Trap #14 to print out
00001C86  4E4F                    1938          TRAP    #15             * Perform Trap #14
00001C88  4E75                    1939          RTS
00001C8A                          1940  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001C8A                          1941  *-----------------------------------------------------------------------------
00001C8A                          1942  
00001C8A                          1943  
00001C8A                          1944  
00001C8A                          1945  *-----------------------------------------------------------------------------
00001C8A                          1946  *-----------------------------------------------------------------------------
00001C8A                          1947  * NAME:           MODE_AN
00001C8A                          1948  * DESCRIPTION:    Simply chooses to print A0-A7.
00001C8A                          1949  * PRE-CONDITION:  a
00001C8A                          1950  * POST-CONDITION: a
00001C8A                          1951  * REGISTERS:      a
00001C8A                          1952  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001C8A                          1953  MODE_AN
00001C8A  48A7 FFC0               1954          MOVEM   D0-D7/A0-A1,-(A7)   * Save information
00001C8E                          1955  
00001C8E  3C3C 0000               1956          MOVE.W  #0, D6              * Prep lower value for bitmask
00001C92  3E3C 0002               1957          MOVE.W  #2, D7              * Prep upper value for bitmask
00001C96  6100 05AA               1958          BSR     BITMASK             * Finalize bitmask setup
00001C9A  CC42                    1959          AND     D2,D6               * Apply bitmask
00001C9C                          1960          
00001C9C  0C46 0000               1961          CMPI    #%000000000000000, D6   * Address Register A0?
00001CA0  6600 000A               1962          BNE     NOTA0
00001CA4                          1963          
00001CA4  6100 0074               1964          BSR     PRINTA0
00001CA8                          1965          
00001CA8  6000 006A               1966          BRA     ENDMODE_AN
00001CAC                          1967  NOTA0      
00001CAC  0C46 0001               1968          CMPI    #%000000000000001, D6   * Address Register A1?
00001CB0  6600 000A               1969          BNE     NOTA1
00001CB4                          1970          
00001CB4  6100 0072               1971          BSR     PRINTA1
00001CB8                          1972          
00001CB8  6000 005A               1973          BRA     ENDMODE_AN
00001CBC                          1974  NOTA1
00001CBC  0C46 0002               1975          CMPI    #%000000000000010, D6   * Address Register A2?
00001CC0  6600 000A               1976          BNE     NOTA2
00001CC4                          1977          
00001CC4  6100 0070               1978          BSR     PRINTA2
00001CC8                          1979          
00001CC8  6000 004A               1980          BRA     ENDMODE_AN
00001CCC                          1981  NOTA2
00001CCC  0C46 0003               1982          CMPI    #%000000000000011, D6   * Address Register A3?
00001CD0  6600 000A               1983          BNE     NOTA3
00001CD4                          1984          
00001CD4  6100 006E               1985          BSR     PRINTA3
00001CD8                          1986          
00001CD8  6000 003A               1987          BRA     ENDMODE_AN
00001CDC                          1988  NOTA3
00001CDC  0C46 0004               1989          CMPI    #%000000000000100, D6   * Address Register A4?
00001CE0  6600 000A               1990          BNE     NOTA4
00001CE4                          1991          
00001CE4  6100 006C               1992          BSR     PRINTA4
00001CE8                          1993          
00001CE8  6000 002A               1994          BRA     ENDMODE_AN
00001CEC                          1995  NOTA4
00001CEC  0C46 0005               1996          CMPI    #%000000000000101, D6   * Address Register A5?
00001CF0  6600 000A               1997          BNE     NOTA5
00001CF4                          1998          
00001CF4  6100 006A               1999          BSR     PRINTA5
00001CF8                          2000          
00001CF8  6000 001A               2001          BRA     ENDMODE_AN
00001CFC                          2002  NOTA5
00001CFC  0C46 0006               2003          CMPI    #%000000000000110, D6   * Address Register A6?
00001D00  6600 000A               2004          BNE     NOTA6
00001D04                          2005          
00001D04  6100 0068               2006          BSR     PRINTA6
00001D08                          2007          
00001D08  6000 000A               2008          BRA     ENDMODE_AN
00001D0C                          2009  NOTA6
00001D0C  6100 006E               2010          BSR     PRINTA7
00001D10                          2011          
00001D10  6000 0002               2012          BRA     ENDMODE_AN
00001D14                          2013  ENDMODE_AN
00001D14  4C9F 03FF               2014          MOVEM   (A7)+,D0-D7/A0-A1   * Restore registers
00001D18  4E75                    2015          RTS
00001D1A                          2016  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001D1A                          2017  *-----------------------------------------------------------------------------
00001D1A                          2018  
00001D1A                          2019  
00001D1A                          2020  
00001D1A                          2021  *-----------------------------------------------------------------------------
00001D1A                          2022  *-----------------------------------------------------------------------------
00001D1A                          2023  * NAME:           PRINTA0
00001D1A                          2024  * DESCRIPTION:    Simply print out the address register.
00001D1A                          2025  * PRE-CONDITION:  a
00001D1A                          2026  * POST-CONDITION: a
00001D1A                          2027  * REGISTERS:      a
00001D1A                          2028  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001D1A                          2029  PRINTA0
00001D1A  43F9 00002347           2030          LEA     __A0, A1        * Load 'A0'
00001D20  103C 000E               2031          MOVE.B  #14, D0         * Load Trap #14 to print out
00001D24  4E4F                    2032          TRAP    #15             * Perform Trap #14
00001D26  4E75                    2033          RTS
00001D28                          2034  
00001D28                          2035  PRINTA1
00001D28  43F9 0000234A           2036          LEA     __A1, A1        * Load 'A1'
00001D2E  103C 000E               2037          MOVE.B  #14, D0         * Load Trap #14 to print out
00001D32  4E4F                    2038          TRAP    #15             * Perform Trap #14
00001D34  4E75                    2039          RTS
00001D36                          2040          
00001D36                          2041  PRINTA2
00001D36  43F9 0000234D           2042          LEA     __A2, A1        * Load 'A2'
00001D3C  103C 000E               2043          MOVE.B  #14, D0         * Load Trap #14 to print out
00001D40  4E4F                    2044          TRAP    #15             * Perform Trap #14
00001D42  4E75                    2045          RTS
00001D44                          2046  
00001D44                          2047  PRINTA3
00001D44  43F9 00002350           2048          LEA     __A3, A1        * Load 'A3'
00001D4A  103C 000E               2049          MOVE.B  #14, D0         * Load Trap #14 to print out
00001D4E  4E4F                    2050          TRAP    #15             * Perform Trap #14
00001D50  4E75                    2051          RTS
00001D52                          2052  
00001D52                          2053  PRINTA4
00001D52  43F9 00002353           2054          LEA     __A4, A1        * Load 'A4'
00001D58  103C 000E               2055          MOVE.B  #14, D0         * Load Trap #14 to print out
00001D5C  4E4F                    2056          TRAP    #15             * Perform Trap #14
00001D5E  4E75                    2057          RTS
00001D60                          2058  
00001D60                          2059  PRINTA5
00001D60  43F9 00002356           2060          LEA     __A5, A1        * Load 'A5'
00001D66  103C 000E               2061          MOVE.B  #14, D0         * Load Trap #14 to print out
00001D6A  4E4F                    2062          TRAP    #15             * Perform Trap #14
00001D6C  4E75                    2063          RTS
00001D6E                          2064  
00001D6E                          2065  PRINTA6
00001D6E  43F9 00002359           2066          LEA     __A6, A1        * Load 'A6'
00001D74  103C 000E               2067          MOVE.B  #14, D0         * Load Trap #14 to print out
00001D78  4E4F                    2068          TRAP    #15             * Perform Trap #14
00001D7A  4E75                    2069          RTS
00001D7C                          2070  
00001D7C                          2071  PRINTA7
00001D7C  43F9 0000235C           2072          LEA     __A7, A1        * Load 'A7'
00001D82  103C 000E               2073          MOVE.B  #14, D0         * Load Trap #14 to print out
00001D86  4E4F                    2074          TRAP    #15             * Perform Trap #14
00001D88  4E75                    2075          RTS
00001D8A                          2076  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001D8A                          2077  *-----------------------------------------------------------------------------
00001D8A                          2078  
00001D8A                          2079  
00001D8A                          2080  
00001D8A                          2081  *-----------------------------------------------------------------------------
00001D8A                          2082  *-----------------------------------------------------------------------------
00001D8A                          2083  * NAME:           SIZE67
00001D8A                          2084  * DESCRIPTION:    Called if the size is stored in bits 6 to 7.
00001D8A                          2085  * PRE-CONDITION:  a
00001D8A                          2086  * POST-CONDITION: a
00001D8A                          2087  * REGISTERS:      a
00001D8A                          2088  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001D8A                          2089  SIZE67
00001D8A  48A7 FFFE               2090          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
00001D8E  3C3C 0006               2091          MOVE.W  #6, D6              * Prep lower value for bitmask
00001D92  3E3C 0007               2092          MOVE.W  #7, D7              * Prep upper value for bitmask
00001D96  6100 04AA               2093          BSR     BITMASK             * Finalize bitmask setup
00001D9A  CC42                    2094          AND     D2,D6               * Apply bitmask     
00001D9C                          2095  
00001D9C  0C46 0000               2096          CMPI    #%0000000000000000, D6   * is it a BYTE?
00001DA0  6600 000A               2097          BNE     NOT67BYTE
00001DA4                          2098          
00001DA4  6100 0080               2099          BSR     PRINTBYTE               * Branch to handle BYTE sizes
00001DA8  6000 001E               2100          BRA     END67
00001DAC                          2101  NOT67BYTE        
00001DAC  0C46 0040               2102          CMPI    #%0000000001000000, D6   * is it a WORD?
00001DB0  6600 000A               2103          BNE     NOT67WORD
00001DB4                          2104          
00001DB4  6100 007E               2105          BSR     PRINTWORD               * Branch to handle WORD sizes
00001DB8  6000 000E               2106          BRA     END67
00001DBC                          2107  NOT67WORD
00001DBC  0C46 0080               2108          CMPI    #%0000000010000000, D6   * is it a LONG?
00001DC0  6600 0006               2109          BNE     END67
00001DC4                          2110          
00001DC4  6100 007C               2111          BSR     PRINTLONG               * Branch to handle LONG sizes
00001DC8                          2112  END67
00001DC8  4C9F 7FFF               2113          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
00001DCC  4E75                    2114          RTS                             * Return. Size handling is finished.
00001DCE                          2115  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001DCE                          2116  *-----------------------------------------------------------------------------
00001DCE                          2117  
00001DCE                          2118  
00001DCE                          2119  
00001DCE                          2120  *-----------------------------------------------------------------------------
00001DCE                          2121  *-----------------------------------------------------------------------------
00001DCE                          2122  * NAME:           SIZE68
00001DCE                          2123  * DESCRIPTION:    Called if the size is stored in bits 6 to 8.
00001DCE                          2124  * PRE-CONDITION:  a
00001DCE                          2125  * POST-CONDITION: a
00001DCE                          2126  * REGISTERS:      a
00001DCE                          2127  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001DCE                          2128  SIZE68
00001DCE                          2129          * finish later, need to follow the same format as SIZE67
00001DCE                          2130          
00001DCE                          2131          
00001DCE  48A7 FFFE               2132          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
00001DD2  3C3C 0006               2133          MOVE.W  #6, D6              * Prep lower value for bitmask
00001DD6  3E3C 0008               2134          MOVE.W  #8, D7              * Prep upper value for bitmask
00001DDA  6100 0466               2135          BSR     BITMASK             * Finalize bitmask setup
00001DDE  CC42                    2136          AND     D2,D6               * Apply bitmask          
00001DE0                          2137          
00001DE0  0C46 0000               2138          CMPI    #%0000000000000000, D6   * is it a BYTE?
00001DE4  6100 0040               2139          BSR     PRINTBYTE               * Branch to handle BYTE sizes
00001DE8  0C46 0100               2140          CMPI    #%0000000100000000, D6   * is it a BYTE?
00001DEC  6100 0038               2141          BSR     PRINTBYTE               * Branch to handle BYTE sizes 
00001DF0                          2142        
00001DF0  0C46 0040               2143          CMPI    #%0000000001000000, D6   * is it a WORD?
00001DF4  6100 003E               2144          BSR     PRINTWORD               * Branch to handle BYTE sizes
00001DF8  0C46 0140               2145          CMPI    #%0000000101000000, D6   * is it a WORD?
00001DFC  6100 0036               2146          BSR     PRINTWORD               * Branch to handle BYTE sizes
00001E00  0C46 00C0               2147          CMPI    #%0000000011000000, D6   * is it a WORD (ADDA)?
00001E04  6100 002E               2148          BSR     PRINTWORD               * Branch to handle BYTE sizes
00001E08                          2149  
00001E08  0C46 0080               2150          CMPI    #%0000000010000000, D6   * is it a LONG?
00001E0C  6100 0034               2151          BSR     PRINTLONG               * Branch to handle BYTE sizes
00001E10  0C46 0180               2152          CMPI    #%0000000110000000, D6   * is it a LONG?
00001E14  6100 002C               2153          BSR     PRINTLONG               * Branch to handle BYTE sizes
00001E18  0C46 01C0               2154          CMPI    #%0000000111000000, D6   * is it a LONG (ADDA)?
00001E1C  6100 0024               2155          BSR     PRINTLONG               * Branch to handle BYTE sizes
00001E20                          2156  
00001E20  4C9F 7FFF               2157          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
00001E24  4E75                    2158          RTS                             * Return. Size handling is finished.
00001E26                          2159  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001E26                          2160  *-----------------------------------------------------------------------------
00001E26                          2161  
00001E26                          2162  
00001E26                          2163  
00001E26                          2164  *-----------------------------------------------------------------------------
00001E26                          2165  *-----------------------------------------------------------------------------
00001E26                          2166  * NAME:           PRINTBYTE
00001E26                          2167  * DESCRIPTION:    a
00001E26                          2168  * PRE-CONDITION:  a
00001E26                          2169  * POST-CONDITION: a
00001E26                          2170  * REGISTERS:      a
00001E26                          2171  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001E26                          2172  PRINTBYTE
00001E26  43F9 0000233B           2173          LEA     __B,A1      * Load '.B ' into A1
00001E2C  103C 000E               2174          MOVE.B  #14,D0      * Trap #14 setup to print
00001E30  4E4F                    2175          TRAP    #15         * Perform Trap #14
00001E32  4E75                    2176          RTS                 * Return to SIZE67/SIZE68
00001E34                          2177          
00001E34                          2178  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001E34                          2179  *-----------------------------------------------------------------------------
00001E34                          2180  
00001E34                          2181  
00001E34                          2182  
00001E34                          2183  *-----------------------------------------------------------------------------
00001E34                          2184  *-----------------------------------------------------------------------------
00001E34                          2185  * NAME:           PRINTWORD
00001E34                          2186  * DESCRIPTION:    a
00001E34                          2187  * PRE-CONDITION:  a
00001E34                          2188  * POST-CONDITION: a
00001E34                          2189  * REGISTERS:      a
00001E34                          2190  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001E34                          2191  PRINTWORD
00001E34  43F9 0000233F           2192          LEA     __W,A1      * Load '.W ' into A1
00001E3A  103C 000E               2193          MOVE.B  #14,D0      * Trap #14 setup to print
00001E3E  4E4F                    2194          TRAP    #15         * Perform Trap #14
00001E40  4E75                    2195          RTS                 * Return to SIZE67/SIZE68
00001E42                          2196          
00001E42                          2197  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001E42                          2198  *-----------------------------------------------------------------------------
00001E42                          2199  
00001E42                          2200  
00001E42                          2201  
00001E42                          2202  *-----------------------------------------------------------------------------
00001E42                          2203  *-----------------------------------------------------------------------------
00001E42                          2204  * NAME:           PRINTLONG
00001E42                          2205  * DESCRIPTION:    a
00001E42                          2206  * PRE-CONDITION:  a
00001E42                          2207  * POST-CONDITION: a
00001E42                          2208  * REGISTERS:      a
00001E42                          2209  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001E42                          2210  PRINTLONG
00001E42  43F9 00002343           2211          LEA     __L,A1      * Load '.L ' into A1
00001E48  103C 000E               2212          MOVE.B  #14,D0      * Trap #14 setup to print
00001E4C  4E4F                    2213          TRAP    #15         * Perform Trap #14
00001E4E  4E75                    2214          RTS                 * Return to SIZE67/SIZE68
00001E50                          2215          
00001E50                          2216  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001E50                          2217  *-----------------------------------------------------------------------------
00001E50                          2218  
00001E50                          2219  
00001E50                          2220  
00001E50                          2221  *-----------------------------------------------------------------------------
00001E50                          2222  *-----------------------------------------------------------------------------
00001E50                          2223  * NAME:           MOVEMHELPERPOST
00001E50                          2224  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
00001E50                          2225  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
00001E50                          2226  * POST-CONDITION: The registers being saved are printed
00001E50                          2227  * REGISTERS:      A2
00001E50                          2228  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001E50                          2229  MOVEMHELPERPOST
00001E50  48A7 FFFE               2230          MOVEM  D0-D7/A0-A6,-(A7)
00001E54                          2231          
00001E54  4285                    2232          CLR.L   D5  * to be used as a loop counter
00001E56  4284                    2233          CLR.L   D4  * == 1 if we have printed any registers (for fencepost issue)
00001E58  4283                    2234          CLR.L   D3  * == 1 if we are in a range
00001E5A  4286                    2235          CLR.L   D6  * == 1 if we have already printed the slash or dash
00001E5C  4287                    2236          CLR.L   D7  * == counts the number of registers in a range
00001E5E  1C3C 0001               2237          MOVE.B  #1,D6 * to fix fencepost issue
00001E62  4282                    2238          CLR.L   D2
00001E64  3412                    2239          MOVE.W  (A2),D2
00001E66                          2240          
00001E66                          2241  DLOOP * loop to print out the data register portion of the addresses being saved
00001E66                          2242  
00001E66  E25A                    2243          ROR     #1,D2
00001E68  6500 0006               2244          BCS     DVALID
00001E6C                          2245          
00001E6C  6000 0064               2246          BRA     DINVALID
00001E70                          2247          
00001E70                          2248  DVALID
00001E70  0C43 0000               2249          CMPI    #0,D3
00001E74  6700 0020               2250          BEQ     DFORWARDVALID * we are not in a range
00001E78                          2251          
00001E78  5247                    2252          ADDI    #1,D7 *increment number of regs in range
00001E7A                          2253          
00001E7A  0C46 0001               2254          CMPI    #1,D6   *have we already printed a symbol?
00001E7E  6700 0084               2255          BEQ     DLOOPITER
00001E82                          2256          
00001E82  43F9 00002339           2257          LEA     DASH,A1    *print a dash
00001E88  103C 000E               2258          MOVE.B  #14,D0
00001E8C  4E4F                    2259          TRAP    #15
00001E8E                          2260          
00001E8E  1C3C 0001               2261          MOVE.B  #1,D6 * indicates a symbol has been printed
00001E92                          2262          
00001E92  6000 0070               2263          BRA     DLOOPITER
00001E96                          2264          
00001E96                          2265  DFORWARDVALID
00001E96                          2266          * not in a range yet, print
00001E96                          2267          
00001E96  0C44 0000               2268          CMPI    #0,D4
00001E9A  6700 000E               2269          BEQ     DNOSLASH
00001E9E                          2270                  
00001E9E  43F9 00002337           2271          LEA     SLASH,A1
00001EA4  103C 000E               2272          MOVE.B  #14,D0
00001EA8  4E4F                    2273          TRAP    #15
00001EAA                          2274          
00001EAA                          2275  DNOSLASH
00001EAA                          2276  
00001EAA  183C 0001               2277          MOVE.B  #1,D4 * we have printed something, now slashes are fair game
00001EAE                          2278          
00001EAE  1C3C 0001               2279          MOVE.B  #1,D6   * we have printed a symbol
00001EB2                          2280          
00001EB2  43F9 00002321           2281          LEA     ASCII_D,A1
00001EB8  103C 000E               2282          MOVE.B  #14,D0
00001EBC  4E4F                    2283          TRAP    #15
00001EBE                          2284          
00001EBE  2205                    2285          MOVE.L  D5,D1
00001EC0  103C 0003               2286          MOVE.B  #3,D0
00001EC4  4E4F                    2287          TRAP    #15
00001EC6                          2288  
00001EC6  163C 0001               2289          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
00001ECA  1C3C 0000               2290          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
00001ECE                          2291          
00001ECE  6000 0034               2292          BRA     DLOOPITER
00001ED2                          2293  
00001ED2                          2294  
00001ED2                          2295  DINVALID
00001ED2                          2296  
00001ED2                          2297          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
00001ED2                          2298          
00001ED2  0C43 0001               2299          CMPI    #1,D3
00001ED6  6600 002C               2300          BNE     DLOOPITER
00001EDA                          2301          
00001EDA  163C 0000               2302          MOVE.B  #0,D3
00001EDE                          2303          
00001EDE  0C47 0001               2304          CMPI    #1,D7
00001EE2  6D00 001E               2305          BLT     DLOOPITERCLR
00001EE6                          2306          
00001EE6  43F9 00002321           2307          LEA     ASCII_D,A1
00001EEC  103C 000E               2308          MOVE.B  #14,D0
00001EF0  4E4F                    2309          TRAP    #15
00001EF2                          2310          
00001EF2  2205                    2311          MOVE.L  D5,D1
00001EF4                          2312          
00001EF4  0641 FFFF               2313          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
00001EF8                          2314          
00001EF8  103C 0003               2315          MOVE.B  #3,D0
00001EFC  4E4F                    2316          TRAP    #15
00001EFE                          2317          
00001EFE  6000 0004               2318          BRA     DLOOPITER
00001F02                          2319          
00001F02                          2320  DLOOPITERCLR        
00001F02  4287                    2321          CLR.L   D7
00001F04                          2322  
00001F04                          2323  DLOOPITER
00001F04                          2324          
00001F04  0C45 0008               2325          CMPI    #8,D5
00001F08  6700 0008               2326          BEQ     DLOOPDONE
00001F0C                          2327  
00001F0C  5245                    2328          ADDI    #1,D5
00001F0E  6000 FF56               2329          BRA     DLOOP
00001F12                          2330  
00001F12                          2331  DLOOPDONE
00001F12                          2332  
00001F12  7A09                    2333          MOVE.L  #9,D5  * to be used as a loop counter
00001F14  4283                    2334          CLR.L   D3  * == 1 if we are in a range
00001F16  4286                    2335          CLR.L   D6  * == 1 if we have already printed the slash or dash
00001F18  4287                    2336          CLR.L   D7  * count of registers in a range
00001F1A  1C3C 0001               2337          MOVE.B  #1,D6 * to fix fencepost issue     
00001F1E                          2338  
00001F1E                          2339  ALOOP * loop to print out the data register portion of the addresses being saved
00001F1E                          2340  
00001F1E  E25A                    2341          ROR     #1,D2
00001F20  6500 0006               2342          BCS     AVALID
00001F24                          2343          
00001F24  6000 0068               2344          BRA     AINVALID
00001F28                          2345          
00001F28                          2346  AVALID
00001F28  0C43 0000               2347          CMPI    #0,D3
00001F2C  6700 0020               2348          BEQ     AFORWARDVALID * we are not in a range
00001F30                          2349          
00001F30  5247                    2350          ADDI    #1,D7 *increment number of regs in range
00001F32                          2351          
00001F32  0C46 0001               2352          CMPI    #1,D6   *have we already printed a symbol?
00001F36  6700 008C               2353          BEQ     ALOOPITER
00001F3A                          2354          
00001F3A  43F9 00002339           2355          LEA     DASH,A1    *print a dash
00001F40  103C 000E               2356          MOVE.B  #14,D0
00001F44  4E4F                    2357          TRAP    #15
00001F46                          2358          
00001F46  1C3C 0001               2359          MOVE.B  #1,D6 * indicates a symbol has been printed
00001F4A                          2360          
00001F4A  6000 0078               2361          BRA     ALOOPITER
00001F4E                          2362          
00001F4E                          2363  AFORWARDVALID
00001F4E                          2364          * not in a range yet, print
00001F4E                          2365          
00001F4E                          2366                  
00001F4E  0C44 0000               2367          CMPI    #0,D4
00001F52  6700 000E               2368          BEQ     ANOSLASH
00001F56                          2369                  
00001F56  43F9 00002337           2370          LEA     SLASH,A1
00001F5C  103C 000E               2371          MOVE.B  #14,D0
00001F60  4E4F                    2372          TRAP    #15
00001F62                          2373          
00001F62                          2374  ANOSLASH
00001F62                          2375  
00001F62  183C 0001               2376          MOVE.B  #1,D4   * we have printed something, now slashes are fair game
00001F66                          2377          
00001F66  1C3C 0001               2378          MOVE.B  #1,D6   * we have printed a symbol
00001F6A                          2379          
00001F6A  43F9 0000231B           2380          LEA     ASCII_A,A1
00001F70  103C 000E               2381          MOVE.B  #14,D0
00001F74  4E4F                    2382          TRAP    #15
00001F76                          2383          
00001F76  2205                    2384          MOVE.L  D5,D1
00001F78                          2385          
00001F78  0641 FFF8               2386          ADDI    #-8,D1 * it's A, need to adjust by 8
00001F7C                          2387          
00001F7C  103C 0003               2388          MOVE.B  #3,D0
00001F80  4E4F                    2389          TRAP    #15
00001F82                          2390  
00001F82  163C 0001               2391          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
00001F86  1C3C 0000               2392          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
00001F8A                          2393          
00001F8A  6000 0038               2394          BRA     ALOOPITER
00001F8E                          2395  
00001F8E                          2396  
00001F8E                          2397  AINVALID
00001F8E                          2398  
00001F8E                          2399          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
00001F8E                          2400          
00001F8E  0C43 0001               2401          CMPI    #1,D3
00001F92  6600 0030               2402          BNE     ALOOPITER
00001F96                          2403          
00001F96  163C 0000               2404          MOVE.B  #0,D3
00001F9A                          2405          
00001F9A  0C47 0001               2406          CMPI    #1,D7
00001F9E  6D00 0022               2407          BLT     ALOOPITERCLR
00001FA2                          2408          
00001FA2  43F9 0000231B           2409          LEA     ASCII_A,A1
00001FA8  103C 000E               2410          MOVE.B  #14,D0
00001FAC  4E4F                    2411          TRAP    #15
00001FAE                          2412          
00001FAE  2205                    2413          MOVE.L  D5,D1
00001FB0                          2414          
00001FB0  0641 FFFF               2415          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
00001FB4  0641 FFF8               2416          ADDI    #-8,D1 * it's A, need to adjust by 8
00001FB8                          2417          
00001FB8  103C 0003               2418          MOVE.B  #3,D0
00001FBC  4E4F                    2419          TRAP    #15
00001FBE                          2420          
00001FBE  6000 0004               2421          BRA     ALOOPITER
00001FC2                          2422          
00001FC2                          2423  ALOOPITERCLR
00001FC2                          2424          
00001FC2  4287                    2425          CLR.L   D7
00001FC4                          2426  
00001FC4                          2427  ALOOPITER
00001FC4                          2428          
00001FC4  0C45 0010               2429          CMPI     #16,D5
00001FC8  6700 0008               2430          BEQ     ALOOPDONE
00001FCC                          2431  
00001FCC  5245                    2432          ADDI    #1,D5
00001FCE  6000 FF4E               2433          BRA     ALOOP
00001FD2                          2434  
00001FD2                          2435  ALOOPDONE
00001FD2                          2436          
00001FD2  4C9F 7FFF               2437          MOVEM    (A7)+,D0-D7/A0-A6
00001FD6  4E75                    2438          RTS
00001FD8                          2439  
00001FD8                          2440          
00001FD8                          2441  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001FD8                          2442  *-----------------------------------------------------------------------------
00001FD8                          2443  
00001FD8                          2444  
00001FD8                          2445  
00001FD8                          2446  
00001FD8                          2447  *-----------------------------------------------------------------------------
00001FD8                          2448  *-----------------------------------------------------------------------------
00001FD8                          2449  * NAME:           MOVEMHELPERPRE
00001FD8                          2450  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
00001FD8                          2451  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
00001FD8                          2452  * POST-CONDITION: The registers being saved are printed
00001FD8                          2453  * REGISTERS:      A2
00001FD8                          2454  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001FD8                          2455  MOVEMHELPERPRE
00001FD8                          2456  
00001FD8                          2457          
00001FD8                          2458  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001FD8                          2459  *-----------------------------------------------------------------------------
00001FD8                          2460  
00001FD8                          2461  
00001FD8                          2462  
00001FD8                          2463  *-----------------------------------------------------------------------------
00001FD8                          2464  *-----------------------------------------------------------------------------
00001FD8                          2465  * NAME:           UNKNOWNOP
00001FD8                          2466  * DESCRIPTION:    a
00001FD8                          2467  * PRE-CONDITION:  D2 contains the instruction to print. D2 has already been
00001FD8                          2468  *                 identified as an unknown operation.
00001FD8                          2469  * POST-CONDITION: D2 is no longer the opcode.
00001FD8                          2470  * REGISTERS:      a
00001FD8                          2471  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001FD8                          2472  UNKNOWNOP
00001FD8  220A                    2473          MOVE.L  A2,D1   * prep the add to print
00001FDA                          2474          
00001FDA  5581                    2475          SUB.L   #2,D1   * off by two error due to post increment correct
00001FDC                          2476          
00001FDC  2602                    2477          MOVE.L  D2,D3   * save the opcode to print
00001FDE                          2478          
00001FDE  7410                    2479          MOVE.L  #16,D2  * set the base to 16
00001FE0                          2480          
00001FE0  700F                    2481          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
00001FE2  4E4F                    2482          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
00001FE4                          2483          
00001FE4  43F9 000022E1           2484          LEA     DATA,A1 * load " DATA $" into register A1
00001FEA  700E                    2485          MOVE.L  #14,D0  * print the string stored in A1
00001FEC  4E4F                    2486          TRAP    #15
00001FEE                          2487          
00001FEE  2203                    2488          MOVE.L  D3,D1   * move the opcode from D3 into D1 to print
00001FF0                          2489          
00001FF0  103C 000F               2490          MOVE.B  #15,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001FF4  4E4F                    2491          TRAP    #15      * Perform Trap #3
00001FF6                          2492  
00001FF6  43F9 00002286           2493          LEA     NEWLINE,A1 * load newline into register A1
00001FFC  700E                    2494          MOVE.L  #14,D0  * print the string stored in A1
00001FFE  4E4F                    2495          TRAP    #15
00002000                          2496  
00002000  4E75                    2497          RTS
00002002                          2498  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002002                          2499  *-----------------------------------------------------------------------------
00002002                          2500  
00002002                          2501  
00002002                          2502  
00002002                          2503  *-----------------------------------------------------------------------------
00002002                          2504  *-----------------------------------------------------------------------------
00002002                          2505  * NAME: Print ASCII hex char
00002002                          2506  * DESCRIPTION:    Prints and address register to console in hex (ASCII chars)
00002002                          2507  * PRE-CONDITION:  A6 contains the register of memory to print.
00002002                          2508  *                 This parameter would be pre-loaded by, for example:
00002002                          2509  *                 "LEA FOO_BAR_ADDR,A6" or "LEA $1234FEED,A6"
00002002                          2510  *                 D3 contains the loops to do (number of bytes).
00002002                          2511  * POST-CONDITION: 
00002002                          2512  * REGISTERS:      
00002002                          2513  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002002                          2514  PRINT_ASCII_HEX_CHAR
00002002  48E7 FFFC               2515      MOVEM.L     D0-D7/A0-A5,-(A7) * push data to save
00002006  4285                    2516      CLR.L       D5
00002008                          2517      
00002008                          2518      * fence post check (if-statement, check if 0 > chars)
00002008  0C03 0000               2519      CMPI.B      #0,D3
0000200C  6700 017C               2520      BEQ         INVALID_ASCII_INPUT * go to very last part if invalid
00002010                          2521      
00002010                          2522  *    MOVE.L      A6,D4
00002010  2E0E                    2523      MOVE.L      A6,D7
00002012                          2524  PRINT_ASCII_LOOP
00002012                          2525  *    MOVE.L      A6,D7 * increase a6's pointer position ea. loop
00002012                          2526  *    MOVE.L      D4,D7 * make a mutable copy
00002012  E99F                    2527      ROL.L       #4,D7 * roll to next spot
00002014  48E7 0100               2528      MOVEM.L     D7,-(A7) * save D7
00002018                          2529  
00002018  0287 0000000F           2530      ANDI.L      #HEX_VALUE_MASK_LONG,D7
0000201E                          2531      
0000201E  0C87 00000000           2532      CMPI.L      #0,D7
00002024  6D00 0164               2533      BLT         INVALID_ASCII_INPUT
00002028                          2534  
00002028  0C87 0000000F           2535      CMPI.L      #15,D7
0000202E  6E00 015A               2536      BGT         INVALID_ASCII_INPUT
00002032                          2537  
00002032                          2538      * this might be faster... to do later, after entire assignment done
00002032                          2539       * CMPI.L      #9,D7
00002032                          2540       * BLE         PRINT_ASCII_0_TO_9
00002032                          2541  
00002032  0C87 00000000           2542      CMPI.L      #0,D7
00002038  6700 0098               2543      BEQ         PRINT_ASCII_0
0000203C  0C87 00000001           2544      CMPI.L      #1,D7
00002042  6700 0098               2545      BEQ         PRINT_ASCII_1
00002046  0C87 00000002           2546      CMPI.L      #2,D7
0000204C  6700 0098               2547      BEQ         PRINT_ASCII_2
00002050  0C87 00000003           2548      CMPI.L      #3,D7
00002056  6700 0098               2549      BEQ         PRINT_ASCII_3
0000205A  0C87 00000004           2550      CMPI.L      #4,D7
00002060  6700 0098               2551      BEQ         PRINT_ASCII_4
00002064  0C87 00000005           2552      CMPI.L      #5,D7
0000206A  6700 0098               2553      BEQ         PRINT_ASCII_5
0000206E  0C87 00000006           2554      CMPI.L      #6,D7
00002074  6700 0098               2555      BEQ         PRINT_ASCII_6
00002078  0C87 00000007           2556      CMPI.L      #7,D7
0000207E  6700 0098               2557      BEQ         PRINT_ASCII_7
00002082  0C87 00000008           2558      CMPI.L      #8,D7
00002088  6700 0098               2559      BEQ         PRINT_ASCII_8
0000208C  0C87 00000009           2560      CMPI.L      #9,D7
00002092  6700 0098               2561      BEQ         PRINT_ASCII_9
00002096  0C87 0000000A           2562      CMPI.L      #10,D7
0000209C  6700 0098               2563      BEQ         PRINT_ASCII_A
000020A0  0C87 0000000B           2564      CMPI.L      #11,D7
000020A6  6700 0098               2565      BEQ         PRINT_ASCII_B
000020AA  0C87 0000000C           2566      CMPI.L      #12,D7
000020B0  6700 0098               2567      BEQ         PRINT_ASCII_C
000020B4  0C87 0000000D           2568      CMPI.L      #13,D7
000020BA  6700 0098               2569      BEQ         PRINT_ASCII_D
000020BE  0C87 0000000E           2570      CMPI.L      #14,D7
000020C4  6700 0098               2571      BEQ         PRINT_ASCII_E
000020C8  0C87 0000000F           2572      CMPI.L      #15,D7
000020CE  6700 0098               2573      BEQ         PRINT_ASCII_F
000020D2                          2574  PRINT_ASCII_0
000020D2  43F9 00002307           2575      LEA         ASCII_0,A1
000020D8  6000 0098               2576      BRA         PRINT_ASCII_CHAR
000020DC                          2577  PRINT_ASCII_1
000020DC  43F9 00002309           2578      LEA         ASCII_1,A1
000020E2  6000 008E               2579      BRA         PRINT_ASCII_CHAR
000020E6                          2580  PRINT_ASCII_2
000020E6  43F9 0000230B           2581      LEA         ASCII_2,A1
000020EC  6000 0084               2582      BRA         PRINT_ASCII_CHAR
000020F0                          2583  PRINT_ASCII_3
000020F0  43F9 0000230D           2584      LEA         ASCII_3,A1
000020F6  6000 007A               2585      BRA         PRINT_ASCII_CHAR
000020FA                          2586  PRINT_ASCII_4
000020FA  43F9 0000230F           2587      LEA         ASCII_4,A1
00002100  6000 0070               2588      BRA         PRINT_ASCII_CHAR
00002104                          2589  PRINT_ASCII_5
00002104  43F9 00002311           2590      LEA         ASCII_5,A1
0000210A  6000 0066               2591      BRA         PRINT_ASCII_CHAR
0000210E                          2592  PRINT_ASCII_6
0000210E  43F9 00002313           2593      LEA         ASCII_6,A1
00002114  6000 005C               2594      BRA         PRINT_ASCII_CHAR
00002118                          2595  PRINT_ASCII_7
00002118  43F9 00002315           2596      LEA         ASCII_7,A1
0000211E  6000 0052               2597      BRA         PRINT_ASCII_CHAR
00002122                          2598  PRINT_ASCII_8
00002122  43F9 00002317           2599      LEA         ASCII_8,A1
00002128  6000 0048               2600      BRA         PRINT_ASCII_CHAR
0000212C                          2601  PRINT_ASCII_9
0000212C  43F9 00002319           2602      LEA         ASCII_9,A1
00002132  6000 003E               2603      BRA         PRINT_ASCII_CHAR
00002136                          2604  PRINT_ASCII_A
00002136  43F9 0000231B           2605      LEA         ASCII_A,A1
0000213C  6000 0034               2606      BRA         PRINT_ASCII_CHAR
00002140                          2607  PRINT_ASCII_B
00002140  43F9 0000231D           2608      LEA         ASCII_B,A1
00002146  6000 002A               2609      BRA         PRINT_ASCII_CHAR
0000214A                          2610  PRINT_ASCII_C
0000214A  43F9 0000231F           2611      LEA         ASCII_C,A1
00002150  6000 0020               2612      BRA         PRINT_ASCII_CHAR
00002154                          2613  PRINT_ASCII_D
00002154  43F9 00002321           2614      LEA         ASCII_D,A1
0000215A  6000 0016               2615      BRA         PRINT_ASCII_CHAR
0000215E                          2616  PRINT_ASCII_E
0000215E  43F9 00002323           2617      LEA         ASCII_E,A1
00002164  6000 000C               2618      BRA         PRINT_ASCII_CHAR
00002168                          2619  PRINT_ASCII_F
00002168  43F9 00002325           2620      LEA         ASCII_F,A1
0000216E  6000 0002               2621      BRA         PRINT_ASCII_CHAR
00002172                          2622  PRINT_ASCII_CHAR
00002172  103C 000E               2623      MOVE.B      #14,D0
00002176  4E4F                    2624      TRAP        #15
00002178                          2625      
00002178                          2626          
00002178  4287                    2627      CLR.L       D7
0000217A  4CDF 0080               2628      MOVEM.L     (A7)+,D7 * copy back D7 from stack, to mutate its' bits
0000217E                          2629      
0000217E  5205                    2630      ADD.B       #1,D5 * loop until counter stops
00002180  BA03                    2631      CMP.B       D3,D5
00002182  6C00 0006               2632      BGE         PRINT_ASCII_FINISH
00002186                          2633      
00002186  6000 FE8A               2634      BRA         PRINT_ASCII_LOOP
0000218A                          2635  INVALID_ASCII_INPUT
0000218A                          2636  PRINT_ASCII_FINISH
0000218A  4CDF 3FFF               2637      MOVEM.L     (A7)+,D0-D7/A0-A5 * pop saved memory
0000218E  4E75                    2638      RTS
00002190                          2639      
00002190                          2640  PRINTDATA911
00002190  0C46 0E00               2641      CMPI    #%0000111000000000, D6   * Print 7
00002194  6700 003C               2642      BEQ     PRINT7   
00002198  0C46 0C00               2643      CMPI    #%0000110000000000, D6   * Print 6
0000219C  6700 0042               2644      BEQ     PRINT6
000021A0  0C46 0A00               2645      CMPI    #%0000101000000000, D6   * Print 5
000021A4  6700 0048               2646      BEQ     PRINT5
000021A8  0C46 0800               2647      CMPI    #%0000100000000000, D6   * Print 4
000021AC  6700 004E               2648      BEQ     PRINT4 
000021B0  0C46 0600               2649      CMPI    #%0000011000000000, D6   * Print 3
000021B4  6700 0054               2650      BEQ     PRINT3    
000021B8  0C46 0400               2651      CMPI    #%0000010000000000, D6   * Print 2
000021BC  6700 005A               2652      BEQ     PRINT2   
000021C0  0C46 0200               2653      CMPI    #%0000001000000000, D6   * Print 1
000021C4  6700 0060               2654      BEQ     PRINT1     
000021C8  0C46 0000               2655      CMPI    #%0000000000000000, D6   * Print 0
000021CC  6700 0066               2656      BEQ     PRINT8
000021D0                          2657      
000021D0  4E75                    2658      RTS                             * Fail case  
000021D2                          2659      
000021D2                          2660  PRINT7
000021D2  43F9 00002315           2661      LEA     ASCII_7, A1
000021D8  103C 000E               2662      MOVE.B      #14,D0
000021DC  4E4F                    2663      TRAP        #15
000021DE  4E75                    2664      RTS
000021E0                          2665      
000021E0                          2666  PRINT6
000021E0  43F9 00002313           2667      LEA     ASCII_6, A1
000021E6  103C 000E               2668      MOVE.B      #14,D0
000021EA  4E4F                    2669      TRAP        #15
000021EC  4E75                    2670      RTS
000021EE                          2671      
000021EE                          2672  PRINT5
000021EE  43F9 00002311           2673      LEA     ASCII_5, A1
000021F4  103C 000E               2674      MOVE.B      #14,D0
000021F8  4E4F                    2675      TRAP        #15
000021FA  4E75                    2676      RTS
000021FC                          2677      
000021FC                          2678  PRINT4
000021FC  43F9 0000230F           2679      LEA     ASCII_4, A1
00002202  103C 000E               2680      MOVE.B      #14,D0
00002206  4E4F                    2681      TRAP        #15
00002208  4E75                    2682      RTS
0000220A                          2683      
0000220A                          2684  PRINT3
0000220A  43F9 0000230D           2685      LEA     ASCII_3, A1
00002210  103C 000E               2686      MOVE.B      #14,D0
00002214  4E4F                    2687      TRAP        #15
00002216  4E75                    2688      RTS
00002218                          2689      
00002218                          2690  PRINT2
00002218  43F9 0000230B           2691      LEA     ASCII_2, A1
0000221E  103C 000E               2692      MOVE.B      #14,D0
00002222  4E4F                    2693      TRAP        #15
00002224  4E75                    2694      RTS
00002226                          2695      
00002226                          2696  PRINT1
00002226  43F9 00002309           2697      LEA     ASCII_1, A1
0000222C  103C 000E               2698      MOVE.B      #14,D0
00002230  4E4F                    2699      TRAP        #15
00002232  4E75                    2700      RTS
00002234                          2701          
00002234                          2702  PRINT8
00002234  43F9 00002317           2703      LEA     ASCII_8, A1
0000223A  103C 000E               2704      MOVE.B      #14,D0
0000223E  4E4F                    2705      TRAP        #15
00002240  4E75                    2706      RTS
00002242                          2707  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002242                          2708  *-----------------------------------------------------------------------------
00002242                          2709  
00002242                          2710  
00002242                          2711  
00002242                          2712  *-----------------------------------------------------------------------------
00002242                          2713  *-----------------------------------------------------------------------------
00002242                          2714  * NAME: Bitmask
00002242                          2715  * DESCRIPTION:    Masks bits in a data register.
00002242                          2716  * PRE-CONDITION:  D6 contains the starting bit to be masked, and D7 contains
00002242                          2717  *                 the ending bit.  For example, a starting bit of decimal
00002242                          2718  *                 value 0 and an ending bit of decimal value 3 will mask the
00002242                          2719  *                 bits 0, 1, 2, and 3.
00002242                          2720  * POST-CONDITION: D6 contains the bitmask, ready for use.
00002242                          2721  * REGISTERS:      D5,D6,D7
00002242                          2722  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002242                          2723  BITMASK
00002242  3F05                    2724          MOVE    D5,-(A7)    * push D5 onto the stack so we can use it to
00002244  4245                    2725          CLR     D5          * clear D5 so we can use it
00002246                          2726  LOOPBIT 
00002246  0DC5                    2727          BSET    D6,D5       * set the D6th bit in D5 to 1
00002248  5246                    2728          ADD     #1,D6       * increment D6
0000224A                          2729  
0000224A  BC47                    2730          CMP     D7,D6       * have we finished?
0000224C  6E00 0004               2731          BGT     BITMASKDONE * yes
00002250  60F4                    2732          BRA     LOOPBIT     * no, iterate again
00002252                          2733  
00002252                          2734  BITMASKDONE
00002252  2C05                    2735          MOVE.L  D5,D6
00002254  3A1F                    2736          MOVE    (A7)+,D5    * restore D5
00002256  4E75                    2737          RTS
00002258                          2738  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002258                          2739  *-----------------------------------------------------------------------------
00002258                          2740  
00002258                          2741  
00002258                          2742  
00002258                          2743  *-----------------------------------------------------------------------------
00002258                          2744  *-----------------------------------------------------------------------------
00002258                          2745  * SECTION: Constants/variables used throughout the program.
00002258                          2746  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002258                          2747  * ---> GENERAL
00002258  =0000000D               2748  CR          EQU     $0D
00002258  =0000000A               2749  LF          EQU     $0A
00002258= 45 4E 54 45 52 20 ...   2750  MSGSTART    DC.B    'ENTER START ADDRESS: ',CR,LF,0
00002270= 45 4E 54 45 52 20 ...   2751  MSGEND      DC.B    'ENTER END ADDRESS: ',CR,LF,0
00002286= 0D 0A 00                2752  NEWLINE     DC.B    CR,LF,0
00002289                          2753  * ---> OPS
00002289= 44 49 56 53 00          2754  DIVSOP      DC.B    'DIVS',0
0000228E= 4E 4F 50 00             2755  NOOPERATION DC.B    'NOP',0
00002292= 4E 45 47 00             2756  NEGOP       DC.B    'NEG',0
00002296= 4D 4F 56 45 00          2757  MOVEOP      DC.B    'MOVE',0
0000229B= 4D 4F 56 45 4D 00       2758  MOVEMOP     DC.B    'MOVEM',0
000022A1= 4A 53 52 00             2759  JSROP       DC.B    'JSR',0
000022A5= 52 54 53 00             2760  RTSOP       DC.B    'RTS',0
000022A9= 53 55 42 51 00          2761  SUBQOP      DC.B    'SUBQ',0
000022AE= 4C 45 41 00             2762  LEAOP       DC.B    'LEA',0
000022B2= 42 43 4C 52 20 00       2763  BCLROP      DC.B    'BCLR ',0
000022B8= 4D 55 4C 53 00          2764  MULSOP      DC.B    'MULS',0
000022BD= 4F 52 00                2765  OROP        DC.B    'OR',0
000022C0= 4F 52 49 00             2766  ORIOP       DC.B    'ORI',0
000022C4= 43 4D 50 49 00          2767  CMPIOP      DC.B    'CMPI',0
000022C9= 4C 53 4C 00             2768  LSLOP       DC.B    'LSL',0
000022CD= 4C 53 52 00             2769  LSROP       DC.B    'LSR',0
000022D1= 41 53 4C 00             2770  ASLOP       DC.B    'ASL',0
000022D5= 41 53 52 00             2771  ASROP       DC.B    'ASR',0
000022D9= 52 4F 4C 00             2772  ROLOP       DC.B    'ROL',0
000022DD= 52 4F 52 00             2773  ROROP       DC.B    'ROR',0
000022E1= 20 44 41 54 41 20 ...   2774  DATA        DC.B    ' DATA $',0
000022E9= 42 43 43 20 00          2775  OP_BCC_MSG  DC.B    'BCC ',0
000022EE= 42 43 53 20 00          2776  OP_BCS_MSG  DC.B    'BCS ',0
000022F3= 42 47 45 20 00          2777  OP_BGE_MSG  DC.B    'BGE ',0
000022F8= 42 4C 54 20 00          2778  OP_BLT_MSG  DC.B    'BLT ',0
000022FD= 42 56 43 20 00          2779  OP_BVC_MSG  DC.B    'BVC ',0
00002302= 42 52 41 20 00          2780  OP_BRA_MSG  DC.B    'BRA ',0
00002307                          2781  * ---> HEX CHARS
00002307= 30 00                   2782  ASCII_0     DC.B    '0',0
00002309= 31 00                   2783  ASCII_1     DC.B    '1',0
0000230B= 32 00                   2784  ASCII_2     DC.B    '2',0
0000230D= 33 00                   2785  ASCII_3     DC.B    '3',0
0000230F= 34 00                   2786  ASCII_4     DC.B    '4',0
00002311= 35 00                   2787  ASCII_5     DC.B    '5',0
00002313= 36 00                   2788  ASCII_6     DC.B    '6',0
00002315= 37 00                   2789  ASCII_7     DC.B    '7',0
00002317= 38 00                   2790  ASCII_8     DC.B    '8',0
00002319= 39 00                   2791  ASCII_9     DC.B    '9',0
0000231B= 41 00                   2792  ASCII_A     DC.B    'A',0
0000231D= 42 00                   2793  ASCII_B     DC.B    'B',0
0000231F= 43 00                   2794  ASCII_C     DC.B    'C',0
00002321= 44 00                   2795  ASCII_D     DC.B    'D',0
00002323= 45 00                   2796  ASCII_E     DC.B    'E',0
00002325= 46 00                   2797  ASCII_F     DC.B    'F',0
00002327                          2798  * ---> SPECIAL CHARACTERS
00002327= 20 00                   2799  SPACE       DC.B    ' ',0
00002329= 24 00                   2800  DOLLAR      DC.B    '$',0
0000232B= 23 00                   2801  IMD         DC.B    '#',0
0000232D= 2C 00                   2802  COMMA       DC.B    ',',0
0000232F= 28 00                   2803  OBRACK      DC.B    '(',0
00002331= 29 00                   2804  CBRACK      DC.B    ')',0
00002333= 2B 00                   2805  PLUS        DC.B    '+',0
00002335= 2D 00                   2806  MINUS       DC.B    '-',0
00002337= 2F 00                   2807  SLASH       DC.B    '/',0
00002339= 2D 00                   2808  DASH        DC.B    '-',0
0000233B                          2809  * ---> B/W/L (BYTE, WORD, LONG, RESPECTIVELY)
0000233B= 2E 42 20 00             2810  __B         DC.B    '.B ',0
0000233F= 2E 57 20 00             2811  __W         DC.B    '.W ',0
00002343= 2E 4C 20 00             2812  __L         DC.B    '.L ',0
00002347                          2813  * ---> ADDRESS REGISTERS A0-A7
00002347= 41 30 00                2814  __A0        DC.B   'A0',0
0000234A= 41 31 00                2815  __A1        DC.B   'A1',0    
0000234D= 41 32 00                2816  __A2        DC.B   'A2',0
00002350= 41 33 00                2817  __A3        DC.B   'A3',0
00002353= 41 34 00                2818  __A4        DC.B   'A4',0
00002356= 41 35 00                2819  __A5        DC.B   'A5',0
00002359= 41 36 00                2820  __A6        DC.B   'A6',0
0000235C= 41 37 00                2821  __A7        DC.B   'A7',0
0000235F                          2822  * ---> DATA REGISTERS D0-D7
0000235F= 44 30 00                2823  __D0        DC.B   'D0',0
00002362= 44 31 00                2824  __D1        DC.B   'D1',0
00002365= 44 32 00                2825  __D2        DC.B   'D2',0
00002368= 44 33 00                2826  __D3        DC.B   'D3',0
0000236B= 44 34 00                2827  __D4        DC.B   'D4',0
0000236E= 44 35 00                2828  __D5        DC.B   'D5',0
00002371= 44 36 00                2829  __D6        DC.B   'D6',0
00002374= 44 37 00                2830  __D7        DC.B   'D7',0
00002377                          2831  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002377                          2832  *-----------------------------------------------------------------------------
00002377                          2833  
00002377                          2834  
00002377                          2835  
00002377                          2836  *-----------------------------------------------------------------------------
00002377                          2837  *-----------------------------------------------------------------------------
00002377                          2838  * SECTION: Sample program to run, then attempt testing disassembly on.
00002377                          2839  * STARTING: 16384
00002377                          2840  * ENDING:   16420
00002377                          2841  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00004000                          2842      ORG $4000
00004000                          2843      
00004000  4E71                    2844      NOP
00004002  103C 009A               2845      MOVE.B   #%10011010, D0
00004006  123C 00A9               2846      MOVE.B   #%10101001, D1
0000400A  D200                    2847      ADD.B    D0,D1
0000400C  4C9F 3C1A               2848      MOVEM    (A7)+,A2-A5/D1/D3-D4
00004010  43F8 22A1               2849      LEA      JSROP,A1
00004014  4467                    2850      NEG.W    -(A7)
00004016  4EB9 00004046           2851      JSR      END
0000401C  81FC 0001               2852      DIVS    #1, D0
00004020  0181                    2853      BCLR    D0, D1
00004022  CFFC 0003               2854      MULS.W  #3, D7
00004026  CFC0                    2855      MULS    D0, D7
00004028  C5D9                    2856      MULS    (A1)+, D2
0000402A  5146                    2857      SUBQ    #8, D6
0000402C  5F81                    2858      SUBQ.L  #7, D1
0000402E  0041 0004               2859      ORI     #4, D1
00004032  E389                    2860      LSL.L   #1,D1
00004034  E489                    2861      LSR.L   #2,D1
00004036  E781                    2862      ASL.L   #3,D1
00004038  E881                    2863      ASR.L   #4,D1
0000403A  EB99                    2864      ROL.L   #5,D1
0000403C  E099                    2865      ROR.L   #8,D1
0000403E  6000 0006               2866      BRA     END
00004042  6700 0002               2867      BEQ     END
00004046                          2868  
00004046                          2869  END
00004046  4E75                    2870      RTS
00004048                          2871      
00004048                          2872  RLLYEND
00004048                          2873      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AFORWARDVALID       1F4E
AINVALID            1F8E
ALOOP               1F1E
ALOOPDONE           1FD2
ALOOPITER           1FC4
ALOOPITERCLR        1FC2
ANOSLASH            1F62
AS                  18BA
ASCII_0             2307
ASCII_1             2309
ASCII_2             230B
ASCII_3             230D
ASCII_4             230F
ASCII_5             2311
ASCII_6             2313
ASCII_7             2315
ASCII_8             2317
ASCII_9             2319
ASCII_A             231B
ASCII_B             231D
ASCII_C             231F
ASCII_D             2321
ASCII_E             2323
ASCII_F             2325
ASL                 18D0
ASLOP               22D1
ASR                 18E0
ASROP               22D5
AVALID              1F28
BCC_END             171A
BCLROP              22B2
BITMASK             2242
BITMASKDONE         2252
CBRACK              2331
CMPIOP              22C4
COMMA               232D
CR                  D
DASH                2339
DATA                22E1
DFORWARDVALID       1E96
DINVALID            1ED2
DIVSOP              2289
DLOOP               1E66
DLOOPDONE           1F12
DLOOPITER           1F04
DLOOPITERCLR        1F02
DNOSLASH            1EAA
DOLLAR              2329
DONE0100            15F4
DVALID              1E70
EAHELPER05          1A34
EAHELPER611         19F2
END                 4046
END0000             1254
END67               1DC8
ENDEAHELPER05       1B84
ENDEAHELPER611      1A2E
ENDMODE_AN          1D14
ENDMODE_DN          1C14
ENDOP0001           12BA
ENDOP1110           19DA
HEX_VALUE_MASK_LONG  F
IMD                 232B
INVALID_ASCII_INPUT  218A
ITERATION           1158
JSROP               22A1
LEAOP               22AE
LF                  A
LOOP                103A
LOOPBIT             2246
LOOPUNKNOWNOP       1154
LS                  1884
LSL                 189A
LSLOP               22C9
LSR                 18AA
LSROP               22CD
MINUS               2335
MODE_AN             1C8A
MODE_DN             1B8A
MOVEMHELPERPOST     1E50
MOVEMHELPERPRE      1FD8
MOVEMOP             229B
MOVEMTOMEM          1404
MOVEMTOREG          136A
MOVEOP              2296
MSGEND              2270
MSGSTART            2258
MULSOP              22B8
NEGOP               2292
NEWLINE             2286
NOOPERATION         228E
NOT0000             1064
NOT0001             1074
NOT0010             1084
NOT0011             1094
NOT0100             10A4
NOT0101             10B4
NOT0110             10C4
NOT0111             10D4
NOT1000             10E4
NOT1001             10F4
NOT1010             1104
NOT1011             1114
NOT1100             1124
NOT1101             1134
NOT1110             1144
NOT67BYTE           1DAC
NOT67WORD           1DBC
NOTA0               1CAC
NOTA1               1CBC
NOTA2               1CCC
NOTA3               1CDC
NOTA4               1CEC
NOTA5               1CFC
NOTA6               1D0C
NOTADRDIRECT        1A64
NOTADRINDIRECT      1A8C
NOTADRINDIRECTPOST  1AC0
NOTADRINDIRECTPRE   1AF4
NOTBCLR             11E2
NOTD0               1BAC
NOTD1               1BBC
NOTD2               1BCC
NOTD3               1BDC
NOTD4               1BEC
NOTD5               1BFC
NOTD6               1C0C
NOTDATAREG          1A54
NOTDIVS             17A4
NOTIMMBYTE          1B2A
NOTIMMEDIATE        1B80
NOTIMMWORD          1B58
NOTJSR              14EC
NOTLONGMOVEM1       13D2
NOTLONGMOVEM2       146C
NOTMOVEM            149E
NOTNEG              1346
NOTNOP              12F0
NOTORI              1248
NOTRTS              150E
OBRACK              232F
OP0000              1164
OP0001              125A
OP0010              12C0
OP0011              12C6
OP0100              12D4
OP0101              15FE
OP0110              166C
OP0111              1720
OP1000              1726
OP1000END           17B4
OP1001              17BA
OP1010              17BA
OP1011              17C0
OP1100              17C6
OP1101              1850
OP1110              1856
OP1110DATAREG       19AE
OP1110GENERIC       1926
OP1110IMMEIGHT      1986
OP1111              19EC
OP_0000             0
OP_0001             1000
OP_0010             2000
OP_0011             3000
OP_0100             4000
OP_0101             5000
OP_0110             6000
OP_0111             7000
OP_1000             8000
OP_1001             9000
OP_1010             A000
OP_1011             B000
OP_1100             C000
OP_1101             D000
OP_1110             E000
OP_1111             F000
OP_BCC              16BC
OP_BCC_MSG          22E9
OP_BCS              16C6
OP_BCS_MSG          22EE
OP_BGE              16D0
OP_BGE_MSG          22F3
OP_BLT              16DA
OP_BLT_MSG          22F8
OP_BRA              16EE
OP_BRANCHES_PRINT   16F8
OP_BRA_MSG          2302
OP_BVC              16E4
OP_BVC_MSG          22FD
ORIOP               22C0
OROP                22BD
PLUS                2333
PRINT1              2226
PRINT2              2218
PRINT3              220A
PRINT4              21FC
PRINT5              21EE
PRINT6              21E0
PRINT7              21D2
PRINT8              2234
PRINTA0             1D1A
PRINTA1             1D28
PRINTA2             1D36
PRINTA3             1D44
PRINTA4             1D52
PRINTA5             1D60
PRINTA6             1D6E
PRINTA7             1D7C
PRINTBYTE           1E26
PRINTD0             1C1A
PRINTD1             1C28
PRINTD2             1C36
PRINTD3             1C44
PRINTD4             1C52
PRINTD5             1C60
PRINTD6             1C6E
PRINTD7             1C7C
PRINTDATA911        2190
PRINTLONG           1E42
PRINTWORD           1E34
PRINT_ASCII_0       20D2
PRINT_ASCII_1       20DC
PRINT_ASCII_2       20E6
PRINT_ASCII_3       20F0
PRINT_ASCII_4       20FA
PRINT_ASCII_5       2104
PRINT_ASCII_6       210E
PRINT_ASCII_7       2118
PRINT_ASCII_8       2122
PRINT_ASCII_9       212C
PRINT_ASCII_A       2136
PRINT_ASCII_B       2140
PRINT_ASCII_C       214A
PRINT_ASCII_CHAR    2172
PRINT_ASCII_D       2154
PRINT_ASCII_E       215E
PRINT_ASCII_F       2168
PRINT_ASCII_FINISH  218A
PRINT_ASCII_HEX_CHAR  2002
PRINT_ASCII_LOOP    2012
RLLYEND             4048
RO                  18F0
ROL                 1906
ROLOP               22D9
ROR                 1916
ROROP               22DD
RTSOP               22A5
SIZE67              1D8A
SIZE68              1DCE
SKIPNOTLONG1        13DE
SKIPNOTLONG2        1478
SLASH               2337
SPACE               2327
START               1000
SUBQOP              22A9
TWOWORDLEA          159E
UNKNOWN0000         1250
UNKNOWN0100         15F0
UNKNOWN0101         1666
UNKNOWN1100         1846
UNKNOWNOP           1FD8
UNKNOWNOP0001       12B6
__A0                2347
__A1                234A
__A2                234D
__A3                2350
__A4                2353
__A5                2356
__A6                2359
__A7                235C
__B                 233B
__D0                235F
__D1                2362
__D2                2365
__D3                2368
__D4                236B
__D5                236E
__D6                2371
__D7                2374
__L                 2343
__W                 233F
