00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/24/2014 10:28:35 AM

00000000                             1  *    666
00000000                             2  *   66 66
00000000                             3  *  66   66
00000000                             4  *  66   66         8888
00000000                             5  *  66   66       88   kkkk
00000000                             6  *  66  66       8   88   kk      
00000000                             7  *   66  6      8  88  kkk  kk    
00000000                             8  *    66  6    8  88     kk  k
00000000                             9  *     66 66  88 88        kk
00000000                            10  *     6 _______ 8
00000000                            11  *    6    68k    8
00000000                            12  *   6_____PRO_____8
00000000                            13  *  6               8        68k is as easy as
00000000                            14  *  6    0     0    8        6 - 8 - k !
00000000                            15  *  6   /   V   \   8 
00000000                            16  *  6   \__/ \__/   8        Welcome to our Dissasembler, Professor Nash!
00000000                            17  *    6            8         Enjoy your stay!
00000000                            18  *      6        8      
00000000                            19  *        666888
00000000                            20  *  _____                   __    ___  _    
00000000                            21  * | ____|__ _ ___ _   _   / /_  ( _ )| | __
00000000                            22  * |  _| / _` / __| | | | | '_ \ / _ \| |/ /
00000000                            23  * | |__| (_| \__ \ |_| | | (_) | (_) |   < 
00000000                            24  * |_____\__,_|___/\__, |  \___/ \___/|_|\_\
00000000                            25  *                 |___/           
00000000                            26  *-----------------------------------------------------------
00000000                            27  * Title      : 68K Decompiler
00000000                            28  * Written by : Nick Bell, Sammy Nimnuch, Caleb Larson
00000000                            29  * Date       : 11/2014
00000000                            30  * Description: This program decompiles other 68K programs
00000000                            31  *              which are loaded into the simulator simultaneously.
00000000                            32  *-----------------------------------------------------------
00000000                            33  
00000000                            34  
00000000  =00000000                 35  OP_0000     EQU     %0000000000000000
00000000  =00001000                 36  OP_0001     EQU     %0001000000000000
00000000  =00002000                 37  OP_0010     EQU     %0010000000000000
00000000  =00003000                 38  OP_0011     EQU     %0011000000000000
00000000  =00004000                 39  OP_0100     EQU     %0100000000000000
00000000  =00005000                 40  OP_0101     EQU     %0101000000000000
00000000  =00006000                 41  OP_0110     EQU     %0110000000000000
00000000  =00007000                 42  OP_0111     EQU     %0111000000000000
00000000  =00008000                 43  OP_1000     EQU     %1000000000000000
00000000  =00009000                 44  OP_1001     EQU     %1001000000000000
00000000  =0000A000                 45  OP_1010     EQU     %1010000000000000
00000000  =0000B000                 46  OP_1011     EQU     %1011000000000000
00000000  =0000C000                 47  OP_1100     EQU     %1100000000000000
00000000  =0000D000                 48  OP_1101     EQU     %1101000000000000
00000000  =0000E000                 49  OP_1110     EQU     %1110000000000000
00000000  =0000F000                 50  OP_1111     EQU     %1111000000000000
00000000                            51  
00000000                            52  * BITMASK     EQU     $F000       * used to bitmask the first nibble
00000000                            53  
00001000                            54  START:  ORG    $1000            * first instruction of program
00001000                            55  
00001000                            56  * -----------------------------------
00001000                            57  * Starting and Ending Addresses
00001000                            58  * -----------------------------------
00001000                            59  
00001000                            60  * THINK ABOUT ASKING FOR VALID START/END NO NEGATIVE ADDR
00001000                            61  
00001000                            62  * LOAD MSGSTART, ASK FOR INPUT
00001000  43F9 00001342             63          LEA     MSGSTART,A1     * Load MESSAGE START
00001006  103C 000E                 64          MOVE.B  #14,D0          * Trap #14 to display message
0000100A  4E4F                      65          TRAP    #15             * Perform #14
0000100C                            66          
0000100C                            67  * GETS THE STARTING ADDRESS
0000100C  103C 0004                 68          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001010  4E4F                      69          TRAP    #15             * Perform #15
00001012                            70          
00001012                            71  * MOVE IT TO ANOTHER ADDRESS REGISTER
00001012  2441                      72          MOVEA.L D1,A2           * Move the user input into A2. This is the starting address.
00001014                            73  
00001014                            74  * LOAD MSGSTART, ASK FOR INPUT
00001014  43F9 0000135A             75          LEA     MSGEND,A1       * Load MESSAGE END
0000101A  303C 000E                 76          MOVE.W  #14,D0          * Trap #14 to display message
0000101E  4E4F                      77          TRAP    #15             * Perform #14
00001020                            78          
00001020                            79  * GETS THE ENDING ADDRESS
00001020  103C 0004                 80          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001024  4E4F                      81          TRAP    #15             * Perform Trap #4
00001026  2A01                      82          MOVE.L  D1,D5           * Move the ending address into D5
00001028  43F9 00001370             83          LEA     NEWLINE,A1      * Store newline variable for seper opcodes
0000102E                            84          
0000102E  3E3C 000F                 85          MOVE.W  #15,D7          * prep D7 for bitmask subroutine
00001032  3C3C 000C                 86          MOVE.W  #12,D6          * prep D6 for bitmask subroutine
00001036  6100 02F4                 87          BSR     BITMASK         * obtain a bitmask that goes from 12-15 (inclusive)
0000103A                            88          * MOVE.W  D6,D2           * move the bitmask to D2
0000103A                            89          
0000103A                            90  LOOP    
0000103A                            91          
0000103A                            92          * MOVE.W  #BITMASK,D2     * Load the bitmask into data register D2
0000103A  3F06                      93          MOVE    D6,-(A7)        * save the bitmask
0000103C  341A                      94          MOVE.W  (A2)+,D2        * Read an operation into D1
0000103E  CC42                      95          AND.W   D2,D6           * Apply this bitmask
00001040                            96          
00001040  BC7C 4000                 97          CMP     #OP_0100,D6     * Does the operation start with 0100?
00001044  6600 000A                 98          BNE     NEXT16          * No, check next case
00001048  6100 027E                 99          BSR     OP0100          * Branch to subroutine 0100
0000104C  6000 000A                100          BRA     ITERATION       * Move to next iteration of the loop
00001050                           101          
00001050                           102  NEXT16
00001050  3202                     103          MOVE.W  D2,D1           * Print opcode we don't recognize
00001052                           104  
00001052  103C 0003                105          MOVE.B  #3,D0           * Print out operation we don't recognize
00001056  4E4F                     106          TRAP    #15             * Perform Trap #3
00001058                           107          
00001058                           108  ITERATION
00001058  3C1F                     109          MOVE    (A7)+,D6        * restore the bitmask to its previous state
0000105A                           110  
0000105A  103C 000E                111          MOVE.B  #14,D0          * Print a newline
0000105E  4E4F                     112          TRAP    #15             * Perform Trap #14
00001060                           113  
00001060  BA4A                     114          CMP     A2,D5           * Compare the starting address to ending address
00001062  6700 2FAE                115          BEQ     END             * If they are equal, branch 
00001066  60D2                     116          BRA     LOOP            * Otherwise, branch back to LOOP
00001068                           117  
00001068                           118  * --- OP 0000 ------------------------------------------
00001068                           119  * FUNCTIONS     BCLR, ORI, CMPI
00001068                           120  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask. 
00001068                           121  * ADDR REG        
00001068                           122  * POST COND     All registers return to their previous state.
00001068                           123  * ------------------------------------------------------
00001068                           124  OP0000
00001068  48A7 C0C0                125          MOVEM   D0-D1/A0-A1,-(A7)   * Push values to the stack to save
0000106C  3C3C 0006                126          MOVE.W  #6, D6              * Prep lower value for bitmask
00001070  3E3C 0008                127          MOVE.W  #8, D7              * Prep upper value for bitmask
00001074  6100 02B6                128          BSR     BITMASK             * Finalize bitmask setup
00001078  CC42                     129          AND     D2,D6               * Apply bitmask
0000107A                           130          
0000107A  0C46 0180                131          CMPI    #%0000000110000000, D6  * Are we BCLR?
0000107E  6600 0012                132          BNE     NOTBCLR                 * If not, branch to other OP0000 functions
00001082                           133          
00001082  43F9 00001377            134          LEA     BCLROP,A1           * We found BCLR
00001088  103C 000E                135          MOVE.B  #14,D0              * Trap #14 prints out the data
0000108C  4E4F                     136          TRAP    #15                 * Perform Trap #14
0000108E  6000 0296                137          BRA     NEXT17              * Found the op, move to next iteration
00001092                           138  
00001092                           139  NOTBCLR * Possible options left are ORI or CMPI
00001092  3C3C 0009                140          MOVE.W  #9, D6              * Prep lower value for bitmask
00001096  3E3C 000B                141          MOVE.W  #11, D7             * Prep upper value for bitmask
0000109A  6100 0290                142          BSR     BITMASK             * Finalize bitmask setup
0000109E  CC42                     143          AND     D2,D6               * Apply bitmask
000010A0                           144          
000010A0  0C46 0000                145          CMPI    #%0000000000000000, D6  * Are we ORI?
000010A4  6700 000E                146          BEQ     ISORI                   * If ORI, branch to ISORI
000010A8                           147          
000010A8  0C46 0C00                148          CMPI    #%0000110000000000, D6  * Hmm... Maybe we're CMPI?
000010AC  6700 0006                149          BEQ     ISCMPI                  * If CMPI, branch to ISCMPI
000010B0                           150          
000010B0  6600 01FA                151          BNE     UNKNOWNOP               * Otherwise, this op is an imposter. 
000010B4                           152                                          * We don't deal too kindly with imposters.
000010B4                           153          
000010B4                           154  ISORI   * TODO
000010B4                           155          
000010B4                           156  
000010B4                           157  ISCMPI
000010B4  43F9 00001384            158          LEA     CMPIOP, A1          * Load 'CMPI' into the output window
000010BA  103C 000E                159          MOVE.B  #14,D0              * Trap #14 prints out the data in D0
000010BE  4E4F                     160          TRAP    #15                 * Perform Trap #14
000010C0                           161          
000010C0                           162          * Determine the Size
000010C0  3C3C 0006                163          MOVE.W  #6, D6              * Prep lower value for bitmask
000010C4  3E3C 0007                164          MOVE.W  #7, D7              * Prep upper value for bitmask
000010C8  6100 0262                165          BSR     BITMASK             * Finalize bitmask setup
000010CC  CC42                     166          AND     D2,D6               * Apply bitmask
000010CE                           167          
000010CE  0C46 00C0                168          CMPI    #%0000000011000000, D6  * Imposter Op
000010D2  6700 01D8                169          BEQ     UNKNOWNOP               * Deal with the imposter
000010D6                           170          
000010D6  0C46 0000                171          CMPI    #%0000000000000000, D6  * The size is a BYTE
000010DA  6700 0012                172          BEQ     CMPIBYTE                * Branch to CMPI.B
000010DE                           173          
000010DE  0C46 0040                174          CMPI    #%0000000001000000, D6  * The size is a WORD
000010E2  6700 0032                175          BEQ     CMPIWORD                * Branch to CMPI.W
000010E6                           176          
000010E6  0C46 0080                177          CMPI    #%0000000010000000, D6  * The size is a LONG
000010EA  6700 0050                178          BEQ     CMPILONG                * Branch to CMPI.L
000010EE                           179          
000010EE                           180  CMPIBYTE
000010EE  43F9 00001391            181          LEA     __B, A1     * Load .B
000010F4  103C 000E                182          MOVE.B  #14, D0     * Print out data
000010F8  4E4F                     183          TRAP    #15         * Perform Trap #14
000010FA                           184          
000010FA  43F9 0000138F            185          LEA     IMD, A1     * Load #
00001100  103C 000E                186          MOVE.B  #14, D0     * Print out data
00001104  4E4F                     187          TRAP    #15         * Perform Trap #14
00001106                           188          
00001106  361A                     189          MOVE.W  (A2)+,D3    * Advance a word forward to get the value.
00001108  1203                     190          MOVE.B  D3,D1       * Move the lower byte from D3 into D1
0000110A  3622                     191          MOVE.W  -(A2),D3    * Now go back
0000110C  103C 000E                192          MOVE.B  #14, D0     * Print out the data
00001110  4E4F                     193          TRAP    #15         * Perform Trap #14 
00001112                           194          
00001112  6000 004E                195          BRA     CMPIEA      * Branch to determine Effective Address
00001116                           196          
00001116                           197  CMPIWORD
00001116  43F9 00001393            198          LEA     __W, A1     * Load .W
0000111C  103C 000E                199          MOVE.B  #14, D0     * Print out data
00001120  4E4F                     200          TRAP    #15         * Perform Trap #14
00001122                           201          
00001122  43F9 0000138F            202          LEA     IMD, A1     * Load #
00001128  103C 000E                203          MOVE.B  #14, D0     * Print out data
0000112C  4E4F                     204          TRAP    #15         * Perform Trap #14
0000112E                           205          
0000112E  361A                     206          MOVE.W  (A2)+,D3    * Advance a word forward to get the value.
00001130  3222                     207          MOVE.W  -(A2),D1    * Copy the immediate Value into D1, then go back
00001132  103C 000E                208          MOVE.B  #14, D0     * Print out the data
00001136  4E4F                     209          TRAP    #15         * Perform Trap #14
00001138                           210          
00001138                           211          
00001138  6000 0028                212          BRA     CMPIEA      * Branch to determine Effective Address
0000113C                           213          
0000113C                           214  CMPILONG
0000113C  43F9 00001395            215          LEA     __L, A1     * Load .L
00001142  103C 000E                216          MOVE.B  #14, D0     * Print out data
00001146  4E4F                     217          TRAP    #15         * Perform Trap #14
00001148                           218          
00001148  43F9 0000138F            219          LEA     IMD, A1     * Load #
0000114E  103C 000E                220          MOVE.B  #14, D0     * Print out data
00001152  4E4F                     221          TRAP    #15         * Perform Trap #14
00001154                           222          
00001154  361A                     223          MOVE.W  (A2)+,D3    * Advance a word forward to get the value.
00001156  2222                     224          MOVE.L  -(A2),D1    * Copy the immediate value (long) into D1, then go back
00001158  103C 000E                225          MOVE.B  #14, D0     * Print out the data
0000115C  4E4F                     226          TRAP    #15         * Perform Trap #14
0000115E                           227          
0000115E  6000 0002                228          BRA     CMPIEA      * Branch to determine Effective Address
00001162                           229          
00001162                           230  CMPIEA
00001162                           231          * So far the buffer is CMPI.X #Y ... Now we need to add a comma
00001162  43F9 00001390            232          LEA     COMMA, A1   * Load ,
00001168  103C 000E                233          MOVE.B  #14, D0     * Print out data
0000116C  4E4F                     234          TRAP    #15         * Perform Trap #14
0000116E                           235          
0000116E  43F9 00001395            236          LEA     __L, A1     * Load .L
00001174  103C 000E                237          MOVE.B  #14, D0     * Print out data
00001178  4E4F                     238          TRAP    #15         * Perform Trap #14
0000117A                           239          
0000117A                           240          * Determine the mode
0000117A  3C3C 0003                241          MOVE.W  #3, D6              * Prep lower value for bitmask
0000117E  3E3C 0005                242          MOVE.W  #5, D7              * Prep upper value for bitmask
00001182  6100 01A8                243          BSR     BITMASK             * Finalize bitmask setup
00001186  CC42                     244          AND     D2,D6               * Apply bitmask
00001188                           245          
00001188  0C46 0008                246          CMPI    #%0000000000001000, D6  * Is the Mode 001, an unsupported mode for CMPI?
0000118C  6700 011E                247          BEQ     UNKNOWNOP               * Imposter op
00001190                           248          
00001190  0C46 0028                249          CMPI    #%0000000000101000, D6  * Is the Mode 101, an unsupported mode?
00001194  6700 0116                250          BEQ     UNKNOWNOP               * Imposter op
00001198                           251          
00001198  0C46 0030                252          CMPI    #%0000000000110000, D6  * Is the Mode 110, an unsupported mode?
0000119C  6700 010E                253          BEQ     UNKNOWNOP               * Imposter op
000011A0                           254  
000011A0  0C46 0038                255          CMPI    #%0000000000111000, D6  * Is the Mode 111?
000011A4  6700 0028                256          BEQ     CMPIREG                 * Further investigation is needed
000011A8                           257          
000011A8                           258          * Mode is verified to be valid at this point
000011A8  0C46 0000                259          CMPI    #%0000000000000000, D6  * AMode = Dn, Reg = Dn
000011AC  6100 003E                260          BSR     MODE_DN
000011B0                           261          
000011B0  0C46 0010                262          CMPI    #%0000000000010000, D6  * AMode = (An), Reg = An
000011B4  6100 00F6                263          BSR     MODE_IAN
000011B8                           264          
000011B8  0C46 0018                265          CMPI    #%0000000000011000, D6  * AMode = (An)+, Reg = An
000011BC  6100 00EE                266          BSR     MODE_IAN_POS
000011C0                           267          
000011C0  0C46 0000                268          CMPI    #%0000000000000000, D6  * AMode = -(An), Reg = An
000011C4  6100 00E6                269          BSR     MODE_IAN_PRE
000011C8                           270          
000011C8                           271          * Reached End of CMPI. Everything has been printed out
000011C8  4C9F 0303                272          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
000011CC  4E75                     273          RTS
000011CE                           274          
000011CE                           275  CMPIREG
000011CE  3C3C 0000                276          MOVE.W  #0, D6              * Prep lower value for bitmask
000011D2  3E3C 0002                277          MOVE.W  #2, D7              * Prep upper value for bitmask
000011D6  6100 0154                278          BSR     BITMASK             * Finalize bitmask setup
000011DA  CC42                     279          AND     D2,D6               * Apply bitmask
000011DC                           280          
000011DC  0C46 0000                281          CMPI    #%0000000000000000, D6  * Is the Register 000?
000011E0  6700 000A                282          BEQ     CMPIREG000
000011E4                           283          
000011E4  0C46 0001                284          CMPI    #%0000000000000001, D6  * Is the Register 001?
000011E8  6700 0002                285          BEQ     CMPIREG001
000011EC                           286            
000011EC                           287  
000011EC                           288  CMPIREG000  * TODO (xxx).W for CMPI
000011EC                           289  
000011EC                           290  CMPIREG001  * TODO (xxx).L for CMPI
000011EC                           291          
000011EC                           292  * --- Effective Address --------------------------------
000011EC                           293  * PURPOSE       To generalize the EA part of the project.
000011EC                           294  * PRE CON       The Mode must have been correctly identified. All Modes must be called by RTS
000011EC                           295  * POST CON      After the EA, the entire op will head back to the BSR that called it.
000011EC                           296  * ------------------------------------------------------        
000011EC                           297  MODE_DN
000011EC  3C3C 0000                298          MOVE.W  #0, D6              * Prep lower value for bitmask
000011F0  3E3C 0002                299          MOVE.W  #2, D7              * Prep upper value for bitmask
000011F4  6100 0136                300          BSR     BITMASK             * Finalize bitmask setup
000011F8  CC42                     301          AND     D2,D6               * Apply bitmask
000011FA                           302          
000011FA  0C46 0000                303          CMPI    #%000000000000000, D6   * Data Register D0?
000011FE  6100 003C                304          BSR     PRINTD0
00001202  0C46 0001                305          CMPI    #%000000000000001, D6   * Data Register D1?
00001206  6100 0042                306          BSR     PRINTD1
0000120A  0C46 0002                307          CMPI    #%000000000000010, D6   * Data Register D2?
0000120E  6100 0048                308          BSR     PRINTD2
00001212  0C46 0003                309          CMPI    #%000000000000011, D6   * Data Register D3?
00001216  6100 004E                310          BSR     PRINTD3
0000121A  0C46 0004                311          CMPI    #%000000000000100, D6   * Data Register D4?
0000121E  6100 0054                312          BSR     PRINTD4
00001222  0C46 0005                313          CMPI    #%000000000000101, D6   * Data Register D5?
00001226  6100 005A                314          BSR     PRINTD5
0000122A  0C46 0006                315          CMPI    #%000000000000110, D6   * Data Register D6?
0000122E  6100 0060                316          BSR     PRINTD6
00001232  0C46 0007                317          CMPI    #%000000000000111, D6   * Data Register D7?
00001236  6100 0066                318          BSR     PRINTD7
0000123A                           319          
0000123A  4E75                     320          RTS     * Return to function to handle pointer advancing, RTS to main, etc.
0000123C                           321  
0000123C                           322  PRINTD0
0000123C  43F9 000013A7            323          LEA     __D0, A1        * Load 'D0'
00001242  103C 000E                324          MOVE.B  #14, D0         * Load Trap #14 to print out
00001246  4E4F                     325          TRAP    #15             * Perform Trap #14
00001248  4E75                     326          RTS
0000124A                           327          
0000124A                           328  PRINTD1
0000124A  43F9 000013A9            329          LEA     __D1, A1        * Load 'D1'
00001250  103C 000E                330          MOVE.B  #14, D0         * Load Trap #14 to print out
00001254  4E4F                     331          TRAP    #15             * Perform Trap #14
00001256  4E75                     332          RTS
00001258                           333          
00001258                           334  PRINTD2
00001258  43F9 000013AB            335          LEA     __D2, A1        * Load 'D2'
0000125E  103C 000E                336          MOVE.B  #14, D0         * Load Trap #14 to print out
00001262  4E4F                     337          TRAP    #15             * Perform Trap #14
00001264  4E75                     338          RTS
00001266                           339          
00001266                           340  PRINTD3
00001266  43F9 000013AD            341          LEA     __D3, A1        * Load 'D3'
0000126C  103C 000E                342          MOVE.B  #14, D0         * Load Trap #14 to print out
00001270  4E4F                     343          TRAP    #15             * Perform Trap #14
00001272  4E75                     344          RTS
00001274                           345          
00001274                           346  PRINTD4
00001274  43F9 000013AF            347          LEA     __D4, A1        * Load 'D4'
0000127A  103C 000E                348          MOVE.B  #14, D0         * Load Trap #14 to print out
0000127E  4E4F                     349          TRAP    #15             * Perform Trap #14
00001280  4E75                     350          RTS
00001282                           351          
00001282                           352  PRINTD5
00001282  43F9 000013B1            353          LEA     __D5, A1        * Load 'D5'
00001288  103C 000E                354          MOVE.B  #14, D0         * Load Trap #14 to print out
0000128C  4E4F                     355          TRAP    #15             * Perform Trap #14
0000128E  4E75                     356          RTS
00001290                           357          
00001290                           358  PRINTD6
00001290  43F9 000013B3            359          LEA     __D6, A1        * Load 'D6'
00001296  103C 000E                360          MOVE.B  #14, D0         * Load Trap #14 to print out
0000129A  4E4F                     361          TRAP    #15             * Perform Trap #14
0000129C  4E75                     362          RTS
0000129E                           363          
0000129E                           364  PRINTD7
0000129E  43F9 000013B5            365          LEA     __D7, A1        * Load 'D7'
000012A4  103C 000E                366          MOVE.B  #14, D0         * Load Trap #14 to print out
000012A8  4E4F                     367          TRAP    #15             * Perform Trap #14
000012AA  4E75                     368          RTS
000012AC                           369          
000012AC                           370  MODE_AN
000012AC                           371  
000012AC                           372  MODE_IAN
000012AC                           373  MODE_IAN_POS
000012AC                           374  MODE_IAN_PRE
000012AC                           375  
000012AC                           376  
000012AC                           377  
000012AC                           378     
000012AC                           379  UNKNOWNOP
000012AC                           380  
000012AC                           381  
000012AC                           382  
000012AC                           383  * --- OP 0001 ------------------------------------------
000012AC                           384  * FUNCTIONS     MOVE.B
000012AC                           385  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000012AC                           386  * ADDR REG        
000012AC                           387  * POST COND     All registers return to their previous state.
000012AC                           388  * ------------------------------------------------------
000012AC                           389  OP0001  
000012AC                           390  
000012AC                           391  
000012AC                           392  
000012AC                           393  
000012AC                           394  * --- OP 0010 ------------------------------------------
000012AC                           395  * FUNCTIONS     MOVE.L, MOVEA.L,
000012AC                           396  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000012AC                           397  * ADDR REG        
000012AC                           398  * POST COND     All registers return to their previous state.
000012AC                           399  * ------------------------------------------------------
000012AC                           400  OP0010  
000012AC                           401  
000012AC                           402  
000012AC                           403  * --- OP 0011 ------------------------------------------
000012AC                           404  * FUNCTIONS     MOVE.W, MOVEA.W
000012AC                           405  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000012AC                           406  * ADDR REG        
000012AC                           407  * POST COND     All registers return to their previous state.
000012AC                           408  * ------------------------------------------------------
000012AC                           409  OP0011
000012AC  48A7 FFFE                410      MOVEM   D0-D7/A0-A6, -(A7)
000012B0                           411      
000012B0  3C3C 0006                412      MOVE.W  #6,D6
000012B4  3E3C 0008                413      MOVE.W  #8,D7
000012B8                           414      
000012B8  6100 0072                415      BSR     BITMASK
000012BC                           416      
000012BC  CC42                     417      AND.W   D2,D6
000012BE                           418      
000012BE  BC7C 0040                419      CMP     #%0000000001000000,D6
000012C2  6600 0004                420      BNE     NEXT15
000012C6  61FE                     421      BSR     * for MOVEA.W
000012C8                           422      
000012C8                           423  NEXT15
000012C8                           424  
000012C8                           425  
000012C8                           426  * --- OP 0100 ------------------------------------------
000012C8                           427  * FUNCTIONS     NO_OP, MOVEM, LEA, NEG, JSR, RTS
000012C8                           428  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000012C8                           429  * ADDR REG        
000012C8                           430  * POST COND     All registers return to their previous state.
000012C8                           431  * ------------------------------------------------------
000012C8                           432  OP0100  * TODO: movem, lea, neg, jsr, rts
000012C8                           433  
000012C8  48A7 C0C0                434          MOVEM   D0-D1/A0-A1,-(A7) * Push values to the stack to save
000012CC                           435          
000012CC                           436          * prep values for BITMASK subroutine
000012CC  3C3C 0008                437          MOVE.W  #8,D6
000012D0  3E3C 000B                438          MOVE.W  #11,D7
000012D4                           439          
000012D4  6100 0056                440          BSR     BITMASK
000012D8                           441          
000012D8  CC42                     442          AND     D2,D6                   * apply bitmask
000012DA                           443          
000012DA  0C46 0400                444          CMPI    #%0000010000000000,D6   * are we NEG?
000012DE  6600 0012                445          BNE     NEXT19                  * not neg
000012E2                           446        
000012E2                           447          * it is NEG, print
000012E2  43F9 0000137C            448          LEA     NEGOP,A1
000012E8  103C 000E                449          MOVE.B  #14,D0
000012EC  4E4F                     450          TRAP    #15
000012EE                           451          
000012EE  6000 0036                452          BRA     NEXT17 * we found the op, move to next iteration
000012F2                           453          
000012F2                           454  NEXT19 * is it MOVEM?
000012F2                           455  
000012F2                           456          * prep values for BITMASK subroutine
000012F2  3C3C 0007                457          MOVE.W  #7,D6
000012F6  3E3C 0009                458          MOVE.W  #9,D7
000012FA                           459          
000012FA  6100 0030                460          BSR     BITMASK
000012FE                           461          
000012FE  CC42                     462          AND     D2,D6   * apply bitmask
00001300                           463          
00001300  0C46 0080                464          CMPI    #%0000000010000000,D6 * is it MOVEM?
00001304  6600 0014                465          BNE     NEXT18          * it is not MOVEM
00001308                           466          
00001308                           467          * it is MOVEM
00001308  43F9 00001389            468          LEA     MOVEMOP,A1
0000130E  103C 000E                469          MOVE.B  #14,D0          * Print a newline
00001312  4E4F                     470          TRAP    #15
00001314                           471          
00001314  341A                     472          MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
00001316                           473          
00001316  6000 000E                474          BRA     NEXT17
0000131A                           475  NEXT18
0000131A                           476          
0000131A  43F9 00001373            477          LEA     NOOPERATION,A1
00001320  103C 000E                478          MOVE.B  #14,D0          * Print a newline
00001324  4E4F                     479          TRAP    #15
00001326                           480          
00001326                           481  NEXT17
00001326  4C9F 0303                482          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
0000132A  4E75                     483          RTS
0000132C                           484          
0000132C                           485          
0000132C                           486          
0000132C                           487  
0000132C                           488  * --- OP 0101 ------------------------------------------
0000132C                           489  * FUNCTIONS     SUBQ
0000132C                           490  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
0000132C                           491  * ADDR REG        
0000132C                           492  * POST COND     All registers return to their previous state.
0000132C                           493  * ------------------------------------------------------
0000132C                           494  OP0101
0000132C                           495  
0000132C                           496  
0000132C                           497  
0000132C                           498  * --- OP 0110 ------------------------------------------
0000132C                           499  * FUNCTIONS     BCC, BCS, BGE, BLT, BVC, BRA
0000132C                           500  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
0000132C                           501  * ADDR REG        
0000132C                           502  * POST COND     All registers return to their previous state.
0000132C                           503  * ------------------------------------------------------
0000132C                           504  OP0110
0000132C                           505  
0000132C                           506  
0000132C                           507  
0000132C                           508  
0000132C                           509  * --- OP 0111 ------------------------------------------
0000132C                           510  * FUNCTIONS     
0000132C                           511  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
0000132C                           512  * ADDR REG        
0000132C                           513  * POST COND     All registers return to their previous state.
0000132C                           514  * ------------------------------------------------------
0000132C                           515  OP0111
0000132C                           516  
0000132C                           517  
0000132C                           518  
0000132C                           519  * --- OP 1000 ------------------------------------------
0000132C                           520  * FUNCTIONS     DIVS, OR
0000132C                           521  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
0000132C                           522  * ADDR REG        
0000132C                           523  * POST COND     All registers return to their previous state.
0000132C                           524  * ------------------------------------------------------
0000132C                           525  OP1000
0000132C                           526  
0000132C                           527  
0000132C                           528  
0000132C                           529  * --- OP 1001 ------------------------------------------
0000132C                           530  * FUNCTIONS     SUB
0000132C                           531  * DATA REG      D0, D1 for output. D2 for entire instruction. D6 for bitmask.
0000132C                           532  * ADDR REG        
0000132C                           533  * POST COND     All registers return to their previous state.
0000132C                           534  * ------------------------------------------------------
0000132C                           535  OP1001
0000132C                           536  
0000132C                           537  
0000132C                           538  
0000132C                           539  * --- OP 1010 ------------------------------------------
0000132C                           540  * FUNCTIONS     
0000132C                           541  * DATA REG      D0, D1 for output. D2 for entire instruction. D6 for bitmask.
0000132C                           542  * ADDR REG        
0000132C                           543  * POST COND     All registers return to their previous state.
0000132C                           544  * ------------------------------------------------------
0000132C                           545  OP1010
0000132C                           546  
0000132C                           547  
0000132C                           548  * --- OP 1011 ------------------------------------------
0000132C                           549  * FUNCTIONS     EOR, CMP 
0000132C                           550  * DATA REG      D0, D1 for output. D2 for entire opcode. D6 for bitmask.
0000132C                           551  * ADDR REG        
0000132C                           552  * POST COND     All registers return to their previous state.
0000132C                           553  * ------------------------------------------------------
0000132C                           554  OP1011
0000132C                           555  
0000132C                           556  
0000132C                           557  * --- OP 1100 ------------------------------------------
0000132C                           558  * FUNCTIONS     MULS
0000132C                           559  * DATA REG      D0, D1 for output. D2 for entire opcode. D6 for bitmask.
0000132C                           560  * ADDR REG        
0000132C                           561  * POST COND     All registers return to their previous state.
0000132C                           562  * ------------------------------------------------------
0000132C                           563  OP1100
0000132C                           564  
0000132C                           565  
0000132C                           566  
0000132C                           567  * --- OP 1101 ------------------------------------------
0000132C                           568  * FUNCTIONS     ADD, ADDA,
0000132C                           569  * DATA REG      D0, D1 for output. D2 for entire opcode. D6 for bitmask.
0000132C                           570  * ADDR REG        
0000132C                           571  * POST COND     All registers return to their previous state.
0000132C                           572  * ------------------------------------------------------
0000132C                           573  OP1101
0000132C                           574  
0000132C                           575  
0000132C                           576  
0000132C                           577  * --- OP 1110 ------------------------------------------
0000132C                           578  * FUNCTIONS     LSL, LSR, ASL, ASR, ROL, ROR, 
0000132C                           579  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
0000132C                           580  * ADDR REG        
0000132C                           581  * POST COND     All registers return to their previous state.
0000132C                           582  * ------------------------------------------------------
0000132C                           583  OP1110
0000132C                           584  
0000132C                           585  
0000132C                           586  
0000132C                           587  
0000132C                           588  * --- OP 1111 ------------------------------------------
0000132C                           589  * FUNCTIONS     
0000132C                           590  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
0000132C                           591  * ADDR REG        
0000132C                           592  * POST COND     All registers return to their previous state.
0000132C                           593  * ------------------------------------------------------
0000132C                           594  OP1111
0000132C                           595  
0000132C                           596  
0000132C                           597  
0000132C                           598  
0000132C                           599  
0000132C                           600  
0000132C                           601   * --- BITMASK ----------------------------------------------------------------
0000132C                           602   *@pre      D6 contains the starting bit you want masked, D7 the ending bit
0000132C                           603   *
0000132C                           604   *@post     D6 contains the bitmask, ready for use
0000132C                           605   
0000132C                           606  BITMASK
0000132C  3F05                     607          MOVE    D5,-(A7)    * push D5 onto the stack so we can use it to
0000132E  4245                     608          CLR     D5          * clear D5 so we can use it
00001330                           609  LOOPBIT 
00001330  0DC5                     610          BSET    D6,D5       * set the D6th bit in D5 to 1
00001332  5246                     611          ADD     #1,D6       * increment D6
00001334                           612          
00001334  BC47                     613          CMP     D7,D6       * have we finished?
00001336  6E00 0004                614          BGT     BITMASKDONE * yes
0000133A  60F4                     615          BRA     LOOPBIT     * no, iterate again
0000133C                           616          
0000133C                           617  BITMASKDONE
0000133C                           618  
0000133C  2C05                     619          MOVE.L  D5,D6
0000133E  3A1F                     620          MOVE    (A7)+,D5    * restore D5
00001340  4E75                     621          RTS
00001342                           622          
00001342                           623   * --- OP0100 -----------------------------------------------------------------
00001342                           624   * @pre      D2 contains the opcode
00001342                           625   *
00001342                           626   * @post     all registers are returned to their previous state
00001342                           627  
00001342                           628  
00001342                           629  
00001342                           630   * ----------------------------------------------------------------------------
00001342                           631   * ----------------------------------------------------------------------------
00001342                           632   * Constants for printing information to the console
00001342                           633  
00001342  =0000000D                634  CR      EQU     $0D
00001342  =0000000A                635  LF      EQU     $0A
00001342= 45 4E 54 45 52 20 ...    636  MSGSTART    DC.B    'ENTER START ADDRESS: ',CR,LF,0
0000135A= 45 4E 54 45 52 20 ...    637  MSGEND      DC.B    'ENTER END ADDRESS: ',CR,LF,0
00001370= 0D 0A 00                 638  NEWLINE     DC.B    CR,LF,0
00001373= 4E 4F 50 00              639  NOOPERATION DC.B    'NOP',0
00001377= 42 43 4C 52 00           640  BCLROP      DC.B    'BCLR',0
0000137C= 4E 45 47 00              641  NEGOP       DC.B    'NEG',0
00001380= 4F 52 49 00              642  ORIOP       DC.B    'ORI',0
00001384= 43 4D 50 49 00           643  CMPIOP      DC.B    'CMPI',0
00001389= 4D 4F 56 45 4D 00        644  MOVEMOP     DC.B    'MOVEM',0
0000138F                           645  
0000138F                           646   * ----------------------------------------------------------------------------
0000138F                           647   * ----------------------------------------------------------------------------
0000138F                           648   * Data defined constants
0000138F                           649   *   - B/W/L (representing Byte, Word, Long)
0000138F                           650   *   - A0-A7 (representing the 8 address registers)
0000138F                           651   *   - D0-D7 (representing the 8 data registers)
0000138F                           652   * ----------------------------------------------------------------------------
0000138F= 23                       653  IMD        DC.B    '#'
00001390= 2C                       654  COMMA      DC.B    ','
00001391= 42 20                    655  __B        DC.B    'B '
00001393= 57 20                    656  __W        DC.B    'W '
00001395= 4C 20                    657  __L        DC.B    'L '
00001397                           658  
00001397= 41 30                    659  __A0        DC.B   'A0'
00001399= 41 31                    660  __A1        DC.B   'A1'    
0000139B= 41 32                    661  __A2        DC.B   'A2'
0000139D= 41 33                    662  __A3        DC.B   'A3'
0000139F= 41 34                    663  __A4        DC.B   'A4'
000013A1= 41 35                    664  __A5        DC.B   'A5'
000013A3= 41 36                    665  __A6        DC.B   'A6'
000013A5= 41 37                    666  __A7        DC.B   'A7'
000013A7                           667  
000013A7= 44 30                    668  __D0        DC.B   'D0'
000013A9= 44 31                    669  __D1        DC.B   'D1'
000013AB= 44 32                    670  __D2        DC.B   'D2'
000013AD= 44 33                    671  __D3        DC.B   'D3'
000013AF= 44 34                    672  __D4        DC.B   'D4'
000013B1= 44 35                    673  __D5        DC.B   'D5'
000013B3= 44 36                    674  __D6        DC.B   'D6'
000013B5= 44 37                    675  __D7        DC.B   'D7'
000013B7                           676   * ---------------------------------------------------------------------------
000013B7                           677   * End of definition segment
000013B7                           678   * ---------------------------------------------------------------------------
000013B7                           679   * ---------------------------------------------------------------------------
000013B7                           680  
000013B7                           681  * Put variables and constants here
000013B7                           682  
00004000                           683      ORG $4000
00004000                           684  
00004000  4E71                     685      NOP
00004002  103C 009A                686      MOVE.B   #%10011010, D0
00004006  123C 00A9                687      MOVE.B   #%10101001, D1
0000400A  D200                     688      ADD.B    D0,D1
0000400C  48A7 4000                689      MOVEM    D1,-(A7)
00004010  4443                     690      NEG.W    D3
00004012                           691  
00004012                           692  END
00004012                           693      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BCLROP              1377
BITMASK             132C
BITMASKDONE         133C
CMPIBYTE            10EE
CMPIEA              1162
CMPILONG            113C
CMPIOP              1384
CMPIREG             11CE
CMPIREG000          11EC
CMPIREG001          11EC
CMPIWORD            1116
COMMA               1390
CR                  D
END                 4012
IMD                 138F
ISCMPI              10B4
ISORI               10B4
ITERATION           1058
LF                  A
LOOP                103A
LOOPBIT             1330
MODE_AN             12AC
MODE_DN             11EC
MODE_IAN            12AC
MODE_IAN_POS        12AC
MODE_IAN_PRE        12AC
MOVEMOP             1389
MSGEND              135A
MSGSTART            1342
NEGOP               137C
NEWLINE             1370
NEXT15              12C8
NEXT16              1050
NEXT17              1326
NEXT18              131A
NEXT19              12F2
NOOPERATION         1373
NOTBCLR             1092
OP0000              1068
OP0001              12AC
OP0010              12AC
OP0011              12AC
OP0100              12C8
OP0101              132C
OP0110              132C
OP0111              132C
OP1000              132C
OP1001              132C
OP1010              132C
OP1011              132C
OP1100              132C
OP1101              132C
OP1110              132C
OP1111              132C
OP_0000             0
OP_0001             1000
OP_0010             2000
OP_0011             3000
OP_0100             4000
OP_0101             5000
OP_0110             6000
OP_0111             7000
OP_1000             8000
OP_1001             9000
OP_1010             A000
OP_1011             B000
OP_1100             C000
OP_1101             D000
OP_1110             E000
OP_1111             F000
ORIOP               1380
PRINTD0             123C
PRINTD1             124A
PRINTD2             1258
PRINTD3             1266
PRINTD4             1274
PRINTD5             1282
PRINTD6             1290
PRINTD7             129E
START               1000
UNKNOWNOP           12AC
__A0                1397
__A1                1399
__A2                139B
__A3                139D
__A4                139F
__A5                13A1
__A6                13A3
__A7                13A5
__B                 1391
__D0                13A7
__D1                13A9
__D2                13AB
__D3                13AD
__D4                13AF
__D5                13B1
__D6                13B3
__D7                13B5
__L                 1395
__W                 1393
