00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/11/2014 4:05:06 PM

00000000                             1  *    666
00000000                             2  *   66 66
00000000                             3  *  66   66
00000000                             4  *  66   66         8888
00000000                             5  *  66   66       88   kkkk
00000000                             6  *  66  66       8   88   kk      
00000000                             7  *   66  6      8  88  kkk  kk    
00000000                             8  *    66  6    8  88     kk  k
00000000                             9  *     66 66  88 88        kk
00000000                            10  *     6 _______ 8
00000000                            11  *    6    68k    8
00000000                            12  *   6_____PRO_____8
00000000                            13  *  6               8        68k is as easy as
00000000                            14  *  6    0     0    8        6 - 8 - k !
00000000                            15  *  6   /   V   \   8 
00000000                            16  *  6   \__/ \__/   8        Welcome to our Dissasembler, Professor Nash!
00000000                            17  *    6            8         Enjoy your stay!
00000000                            18  *      6        8      
00000000                            19  *        666888
00000000                            20  *  _____                   __    ___  _    
00000000                            21  * | ____|__ _ ___ _   _   / /_  ( _ )| | __
00000000                            22  * |  _| / _` / __| | | | | '_ \ / _ \| |/ /
00000000                            23  * | |__| (_| \__ \ |_| | | (_) | (_) |   < 
00000000                            24  * |_____\__,_|___/\__, |  \___/ \___/|_|\_\
00000000                            25  *                 |___/           
00000000                            26  *-----------------------------------------------------------
00000000                            27  * Title      : 68K Decompiler
00000000                            28  * Written by : Nick Bell, Sammy Nimnuch, Caleb Larson
00000000                            29  * Date       : 11/2014
00000000                            30  * Description: This program decompiles other 68K programs
00000000                            31  *              which are loaded into the simulator simultaneously.
00000000                            32  *-----------------------------------------------------------
00000000                            33  
00000000                            34  
00000000  =00000000                 35  OP_0000     EQU     %0000000000000000
00000000  =00001000                 36  OP_0001     EQU     %0001000000000000
00000000  =00002000                 37  OP_0010     EQU     %0010000000000000
00000000  =00003000                 38  OP_0011     EQU     %0011000000000000
00000000  =00004000                 39  OP_0100     EQU     %0100000000000000
00000000  =00005000                 40  OP_0101     EQU     %0101000000000000
00000000  =00006000                 41  OP_0110     EQU     %0110000000000000
00000000  =00007000                 42  OP_0111     EQU     %0111000000000000
00000000  =00008000                 43  OP_1000     EQU     %1000000000000000
00000000  =00009000                 44  OP_1001     EQU     %1001000000000000
00000000  =0000A000                 45  OP_1010     EQU     %1010000000000000
00000000  =0000B000                 46  OP_1011     EQU     %1011000000000000
00000000  =0000C000                 47  OP_1100     EQU     %1100000000000000
00000000  =0000D000                 48  OP_1101     EQU     %1101000000000000
00000000  =0000E000                 49  OP_1110     EQU     %1110000000000000
00000000  =0000F000                 50  OP_1111     EQU     %1111000000000000
00000000  =0000000F                 51  HEX_VALUE_MASK_LONG EQU     $0000000F  * mask a hex value in 32-bits
00000000                            52  
00000000                            53  * BITMASK     EQU     $F000       * used to bitmask the first nibble
00000000                            54  
00001000                            55  START:  ORG    $1000            * first instruction of program
00001000                            56  
00001000                            57  * -----------------------------------
00001000                            58  * Starting and Ending Addresses
00001000                            59  * -----------------------------------
00001000                            60  *-----------------------------------------------------------------------------
00001000                            61  *-----------------------------------------------------------------------------
00001000                            62  * NAME: x
00001000                            63  * DESCRIPTION:    a
00001000                            64  * PRE-CONDITION:  b
00001000                            65  * POST-CONDITION: c
00001000                            66  * REGISTERS:      d
00001000                            67  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001000                            68  
00001000                            69  * THINK ABOUT ASKING FOR VALID START/END NO NEGATIVE ADDR
00001000                            70  
00001000                            71  * LOAD MSGSTART, ASK FOR INPUT
00001000  43F9 00002500             72          LEA     MSGSTART,A1     * Load MESSAGE START
00001006  103C 000E                 73          MOVE.B  #14,D0          * Trap #14 to display message
0000100A  4E4F                      74          TRAP    #15             * Perform #14
0000100C                            75          
0000100C                            76  * GETS THE STARTING ADDRESS
0000100C  103C 0004                 77          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001010  4E4F                      78          TRAP    #15             * Perform #15
00001012                            79          
00001012                            80  * MOVE IT TO ANOTHER ADDRESS REGISTER
00001012  2441                      81          MOVEA.L D1,A2           * Move the user input into A2. This is the starting address.
00001014                            82  
00001014                            83  * LOAD MSGSTART, ASK FOR INPUT
00001014  43F9 00002518             84          LEA     MSGEND,A1       * Load MESSAGE END
0000101A  303C 000E                 85          MOVE.W  #14,D0          * Trap #14 to display message
0000101E  4E4F                      86          TRAP    #15             * Perform #14
00001020                            87          
00001020                            88  * GETS THE ENDING ADDRESS
00001020  103C 0004                 89          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001024  4E4F                      90          TRAP    #15             * Perform Trap #4
00001026  2A01                      91          MOVE.L  D1,D5           * Move the ending address into D5
00001028  43F9 00002553             92          LEA     NEWLINE,A1      * Store newline variable for seper opcodes
0000102E                            93          
0000102E  3E3C 000F                 94          MOVE.W  #15,D7          * prep D7 for bitmask subroutine
00001032  3C3C 000C                 95          MOVE.W  #12,D6          * prep D6 for bitmask subroutine
00001036  6100 14B2                 96          BSR     BITMASK         * obtain a bitmask that goes from 12-15 (inclusive)
0000103A                            97          * MOVE.W  D6,D2           * move the bitmask to D2
0000103A                            98          
0000103A  4279 00002648             99          CLR     (__COUNTER)              * setup the counter
00001040  33FC 0000 00002648       100          MOVE    #0,(__COUNTER)           
00001048                           101          
00001048  6100 0164                102          BSR     CLEAR_SCREEN    * clear the prompt for start/end ADDR's
0000104C                           103  LOOP    
0000104C  2C4A                     104          MOVE.L  A2,A6
0000104E  7608                     105          MOVE.L  #8,D3
00001050  6100 1258                106          BSR     PRINT_ASCII_HEX_CHAR
00001054                           107          
00001054                           108          *MOVE.W  A2,D1           * print what address we are processing
00001054                           109          *MOVE.B  #3,D0
00001054                           110          *TRAP    #15
00001054                           111          
00001054  43F9 000025F8            112          LEA     SPACE,A1        * print a space to seperate the address from the data
0000105A  303C 000E                113          MOVE.W  #14,D0
0000105E  4E4F                     114          TRAP    #15
00001060                           115  
00001060  3F06                     116          MOVE    D6,-(A7)        * save the bitmask on the stack
00001062  341A                     117          MOVE.W  (A2)+,D2        * Read an operation into D2
00001064  CC42                     118          AND.W   D2,D6           * Apply this bitmask
00001066                           119          
00001066  BC7C 0000                120          CMP     #OP_0000,D6     * Does the operation start with 0000?
0000106A  6600 000A                121          BNE     NOT0000         * No, check next case
0000106E  6100 014A                122          BSR     OP0000          * Branch to subroutine 0000
00001072  6000 00F6                123          BRA     ITERATION       * Move to next iteration of the loop
00001076                           124  NOT0000        
00001076  BC7C 1000                125          CMP     #OP_0001,D6     * Does the operation start with 0001?
0000107A  6600 000A                126          BNE     NOT0001         * No, check next case
0000107E  6100 02C4                127          BSR     OP0001          * Branch to subroutine 0001
00001082  6000 00E6                128          BRA     ITERATION       * Move to next iteration of the loop
00001086                           129  NOT0001
00001086  BC7C 2000                130          CMP     #OP_0010,D6     * Does the operation start with 0010?
0000108A  6600 000A                131          BNE     NOT0010         * No, check next case
0000108E  6100 031A                132          BSR     OP0010          * Branch to subroutine 0010
00001092  6000 00D6                133          BRA     ITERATION       * Move to next iteration of the loop
00001096                           134  NOT0010
00001096  BC7C 3000                135          CMP     #OP_0011,D6     * Does the operation start with 0011?
0000109A  6600 000A                136          BNE     NOT0011         * No, check next case
0000109E  6100 0310                137          BSR     OP0011          * Branch to subroutine 0011
000010A2  6000 00C6                138          BRA     ITERATION       * Move to next iteration of the loop
000010A6                           139  NOT0011
000010A6  BC7C 4000                140          CMP     #OP_0100,D6     * Does the operation start with 0100?
000010AA  6600 000A                141          BNE     NOT0100         * No, check next case
000010AE  6100 030E                142          BSR     OP0100          * Branch to subroutine 0100
000010B2  6000 00B6                143          BRA     ITERATION       * Move to next iteration of the loop
000010B6                           144  NOT0100
000010B6  BC7C 5000                145          CMP     #OP_0101,D6     * Does the operation start with 0101?
000010BA  6600 000A                146          BNE     NOT0101         * No, check next case
000010BE  6100 0624                147          BSR     OP0101          * Branch to subroutine 0101
000010C2  6000 00A6                148          BRA     ITERATION       * Move to next iteration of the loop
000010C6                           149  NOT0101
000010C6  BC7C 6000                150          CMP     #OP_0110,D6     * Does the operation start with 0110?
000010CA  6600 000A                151          BNE     NOT0110         * No, check next case
000010CE  6100 0682                152          BSR     OP0110          * Branch to subroutine 0110
000010D2  6000 0096                153          BRA     ITERATION       * Move to next iteration of the loop
000010D6                           154  NOT0110
000010D6  BC7C 7000                155          CMP     #OP_0111,D6     * Does the operation start with 0111?
000010DA  6600 000A                156          BNE     NOT0111         * No, check next case
000010DE  6100 073A                157          BSR     OP0111          * Branch to subroutine 0111
000010E2  6000 0086                158          BRA     ITERATION       * Move to next iteration of the loop
000010E6                           159  NOT0111
000010E6  BC7C 8000                160          CMP     #OP_1000,D6     * Does the operation start with 1000?
000010EA  6600 000A                161          BNE     NOT1000         * No, check next case
000010EE  6100 0730                162          BSR     OP1000          * Branch to subroutine 1000
000010F2  6000 0076                163          BRA     ITERATION       * Move to next iteration of the loop
000010F6                           164  NOT1000
000010F6  BC7C 9000                165          CMP     #OP_1001,D6     * Does the operation start with 1001?
000010FA  6600 000A                166          BNE     NOT1001         * No, check next case
000010FE  6100 07B4                167          BSR     OP1001          * Branch to subroutine 1001
00001102  6000 0066                168          BRA     ITERATION       * Move to next iteration of the loop
00001106                           169  NOT1001
00001106  BC7C A000                170          CMP     #OP_1010,D6     * Does the operation start with 1010?
0000110A  6600 000A                171          BNE     NOT1010         * No, check next case
0000110E  6100 07A4                172          BSR     OP1010          * Branch to subroutine 1010
00001112  6000 0056                173          BRA     ITERATION       * Move to next iteration of the loop
00001116                           174  NOT1010
00001116  BC7C B000                175          CMP     #OP_1011,D6     * Does the operation start with 1011?
0000111A  6600 000A                176          BNE     NOT1011         * No, check next case
0000111E  6100 079A                177          BSR     OP1011          * Branch to subroutine 1011
00001122  6000 0046                178          BRA     ITERATION       * Move to next iteration of the loop
00001126                           179  NOT1011
00001126  BC7C C000                180          CMP     #OP_1100,D6     * Does the operation start with 1100?
0000112A  6600 000A                181          BNE     NOT1100         * No, check next case
0000112E  6100 0790                182          BSR     OP1100          * Branch to subroutine 1100
00001132  6000 0036                183          BRA     ITERATION       * Move to next iteration of the loop
00001136                           184  NOT1100
00001136  BC7C D000                185          CMP     #OP_1101,D6     * Does the operation start with 1101?
0000113A  6600 000A                186          BNE     NOT1101         * No, check next case
0000113E  6100 080A                187          BSR     OP1101          * Branch to subroutine 1101
00001142  6000 0026                188          BRA     ITERATION       * Move to next iteration of the loop
00001146                           189  NOT1101
00001146  BC7C E000                190          CMP     #OP_1110,D6     * Does the operation start with 1110?
0000114A  6600 000A                191          BNE     NOT1110         * No, check next case
0000114E  6100 0980                192          BSR     OP1110          * Branch to subroutine 1110
00001152  6000 0016                193          BRA     ITERATION       * Move to next iteration of the loop
00001156                           194  NOT1110
00001156  BC7C F000                195          CMP     #OP_1111,D6     * Does the operation start with 1111?
0000115A  6600 000A                196          BNE     LOOPUNKNOWNOP   * No, check next case
0000115E  6100 0B06                197          BSR     OP1111          * Branch to subroutine 1111
00001162  6000 0006                198          BRA     ITERATION       * Move to next iteration of the loop
00001166                           199          
00001166                           200  LOOPUNKNOWNOP
00001166  6100 1118                201          BSR     UNKNOWNOP
0000116A                           202          
0000116A                           203  ITERATION
0000116A  3C1F                     204          MOVE    (A7)+,D6        * restore the bitmask to its previous state
0000116C                           205      
0000116C  5279 00002648            206          ADDI    #1,(__COUNTER)           * Track the lines on screen
00001172  0C79 001E 00002648       207          CMPI    #30,(__COUNTER)
0000117A  6600 0006                208          BNE     END_OF_LOOP     * Not at 30, go loop more
0000117E  6100 000C                209          BSR     IDLE_STATE      * Break to idle, ask to clear screen
00001182                           210  
00001182                           211  END_OF_LOOP
00001182  BA4A                     212          CMP     A2,D5           * Compare the starting address to ending address
00001184  6700 2EEE                213          BEQ     END             * If they are equal, branch 
00001188  6000 FEC2                214          BRA     LOOP            * Otherwise, branch back to LOOP
0000118C                           215  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000118C                           216  *-----------------------------------------------------------------------------
0000118C                           217  IDLE_STATE
0000118C  43F9 0000252E            218      LEA     CONT_MSG,A1 * show msg to hit enter in order to continue
00001192  103C 000E                219      MOVE.B  #14,D0
00001196  4E4F                     220      TRAP    #15
00001198                           221      
00001198  103C 0004                222      MOVE.B  #4,D0 * trap task 4 - input
0000119C  4E4F                     223      TRAP    #15
0000119E  0C41 000D                224      CMPI    #$D,D1
000011A2                           225      
000011A2  6100 000A                226      BSR     CLEAR_SCREEN * clear everything, so ready to output another 30
000011A6  42B9 00002648            227      CLR.L   (__COUNTER)
000011AC  4E75                     228      RTS
000011AE                           229  CLEAR_SCREEN
000011AE  103C 000B                230      MOVE.B  #11,D0
000011B2  323C FF00                231      MOVE.W  #$FF00,D1
000011B6  4E4F                     232      TRAP    #15
000011B8  4E75                     233      RTS
000011BA                           234  
000011BA                           235  
000011BA                           236  *-----------------------------------------------------------------------------
000011BA                           237  *-----------------------------------------------------------------------------
000011BA                           238  * NAME: OP_0000   (BCLR, ORI, CMPI)
000011BA                           239  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000011BA                           240  * PRE-CONDITION:  xyz
000011BA                           241  * POST-CONDITION: All registers return to their previous state, and the output
000011BA                           242  *                 goes to the output console for reading the raw data or the
000011BA                           243  *                 actual instruction.
000011BA                           244  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000011BA                           245  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000011BA                           246  OP0000
000011BA  48A7 FFC0                247          MOVEM   D0-D7/A0-A1,-(A7)   * Push values to the stack to save
000011BE                           248                        
000011BE                           249          * Checking for unsupported mode (An) for BCLR, ORI, and CMPI
000011BE  3C3C 0003                250          MOVE.W  #3, D6              * Prep lower value for bitmask
000011C2  3E3C 0005                251          MOVE.W  #5, D7              * Prep upper value for bitmask
000011C6  6100 1322                252          BSR     BITMASK             * Finalize bitmask setup
000011CA  CC42                     253          AND     D2,D6               * Apply bitmask
000011CC                           254          
000011CC  0C46 0008                255          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
000011D0  6700 0168                256          BEQ     UNKNOWN0000             * If so, the op is unknown
000011D4                           257          
000011D4                           258          * Checking for BCLR Dynamic
000011D4  3C3C 0006                259          MOVE.W  #6, D6              * Prep lower value for bitmask
000011D8  3E3C 0008                260          MOVE.W  #8, D7              * Prep upper value for bitmask
000011DC  6100 130C                261          BSR     BITMASK             * Finalize bitmask setup
000011E0  CC42                     262          AND     D2,D6               * Apply bitmask
000011E2                           263          
000011E2  0C46 0180                264          CMPI    #%0000000110000000, D6  * Are we BCLR Dynamic?
000011E6  6600 0050                265          BNE     NOTBCLRDYNA             * If not, branch to BCLR Static or other ops
000011EA                           266  
000011EA                           267          * Confirmed BCLR Dynamic at this point
000011EA  43F9 0000257F            268          LEA     BCLROP,A1           * We found BCLR
000011F0  103C 000E                269          MOVE.B  #14,D0              * Trap #14 prints out the data
000011F4  4E4F                     270          TRAP    #15                 * Perform Trap #14
000011F6                           271  
000011F6  43F9 000025F8            272          LEA     SPACE,A1            * Formatting
000011FC  103C 000E                273          MOVE.B  #14,D0              * Trap #14 prints out space
00001200  4E4F                     274          TRAP    #15                 * Perform Trap #14
00001202                           275          
00001202                           276          * Set up for printing out the Register
00001202  0882 0006                277          BCLR    #6,D2               * Clear bit 6
00001206  0882 0007                278          BCLR    #7,D2               * Clear bit 7
0000120A  0882 0008                279          BCLR    #8,D2               * Clear bit 8
0000120E                           280          
0000120E  6100 0A5C                281          BSR     EAHELPER611         * Print out Register
00001212                           282  
00001212  43F9 000025FE            283          LEA     COMMA,A1            * formatting
00001218  103C 000E                284          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000121C  4E4F                     285          TRAP    #15                 * Perform Trap #14
0000121E                           286          
0000121E  4243                     287          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
00001220  08C3 0000                288          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
00001224                           289      
00001224  6100 0A88                290          BSR     EAHELPER05          * Print out data.
00001228                           291          
00001228  43F9 00002553            292          LEA     NEWLINE,A1          * Formatting
0000122E  103C 000E                293          MOVE.B  #14,D0              * Trap #14 prints out the data
00001232  4E4F                     294          TRAP    #15                 * Perform Trap #14
00001234                           295          
00001234  6000 0108                296          BRA     END0000             * Found the op, move to next iteration
00001238                           297          
00001238                           298  NOTBCLRDYNA
00001238  3C3C 0006                299          MOVE.W  #6, D6              * Prep lower value for bitmask
0000123C  3E3C 000B                300          MOVE.W  #11, D7             * Prep upper value for bitmask
00001240  6100 12A8                301          BSR     BITMASK             * Finalize bitmask setup
00001244  CC42                     302          AND     D2,D6               * Apply bitmask
00001246                           303          
00001246  0C46 0880                304          CMPI    #%0000100010000000, D6  * Are we BCLR Static?
0000124A  6600 003A                305          BNE     NOTBCLR                 * If not, branch to other functions
0000124E                           306          
0000124E                           307          * Confirmed BCLR Static at this point
0000124E  43F9 0000257F            308          LEA     BCLROP,A1           * We found BCLR
00001254  103C 000E                309          MOVE.B  #14,D0              * Trap #14 prints out the data
00001258  4E4F                     310          TRAP    #15                 * Perform Trap #14
0000125A                           311  
0000125A  43F9 000025F8            312          LEA     SPACE,A1            * Formatting
00001260  103C 000E                313          MOVE.B  #14,D0              * Trap #14 prints out space
00001264  4E4F                     314          TRAP    #15                 * Perform Trap #14
00001266                           315          
00001266  2802                     316          MOVE.L  D2, D4              * Saving values
00001268                           317                  
00001268  43F9 000025FC            318          LEA     IMD, A1             * Formatting
0000126E  103C 000E                319          MOVE.B  #14,D0              * Trap #14 prints out the data
00001272  4E4F                     320          TRAP    #15                 * Perform Trap #14
00001274                           321          
00001274                           322          * Grab next word
00001274  3A1A                     323          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
00001276  E18D                     324          LSL.L   #8, D5              * LSL for first nibble of the word
00001278  E18D                     325          LSL.L   #8, D5              * LSL for second nibble of the word
0000127A  2C45                     326          MOVE.L  D5, A6              * Store D5 into A6, to be used as parameter
0000127C  7604                     327          MOVE.L  #4, D3              * Four most significant bits in D3
0000127E  6100 102A                328          BSR     PRINT_ASCII_HEX_CHAR    * Perform number print out
00001282                           329  
00001282  6000 007E                330          BRA     SKIPLONG            * Formatting, returning saved values, etc.
00001286                           331          
00001286                           332  NOTBCLR * Possible options left are ORI or CMPI
00001286  3C3C 0009                333          MOVE.W  #9, D6              * Prep lower value for bitmask
0000128A  3E3C 000B                334          MOVE.W  #11, D7             * Prep upper value for bitmask
0000128E  6100 125A                335          BSR     BITMASK             * Finalize bitmask setup
00001292  CC42                     336          AND     D2,D6               * Apply bitmask
00001294                           337          
00001294  0C46 0000                338          CMPI    #%0000000000000000, D6   * Are we possibly ORI?
00001298  6600 008A                339          BNE     NOTORI                   * If not, branch to NOTORI
0000129C                           340          
0000129C                           341          * Size check to see if unsupported ORI mode
0000129C  3C3C 0006                342          MOVE.W  #6, D6              * Prep lower value for bitmask
000012A0  3E3C 0007                343          MOVE.W  #7, D7              * Prep upper value for bitmask
000012A4  6100 1244                344          BSR     BITMASK             * Finalize bitmask setup
000012A8  CC42                     345          AND     D2,D6               * Apply bitmask
000012AA                           346          
000012AA  0C46 00C0                347          CMPI    #%0000000011000000, D6  * Are bits 6,7 == 1,1?
000012AE  6700 008A                348          BEQ     UNKNOWN0000             * If so, unknown op. 
000012B2                           349          
000012B2                           350          * Confirmed ORI at this point
000012B2  43F9 0000258D            351          LEA     ORIOP, A1           * Load 'ORI' into the output window
000012B8  103C 000E                352          MOVE.B  #14,D0              * Trap #14 prints out the data in D0
000012BC  4E4F                     353          TRAP    #15                 * Perform Trap #14
000012BE                           354  
000012BE                           355  IMD_SIZE_0000        
000012BE  6100 0D44                356          BSR     SIZE67              * Print the size
000012C2                           357  
000012C2                           358          * Mode check to see the size
000012C2  3C3C 0006                359          MOVE.W  #6, D6              * Prep lower value for bitmask
000012C6  3E3C 0007                360          MOVE.W  #7, D7              * Prep upper value for bitmask
000012CA  6100 121E                361          BSR     BITMASK             * Finalize bitmask setup
000012CE  CC42                     362          AND     D2,D6               * Apply bitmask
000012D0                           363          
000012D0  2802                     364          MOVE.L  D2, D4              * Saving value
000012D2                           365                  
000012D2  43F9 000025FC            366          LEA     IMD, A1             * Formatting
000012D8  103C 000E                367          MOVE.B  #14,D0              * Trap #14 prints out the data
000012DC  4E4F                     368          TRAP    #15                 * Perform Trap #14
000012DE                           369                 
000012DE                           370          * Grab immediate data
000012DE  3A1A                     371          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
000012E0  E18D                     372          LSL.L   #8, D5               
000012E2  E18D                     373          LSL.L   #8, D5
000012E4  2C45                     374          MOVE.L  D5, A6
000012E6  7604                     375          MOVE.L  #4, D3
000012E8  6100 0FC0                376          BSR     PRINT_ASCII_HEX_CHAR
000012EC                           377  
000012EC  0C46 0080                378          CMPI    #%0000000010000000, D6   * See if the size is a LONG
000012F0  6600 0010                379          BNE     SKIPLONG    
000012F4                           380          
000012F4                           381          * Grab next word
000012F4  3A1A                     382          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
000012F6  E18D                     383          LSL.L   #8, D5              * LSL to get first nibble of the word
000012F8  E18D                     384          LSL.L   #8, D5              * LSL to get second nibble of the word
000012FA  2C45                     385          MOVE.L  D5, A6              * Store D5 into A6 as a parameter
000012FC  7604                     386          MOVE.L  #4, D3              * Move #4 into D3 to show four bits
000012FE  6100 0FAA                387          BSR     PRINT_ASCII_HEX_CHAR    * Perform number output
00001302                           388  
00001302                           389  SKIPLONG
00001302  43F9 000025FE            390          LEA     COMMA, A1           * Formatting
00001308  103C 000E                391          MOVE.B  #14,D0              * Trap #14 prints out the data
0000130C  4E4F                     392          TRAP    #15                 * Perform Trap #14
0000130E                           393          
0000130E  2404                     394          MOVE.L  D4, D2              * Return saved value
00001310                           395          
00001310  6100 099C                396          BSR     EAHELPER05          * Print out the EA
00001314                           397          
00001314  43F9 00002553            398          LEA     NEWLINE,A1          * Formatting
0000131A  103C 000E                399          MOVE.B  #14,D0              * Trap #14 prints out the data
0000131E  4E4F                     400          TRAP    #15                 * Perform Trap #14
00001320                           401          
00001320  6000 001C                402          BRA     END0000             * Done with op. Move to next iteration
00001324                           403  
00001324                           404  NOTORI  * Possible option left is CMPI
00001324                           405  
00001324  0C46 0C00                406          CMPI    #%0000110000000000, D6  * Are we CMPI?
00001328  6600 0010                407          BNE     UNKNOWN0000             * If not, unknown op
0000132C                           408          
0000132C                           409          * Confirmed CMPI at this point
0000132C  43F9 00002591            410          LEA     CMPIOP, A1          * Formatting
00001332  103C 000E                411          MOVE.B  #14,D0              * Trap #14 prints out the data
00001336  4E4F                     412          TRAP    #15                 * Perform Trap #14
00001338                           413          
00001338  6084                     414          BRA     IMD_SIZE_0000       * Get immediate value and end opcode 0000
0000133A                           415          
0000133A                           416  UNKNOWN0000
0000133A  6100 0F44                417          BSR     UNKNOWNOP          * Unknown op
0000133E                           418  
0000133E                           419  END0000          
0000133E  4C9F 03FF                420          MOVEM   (A7)+,D0-D7/A0-A1   * Push values to the stack to save
00001342  4E75                     421          RTS
00001344                           422  
00001344                           423  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001344                           424  *-----------------------------------------------------------------------------
00001344                           425  
00001344                           426  
00001344                           427  
00001344                           428  *-----------------------------------------------------------------------------
00001344                           429  *-----------------------------------------------------------------------------
00001344                           430  * NAME: OP_0001   (MOVE.B)
00001344                           431  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001344                           432  * PRE-CONDITION:  xyz
00001344                           433  * POST-CONDITION: All registers return to their previous state, and the output
00001344                           434  *                 goes to the output console for reading the raw data or the
00001344                           435  *                 actual instruction.
00001344                           436  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001344                           437  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001344                           438  OP0001  
00001344  48A7 FFC0                439          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
00001348  3C3C 0006                440          MOVE.W  #6, D6              * Prep lower value for bitmask
0000134C  3E3C 0008                441          MOVE.W  #8, D7              * Prep upper value for bitmask
00001350  6100 1198                442          BSR     BITMASK             * Finalize bitmask setup
00001354  CC42                     443          AND     D2,D6               * Apply bitmask
00001356                           444          
00001356                           445          * I may have fucked off this part, sorry - Caleb
00001356                           446          * CMPI    #%0000000001000000, D6  * Is the destination mode 001?
00001356                           447          * BNE     UNKNOWNOP0001                 * If so, it's unknown.
00001356                           448          
00001356  43F9 00002563            449          LEA     MOVEOP,A1   * Put 'MOVE' into the window
0000135C  103C 000E                450          MOVE.B  #14,D0      * Trap #14 to print out
00001360  4E4F                     451          TRAP    #15         * Perform Trap #14
00001362                           452          
00001362                           453          *-----------------------------------------------------------
00001362                           454          * the following code is to move the size bits into the
00001362                           455          * 0-1 positions of D3 so that eahelper05 case use that as a "parameter"
00001362                           456          * for eahelper05
00001362                           457          
00001362  3C3C 000C                458          MOVE.W  #12, D6              * Prep lower value for bitmask
00001366  3E3C 000D                459          MOVE.W  #13, D7              * Prep upper value for bitmask
0000136A  6100 117E                460          BSR     BITMASK              * Finalize bitmask setup
0000136E  CC42                     461          AND     D2,D6                * Apply bitmask
00001370                           462          
00001370  E04E                     463          LSR     #8,D6
00001372  E84E                     464          LSR     #4,D6
00001374                           465          
00001374  4243                     466          CLR     D3
00001376                           467          
00001376  1606                     468          MOVE.B  D6,D3
00001378                           469          
00001378                           470          *---------------------------------------------------------------
00001378                           471          
00001378                           472          
00001378  6100 0C8A                473          BSR     SIZE67
0000137C  6100 0930                474          BSR     EAHELPER05
00001380                           475          
00001380  43F9 000025FE            476          LEA     COMMA,A1
00001386  103C 000E                477          MOVE.B  #14,D0
0000138A  4E4F                     478          TRAP    #15
0000138C                           479          
0000138C  6100 08DE                480          BSR     EAHELPER611
00001390                           481          
00001390  43F9 00002553            482          LEA     NEWLINE,A1
00001396  103C 000E                483          MOVE.B  #14,D0
0000139A  4E4F                     484          TRAP    #15
0000139C                           485          
0000139C  6000 0006                486          BRA     ENDOP0001
000013A0                           487          *LEA     __B,A1      * Put '.B' into the window
000013A0                           488          *MOVE.B  #14,D0      * Trap #14 to print out
000013A0                           489          *TRAP    #15         * Perform Trap #14
000013A0                           490          
000013A0                           491  UNKNOWNOP0001
000013A0  6100 0EDE                492          BSR     UNKNOWNOP
000013A4                           493          
000013A4                           494  ENDOP0001
000013A4  4C9F 03FF                495          MOVEM (A7)+,D0-D7/A0-A1
000013A8  4E75                     496          RTS        
000013AA                           497          
000013AA                           498          * TODO: DETERMINE THE MODE AND REG FOR DESTINATION AND SOURCE
000013AA                           499  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000013AA                           500  *-----------------------------------------------------------------------------
000013AA                           501  
000013AA                           502  
000013AA                           503  
000013AA                           504  *-----------------------------------------------------------------------------
000013AA                           505  *-----------------------------------------------------------------------------
000013AA                           506  * NAME: OP_0010   (MOVE.L, MOVEA.L)
000013AA                           507  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000013AA                           508  * PRE-CONDITION:  xyz
000013AA                           509  * POST-CONDITION: All registers return to their previous state, and the output
000013AA                           510  *                 goes to the output console for reading the raw data or the
000013AA                           511  *                 actual instruction.
000013AA                           512  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000013AA                           513  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000013AA                           514  OP0010
000013AA                           515  
000013AA  6100 0ED4                516      BSR     UNKNOWNOP
000013AE  4E75                     517      RTS
000013B0                           518  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000013B0                           519  *-----------------------------------------------------------------------------
000013B0                           520  
000013B0                           521  
000013B0                           522  
000013B0                           523  *-----------------------------------------------------------------------------
000013B0                           524  *-----------------------------------------------------------------------------
000013B0                           525  * NAME: OP_0011   (MOVE.W, MOVEA.W)
000013B0                           526  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000013B0                           527  * PRE-CONDITION:  xyz
000013B0                           528  * POST-CONDITION: All registers return to their previous state, and the output
000013B0                           529  *                 goes to the output console for reading the raw data or the
000013B0                           530  *                 actual instruction.
000013B0                           531  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000013B0                           532  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000013B0                           533  OP0011
000013B0  48A7 FFFE                534      MOVEM   D0-D7/A0-A6, -(A7)
000013B4                           535      
000013B4                           536      *MOVE.W  #6,D6
000013B4                           537      *MOVE.W  #8,D7
000013B4                           538      
000013B4                           539      *BSR     BITMASK
000013B4                           540      
000013B4                           541      *AND.W   D2,D6
000013B4                           542      
000013B4                           543      *CMP     #%0000000001000000,D6
000013B4                           544      *BNE     NEXT15
000013B4                           545      *BSR     * for MOVEA.W
000013B4                           546      
000013B4  4C9F 7FFF                547      MOVEM   (A7)+,D0-D7/A0-A6
000013B8                           548      
000013B8  6100 0EC6                549      BSR     UNKNOWNOP
000013BC  4E75                     550      RTS
000013BE                           551  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000013BE                           552  *-----------------------------------------------------------------------------
000013BE                           553  
000013BE                           554  *-----------------------------------------------------------------------------
000013BE                           555  *-----------------------------------------------------------------------------
000013BE                           556  * NAME: OP_0100   (NOP, MOVEM, LEA, NEG, JSR, RTS)
000013BE                           557  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000013BE                           558  * PRE-CONDITION:  xyz
000013BE                           559  * POST-CONDITION: All registers return to their previous state, and the output
000013BE                           560  *                 goes to the output console for reading the raw data or the
000013BE                           561  *                 actual instruction.
000013BE                           562  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000013BE                           563  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000013BE                           564  OP0100  
000013BE                           565          * TODO: movem
000013BE                           566  
000013BE  48A7 C0C0                567          MOVEM   D0-D1/A0-A1,-(A7) * Push values to the stack to save
000013C2                           568          
000013C2                           569          *NOP
000013C2  0C42 4E71                570          CMPI    #%0100111001110001,D2
000013C6  6600 0012                571          BNE     NOTNOP
000013CA                           572          
000013CA  43F9 0000255B            573          LEA     NOOPERATION,A1
000013D0  103C 000D                574          MOVE.B  #13,D0          * Print a newline
000013D4  4E4F                     575          TRAP    #15
000013D6                           576          
000013D6  6000 0306                577          BRA     DONE0100 *we found it, move on to the next iteration
000013DA                           578  NOTNOP *NEG
000013DA                           579          
000013DA                           580          * prep values for BITMASK subroutine
000013DA  7C08                     581          MOVE.L  #8,D6
000013DC  7E0B                     582          MOVE.L  #11,D7
000013DE                           583          
000013DE  6100 110A                584          BSR     BITMASK
000013E2                           585          
000013E2  CC42                     586          AND     D2,D6                   * apply bitmask
000013E4                           587          
000013E4  0C46 0400                588          CMPI    #%0000010000000000,D6   * are we NEG?
000013E8  6600 0046                589          BNE     NOTNEG                  * not neg
000013EC                           590          
000013EC  7C03                     591          MOVE.L  #3,D6
000013EE  7E05                     592          MOVE.L  #5,D7
000013F0                           593          
000013F0  6100 10F8                594          BSR     BITMASK * generate a bitmask to be used to check mode
000013F4                           595          
000013F4  0C46 0008                596          CMPI    #%0000000000001000,D6 * check to see if it is the unsupported mode
000013F8  6700 02E0                597          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
000013FC                           598          
000013FC  0C46 0028                599          CMPI    #%0000000000101000,D6 * check to see if it is the unsupported mode
00001400  6700 02D8                600          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
00001404                           601          
00001404  0C46 0030                602          CMPI    #%0000000000110000,D6 * check to see if it is the unsupported mode
00001408  6700 02D0                603          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
0000140C                           604        
0000140C                           605          * it is NEG, print
0000140C  43F9 0000255F            606          LEA     NEGOP,A1
00001412  103C 000E                607          MOVE.B  #14,D0
00001416  4E4F                     608          TRAP    #15
00001418                           609          
00001418  6100 0BEA                610          BSR     SIZE67
0000141C                           611          
0000141C  6100 0890                612          BSR     EAHELPER05
00001420                           613          
00001420  43F9 00002553            614          LEA     NEWLINE,A1
00001426  103C 000E                615          MOVE.B  #14,D0
0000142A  4E4F                     616          TRAP    #15
0000142C                           617          
0000142C  6000 02B0                618          BRA     DONE0100 * we found the op, move to next iteration
00001430                           619          
00001430                           620  NOTNEG *MOVEM
00001430                           621  
00001430                           622          * prep values for BITMASK subroutine
00001430  7C07                     623          MOVE.L  #7,D6
00001432  7E09                     624          MOVE.L  #9,D7
00001434                           625          
00001434  6100 10B4                626          BSR     BITMASK
00001438                           627          
00001438  CC82                     628          AND.L   D2,D6   * apply bitmask
0000143A                           629          
0000143A  0C46 0080                630          CMPI    #%0000000010000000,D6 * is it MOVEM?
0000143E  6600 0148                631          BNE     NOTMOVEM          * it is not MOVEM
00001442                           632          
00001442  7C0A                     633          MOVE.L  #10,D6
00001444  7E0A                     634          MOVE.L  #10,D7
00001446                           635          
00001446  6100 10A2                636          BSR     BITMASK
0000144A                           637          
0000144A  CC82                     638          AND.L   D2,D6
0000144C                           639          
0000144C  0C46 0000                640          CMPI    #%0000000000000000,D6 * is it register to memory?
00001450  6700 009C                641          BEQ     MOVEMTOMEM 
00001454                           642          
00001454                           643  MOVEMTOREG *supported modes: 010 011
00001454                           644  
00001454  7C03                     645          MOVE.L  #3,D6
00001456  7E05                     646          MOVE.L  #5,D7
00001458                           647          
00001458  6100 1090                648          BSR     BITMASK
0000145C                           649          
0000145C  CC82                     650          AND.L   D2,D6
0000145E                           651          
0000145E  0C46 0000                652          CMPI    #%0000000000000000,D6 * is it an unsupported mode?
00001462  6700 0276                653          BEQ     UNKNOWN0100
00001466                           654          
00001466  0C46 0008                655          CMPI    #%0000000000001000,D6 * is it an unsupported mode?
0000146A  6700 026E                656          BEQ     UNKNOWN0100
0000146E                           657          
0000146E  0C46 0020                658          CMPI    #%0000000000100000,D6 * is it an unsupported mode?
00001472  6700 0266                659          BEQ     UNKNOWN0100
00001476                           660          
00001476  0C46 0028                661          CMPI    #%0000000000101000,D6 * is it an unsupported mode?
0000147A  6700 025E                662          BEQ     UNKNOWN0100
0000147E                           663          
0000147E  0C46 0030                664          CMPI    #%0000000000110000,D6 * is it an unsupported mode?
00001482  6700 0256                665          BEQ     UNKNOWN0100
00001486                           666          
00001486  0C46 0038                667          CMPI    #%0000000000111000,D6 * is it an unsupported mode?
0000148A  6700 024E                668          BEQ     UNKNOWN0100
0000148E                           669          
0000148E  43F9 00002568            670          LEA     MOVEMOP,A1
00001494  103C 000E                671          MOVE.B  #14,D0          * print MOVEM
00001498  4E4F                     672          TRAP    #15
0000149A                           673          
0000149A  7C06                     674          MOVE.L  #6,D6
0000149C  7E06                     675          MOVE.L  #6,D7
0000149E                           676          
0000149E  6100 104A                677          BSR     BITMASK
000014A2                           678          
000014A2  CC82                     679          AND.L   D2,D6
000014A4                           680          
000014A4  0C46 0040                681          CMPI    #%0000000001000000,D6 * is it a long op?
000014A8  6600 0012                682          BNE     NOTLONGMOVEM1       * no, it is a word
000014AC                           683          
000014AC  43F9 00002614            684          LEA     __L,A1
000014B2  103C 000E                685          MOVE.B  #14,D0          * print .L 
000014B6  4E4F                     686          TRAP    #15
000014B8                           687          
000014B8  6000 000E                688          BRA     SKIPNOTLONG1
000014BC                           689          
000014BC                           690  NOTLONGMOVEM1
000014BC                           691  
000014BC  43F9 00002610            692          LEA     __W,A1
000014C2  103C 000E                693          MOVE.B  #14,D0          * print .W 
000014C6  4E4F                     694          TRAP    #15
000014C8                           695                  
000014C8                           696  SKIPNOTLONG1
000014C8                           697  
000014C8  6100 07E4                698          BSR     EAHELPER05 * print out the register we are moving from
000014CC                           699          
000014CC  43F9 000025FE            700          LEA     COMMA,A1
000014D2  103C 000E                701          MOVE.B  #14,D0          * print , 
000014D6  4E4F                     702          TRAP    #15
000014D8                           703          
000014D8  6100 0BF0                704          BSR     MOVEMHELPERPOST
000014DC                           705          
000014DC  341A                     706          MOVE.W  (A2)+,D2
000014DE                           707          
000014DE  43F9 00002553            708          LEA     NEWLINE,A1
000014E4  103C 000E                709          MOVE.B  #14,D0          * print a newline 
000014E8  4E4F                     710          TRAP    #15
000014EA                           711      
000014EA  6000 01F2                712          BRA     DONE0100          * we found and printed, move on to the next iteration
000014EE                           713          
000014EE                           714  MOVEMTOMEM * supported modes 010 100
000014EE                           715  
000014EE  7C03                     716          MOVE.L  #3,D6
000014F0  7E05                     717          MOVE.L  #5,D7
000014F2                           718          
000014F2  6100 0FF6                719          BSR     BITMASK
000014F6                           720          
000014F6  CC82                     721          AND.L   D2,D6
000014F8                           722          
000014F8  0C46 0000                723          CMPI    #%0000000000000000,D6 * is it an unsopported mode?
000014FC  6700 01DC                724          BEQ     UNKNOWN0100
00001500                           725          
00001500  0C46 0008                726          CMPI    #%0000000000001000,D6 * is it an unsopported mode?
00001504  6700 01D4                727          BEQ     UNKNOWN0100
00001508                           728          
00001508  0C46 0018                729          CMPI    #%0000000000011000,D6 * is it an unsopported mode?
0000150C  6700 01CC                730          BEQ     UNKNOWN0100
00001510                           731          
00001510  0C46 0028                732          CMPI    #%0000000000101000,D6 * is it an unsopported mode?
00001514  6700 01C4                733          BEQ     UNKNOWN0100
00001518                           734          
00001518  0C46 0030                735          CMPI    #%0000000000110000,D6 * is it an unsopported mode?
0000151C  6700 01BC                736          BEQ     UNKNOWN0100
00001520                           737          
00001520  0C46 0070                738          CMPI    #%0000000001110000,D6 * is it an unsopported mode?
00001524  6700 01B4                739          BEQ     UNKNOWN0100
00001528                           740          
00001528  43F9 00002568            741          LEA     MOVEMOP,A1
0000152E  103C 000E                742          MOVE.B  #14,D0          * print MOVEM
00001532  4E4F                     743          TRAP    #15
00001534                           744          
00001534  7C06                     745          MOVE.L  #6,D6
00001536  7E06                     746          MOVE.L  #6,D7
00001538                           747          
00001538  6100 0FB0                748          BSR     BITMASK
0000153C                           749          
0000153C  CC82                     750          AND.L   D2,D6
0000153E                           751          
0000153E  0C46 0040                752          CMPI    #%0000000001000000,D6 * is it a long op?
00001542  6600 0012                753          BNE     NOTLONGMOVEM2       * no, it is a word
00001546                           754          
00001546  43F9 00002614            755          LEA     __L,A1
0000154C  103C 000E                756          MOVE.B  #14,D0          * print .L 
00001550  4E4F                     757          TRAP    #15
00001552                           758          
00001552  6000 000E                759          BRA     SKIPNOTLONG2
00001556                           760          
00001556                           761  NOTLONGMOVEM2
00001556                           762  
00001556  43F9 00002610            763          LEA     __W,A1
0000155C  103C 000E                764          MOVE.B  #14,D0          * print .W 
00001560  4E4F                     765          TRAP    #15
00001562                           766                  
00001562                           767  SKIPNOTLONG2
00001562                           768  
00001562  6100 0CEE                769          BSR     MOVEMHELPERPRE
00001566                           770  
00001566  43F9 000025FE            771          LEA     COMMA,A1
0000156C  103C 000E                772          MOVE.B  #14,D0          * print , 
00001570  4E4F                     773          TRAP    #15
00001572                           774          
00001572  6100 073A                775          BSR     EAHELPER05 * print out the register we are moving to
00001576                           776          
00001576  341A                     777          MOVE.W  (A2)+,D2
00001578                           778          
00001578  43F9 00002553            779          LEA     NEWLINE,A1
0000157E  103C 000E                780          MOVE.B  #14,D0          * print a newline 
00001582  4E4F                     781          TRAP    #15
00001584                           782      
00001584  6000 0158                783          BRA     DONE0100          * we found and printed, move on to the next iteration
00001588                           784  
00001588                           785  NOTMOVEM *JSR
00001588                           786          * prep values for BITMASK subroutine
00001588  7C06                     787          MOVE.L  #6,D6
0000158A  7E08                     788          MOVE.L  #8,D7
0000158C                           789          
0000158C  6100 0F5C                790          BSR     BITMASK
00001590                           791          
00001590  CC42                     792          AND     D2,D6   * apply bitmask
00001592                           793          
00001592  0C46 0080                794          CMPI    #%0000000010000000,D6
00001596  6600 003E                795          BNE     NOTJSR          * it's not JSR
0000159A                           796          
0000159A  43F9 0000256E            797          LEA     JSROP,A1
000015A0  103C 000E                798          MOVE.B  #14,D0          * Print a newline and JSR
000015A4  4E4F                     799          TRAP    #15
000015A6                           800          
000015A6  43F9 000025F8            801          LEA     SPACE,A1
000015AC  103C 000E                802          MOVE.B  #14,D0          * Print a newline and JSR
000015B0  4E4F                     803          TRAP    #15
000015B2                           804          
000015B2                           805          * print out where we are jumping to
000015B2                           806          
000015B2  341A                     807          MOVE.W  (A2)+,D2 * read in the next word of the instruction 
000015B4                           808          
000015B4  2202                     809          MOVE.L  D2,D1   * save the opcode to print
000015B6                           810          
000015B6  7410                     811          MOVE.L  #16,D2  * set the base to 16
000015B8                           812          
000015B8  700F                     813          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000015BA  4E4F                     814          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000015BC                           815          
000015BC  341A                     816          MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
000015BE                           817          
000015BE  2202                     818          MOVE.L  D2,D1   * save the opcode to print
000015C0                           819          
000015C0  7410                     820          MOVE.L  #16,D2  * set the base to 16
000015C2                           821          
000015C2  700F                     822          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000015C4  4E4F                     823          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000015C6                           824          
000015C6  43F9 00002553            825          LEA     NEWLINE,A1
000015CC  103C 000E                826          MOVE.B  #14,D0          * Print a newline
000015D0  4E4F                     827          TRAP    #15
000015D2                           828          
000015D2  6000 010A                829          BRA     DONE0100          * we already found instruction, next iteration
000015D6                           830  NOTJSR *RTS
000015D6                           831  
000015D6                           832          * prep values for BITMASK subroutine
000015D6  7C06                     833          MOVE.L  #6,D6
000015D8  7E08                     834          MOVE.L  #8,D7
000015DA                           835          
000015DA  6100 0F0E                836          BSR     BITMASK
000015DE                           837          
000015DE  CC42                     838          AND     D2,D6   * apply bitmask
000015E0                           839          
000015E0  0C46 0040                840          CMPI    #%0000000001000000,D6
000015E4  6600 0012                841          BNE     NOTRTS          * it's not RTS
000015E8                           842          
000015E8  43F9 00002572            843          LEA     RTSOP,A1
000015EE  103C 000D                844          MOVE.B  #13,D0          * Print a newline and RTS
000015F2  4E4F                     845          TRAP    #15
000015F4                           846          
000015F4  6000 00E8                847          BRA     DONE0100          * we already found instruction, next iteration
000015F8                           848  NOTRTS  *LEA
000015F8                           849         
000015F8                           850          * prep values for BITMASK subroutine
000015F8  7C06                     851          MOVE.L  #6,D6
000015FA  7E08                     852          MOVE.L  #8,D7
000015FC                           853          
000015FC  6100 0EEC                854          BSR     BITMASK
00001600                           855          
00001600  CC42                     856          AND     D2,D6   * apply bitmask
00001602                           857          
00001602  0C46 01C0                858          CMPI    #%0000000111000000,D6
00001606  6600 00D2                859          BNE     UNKNOWN0100          * it's not LEA, we dont know what it is
0000160A                           860          
0000160A                           861          * prep values for BITMASK subroutine
0000160A  7C03                     862          MOVE.L  #3,D6
0000160C  7E05                     863          MOVE.L  #5,D7
0000160E                           864          
0000160E  6100 0EDA                865          BSR     BITMASK
00001612                           866          
00001612  CC42                     867          AND     D2,D6   * apply bitmask
00001614                           868          
00001614  0C46 0008                869          CMPI    #%0000000000001000,D6
00001618  6700 00C0                870          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
0000161C                           871          
0000161C  0C46 0018                872          CMPI    #%0000000000011000,D6
00001620  6700 00B8                873          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001624                           874          
00001624  0C46 0020                875          CMPI    #%0000000000100000,D6
00001628  6700 00B0                876          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
0000162C                           877          
0000162C  0C46 0028                878          CMPI    #%0000000000101000,D6
00001630  6700 00A8                879          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001634                           880          
00001634  0C46 0030                881          CMPI    #%0000000000110000,D6
00001638  6700 00A0                882          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
0000163C                           883          
0000163C  0C46 0038                884          CMPI    #%0000000000111000,D6
00001640  6700 0046                885          BEQ     TWOWORDLEA          * it's a two word LEA
00001644                           886          
00001644                           887          * check to make sure it is a supported mode and size
00001644                           888          
00001644  43F9 0000257B            889          LEA     LEAOP,A1
0000164A  103C 000E                890          MOVE.B  #14,D0          * Print LEA
0000164E  4E4F                     891          TRAP    #15
00001650                           892          
00001650  0882 0007                893          BCLR    #7,D2
00001654  0882 0008                894          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
00001658                           895          
00001658  43F9 000025F8            896          LEA     SPACE,A1
0000165E  103C 000E                897          MOVE.B  #14,D0          * Print SPACE
00001662  4E4F                     898          TRAP    #15
00001664                           899          
00001664  6100 0648                900          BSR     EAHELPER05
00001668                           901          
00001668  43F9 000025FE            902          LEA     COMMA,A1
0000166E  103C 000E                903          MOVE.B  #14,D0          * Print COMMA
00001672  4E4F                     904          TRAP    #15
00001674                           905          
00001674  6100 05F6                906          BSR     EAHELPER611
00001678                           907          
00001678  43F9 00002553            908          LEA     NEWLINE,A1
0000167E  103C 000E                909          MOVE.B  #14,D0          * Start a new line
00001682  4E4F                     910          TRAP    #15
00001684                           911          
00001684                           912          
00001684                           913          * call EA helper
00001684                           914          * MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
00001684                           915                  
00001684  6000 0058                916          BRA     DONE0100          * we already found instruction, next iteration
00001688                           917          
00001688                           918  TWOWORDLEA
00001688                           919  
00001688  43F9 0000257B            920          LEA     LEAOP,A1
0000168E  103C 000E                921          MOVE.B  #14,D0   * Print LEA
00001692  4E4F                     922          TRAP    #15
00001694                           923          
00001694  43F9 000025F8            924          LEA     SPACE,A1
0000169A  103C 000E                925          MOVE.B  #14,D0   * Print SPACE
0000169E  4E4F                     926          TRAP    #15
000016A0                           927  
000016A0  321A                     928          MOVE.W  (A2)+,D1
000016A2                           929          
000016A2  7C00                     930          MOVE.L  #0,D6
000016A4  7E0F                     931          MOVE.L  #15,D7
000016A6                           932          
000016A6  6100 0E42                933          BSR     BITMASK
000016AA                           934          
000016AA  C286                     935          AND.L   D6,D1   * shave off bad info
000016AC                           936          
000016AC  103C 0003                937          MOVE.B  #3,D0   * Print the address which was the source
000016B0  4E4F                     938          TRAP    #15
000016B2                           939          
000016B2  43F9 000025FE            940          LEA     COMMA,A1
000016B8  103C 000E                941          MOVE.B  #14,D0  * Print COMMA
000016BC  4E4F                     942          TRAP    #15
000016BE                           943          
000016BE  0882 0007                944          BCLR    #7,D2
000016C2  0882 0008                945          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
000016C6                           946          
000016C6  6100 05A4                947          BSR     EAHELPER611
000016CA                           948          
000016CA  43F9 00002553            949          LEA     NEWLINE,A1
000016D0  103C 000E                950          MOVE.B  #14,D0          * Start a new line
000016D4  4E4F                     951          TRAP    #15
000016D6                           952          
000016D6  6000 0006                953          BRA     DONE0100
000016DA                           954          
000016DA                           955  UNKNOWN0100 *dont know what it is
000016DA  6100 0BA4                956          BSR     UNKNOWNOP
000016DE                           957          
000016DE                           958  DONE0100
000016DE  4C9F 0303                959          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
000016E2  4E75                     960          RTS
000016E4                           961          
000016E4                           962  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000016E4                           963  *-----------------------------------------------------------------------------
000016E4                           964        
000016E4                           965          
000016E4                           966          
000016E4                           967  
000016E4                           968  *-----------------------------------------------------------------------------
000016E4                           969  *-----------------------------------------------------------------------------
000016E4                           970  * NAME: OP_0101   (SUBQ)
000016E4                           971  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000016E4                           972  * PRE-CONDITION:  xyz
000016E4                           973  * POST-CONDITION: All registers return to their previous state, and the output
000016E4                           974  *                 goes to the output console for reading the raw data or the
000016E4                           975  *                 actual instruction.
000016E4                           976  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000016E4                           977  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000016E4                           978  OP0101
000016E4  48A7 FFC0                979          MOVEM   D0-D7/A0-A1,-(A7)       * Push values to the stack to save
000016E8                           980  
000016E8  CC7C 0100                981          AND     #%0000000100000000, D6  * Baby-Bitmask for the 8th digit.
000016EC  0C46 0100                982          CMPI    #%0000000100000000, D6  * Is the 8th digit a 1?
000016F0  6700 005A                983          BEQ     UNKNOWN0101             * If so, unknown op
000016F4                           984        
000016F4  0C46 0100                985          CMPI    #%0000000100000000, D6  * Is the size 11, an unsupported value?
000016F8  6700 0052                986          BEQ     UNKNOWN0101             * If so, unknown op
000016FC                           987            
000016FC                           988          * Verified SUBQ at this point
000016FC  43F9 00002576            989          LEA     SUBQOP,A1           * Print out SUBQ
00001702  103C 000E                990          MOVE.B  #14,D0              * Trap #14 to print out
00001706  4E4F                     991          TRAP    #15                 * Perform Trap #14
00001708                           992                          
00001708  6100 08FA                993          BSR     SIZE67              * Print out size
0000170C                           994          
0000170C  43F9 000025FC            995          LEA     IMD,A1              * Formatting
00001712  103C 000E                996          MOVE.B  #14,D0              * Trap #14 prints out space
00001716  4E4F                     997          TRAP    #15                 * Perform Trap #14
00001718                           998          
00001718  3C3C 0009                999          MOVE.W  #9, D6              * Prep lower value for bitmask
0000171C  3E3C 000B               1000          MOVE.W  #11,D7              * Prep upper value for bitmask
00001720  6100 0DC8               1001          BSR     BITMASK             * Finalize bitmask setup
00001724  CC42                    1002          AND     D2,D6               * Apply bitmask
00001726                          1003          
00001726  6100 0D10               1004          BSR     PRINTDATA911        * Special op for immediate in bits 9->11
0000172A                          1005            
0000172A  43F9 000025FE           1006          LEA     COMMA,A1            * Formatting
00001730  103C 000E               1007          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001734  4E4F                    1008          TRAP    #15                 * Perform Trap #14
00001736                          1009          
00001736  6100 0576               1010          BSR     EAHELPER05          * Print out the Effective Address
0000173A                          1011          
0000173A  43F9 00002553           1012          LEA     NEWLINE,A1          * Formatting
00001740  103C 000E               1013          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001744  4E4F                    1014          TRAP    #15                 * Perform Trap #14
00001746                          1015          
00001746  4C9F 03FF               1016          MOVEM   (A7)+,D0-D7/A0-A1   * Pop off the stack to return our registers
0000174A  4E75                    1017          RTS
0000174C                          1018      
0000174C                          1019  UNKNOWN0101
0000174C  6100 0B32               1020          BSR     UNKNOWNOP
00001750  4E75                    1021          RTS
00001752                          1022  
00001752                          1023  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001752                          1024  *-----------------------------------------------------------------------------
00001752                          1025  
00001752                          1026  
00001752                          1027  
00001752                          1028  *-----------------------------------------------------------------------------
00001752                          1029  *-----------------------------------------------------------------------------
00001752                          1030  * NAME: OP_0110   (BCC, BCS, BGE, BLT, BVC, BRA)
00001752                          1031  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001752                          1032  * PRE-CONDITION:  Given the possibilties for 0110, masks the next 4 bits
00001752                          1033  *                 in the instruction and determines what the bits match to a
00001752                          1034  *                 given condition code. If the 8 bit offset is $00, or $FF,
00001752                          1035  *                 this signifies a word or long offset (for $00 and $FF
00001752                          1036  *                 respectively). The 8 bit offset is in 2's comp. form, and
00001752                          1037  *                 should be un-done, then plus or minus to the current
00001752                          1038  *                 program counter (PC) to get the actual memory label to
00001752                          1039  *                 output to console. The word offset signal eats an
00001752                          1040  *                 additional 16 bits and the long offset eats an additional
00001752                          1041  *                 32 bits. The word/long offset are for memory alignment.
00001752                          1042  * POST-CONDITION: All registers return to their previous state, and the output
00001752                          1043  *                 goes to the output console for reading the raw data or the
00001752                          1044  *                 actual instruction.
00001752                          1045  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001752                          1046  *                 A1 (output)
00001752                          1047  * CONDITIONS TABLE:
00001752                          1048  *                Condition Names  - Mnemonic - Condition Code
00001752                          1049  *                --------------------------------------------
00001752                          1050  *                True             -    T     - 0000
00001752                          1051  *                False            -    F     - 0001
00001752                          1052  *                Higher           -    HI    - 0010
00001752                          1053  *                Lower or Same    -    LS    - 0011
00001752                          1054  *                Carry Clear      -    CC    - 0100
00001752                          1055  *                Carry Set        -    CS    - 0101
00001752                          1056  *                Not Equal        -    NE    - 0110
00001752                          1057  *                Equal            -    EQ    - 0111
00001752                          1058  *                Overflow Clear   -    VC    - 1000
00001752                          1059  *                Overflow Set     -    VS    - 1001
00001752                          1060  *                Plus             -    PL    - 1010
00001752                          1061  *                Minus            -    MI    - 1011
00001752                          1062  *                Greater or Equal -    GE    - 1100
00001752                          1063  *                Less Than        -    LT    - 1101
00001752                          1064  *                Greater Than     -    GT    - 1110
00001752                          1065  *                Less or Equal    -    LE    - 1111
00001752                          1066  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001752  48E7 FFFE               1067  OP0110  MOVEM.L D0-D7/A0-A6,-(A7) * Save main method routine vars to stack
00001756                          1068                          
00001756  3C3C 0009               1069          MOVE.W  #9,D6  * Move in 9 to D6
0000175A  3E3C 000B               1070          MOVE.W  #11,D7 * Move in 11 to D7
0000175E                          1071                                        
0000175E  6100 0D8A               1072          BSR     BITMASK * Call BITMASK sub-routine, Returns a bitmask in D6
00001762  CC42                    1073          AND     D2,D6   * apply the BITMASK
00001764                          1074          
00001764  0C46 0400               1075          CMPI    #%0000010000000000,D6 * CASE 1: BCC - BINARY FOR "CARRY CLEAR" FLAG
00001768  6700 0032               1076          BEQ     OP_BCC
0000176C  0C46 0500               1077          CMPI    #%0000010100000000,D6 * CASE 2: BCS - BINARY FOR "CARRY SET" FLAG
00001770  6700 0034               1078          BEQ     OP_BCS
00001774  0C46 0C00               1079          CMPI    #%0000110000000000,D6 * CASE 3: BGE - BINARY FOR "GREATER OR EQUAL" FLAG
00001778  6700 0036               1080          BEQ     OP_BGE
0000177C  0C46 0D00               1081          CMPI    #%0000110100000000,D6 * CASE 4: BLT - BINARY FOR "LESS THAN" FLAG
00001780  6700 0038               1082          BEQ     OP_BLT
00001784  0C46 0800               1083          CMPI    #%0000100000000000,D6 * CASE 5: BVC - BINARY FOR "OVERFLOW CLEAR" FLAG
00001788  6700 003A               1084          BEQ     OP_BVC
0000178C  0C46 0000               1085          CMPI    #%0000000000000000,D6 * CASE 6: BRA - BINARY FOR "BRANCH ALWAYS" FLAG
00001790  6700 003C               1086          BEQ     OP_BRA
00001794  6100 0AEA               1087          BSR     UNKNOWNOP             * don't know what it is, print it out, skip to end
00001798  6000 007A               1088          BRA     BCC_END
0000179C                          1089  
0000179C  43F9 000025B6           1090  OP_BCC  LEA     OP_BCC_MSG,A1
000017A2  6000 0034               1091          BRA     OP_BRANCHES_PRINT
000017A6  43F9 000025BB           1092  OP_BCS  LEA     OP_BCS_MSG,A1
000017AC  6000 002A               1093          BRA     OP_BRANCHES_PRINT
000017B0  43F9 000025C0           1094  OP_BGE  LEA     OP_BGE_MSG,A1
000017B6  6000 0020               1095          BRA     OP_BRANCHES_PRINT
000017BA  43F9 000025C5           1096  OP_BLT  LEA     OP_BLT_MSG,A1
000017C0  6000 0016               1097          BRA     OP_BRANCHES_PRINT
000017C4  43F9 000025CA           1098  OP_BVC  LEA     OP_BVC_MSG,A1
000017CA  6000 000C               1099          BRA     OP_BRANCHES_PRINT
000017CE  43F9 000025CF           1100  OP_BRA  LEA     OP_BRA_MSG,A1
000017D4  6000 0002               1101          BRA     OP_BRANCHES_PRINT
000017D8                          1102  OP_BRANCHES_PRINT
000017D8  103C 000E               1103          MOVE.B  #14,D0 * print instruction op, chosen from cases directly above
000017DC  4E4F                    1104          TRAP    #15
000017DE                          1105          
000017DE  43F9 000025FA           1106          LEA     DOLLAR,A1
000017E4  103C 000E               1107          MOVE.B  #14,D0 * print raw data hex of the LABEL
000017E8  4E4F                    1108          TRAP    #15
000017EA                          1109          
000017EA  3C3C 0000               1110          MOVE.W  #0,D6                 * Move in 0 to D6 - prep mask
000017EE  3E3C 0007               1111          MOVE.W  #7,D7                 * Move in 7 to D7
000017F2  6100 0CF6               1112          BSR     BITMASK               * Call BITMASK sub-routine, return in D6
000017F6  CC42                    1113          AND     D2,D6                 * AND mask with op bits, get last 8 bits in D6
000017F8                          1114          
000017F8                          1115  *        CMPI    #%00000000,D6         * all 0's == word offset
000017F8                          1116  *        BEQ     BCC_WORD_OFFSET
000017F8                          1117          
000017F8                          1118  *        CMPI    #%11111111,D6         * all F's == long offset
000017F8                          1119  *        BEQ     BCC_LONG_OFFSET
000017F8                          1120  BCC_BYTE_OFFSET
000017F8  4254                    1121          CLR     (A4)
000017FA  2846                    1122          MOVE.L  D6,A4
000017FC  43D4                    1123          LEA     (A4),A1
000017FE  103C 000E               1124          MOVE.B  #14,D0
00001802  4E4F                    1125          TRAP    #15
00001804  43F9 00002553           1126          LEA     NEWLINE,A1
0000180A  103C 000E               1127          MOVE.B  #14,D0
0000180E  4E4F                    1128          TRAP    #15
00001810                          1129          
00001810  6000 0002               1130          BRA     BCC_END
00001814                          1131  *BCC_WORD_OFFSET
00001814                          1132  *        MOVEM.W (A2)+,A1
00001814                          1133  *        MOVE.B  #13,D0
00001814                          1134  *        TRAP    #15
00001814                          1135  *        BRA     BCC_END
00001814                          1136  *BCC_LONG_OFFSET
00001814                          1137  *        MOVEM.L (A2)+,A1
00001814                          1138  *        MOVE.B  #13,D0
00001814                          1139  *        TRAP    #15
00001814                          1140  *        BRA     BCC_END
00001814                          1141  BCC_END * reload the memory, call RTS
00001814  4C9F 7FFF               1142          MOVEM   (A7)+,D0-D7/A0-A6 * Pop off the stack to return our registers
00001818  4E75                    1143          RTS
0000181A                          1144  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000181A                          1145  *-----------------------------------------------------------------------------
0000181A                          1146  
0000181A                          1147  
0000181A                          1148  
0000181A                          1149  *-----------------------------------------------------------------------------
0000181A                          1150  *-----------------------------------------------------------------------------
0000181A                          1151  * NAME: OP_0111   ()
0000181A                          1152  * DESCRIPTION:    OP code 0111 is not supported. 
0000181A                          1153  * PRE-CONDITION:  
0000181A                          1154  * POST-CONDITION: 
0000181A                          1155  * REGISTERS:
0000181A                          1156  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000181A                          1157  OP0111
0000181A  6100 0A64               1158      BSR     UNKNOWNOP
0000181E  4E75                    1159      RTS
00001820                          1160  
00001820                          1161  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001820                          1162  *-----------------------------------------------------------------------------
00001820                          1163  
00001820                          1164  
00001820                          1165  
00001820                          1166  *-----------------------------------------------------------------------------
00001820                          1167  *-----------------------------------------------------------------------------
00001820                          1168  * NAME: OP_1000   (DIVS, OR)
00001820                          1169  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001820                          1170  * PRE-CONDITION:  xyz
00001820                          1171  * POST-CONDITION: All registers return to their previous state, and the output
00001820                          1172  *                 goes to the output console for reading the raw data or the
00001820                          1173  *                 actual instruction.
00001820                          1174  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001820                          1175  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001820                          1176  OP1000
00001820  48A7 FFC0               1177          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
00001824                          1178  
00001824                          1179          * Check if the EA Mode is 001 since both DIVS and OR do not support it
00001824  3C3C 0003               1180          MOVE.W  #3, D6              * Prep lower value for bitmask
00001828  3E3C 0005               1181          MOVE.W  #5, D7              * Prep upper value for bitmask
0000182C  6100 0CBC               1182          BSR     BITMASK             * Finalize bitmask setup
00001830  CC42                    1183          AND     D2,D6               * Apply bitmask
00001832                          1184          
00001832  0C46 0008               1185          CMPI    #%0000000000001000, D6  * Is the mode 001, an unsupported mode?
00001836  6700 0A48               1186          BEQ     UNKNOWNOP                 * If so, the op is not supported
0000183A                          1187          
0000183A                          1188          * Checking for DIVS
0000183A  3C3C 0006               1189          MOVE.W  #6, D6              * Prep lower value for bitmask
0000183E  3E3C 0008               1190          MOVE.W  #8, D7              * Prep upper value for bitmask
00001842  6100 0CA6               1191          BSR     BITMASK             * Finalize bitmask setup
00001846  CC42                    1192          AND     D2,D6               * Apply bitmask
00001848                          1193          
00001848  0C46 01C0               1194          CMPI    #%0000000111000000, D6  * Are we DIVS?
0000184C  6600 0050               1195          BNE     NOTDIVS                 * If not, branch to see if it's OR
00001850                          1196          
00001850  43F9 00002556           1197          LEA     DIVSOP,A1           * We found DIVS
00001856  103C 000E               1198          MOVE.B  #14,D0              * Trap #14 prints out the data
0000185A  4E4F                    1199          TRAP    #15                 * Perform Trap #14
0000185C                          1200          
0000185C  43F9 000025F8           1201          LEA     SPACE,A1            * formatting
00001862  103C 000E               1202          MOVE.B  #14,D0              * Trap #14 prints out space
00001866  4E4F                    1203          TRAP    #15                 * Perform Trap #14
00001868                          1204          
00001868  4243                    1205          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
0000186A  08C3 0000               1206          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
0000186E                          1207                                      * to indicate a potential immediate of size word
0000186E                          1208          
0000186E  6100 043E               1209          BSR     EAHELPER05          * Print out data
00001872                          1210  
00001872  43F9 000025FE           1211          LEA     COMMA,A1            * formatting
00001878  103C 000E               1212          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000187C  4E4F                    1213          TRAP    #15                 * Perform Trap #14
0000187E                          1214          
0000187E                          1215          * bit manipulation is needed to make the outlier DIVS work
0000187E                          1216          * with the generic EAHELPER611
0000187E  0882 0006               1217          BCLR    #6,D2
00001882  0882 0007               1218          BCLR    #7,D2
00001886  0882 0008               1219          BCLR    #8,D2
0000188A                          1220          
0000188A                          1221          * the above bits were cleared so that eahelper05 knows the destination
0000188A                          1222          * is a data register.
0000188A                          1223          
0000188A  6100 03E0               1224          BSR     EAHELPER611 
0000188E                          1225  
0000188E  43F9 00002553           1226          LEA     NEWLINE,A1          * We found DIVS
00001894  103C 000E               1227          MOVE.B  #14,D0              * Trap #14 prints out the data
00001898  4E4F                    1228          TRAP    #15                 * Perform Trap #14
0000189A                          1229          
0000189A  6000 0012               1230          BRA     OP1000END
0000189E                          1231          
0000189E                          1232  NOTDIVS * It is confirmed OR at this point
0000189E  43F9 0000258A           1233          LEA     OROP,A1         * We found OR
000018A4  103C 000E               1234          MOVE.B  #14,D0          * Trap #14 prints out the data
000018A8  4E4F                    1235          TRAP    #15             * Perform Trap #14
000018AA                          1236          *================================================================
000018AA                          1237          * todo, move the size of the operation into the leading bits of D5
000018AA                          1238          * before subroutine call
000018AA  6100 03C0               1239          BSR     EAHELPER611
000018AE                          1240  
000018AE                          1241  OP1000END
000018AE  4C9F 03FF               1242          MOVEM   (A7)+,D0-D7/A0-A1
000018B2  4E75                    1243          RTS
000018B4                          1244  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000018B4                          1245  *-----------------------------------------------------------------------------
000018B4                          1246  
000018B4                          1247  
000018B4                          1248  
000018B4                          1249  *-----------------------------------------------------------------------------
000018B4                          1250  *-----------------------------------------------------------------------------
000018B4                          1251  * NAME: OP_1001   (SUB)
000018B4                          1252  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000018B4                          1253  * PRE-CONDITION:  xyz
000018B4                          1254  * POST-CONDITION: All registers return to their previous state, and the output
000018B4                          1255  *                 goes to the output console for reading the raw data or the
000018B4                          1256  *                 actual instruction.
000018B4                          1257  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000018B4                          1258  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000018B4                          1259  OP1001
000018B4                          1260  
000018B4                          1261  
000018B4                          1262  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000018B4                          1263  *-----------------------------------------------------------------------------
000018B4                          1264  
000018B4                          1265  
000018B4                          1266  
000018B4                          1267  *-----------------------------------------------------------------------------
000018B4                          1268  *-----------------------------------------------------------------------------
000018B4                          1269  * NAME: OP_1010   ()
000018B4                          1270  * DESCRIPTION:    a
000018B4                          1271  * PRE-CONDITION:  b
000018B4                          1272  * POST-CONDITION: c
000018B4                          1273  * REGISTERS:      d
000018B4                          1274  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000018B4                          1275  OP1010
000018B4                          1276  
000018B4  6100 09CA               1277      BSR     UNKNOWNOP
000018B8  4E75                    1278      RTS
000018BA                          1279  
000018BA                          1280  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000018BA                          1281  *-----------------------------------------------------------------------------
000018BA                          1282  
000018BA                          1283  
000018BA                          1284  
000018BA                          1285  *-----------------------------------------------------------------------------
000018BA                          1286  *-----------------------------------------------------------------------------
000018BA                          1287  * NAME: OP_1011   (EOR, CMP)
000018BA                          1288  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000018BA                          1289  * PRE-CONDITION:  xyz
000018BA                          1290  * POST-CONDITION: All registers return to their previous state, and the output
000018BA                          1291  *                 goes to the output console for reading the raw data or the
000018BA                          1292  *                 actual instruction.
000018BA                          1293  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000018BA                          1294  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000018BA                          1295  OP1011
000018BA                          1296  
000018BA  6100 09C4               1297      BSR     UNKNOWNOP
000018BE  4E75                    1298      RTS
000018C0                          1299  
000018C0                          1300  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000018C0                          1301  *-----------------------------------------------------------------------------
000018C0                          1302  
000018C0                          1303  
000018C0                          1304  
000018C0                          1305  *-----------------------------------------------------------------------------
000018C0                          1306  *-----------------------------------------------------------------------------
000018C0                          1307  * NAME: OP_1100   (MULS)
000018C0                          1308  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000018C0                          1309  * PRE-CONDITION:  xyz
000018C0                          1310  * POST-CONDITION: All registers return to their previous state, and the output
000018C0                          1311  *                 goes to the output console for reading the raw data or the
000018C0                          1312  *                 actual instruction.
000018C0                          1313  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000018C0                          1314  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000018C0                          1315  OP1100
000018C0  48A7 FFC0               1316          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
000018C4                          1317  
000018C4                          1318          * Check if the EA Mode is 001 since MULS does not support it
000018C4  3C3C 0003               1319          MOVE.W  #3, D6              * Prep lower value for bitmask
000018C8  3E3C 0005               1320          MOVE.W  #5, D7              * Prep upper value for bitmask
000018CC  6100 0C1C               1321          BSR     BITMASK             * Finalize bitmask setup
000018D0  CC42                    1322          AND     D2,D6               * Apply bitmask
000018D2                          1323          
000018D2  0C46 0008               1324          CMPI    #%0000000000001000, D6    * Is the mode 001, an unsupported mode?
000018D6  6700 0068               1325          BEQ     UNKNOWN1100               * If so, the op is not supported
000018DA                          1326          
000018DA  3C3C 0006               1327          MOVE.W  #6, D6              * Prep lower value for bitmask
000018DE  3E3C 0008               1328          MOVE.W  #8, D7              * Prep upper value for bitmask
000018E2  6100 0C06               1329          BSR     BITMASK             * Finalize bitmask setup
000018E6  CC42                    1330          AND     D2,D6               * Apply bitmask
000018E8                          1331          
000018E8  0C46 01C0               1332          CMPI    #%0000000111000000, D6  * Are we MULS?
000018EC  6600 0052               1333          BNE     UNKNOWN1100             * If not, it is an unknown op
000018F0                          1334          
000018F0  43F9 00002585           1335          LEA     MULSOP,A1           * We found MULS
000018F6  103C 000E               1336          MOVE.B  #14,D0              * Trap #14 prints out the data
000018FA  4E4F                    1337          TRAP    #15                 * Perform Trap #14
000018FC                          1338          
000018FC  43F9 000025F8           1339          LEA     SPACE,A1            * formatting
00001902  103C 000E               1340          MOVE.B  #14,D0              * Trap #14 prints out space
00001906  4E4F                    1341          TRAP    #15                 * Perform Trap #14
00001908                          1342          
00001908  4243                    1343          CLR     D3                  * clear D3, it is a parameter
0000190A  08C3 0000               1344          BSET    #0,D3               * of EAHELPER05 to indicate size
0000190E                          1345          
0000190E  6100 039E               1346          BSR     EAHELPER05          * Print out data
00001912                          1347  
00001912  43F9 000025FE           1348          LEA     COMMA,A1            * formatting
00001918  103C 000E               1349          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000191C  4E4F                    1350          TRAP    #15                 * Perform Trap #14
0000191E                          1351          
0000191E  0882 0006               1352          BCLR    #6,D2               * Bit manipulation is 
00001922  0882 0007               1353          BCLR    #7,D2               * necessary in order to make
00001926  0882 0008               1354          BCLR    #8,D2               * EAHELPER611 work generically
0000192A                          1355          
0000192A  6100 0340               1356          BSR     EAHELPER611         * Print out EA
0000192E                          1357  
0000192E  43F9 00002553           1358          LEA     NEWLINE,A1          * Formatting
00001934  103C 000E               1359          MOVE.B  #14,D0              * Trap #14 prints out the data
00001938  4E4F                    1360          TRAP    #15                 * Perform Trap #14
0000193A                          1361          
0000193A  4C9F 03FF               1362          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
0000193E  4E75                    1363          RTS                         * Return to main
00001940                          1364          
00001940                          1365  UNKNOWN1100
00001940  6100 093E               1366          BSR     UNKNOWNOP
00001944                          1367       
00001944  4C9F 03FF               1368          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
00001948  4E75                    1369          RTS                         * Return to main
0000194A                          1370          
0000194A                          1371  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000194A                          1372  *-----------------------------------------------------------------------------
0000194A                          1373  
0000194A                          1374  
0000194A                          1375  
0000194A                          1376  
0000194A                          1377  
0000194A                          1378  
0000194A                          1379  *-----------------------------------------------------------------------------
0000194A                          1380  *-----------------------------------------------------------------------------
0000194A                          1381  * NAME: OP_1101   (ADD, ADDA)
0000194A                          1382  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000194A                          1383  * PRE-CONDITION:  xyz
0000194A                          1384  * POST-CONDITION: All registers return to their previous state, and the output
0000194A                          1385  *                 goes to the output console for reading the raw data or the
0000194A                          1386  *                 actual instruction.
0000194A                          1387  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000194A                          1388  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000194A                          1389  OP1101
0000194A  48E7 FFFE               1390          MOVEM.L A0-A6/D0-D7,-(A7)
0000194E                          1391          
0000194E  3C3C 0006               1392          MOVE.W  #6, D6              * Prep lower value for bitmask
00001952  3E3C 0008               1393          MOVE.W  #8, D7              * Prep upper value for bitmask
00001956  6100 0B92               1394          BSR     BITMASK             * Finalize bitmask setup
0000195A  CC42                    1395          AND     D2,D6               * Apply bitmask
0000195C  EC4E                    1396          LSR     #6,D6
0000195E                          1397  
0000195E  0C06 0000               1398          CMPI.B  #%0000000000000000,D6
00001962  6700 003E               1399          BEQ     BYTE_EA_DN
00001966                          1400  
00001966  0C06 0001               1401          CMPI.B  #%0000000000000001,D6
0000196A  6700 004E               1402          BEQ     WORD_EA_DN
0000196E                          1403  
0000196E  0C06 0002               1404          CMPI.B  #%0000000000000010,D6
00001972  6700 005E               1405          BEQ     LONG_EA_DN
00001976                          1406  
00001976  0C06 0003               1407          CMPI.B  #%0000000000000011,D6
0000197A  6700 006E               1408          BEQ     ADDA_WORD_OP
0000197E                          1409  
0000197E  0C06 0004               1410          CMPI.B  #%0000000000000100,D6
00001982  6700 0086               1411          BEQ     BYTE_DN_EA
00001986                          1412  
00001986  0C06 0005               1413          CMPI.B  #%0000000000000101,D6
0000198A  6700 0096               1414          BEQ     WORD_DN_EA
0000198E                          1415  
0000198E  0C06 0006               1416          CMPI.B  #%0000000000000110,D6
00001992  6700 00A6               1417          BEQ     LONG_DN_EA
00001996                          1418  
00001996  0C06 0007               1419          CMPI.B  #%0000000000000111,D6
0000199A  6700 00B6               1420          BEQ     ADDA_LONG_OP
0000199E                          1421  
0000199E  6000 011E               1422          BRA     ADD_ADDA_END
000019A2                          1423          
000019A2                          1424  BYTE_EA_DN
000019A2  6100 00CE               1425          BSR     ADD_EA_DN_GENERIC       * print out 'ADD' base op name for ADDA too
000019A6                          1426  
000019A6  43F9 0000260C           1427          LEA     __B,A1                  * print out size
000019AC  103C 000E               1428          MOVE.B  #14,D0
000019B0  4E4F                    1429          TRAP    #15
000019B2                          1430  
000019B2  6100 00CC               1431          BSR     ADD_ADDA_SPACE          * print out space
000019B6  6000 00EE               1432          BRA     ADD_ADDA_PRINT
000019BA                          1433  
000019BA                          1434  WORD_EA_DN
000019BA  6100 00B6               1435          BSR     ADD_EA_DN_GENERIC
000019BE                          1436  
000019BE  43F9 00002610           1437          LEA     __W,A1
000019C4  103C 000E               1438          MOVE.B  #14,D0
000019C8  4E4F                    1439          TRAP    #15
000019CA                          1440          
000019CA  6100 00B4               1441          BSR     ADD_ADDA_SPACE
000019CE  6000 00D6               1442          BRA     ADD_ADDA_PRINT
000019D2                          1443          
000019D2                          1444  LONG_EA_DN
000019D2  6100 009E               1445          BSR     ADD_EA_DN_GENERIC
000019D6                          1446  
000019D6  43F9 00002614           1447          LEA     __L,A1
000019DC  103C 000E               1448          MOVE.B  #14,D0
000019E0  4E4F                    1449          TRAP    #15
000019E2                          1450  
000019E2  6100 009C               1451          BSR     ADD_ADDA_SPACE
000019E6  6000 00BE               1452          BRA     ADD_ADDA_PRINT
000019EA                          1453          
000019EA                          1454  ADDA_WORD_OP
000019EA  6100 0086               1455          BSR     ADD_EA_DN_GENERIC
000019EE                          1456  
000019EE  43F9 000025EC           1457          LEA     ASCII_A,A1
000019F4  103C 000E               1458          MOVE.B  #14,D0
000019F8  4E4F                    1459          TRAP    #15
000019FA                          1460  
000019FA  43F9 00002610           1461          LEA     __W,A1
00001A00  103C 000E               1462          MOVE.B  #14,D0
00001A04  4E4F                    1463          TRAP    #15
00001A06                          1464          
00001A06  6000 0086               1465          BRA     ADDA_PRT
00001A0A                          1466          
00001A0A                          1467  BYTE_DN_EA
00001A0A  6100 0066               1468          BSR     ADD_EA_DN_GENERIC
00001A0E                          1469          
00001A0E  43F9 0000260C           1470          LEA     __B,A1
00001A14  103C 000E               1471          MOVE.B  #14,D0
00001A18  4E4F                    1472          TRAP    #15
00001A1A                          1473          
00001A1A  6100 0064               1474          BSR     ADD_ADDA_SPACE
00001A1E  6000 0086               1475          BRA     ADD_ADDA_PRINT
00001A22                          1476  
00001A22                          1477  WORD_DN_EA
00001A22  6100 004E               1478          BSR     ADD_EA_DN_GENERIC
00001A26                          1479  
00001A26  43F9 00002610           1480          LEA     __W,A1
00001A2C  103C 000E               1481          MOVE.B  #14,D0
00001A30  4E4F                    1482          TRAP    #15 
00001A32                          1483  
00001A32  6100 004C               1484          BSR     ADD_ADDA_SPACE
00001A36  6000 006E               1485          BRA     ADD_ADDA_PRINT
00001A3A                          1486  
00001A3A                          1487  LONG_DN_EA
00001A3A  6100 0036               1488          BSR     ADD_EA_DN_GENERIC
00001A3E                          1489          
00001A3E  43F9 00002614           1490          LEA     __L,A1
00001A44  103C 000E               1491          MOVE.B  #14,D0
00001A48  4E4F                    1492          TRAP    #15     
00001A4A                          1493          
00001A4A  6100 0034               1494          BSR     ADD_ADDA_SPACE
00001A4E  6000 0056               1495          BRA     ADD_ADDA_PRINT
00001A52                          1496  
00001A52                          1497  ADDA_LONG_OP
00001A52  6100 001E               1498          BSR     ADD_EA_DN_GENERIC
00001A56                          1499          
00001A56  43F9 000025EC           1500          LEA     ASCII_A,A1
00001A5C  103C 000E               1501          MOVE.B  #14,D0
00001A60  4E4F                    1502          TRAP    #15
00001A62                          1503          
00001A62  43F9 00002614           1504          LEA     __L,A1
00001A68  103C 000E               1505          MOVE.B  #14,D0
00001A6C  4E4F                    1506          TRAP    #15
00001A6E                          1507          
00001A6E  6000 001E               1508          BRA     ADDA_PRT
00001A72                          1509          
00001A72                          1510  ADD_EA_DN_GENERIC
00001A72  43F9 000025D4           1511          LEA     OP_ADD_MSG,A1           * print out 'ADD'
00001A78  103C 000E               1512          MOVE.B  #14,D0
00001A7C  4E4F                    1513          TRAP    #15
00001A7E  4E75                    1514          RTS
00001A80                          1515          
00001A80                          1516  ADD_ADDA_SPACE
00001A80  43F9 000025F8           1517          LEA     SPACE,A1
00001A86  103C 000E               1518          MOVE.B  #14,D0
00001A8A  4E4F                    1519          TRAP    #15
00001A8C  4E75                    1520          RTS
00001A8E                          1521  
00001A8E                          1522  ADDA_PRT
00001A8E  6100 0374               1523          BSR     MODE_DN
00001A92  43F9 000025FE           1524          LEA     COMMA,A1
00001A98  103C 000E               1525          MOVE.B  #14,D0
00001A9C  4E4F                    1526          TRAP    #15
00001A9E  6100 0464               1527          BSR     MODE_AN
00001AA2  6000 001A               1528          BRA     ADD_ADDA_END
00001AA6                          1529  
00001AA6                          1530  ADD_ADDA_PRINT
00001AA6                          1531  
00001AA6  6100 0206               1532          BSR     EAHELPER05          * Print out data. TODO: DOESN'T WORK.
00001AAA                          1533  
00001AAA  43F9 000025FE           1534          LEA     COMMA,A1            * formatting
00001AB0  103C 000E               1535          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001AB4  4E4F                    1536          TRAP    #15                 * Perform Trap #14
00001AB6                          1537          
00001AB6  6100 01B4               1538          BSR     EAHELPER611
00001ABA  6000 0002               1539          BRA     ADD_ADDA_END
00001ABE                          1540          
00001ABE                          1541  ADD_ADDA_END
00001ABE  43F9 00002553           1542          LEA     NEWLINE,A1
00001AC4  103C 000E               1543          MOVE.B  #14,D0
00001AC8  4E4F                    1544          TRAP    #15
00001ACA                          1545          
00001ACA  4CDF 7FFF               1546          MOVEM.L (A7)+,A0-A6/D0-D7
00001ACE  4E75                    1547          RTS
00001AD0                          1548  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001AD0                          1549  *-----------------------------------------------------------------------------
00001AD0                          1550  
00001AD0                          1551  
00001AD0                          1552  
00001AD0                          1553  *-----------------------------------------------------------------------------
00001AD0                          1554  *-----------------------------------------------------------------------------
00001AD0                          1555  * NAME: OP_1110   (LSL, LSR, ASL, ASR, ROL, ROR)
00001AD0                          1556  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001AD0                          1557  * PRE-CONDITION:  xyz
00001AD0                          1558  * POST-CONDITION: All registers return to their previous state, and the output
00001AD0                          1559  *                 goes to the output console for reading the raw data or the
00001AD0                          1560  *                 actual instruction.
00001AD0                          1561  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001AD0                          1562  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001AD0                          1563  OP1110
00001AD0                          1564  
00001AD0  48A7 FFC0               1565      MOVEM   D0-D7/A0-A1,-(A7)   * Caller saved
00001AD4                          1566  
00001AD4  7C03                    1567      MOVE.L  #3,D6
00001AD6  7E04                    1568      MOVE.L  #4,D7
00001AD8                          1569      
00001AD8  6100 0A10               1570      BSR     BITMASK * generate a bitmask for the 3 and 4 bits
00001ADC                          1571      
00001ADC  CC82                    1572      AND.L   D2,D6
00001ADE                          1573      
00001ADE  0C46 0008               1574      CMPI    #%0000000000001000,D6 *is it a logical shift
00001AE2  6700 001A               1575      BEQ     LS
00001AE6                          1576      
00001AE6  0C46 0000               1577      CMPI    #%0000000000000000,D6 *is it an arithmatic shift
00001AEA  6700 0048               1578      BEQ     AS
00001AEE                          1579      
00001AEE  0C46 0018               1580      CMPI    #%0000000000011000,D6 *is it a rorate?
00001AF2  6700 0076               1581      BEQ     RO
00001AF6                          1582  
00001AF6  6100 0788               1583      BSR     UNKNOWNOP *if nothing above, we don't know what it is
00001AFA  6000 0158               1584      BRA     ENDOP1110
00001AFE                          1585      
00001AFE                          1586  LS
00001AFE  7C08                    1587      MOVE.L  #8,D6
00001B00  7E08                    1588      MOVE.L  #8,D7
00001B02                          1589      
00001B02  6100 09E6               1590      BSR     BITMASK
00001B06                          1591      
00001B06  CC82                    1592      AND.L   D2,D6
00001B08                          1593      
00001B08  0C46 0000               1594      CMPI    #0,D6 * is it a left shift?
00001B0C  6700 0016               1595      BEQ     LSR
00001B10                          1596      
00001B10  6000 0002               1597      BRA     LSL * if not a left shift, must be right
00001B14                          1598  
00001B14                          1599  LSL
00001B14                          1600  
00001B14  43F9 00002596           1601      LEA     LSLOP,A1            * formatting
00001B1A  103C 000E               1602      MOVE.B  #14,D0              * Trap #14 prints out LSL
00001B1E  4E4F                    1603      TRAP    #15                 * Perform Trap #14
00001B20                          1604      
00001B20  6000 007E               1605      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001B24                          1606                                  * prints the registers and imm data
00001B24                          1607  LSR
00001B24                          1608  
00001B24  43F9 0000259A           1609      LEA     LSROP,A1            * formatting
00001B2A  103C 000E               1610      MOVE.B  #14,D0              * Trap #14 prints out LSR
00001B2E  4E4F                    1611      TRAP    #15                 * Perform Trap #14
00001B30                          1612      
00001B30  6000 006E               1613      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001B34                          1614                                  * prints the registers and imm data
00001B34                          1615  
00001B34                          1616  AS
00001B34  7C08                    1617      MOVE.L  #8,D6
00001B36  7E08                    1618      MOVE.L  #8,D7
00001B38                          1619      
00001B38  6100 09B0               1620      BSR     BITMASK
00001B3C                          1621      
00001B3C  CC82                    1622      AND.L   D2,D6
00001B3E                          1623      
00001B3E  0C46 0000               1624      CMPI    #0,D6 * is it a left shift?
00001B42  6700 0016               1625      BEQ     ASR
00001B46                          1626      
00001B46  6000 0002               1627      BRA     ASL * if not a left shift, must be right
00001B4A                          1628      
00001B4A                          1629  ASL
00001B4A                          1630  
00001B4A  43F9 0000259E           1631      LEA     ASLOP,A1            * formatting
00001B50  103C 000E               1632      MOVE.B  #14,D0              * Trap #14 prints out ASL
00001B54  4E4F                    1633      TRAP    #15                 * Perform Trap #14
00001B56                          1634      
00001B56  6000 0048               1635      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001B5A                          1636                                  * prints the registers and imm data
00001B5A                          1637  ASR
00001B5A                          1638  
00001B5A  43F9 000025A2           1639      LEA     ASROP,A1            * formatting
00001B60  103C 000E               1640      MOVE.B  #14,D0              * Trap #14 prints out ASR
00001B64  4E4F                    1641      TRAP    #15                 * Perform Trap #14
00001B66                          1642      
00001B66  6000 0038               1643      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001B6A                          1644                                  * prints the registers and imm data
00001B6A                          1645  RO
00001B6A  7C08                    1646      MOVE.L  #8,D6
00001B6C  7E08                    1647      MOVE.L  #8,D7
00001B6E                          1648      
00001B6E  6100 097A               1649      BSR     BITMASK
00001B72                          1650      
00001B72  CC82                    1651      AND.L   D2,D6
00001B74                          1652      
00001B74  0C46 0000               1653      CMPI    #0,D6 * is it a left shift?
00001B78  6700 0016               1654      BEQ     ROR
00001B7C                          1655      
00001B7C  6000 0002               1656      BRA     ROL * if not a left shift, must be right
00001B80                          1657  
00001B80                          1658  ROL
00001B80                          1659  
00001B80  43F9 000025A6           1660      LEA     ROLOP,A1            * formatting
00001B86  103C 000E               1661      MOVE.B  #14,D0              * Trap #14 prints out ROL
00001B8A  4E4F                    1662      TRAP    #15                 * Perform Trap #14
00001B8C                          1663      
00001B8C  6000 0012               1664      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001B90                          1665                                  * prints the registers and imm data
00001B90                          1666  ROR
00001B90                          1667  
00001B90  43F9 000025AA           1668      LEA     ROROP,A1            * formatting
00001B96  103C 000E               1669      MOVE.B  #14,D0              * Trap #14 prints out ROR
00001B9A  4E4F                    1670      TRAP    #15                 * Perform Trap #14
00001B9C                          1671      
00001B9C  6000 0002               1672      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001BA0                          1673                                  * prints the registers and imm data
00001BA0                          1674  
00001BA0                          1675  OP1110GENERIC
00001BA0                          1676  
00001BA0  6100 0462               1677      BSR     SIZE67
00001BA4                          1678      
00001BA4  7C05                    1679      MOVE.L  #5,D6
00001BA6  7E05                    1680      MOVE.L  #5,D7
00001BA8                          1681      
00001BA8  6100 0940               1682      BSR     BITMASK
00001BAC                          1683      
00001BAC  CC82                    1684      AND.L   D2,D6
00001BAE                          1685      
00001BAE  0C46 0020               1686      CMPI    #%0000000000100000,D6   *is it a data reg?
00001BB2  6700 0074               1687      BEQ     OP1110DATAREG
00001BB6                          1688      
00001BB6  43F9 000025FC           1689      LEA     IMD,A1              * formatting
00001BBC  103C 000E               1690      MOVE.B  #14,D0              * Trap #14 prints out pound #
00001BC0  4E4F                    1691      TRAP    #15                 * Perform Trap #14
00001BC2                          1692      
00001BC2  7C09                    1693      MOVE.L  #9,D6
00001BC4  7E0B                    1694      MOVE.L  #11,D7
00001BC6                          1695      
00001BC6  6100 0922               1696      BSR     BITMASK
00001BCA                          1697      
00001BCA  CC82                    1698      AND.L   D2,D6
00001BCC                          1699      
00001BCC  0C46 0000               1700      CMPI    #0,D6 * special case, if zero print #8 not #0
00001BD0  6700 002E               1701      BEQ     OP1110IMMEIGHT
00001BD4                          1702      
00001BD4  E08E                    1703      LSR.L   #8,D6
00001BD6  E28E                    1704      LSR.L   #1,D6
00001BD8                          1705      
00001BD8  2206                    1706      MOVE.L  D6,D1              * formatting
00001BDA  103C 0003               1707      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001BDE  4E4F                    1708      TRAP    #15                * Perform Trap #14
00001BE0                          1709      
00001BE0  43F9 000025FE           1710      LEA     COMMA,A1            * formatting
00001BE6  103C 000E               1711      MOVE.B  #14,D0              * Trap #14 prints out comma
00001BEA  4E4F                    1712      TRAP    #15                 * Perform Trap #1
00001BEC                          1713      
00001BEC                          1714      * in order to use the eahlpers, we need to do some bit manipulation
00001BEC                          1715      * clearing the bits below lets our helper know that the mode is Dn
00001BEC  0882 0003               1716      BCLR    #3,D2
00001BF0  0882 0004               1717      BCLR    #4,D2
00001BF4  0882 0005               1718      BCLR    #5,D2
00001BF8                          1719      
00001BF8  6100 00B4               1720      BSR     EAHELPER05
00001BFC                          1721      
00001BFC  6000 0056               1722      BRA     ENDOP1110
00001C00                          1723      
00001C00                          1724  OP1110IMMEIGHT
00001C00                          1725  
00001C00  7208                    1726      MOVE.L  #8,D1              * formatting
00001C02  103C 0003               1727      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001C06  4E4F                    1728      TRAP    #15                * Perform Trap #14
00001C08                          1729      
00001C08  43F9 000025FE           1730      LEA     COMMA,A1            * formatting
00001C0E  103C 000E               1731      MOVE.B  #14,D0              * Trap #14 prints out comma
00001C12  4E4F                    1732      TRAP    #15                 * Perform Trap #1
00001C14                          1733      
00001C14                          1734      * in order to use the eahlpers, we need to do some bit manipulation
00001C14                          1735      * clearing the bits below lets our helper know that the mode is Dn
00001C14  0882 0003               1736      BCLR    #3,D2
00001C18  0882 0004               1737      BCLR    #4,D2
00001C1C  0882 0005               1738      BCLR    #5,D2
00001C20                          1739      
00001C20  6100 008C               1740      BSR     EAHELPER05
00001C24                          1741      
00001C24  6000 002E               1742      BRA     ENDOP1110
00001C28                          1743  
00001C28                          1744  OP1110DATAREG
00001C28                          1745  
00001C28                          1746      * in order to use the eahlpers, we need to do some bit manipulation
00001C28                          1747      * clearing the bits below lets our helper know that the mode is Dn
00001C28  0882 0003               1748      BCLR    #3,D2
00001C2C  0882 0004               1749      BCLR    #4,D2
00001C30  0882 0005               1750      BCLR    #5,D2
00001C34  0882 0006               1751      BCLR    #6,D2
00001C38  0882 0007               1752      BCLR    #7,D2
00001C3C  0882 0008               1753      BCLR    #8,D2
00001C40                          1754      
00001C40  6100 002A               1755      BSR     EAHELPER611
00001C44                          1756      
00001C44  43F9 000025FE           1757      LEA     COMMA,A1            * formatting
00001C4A  103C 000E               1758      MOVE.B  #14,D0              * Trap #14 prints out comma
00001C4E  4E4F                    1759      TRAP    #15                 * Perform Trap #14
00001C50                          1760      
00001C50  6100 005C               1761      BSR     EAHELPER05
00001C54                          1762  
00001C54                          1763  ENDOP1110
00001C54                          1764  
00001C54  43F9 00002553           1765      LEA     NEWLINE,A1          * formatting
00001C5A  103C 000E               1766      MOVE.B  #14,D0              * Trap #14 prints out a new line
00001C5E  4E4F                    1767      TRAP    #15                 * Perform Trap #14
00001C60                          1768      
00001C60  4C9F 03FF               1769      MOVEM   (A7)+,D0-D7/A0-A1   * Caller saved
00001C64  4E75                    1770      RTS
00001C66                          1771  
00001C66                          1772  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001C66                          1773  *-----------------------------------------------------------------------------
00001C66                          1774  
00001C66                          1775  
00001C66                          1776  
00001C66                          1777  *-----------------------------------------------------------------------------
00001C66                          1778  *-----------------------------------------------------------------------------
00001C66                          1779  * NAME: OP_1111   ()
00001C66                          1780  * DESCRIPTION:    a
00001C66                          1781  * PRE-CONDITION:  b
00001C66                          1782  * POST-CONDITION: c
00001C66                          1783  * REGISTERS:      d
00001C66                          1784  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001C66                          1785  OP1111
00001C66                          1786  
00001C66  6100 0618               1787      BSR     UNKNOWNOP
00001C6A  4E75                    1788      RTS
00001C6C                          1789  
00001C6C                          1790  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001C6C                          1791  *-----------------------------------------------------------------------------
00001C6C                          1792  
00001C6C                          1793  
00001C6C                          1794  
00001C6C                          1795  *-----------------------------------------------------------------------------
00001C6C                          1796  *-----------------------------------------------------------------------------
00001C6C                          1797  * NAME:           EAHELPER611
00001C6C                          1798  * DESCRIPTION:    a
00001C6C                          1799  * PRE-CONDITION:  D2 contains the instruction to print modes for.
00001C6C                          1800  *                 D5 contains the size of the data to be printed
00001C6C                          1801  * POST-CONDITION: Determines if mode is direct, if it's not, passes D2 to 
00001C6C                          1802  *                 EAHELPER05 to print.
00001C6C                          1803  * REGISTERS:      a
00001C6C                          1804  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001C6C                          1805  EAHELPER611
00001C6C  48A7 FFC0               1806      MOVEM  D0-D7/A0-A1,-(A7)    * Push values onto stack
00001C70                          1807      
00001C70  3C3C 0006               1808      MOVE.W  #6, D6              * Prep lower value for bitmask
00001C74  3E3C 0008               1809      MOVE.W  #8, D7              * Prep upper value for bitmask
00001C78  6100 0870               1810      BSR     BITMASK             * Finalize bitmask setup
00001C7C  CC42                    1811      AND     D2,D6               * Apply bitmask
00001C7E                          1812      
00001C7E                          1813      * to move the mode where EAHELPER50 can process it
00001C7E  7C06                    1814      MOVE.L  #6,D6       * Prep lower value of bitmask
00001C80  7E08                    1815      MOVE.L  #8,D7       * Prep upper value of bitmask
00001C82  6100 0866               1816      BSR     BITMASK     * Create bitmask
00001C86  CC42                    1817      AND     D2,D6       * Apply bitmask
00001C88                          1818      
00001C88  4243                    1819      CLR     D3      * prep D3 to store values
00001C8A  3606                    1820      MOVE.W  D6,D3   * store bitmasked value in D3
00001C8C  E64B                    1821      LSR     #3,D3   * move bits 6-8 to 3-5
00001C8E                          1822      
00001C8E                          1823      * to move the register where EAHELPER50 can process it
00001C8E  7C09                    1824      MOVE.L  #9,D6   * Prep lower value for bitmask
00001C90  7E0B                    1825      MOVE.L  #11,D7  * Prep upper value for bitmask
00001C92  6100 0856               1826      BSR     BITMASK * create bitmask
00001C96  CC42                    1827      AND     D2,D6   * apply bitmask
00001C98                          1828      
00001C98  4244                    1829      CLR     D4      * prep D3 to store values
00001C9A  3806                    1830      MOVE.W  D6,D4   * store bitmasked value in D3
00001C9C                          1831      
00001C9C  E04C                    1832      LSR     #8,D4   * move bits 9-11 to 0-2
00001C9E  E24C                    1833      LSR     #1,D4   * move bits 9-11 to 0-2
00001CA0                          1834    
00001CA0  8684                    1835      OR.L    D4,D3   * combind the register and mode
00001CA2  2403                    1836      MOVE.L  D3,D2   * put the result in D2 so EAHELPER05 can process it
00001CA4                          1837      
00001CA4  6100 0008               1838      BSR     EAHELPER05
00001CA8                          1839      
00001CA8                          1840  ENDEAHELPER611
00001CA8                          1841      
00001CA8  4C9F 03FF               1842      MOVEM  (A7)+,D0-D7/A0-A1    * Revert back
00001CAC  4E75                    1843      RTS
00001CAE                          1844  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001CAE                          1845  *-----------------------------------------------------------------------------
00001CAE                          1846  
00001CAE                          1847  
00001CAE                          1848  
00001CAE                          1849  *-----------------------------------------------------------------------------
00001CAE                          1850  *-----------------------------------------------------------------------------
00001CAE                          1851  * NAME:           EAHELPER05
00001CAE                          1852  * DESCRIPTION:    a
00001CAE                          1853  * PRE-CONDITION:  D2 contains the instruction to print modes for. Only call
00001CAE                          1854  *                 this sub-routine helper for operations that only have one
00001CAE                          1855  *                 mode register.
00001CAE                          1856  * POST-CONDITION: Determines mode, passes D2 to REGHELPER to print.
00001CAE                          1857  * REGISTERS:      a
00001CAE                          1858  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001CAE                          1859  EAHELPER05
00001CAE                          1860      * todo: add code for printing immediate values
00001CAE                          1861      
00001CAE  48A7 FFC0               1862      MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001CB2                          1863      
00001CB2  7C03                    1864      MOVE.L  #3,D6
00001CB4  7E05                    1865      MOVE.L  #5,D7
00001CB6                          1866      
00001CB6  6100 0832               1867      BSR     BITMASK * generate a bitmask to identify the mode
00001CBA                          1868      
00001CBA  CC42                    1869      AND     D2,D6   * mask off the parts of D2 we don't need
00001CBC                          1870      
00001CBC  2A06                    1871      MOVE.L  D6,D5   * store the 3-5 bitmask for later use
00001CBE                          1872      
00001CBE  0C46 0000               1873      CMPI    #%0000000000000000,D6 * is it data register direct?
00001CC2  6600 000A               1874      BNE     NOTDATAREG
00001CC6                          1875      
00001CC6  6100 013C               1876      BSR     MODE_DN
00001CCA                          1877       
00001CCA  6000 0132               1878      BRA     ENDEAHELPER05
00001CCE                          1879      
00001CCE                          1880  NOTDATAREG * address register direct
00001CCE                          1881      
00001CCE  0C46 0008               1882      CMPI    #%0000000000001000,D6 * is it address register direct?
00001CD2  6600 000A               1883      BNE     NOTADRDIRECT
00001CD6                          1884      
00001CD6  6100 022C               1885      BSR     MODE_AN * simply prints out the address register
00001CDA                          1886       
00001CDA  6000 0122               1887      BRA     ENDEAHELPER05
00001CDE                          1888      
00001CDE                          1889  NOTADRDIRECT * address register indirect
00001CDE                          1890          
00001CDE  0C46 0010               1891      CMPI    #%0000000000010000,D6 * is it address register indirect?
00001CE2  6600 0022               1892      BNE     NOTADRINDIRECT
00001CE6                          1893      
00001CE6  43F9 00002600           1894      LEA     OBRACK,A1       * Load '('
00001CEC  303C 000E               1895      MOVE.W  #14,D0          * Trap #14 to display message
00001CF0  4E4F                    1896      TRAP    #15             * Perform #14
00001CF2                          1897          
00001CF2                          1898  
00001CF2  6100 0210               1899      BSR     MODE_AN * print out an address register
00001CF6                          1900      
00001CF6  43F9 00002602           1901      LEA     CBRACK,A1       * Load ')'
00001CFC  303C 000E               1902      MOVE.W  #14,D0          * Trap #14 to display message
00001D00  4E4F                    1903      TRAP    #15             * Perform #14
00001D02                          1904       
00001D02  6000 00FA               1905      BRA     ENDEAHELPER05
00001D06                          1906      
00001D06                          1907  NOTADRINDIRECT * address register indirect, post increment
00001D06                          1908      
00001D06  0C46 0018               1909      CMPI    #%0000000000011000,D6 * is it address register indirect post increment?
00001D0A  6600 002E               1910      BNE     NOTADRINDIRECTPOST
00001D0E                          1911      
00001D0E  43F9 00002600           1912      LEA     OBRACK,A1       * Load '('
00001D14  303C 000E               1913      MOVE.W  #14,D0          * Trap #14 to display message
00001D18  4E4F                    1914      TRAP    #15             * Perform #14
00001D1A                          1915          
00001D1A                          1916  
00001D1A  6100 01E8               1917      BSR     MODE_AN * print out an address register
00001D1E                          1918      
00001D1E  43F9 00002602           1919      LEA     CBRACK,A1       * Load ')'
00001D24  303C 000E               1920      MOVE.W  #14,D0          * Trap #14 to display message
00001D28  4E4F                    1921      TRAP    #15             * Perform #14
00001D2A                          1922      
00001D2A  43F9 00002604           1923      LEA     PLUS,A1       * Load '+'
00001D30  303C 000E               1924      MOVE.W  #14,D0          * Trap #14 to display message
00001D34  4E4F                    1925      TRAP    #15             * Perform #14
00001D36                          1926       
00001D36  6000 00C6               1927      BRA     ENDEAHELPER05
00001D3A                          1928      
00001D3A                          1929  NOTADRINDIRECTPOST * address register indirect, pre decrement
00001D3A                          1930      
00001D3A  0C46 0020               1931      CMPI    #%0000000000100000,D6 * is it address register indirect pre decrement?
00001D3E  6600 002E               1932      BNE     NOTADRINDIRECTPRE
00001D42                          1933      
00001D42  43F9 00002606           1934      LEA     MINUS,A1       * Load '-'
00001D48  303C 000E               1935      MOVE.W  #14,D0          * Trap #14 to display message
00001D4C  4E4F                    1936      TRAP    #15             * Perform #14
00001D4E                          1937      
00001D4E  43F9 00002600           1938      LEA     OBRACK,A1       * Load '('
00001D54  303C 000E               1939      MOVE.W  #14,D0          * Trap #14 to display message
00001D58  4E4F                    1940      TRAP    #15             * Perform #14
00001D5A                          1941          
00001D5A                          1942  
00001D5A  6100 01A8               1943      BSR     MODE_AN * print out an address register
00001D5E                          1944      
00001D5E  43F9 00002602           1945      LEA     CBRACK,A1       * Load ')'
00001D64  303C 000E               1946      MOVE.W  #14,D0          * Trap #14 to display message
00001D68  4E4F                    1947      TRAP    #15             * Perform #14
00001D6A                          1948       
00001D6A  6000 0092               1949      BRA     ENDEAHELPER05
00001D6E                          1950  
00001D6E                          1951  NOTADRINDIRECTPRE * if none of the previous cases are true, it is a mode not supported by our decompiler
00001D6E                          1952  
00001D6E  0C46 0038               1953      CMPI    #%0000000000111000,D6 * is it immediate?
00001D72  6600 0086               1954      BNE     NOTIMMEDIATE
00001D76                          1955  
00001D76  0C43 0001               1956      CMPI    #1,D3 * is it a byte?
00001D7A  6600 0028               1957      BNE     NOTIMMBYTE
00001D7E                          1958      
00001D7E  43F9 000025FC           1959      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001D84  103C 000E               1960      MOVE.B  #14,D0
00001D88  4E4F                    1961      TRAP    #15
00001D8A                          1962      
00001D8A  3C3C 0000               1963      MOVE.W  #0, D6              * Prep lower value for bitmask
00001D8E  3E3C 0007               1964      MOVE.W  #7, D7              * Prep upper value for bitmask
00001D92  6100 0756               1965      BSR     BITMASK             * Finalize bitmask setup
00001D96                          1966          
00001D96  321A                    1967      MOVE.W  (A2)+,D1
00001D98                          1968      
00001D98  C286                    1969      AND.L     D6,D1
00001D9A                          1970          
00001D9A  103C 0003               1971      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001D9E  4E4F                    1972      TRAP    #15      * Perform Trap #3
00001DA0                          1973      
00001DA0  6000 005C               1974      BRA     ENDEAHELPER05
00001DA4                          1975  
00001DA4                          1976  NOTIMMBYTE
00001DA4                          1977      
00001DA4  0C43 0002               1978      CMPI    #2,D3 * is it a word?
00001DA8  6600 0028               1979      BNE     NOTIMMWORD
00001DAC                          1980      
00001DAC  43F9 000025FC           1981      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001DB2  103C 000E               1982      MOVE.B  #14,D0
00001DB6  4E4F                    1983      TRAP    #15
00001DB8                          1984      
00001DB8  3C3C 0000               1985      MOVE.W  #0, D6              * Prep lower value for bitmask
00001DBC  3E3C 000F               1986      MOVE.W  #15, D7             * Prep upper value for bitmask
00001DC0  6100 0728               1987      BSR     BITMASK             * Finalize bitmask setup
00001DC4                          1988          
00001DC4  321A                    1989      MOVE.W  (A2)+,D1
00001DC6                          1990      
00001DC6  C286                    1991      AND.L     D6,D1               * Apply bitmask
00001DC8                          1992          
00001DC8  103C 0003               1993      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001DCC  4E4F                    1994      TRAP    #15      * Perform Trap #3
00001DCE                          1995      
00001DCE  6000 002E               1996      BRA     ENDEAHELPER05
00001DD2                          1997      
00001DD2                          1998  NOTIMMWORD
00001DD2  0C43 0003               1999      CMPI    #3,D3 * is it a long?
00001DD6  6600 0022               2000      BNE     NOTIMMEDIATE
00001DDA                          2001      
00001DDA  43F9 000025FC           2002      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001DE0  103C 000E               2003      MOVE.B  #14,D0
00001DE4  4E4F                    2004      TRAP    #15
00001DE6                          2005          
00001DE6  221A                    2006      MOVE.L  (A2)+,D1
00001DE8                          2007          
00001DE8  103C 0003               2008      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001DEC  4E4F                    2009      TRAP    #15      * Perform Trap #3
00001DEE                          2010      
00001DEE  321A                    2011      MOVE.W  (A2)+,D1
00001DF0                          2012          
00001DF0  103C 0003               2013      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001DF4  4E4F                    2014      TRAP    #15      * Perform Trap #3
00001DF6                          2015      
00001DF6  6000 0006               2016      BRA     ENDEAHELPER05
00001DFA                          2017  
00001DFA                          2018  NOTIMMEDIATE    
00001DFA                          2019  
00001DFA                          2020  
00001DFA  6100 0484               2021      BSR     UNKNOWNOP
00001DFE                          2022      
00001DFE                          2023  ENDEAHELPER05
00001DFE  4C9F 03FF               2024      MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001E02  4E75                    2025      RTS
00001E04                          2026  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001E04                          2027  *-----------------------------------------------------------------------------
00001E04                          2028  
00001E04                          2029  
00001E04                          2030  
00001E04                          2031  *-----------------------------------------------------------------------------
00001E04                          2032  *-----------------------------------------------------------------------------
00001E04                          2033  * NAME:           MODE_DN
00001E04                          2034  * DESCRIPTION:    Generalize the EA part of the project.
00001E04                          2035  * PRE-CONDITION:  The mode must have been correctly identified. All modes
00001E04                          2036  *                 must be called by RTS.
00001E04                          2037  * POST-CONDITION: After the EA, the entire op will head back to the BSR that
00001E04                          2038  *                 called it.
00001E04                          2039  * REGISTERS:      a
00001E04                          2040  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001E04                          2041  * ---> Dn
00001E04                          2042  MODE_DN
00001E04  48A7 FFC0               2043          MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001E08                          2044  
00001E08  3C3C 0000               2045          MOVE.W  #0, D6              * Prep lower value for bitmask
00001E0C  3E3C 0002               2046          MOVE.W  #2, D7              * Prep upper value for bitmask
00001E10  6100 06D8               2047          BSR     BITMASK             * Finalize bitmask setup
00001E14  CC42                    2048          AND     D2,D6               * Apply bitmask
00001E16                          2049          
00001E16  0C46 0000               2050          CMPI    #%000000000000000, D6   * Data Register D0?
00001E1A  6600 000A               2051          BNE     NOTD0
00001E1E                          2052          
00001E1E  6100 0074               2053          BSR     PRINTD0
00001E22  6000 006A               2054          BRA     ENDMODE_DN
00001E26                          2055  NOTD0      
00001E26  0C46 0001               2056          CMPI    #%000000000000001, D6   * Data Register D1?
00001E2A  6600 000A               2057          BNE     NOTD1
00001E2E                          2058          
00001E2E  6100 0072               2059          BSR     PRINTD1
00001E32  6000 005A               2060          BRA     ENDMODE_DN
00001E36                          2061  NOTD1
00001E36  0C46 0002               2062          CMPI    #%000000000000010, D6   * Data Register D2?
00001E3A  6600 000A               2063          BNE     NOTD2
00001E3E                          2064          
00001E3E  6100 0070               2065          BSR     PRINTD2
00001E42  6000 004A               2066          BRA     ENDMODE_DN
00001E46                          2067  NOTD2
00001E46  0C46 0003               2068          CMPI    #%000000000000011, D6   * Data Register D3?
00001E4A  6600 000A               2069          BNE     NOTD3
00001E4E                          2070          
00001E4E  6100 006E               2071          BSR     PRINTD3
00001E52  6000 003A               2072          BRA     ENDMODE_DN
00001E56                          2073  NOTD3
00001E56  0C46 0004               2074          CMPI    #%000000000000100, D6   * Data Register D4?
00001E5A  6600 000A               2075          BNE     NOTD4
00001E5E                          2076          
00001E5E  6100 006C               2077          BSR     PRINTD4
00001E62  6000 002A               2078          BRA     ENDMODE_DN
00001E66                          2079  NOTD4
00001E66  0C46 0005               2080          CMPI    #%000000000000101, D6   * Data Register D5?
00001E6A  6600 000A               2081          BNE     NOTD5
00001E6E                          2082          
00001E6E  6100 006A               2083          BSR     PRINTD5
00001E72  6000 001A               2084          BRA     ENDMODE_DN
00001E76                          2085  NOTD5
00001E76  0C46 0006               2086          CMPI    #%000000000000110, D6   * Data Register D6?
00001E7A  6600 000A               2087          BNE     NOTD6
00001E7E                          2088          
00001E7E  6100 0068               2089          BSR     PRINTD6
00001E82  6000 000A               2090          BRA     ENDMODE_DN
00001E86                          2091  NOTD6
00001E86  6100 006E               2092          BSR     PRINTD7
00001E8A  6000 0002               2093          BRA     ENDMODE_DN
00001E8E                          2094          
00001E8E                          2095  ENDMODE_DN
00001E8E  4C9F 03FF               2096          MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001E92  4E75                    2097          RTS
00001E94                          2098  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001E94                          2099  *-----------------------------------------------------------------------------
00001E94                          2100  
00001E94                          2101  
00001E94                          2102  
00001E94                          2103  *-----------------------------------------------------------------------------
00001E94                          2104  *-----------------------------------------------------------------------------
00001E94                          2105  * NAME:           PRINTD0
00001E94                          2106  * DESCRIPTION:    Simply prints D0, D1, ..., up to D7.
00001E94                          2107  * PRE-CONDITION:  a
00001E94                          2108  * POST-CONDITION: a
00001E94                          2109  * REGISTERS:      a
00001E94                          2110  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001E94                          2111  PRINTD0
00001E94  43F9 00002630           2112          LEA     __D0, A1        * Load 'D0'
00001E9A  103C 000E               2113          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E9E  4E4F                    2114          TRAP    #15             * Perform Trap #14
00001EA0  4E75                    2115          RTS
00001EA2                          2116  PRINTD1
00001EA2  43F9 00002633           2117          LEA     __D1, A1        * Load 'D1'
00001EA8  103C 000E               2118          MOVE.B  #14, D0         * Load Trap #14 to print out
00001EAC  4E4F                    2119          TRAP    #15             * Perform Trap #14
00001EAE  4E75                    2120          RTS      
00001EB0                          2121  PRINTD2
00001EB0  43F9 00002636           2122          LEA     __D2, A1        * Load 'D2'
00001EB6  103C 000E               2123          MOVE.B  #14, D0         * Load Trap #14 to print out
00001EBA  4E4F                    2124          TRAP    #15             * Perform Trap #14
00001EBC  4E75                    2125          RTS      
00001EBE                          2126  PRINTD3
00001EBE  43F9 00002639           2127          LEA     __D3, A1        * Load 'D3'
00001EC4  103C 000E               2128          MOVE.B  #14, D0         * Load Trap #14 to print out
00001EC8  4E4F                    2129          TRAP    #15             * Perform Trap #14
00001ECA  4E75                    2130          RTS      
00001ECC                          2131  PRINTD4
00001ECC  43F9 0000263C           2132          LEA     __D4, A1        * Load 'D4'
00001ED2  103C 000E               2133          MOVE.B  #14, D0         * Load Trap #14 to print out
00001ED6  4E4F                    2134          TRAP    #15             * Perform Trap #14
00001ED8  4E75                    2135          RTS       
00001EDA                          2136  PRINTD5
00001EDA  43F9 0000263F           2137          LEA     __D5, A1        * Load 'D5'
00001EE0  103C 000E               2138          MOVE.B  #14, D0         * Load Trap #14 to print out
00001EE4  4E4F                    2139          TRAP    #15             * Perform Trap #14
00001EE6  4E75                    2140          RTS      
00001EE8                          2141  PRINTD6
00001EE8  43F9 00002642           2142          LEA     __D6, A1        * Load 'D6'
00001EEE  103C 000E               2143          MOVE.B  #14, D0         * Load Trap #14 to print out
00001EF2  4E4F                    2144          TRAP    #15             * Perform Trap #14
00001EF4  4E75                    2145          RTS
00001EF6                          2146  PRINTD7
00001EF6  43F9 00002645           2147          LEA     __D7, A1        * Load 'D7'
00001EFC  103C 000E               2148          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F00  4E4F                    2149          TRAP    #15             * Perform Trap #14
00001F02  4E75                    2150          RTS
00001F04                          2151  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001F04                          2152  *-----------------------------------------------------------------------------
00001F04                          2153  
00001F04                          2154  
00001F04                          2155  
00001F04                          2156  *-----------------------------------------------------------------------------
00001F04                          2157  *-----------------------------------------------------------------------------
00001F04                          2158  * NAME:           MODE_AN
00001F04                          2159  * DESCRIPTION:    Simply chooses to print A0-A7.
00001F04                          2160  * PRE-CONDITION:  a
00001F04                          2161  * POST-CONDITION: a
00001F04                          2162  * REGISTERS:      a
00001F04                          2163  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001F04                          2164  MODE_AN
00001F04  48A7 FFC0               2165          MOVEM   D0-D7/A0-A1,-(A7)   * Save information
00001F08                          2166  
00001F08  3C3C 0000               2167          MOVE.W  #0, D6              * Prep lower value for bitmask
00001F0C  3E3C 0002               2168          MOVE.W  #2, D7              * Prep upper value for bitmask
00001F10  6100 05D8               2169          BSR     BITMASK             * Finalize bitmask setup
00001F14  CC42                    2170          AND     D2,D6               * Apply bitmask
00001F16                          2171          
00001F16  0C46 0000               2172          CMPI    #%000000000000000, D6   * Address Register A0?
00001F1A  6600 000A               2173          BNE     NOTA0
00001F1E                          2174          
00001F1E  6100 0074               2175          BSR     PRINTA0
00001F22                          2176          
00001F22  6000 006A               2177          BRA     ENDMODE_AN
00001F26                          2178  NOTA0      
00001F26  0C46 0001               2179          CMPI    #%000000000000001, D6   * Address Register A1?
00001F2A  6600 000A               2180          BNE     NOTA1
00001F2E                          2181          
00001F2E  6100 0072               2182          BSR     PRINTA1
00001F32                          2183          
00001F32  6000 005A               2184          BRA     ENDMODE_AN
00001F36                          2185  NOTA1
00001F36  0C46 0002               2186          CMPI    #%000000000000010, D6   * Address Register A2?
00001F3A  6600 000A               2187          BNE     NOTA2
00001F3E                          2188          
00001F3E  6100 0070               2189          BSR     PRINTA2
00001F42                          2190          
00001F42  6000 004A               2191          BRA     ENDMODE_AN
00001F46                          2192  NOTA2
00001F46  0C46 0003               2193          CMPI    #%000000000000011, D6   * Address Register A3?
00001F4A  6600 000A               2194          BNE     NOTA3
00001F4E                          2195          
00001F4E  6100 006E               2196          BSR     PRINTA3
00001F52                          2197          
00001F52  6000 003A               2198          BRA     ENDMODE_AN
00001F56                          2199  NOTA3
00001F56  0C46 0004               2200          CMPI    #%000000000000100, D6   * Address Register A4?
00001F5A  6600 000A               2201          BNE     NOTA4
00001F5E                          2202          
00001F5E  6100 006C               2203          BSR     PRINTA4
00001F62                          2204          
00001F62  6000 002A               2205          BRA     ENDMODE_AN
00001F66                          2206  NOTA4
00001F66  0C46 0005               2207          CMPI    #%000000000000101, D6   * Address Register A5?
00001F6A  6600 000A               2208          BNE     NOTA5
00001F6E                          2209          
00001F6E  6100 006A               2210          BSR     PRINTA5
00001F72                          2211          
00001F72  6000 001A               2212          BRA     ENDMODE_AN
00001F76                          2213  NOTA5
00001F76  0C46 0006               2214          CMPI    #%000000000000110, D6   * Address Register A6?
00001F7A  6600 000A               2215          BNE     NOTA6
00001F7E                          2216          
00001F7E  6100 0068               2217          BSR     PRINTA6
00001F82                          2218          
00001F82  6000 000A               2219          BRA     ENDMODE_AN
00001F86                          2220  NOTA6
00001F86  6100 006E               2221          BSR     PRINTA7
00001F8A                          2222          
00001F8A  6000 0002               2223          BRA     ENDMODE_AN
00001F8E                          2224  ENDMODE_AN
00001F8E  4C9F 03FF               2225          MOVEM   (A7)+,D0-D7/A0-A1   * Restore registers
00001F92  4E75                    2226          RTS
00001F94                          2227  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001F94                          2228  *-----------------------------------------------------------------------------
00001F94                          2229  
00001F94                          2230  
00001F94                          2231  
00001F94                          2232  *-----------------------------------------------------------------------------
00001F94                          2233  *-----------------------------------------------------------------------------
00001F94                          2234  * NAME:           PRINTA0
00001F94                          2235  * DESCRIPTION:    Simply print out the address register.
00001F94                          2236  * PRE-CONDITION:  a
00001F94                          2237  * POST-CONDITION: a
00001F94                          2238  * REGISTERS:      a
00001F94                          2239  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001F94                          2240  PRINTA0
00001F94  43F9 00002618           2241          LEA     __A0, A1        * Load 'A0'
00001F9A  103C 000E               2242          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F9E  4E4F                    2243          TRAP    #15             * Perform Trap #14
00001FA0  4E75                    2244          RTS
00001FA2                          2245  
00001FA2                          2246  PRINTA1
00001FA2  43F9 0000261B           2247          LEA     __A1, A1        * Load 'A1'
00001FA8  103C 000E               2248          MOVE.B  #14, D0         * Load Trap #14 to print out
00001FAC  4E4F                    2249          TRAP    #15             * Perform Trap #14
00001FAE  4E75                    2250          RTS
00001FB0                          2251          
00001FB0                          2252  PRINTA2
00001FB0  43F9 0000261E           2253          LEA     __A2, A1        * Load 'A2'
00001FB6  103C 000E               2254          MOVE.B  #14, D0         * Load Trap #14 to print out
00001FBA  4E4F                    2255          TRAP    #15             * Perform Trap #14
00001FBC  4E75                    2256          RTS
00001FBE                          2257  
00001FBE                          2258  PRINTA3
00001FBE  43F9 00002621           2259          LEA     __A3, A1        * Load 'A3'
00001FC4  103C 000E               2260          MOVE.B  #14, D0         * Load Trap #14 to print out
00001FC8  4E4F                    2261          TRAP    #15             * Perform Trap #14
00001FCA  4E75                    2262          RTS
00001FCC                          2263  
00001FCC                          2264  PRINTA4
00001FCC  43F9 00002624           2265          LEA     __A4, A1        * Load 'A4'
00001FD2  103C 000E               2266          MOVE.B  #14, D0         * Load Trap #14 to print out
00001FD6  4E4F                    2267          TRAP    #15             * Perform Trap #14
00001FD8  4E75                    2268          RTS
00001FDA                          2269  
00001FDA                          2270  PRINTA5
00001FDA  43F9 00002627           2271          LEA     __A5, A1        * Load 'A5'
00001FE0  103C 000E               2272          MOVE.B  #14, D0         * Load Trap #14 to print out
00001FE4  4E4F                    2273          TRAP    #15             * Perform Trap #14
00001FE6  4E75                    2274          RTS
00001FE8                          2275  
00001FE8                          2276  PRINTA6
00001FE8  43F9 0000262A           2277          LEA     __A6, A1        * Load 'A6'
00001FEE  103C 000E               2278          MOVE.B  #14, D0         * Load Trap #14 to print out
00001FF2  4E4F                    2279          TRAP    #15             * Perform Trap #14
00001FF4  4E75                    2280          RTS
00001FF6                          2281  
00001FF6                          2282  PRINTA7
00001FF6  43F9 0000262D           2283          LEA     __A7, A1        * Load 'A7'
00001FFC  103C 000E               2284          MOVE.B  #14, D0         * Load Trap #14 to print out
00002000  4E4F                    2285          TRAP    #15             * Perform Trap #14
00002002  4E75                    2286          RTS
00002004                          2287  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002004                          2288  *-----------------------------------------------------------------------------
00002004                          2289  
00002004                          2290  
00002004                          2291  
00002004                          2292  *-----------------------------------------------------------------------------
00002004                          2293  *-----------------------------------------------------------------------------
00002004                          2294  * NAME:           SIZE67
00002004                          2295  * DESCRIPTION:    Called if the size is stored in bits 6 to 7.
00002004                          2296  * PRE-CONDITION:  a
00002004                          2297  * POST-CONDITION: a
00002004                          2298  * REGISTERS:      a
00002004                          2299  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002004                          2300  SIZE67
00002004  48A7 FFFE               2301          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
00002008  3C3C 0006               2302          MOVE.W  #6, D6              * Prep lower value for bitmask
0000200C  3E3C 0007               2303          MOVE.W  #7, D7              * Prep upper value for bitmask
00002010  6100 04D8               2304          BSR     BITMASK             * Finalize bitmask setup
00002014  CC42                    2305          AND     D2,D6               * Apply bitmask     
00002016                          2306  
00002016  0C46 0000               2307          CMPI    #%0000000000000000, D6   * is it a BYTE?
0000201A  6600 000A               2308          BNE     NOT67BYTE
0000201E                          2309          
0000201E  6100 0080               2310          BSR     PRINTBYTE               * Branch to handle BYTE sizes
00002022  6000 001E               2311          BRA     END67
00002026                          2312  NOT67BYTE        
00002026  0C46 0040               2313          CMPI    #%0000000001000000, D6   * is it a WORD?
0000202A  6600 000A               2314          BNE     NOT67WORD
0000202E                          2315          
0000202E  6100 007E               2316          BSR     PRINTWORD               * Branch to handle WORD sizes
00002032  6000 000E               2317          BRA     END67
00002036                          2318  NOT67WORD
00002036  0C46 0080               2319          CMPI    #%0000000010000000, D6   * is it a LONG?
0000203A  6600 0006               2320          BNE     END67
0000203E                          2321          
0000203E  6100 007C               2322          BSR     PRINTLONG               * Branch to handle LONG sizes
00002042                          2323  END67
00002042  4C9F 7FFF               2324          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
00002046  4E75                    2325          RTS                             * Return. Size handling is finished.
00002048                          2326  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002048                          2327  *-----------------------------------------------------------------------------
00002048                          2328  
00002048                          2329  
00002048                          2330  
00002048                          2331  *-----------------------------------------------------------------------------
00002048                          2332  *-----------------------------------------------------------------------------
00002048                          2333  * NAME:           SIZE68
00002048                          2334  * DESCRIPTION:    Called if the size is stored in bits 6 to 8.
00002048                          2335  * PRE-CONDITION:  a
00002048                          2336  * POST-CONDITION: a
00002048                          2337  * REGISTERS:      a
00002048                          2338  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002048                          2339  SIZE68
00002048                          2340          * finish later, need to follow the same format as SIZE67
00002048                          2341          
00002048                          2342          
00002048  48A7 FFFE               2343          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
0000204C  3C3C 0006               2344          MOVE.W  #6, D6              * Prep lower value for bitmask
00002050  3E3C 0008               2345          MOVE.W  #8, D7              * Prep upper value for bitmask
00002054  6100 0494               2346          BSR     BITMASK             * Finalize bitmask setup
00002058  CC42                    2347          AND     D2,D6               * Apply bitmask          
0000205A                          2348          
0000205A  0C46 0000               2349          CMPI    #%0000000000000000, D6   * is it a BYTE?
0000205E  6100 0040               2350          BSR     PRINTBYTE               * Branch to handle BYTE sizes
00002062  0C46 0100               2351          CMPI    #%0000000100000000, D6   * is it a BYTE?
00002066  6100 0038               2352          BSR     PRINTBYTE               * Branch to handle BYTE sizes 
0000206A                          2353        
0000206A  0C46 0040               2354          CMPI    #%0000000001000000, D6   * is it a WORD?
0000206E  6100 003E               2355          BSR     PRINTWORD               * Branch to handle BYTE sizes
00002072  0C46 0140               2356          CMPI    #%0000000101000000, D6   * is it a WORD?
00002076  6100 0036               2357          BSR     PRINTWORD               * Branch to handle BYTE sizes
0000207A  0C46 00C0               2358          CMPI    #%0000000011000000, D6   * is it a WORD (ADDA)?
0000207E  6100 002E               2359          BSR     PRINTWORD               * Branch to handle BYTE sizes
00002082                          2360  
00002082  0C46 0080               2361          CMPI    #%0000000010000000, D6   * is it a LONG?
00002086  6100 0034               2362          BSR     PRINTLONG               * Branch to handle BYTE sizes
0000208A  0C46 0180               2363          CMPI    #%0000000110000000, D6   * is it a LONG?
0000208E  6100 002C               2364          BSR     PRINTLONG               * Branch to handle BYTE sizes
00002092  0C46 01C0               2365          CMPI    #%0000000111000000, D6   * is it a LONG (ADDA)?
00002096  6100 0024               2366          BSR     PRINTLONG               * Branch to handle BYTE sizes
0000209A                          2367  
0000209A  4C9F 7FFF               2368          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
0000209E  4E75                    2369          RTS                             * Return. Size handling is finished.
000020A0                          2370  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000020A0                          2371  *-----------------------------------------------------------------------------
000020A0                          2372  
000020A0                          2373  
000020A0                          2374  
000020A0                          2375  *-----------------------------------------------------------------------------
000020A0                          2376  *-----------------------------------------------------------------------------
000020A0                          2377  * NAME:           PRINTBYTE
000020A0                          2378  * DESCRIPTION:    a
000020A0                          2379  * PRE-CONDITION:  a
000020A0                          2380  * POST-CONDITION: a
000020A0                          2381  * REGISTERS:      a
000020A0                          2382  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000020A0                          2383  PRINTBYTE
000020A0  43F9 0000260C           2384          LEA     __B,A1      * Load '.B ' into A1
000020A6  103C 000E               2385          MOVE.B  #14,D0      * Trap #14 setup to print
000020AA  4E4F                    2386          TRAP    #15         * Perform Trap #14
000020AC  4E75                    2387          RTS                 * Return to SIZE67/SIZE68
000020AE                          2388          
000020AE                          2389  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000020AE                          2390  *-----------------------------------------------------------------------------
000020AE                          2391  
000020AE                          2392  
000020AE                          2393  
000020AE                          2394  *-----------------------------------------------------------------------------
000020AE                          2395  *-----------------------------------------------------------------------------
000020AE                          2396  * NAME:           PRINTWORD
000020AE                          2397  * DESCRIPTION:    a
000020AE                          2398  * PRE-CONDITION:  a
000020AE                          2399  * POST-CONDITION: a
000020AE                          2400  * REGISTERS:      a
000020AE                          2401  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000020AE                          2402  PRINTWORD
000020AE  43F9 00002610           2403          LEA     __W,A1      * Load '.W ' into A1
000020B4  103C 000E               2404          MOVE.B  #14,D0      * Trap #14 setup to print
000020B8  4E4F                    2405          TRAP    #15         * Perform Trap #14
000020BA  4E75                    2406          RTS                 * Return to SIZE67/SIZE68
000020BC                          2407          
000020BC                          2408  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000020BC                          2409  *-----------------------------------------------------------------------------
000020BC                          2410  
000020BC                          2411  
000020BC                          2412  
000020BC                          2413  *-----------------------------------------------------------------------------
000020BC                          2414  *-----------------------------------------------------------------------------
000020BC                          2415  * NAME:           PRINTLONG
000020BC                          2416  * DESCRIPTION:    a
000020BC                          2417  * PRE-CONDITION:  a
000020BC                          2418  * POST-CONDITION: a
000020BC                          2419  * REGISTERS:      a
000020BC                          2420  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000020BC                          2421  PRINTLONG
000020BC  43F9 00002614           2422          LEA     __L,A1      * Load '.L ' into A1
000020C2  103C 000E               2423          MOVE.B  #14,D0      * Trap #14 setup to print
000020C6  4E4F                    2424          TRAP    #15         * Perform Trap #14
000020C8  4E75                    2425          RTS                 * Return to SIZE67/SIZE68
000020CA                          2426          
000020CA                          2427  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000020CA                          2428  *-----------------------------------------------------------------------------
000020CA                          2429  
000020CA                          2430  
000020CA                          2431  
000020CA                          2432  *-----------------------------------------------------------------------------
000020CA                          2433  *-----------------------------------------------------------------------------
000020CA                          2434  * NAME:           MOVEMHELPERPOST
000020CA                          2435  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
000020CA                          2436  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
000020CA                          2437  * POST-CONDITION: The registers being saved are printed
000020CA                          2438  * REGISTERS:      A2
000020CA                          2439  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000020CA                          2440  MOVEMHELPERPOST
000020CA  48A7 FFFE               2441          MOVEM  D0-D7/A0-A6,-(A7)
000020CE                          2442          
000020CE  4285                    2443          CLR.L   D5  * to be used as a loop counter
000020D0  4284                    2444          CLR.L   D4  * == 1 if we have printed any registers (for fencepost issue)
000020D2  4283                    2445          CLR.L   D3  * == 1 if we are in a range
000020D4  4286                    2446          CLR.L   D6  * == 1 if we have already printed the slash or dash
000020D6  4287                    2447          CLR.L   D7  * == counts the number of registers in a range
000020D8  1C3C 0001               2448          MOVE.B  #1,D6 * to fix fencepost issue
000020DC  4282                    2449          CLR.L   D2
000020DE  3412                    2450          MOVE.W  (A2),D2
000020E0                          2451          
000020E0                          2452  DLOOP * loop to print out the data register portion of the addresses being saved
000020E0                          2453  
000020E0  E25A                    2454          ROR     #1,D2
000020E2  6500 0006               2455          BCS     DVALID
000020E6                          2456          
000020E6  6000 0064               2457          BRA     DINVALID
000020EA                          2458          
000020EA                          2459  DVALID
000020EA  0C43 0000               2460          CMPI    #0,D3
000020EE  6700 0020               2461          BEQ     DFORWARDVALID * we are not in a range
000020F2                          2462          
000020F2  5247                    2463          ADDI    #1,D7 *increment number of regs in range
000020F4                          2464          
000020F4  0C46 0001               2465          CMPI    #1,D6   *have we already printed a symbol?
000020F8  6700 0084               2466          BEQ     DLOOPITER
000020FC                          2467          
000020FC  43F9 0000260A           2468          LEA     DASH,A1    *print a dash
00002102  103C 000E               2469          MOVE.B  #14,D0
00002106  4E4F                    2470          TRAP    #15
00002108                          2471          
00002108  1C3C 0001               2472          MOVE.B  #1,D6 * indicates a symbol has been printed
0000210C                          2473          
0000210C  6000 0070               2474          BRA     DLOOPITER
00002110                          2475          
00002110                          2476  DFORWARDVALID
00002110                          2477          * not in a range yet, print
00002110                          2478          
00002110  0C44 0000               2479          CMPI    #0,D4
00002114  6700 000E               2480          BEQ     DNOSLASH
00002118                          2481                  
00002118  43F9 00002608           2482          LEA     SLASH,A1
0000211E  103C 000E               2483          MOVE.B  #14,D0
00002122  4E4F                    2484          TRAP    #15
00002124                          2485          
00002124                          2486  DNOSLASH
00002124                          2487  
00002124  183C 0001               2488          MOVE.B  #1,D4 * we have printed something, now slashes are fair game
00002128                          2489          
00002128  1C3C 0001               2490          MOVE.B  #1,D6   * we have printed a symbol
0000212C                          2491          
0000212C  43F9 000025F2           2492          LEA     ASCII_D,A1
00002132  103C 000E               2493          MOVE.B  #14,D0
00002136  4E4F                    2494          TRAP    #15
00002138                          2495          
00002138  2205                    2496          MOVE.L  D5,D1
0000213A  103C 0003               2497          MOVE.B  #3,D0
0000213E  4E4F                    2498          TRAP    #15
00002140                          2499  
00002140  163C 0001               2500          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
00002144  1C3C 0000               2501          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
00002148                          2502          
00002148  6000 0034               2503          BRA     DLOOPITER
0000214C                          2504  
0000214C                          2505  
0000214C                          2506  DINVALID
0000214C                          2507  
0000214C                          2508          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
0000214C                          2509          
0000214C  0C43 0001               2510          CMPI    #1,D3
00002150  6600 002C               2511          BNE     DLOOPITER
00002154                          2512          
00002154  163C 0000               2513          MOVE.B  #0,D3
00002158                          2514          
00002158  0C47 0001               2515          CMPI    #1,D7
0000215C  6D00 001E               2516          BLT     DLOOPITERCLR
00002160                          2517          
00002160  43F9 000025F2           2518          LEA     ASCII_D,A1
00002166  103C 000E               2519          MOVE.B  #14,D0
0000216A  4E4F                    2520          TRAP    #15
0000216C                          2521          
0000216C  2205                    2522          MOVE.L  D5,D1
0000216E                          2523          
0000216E  0641 FFFF               2524          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
00002172                          2525          
00002172  103C 0003               2526          MOVE.B  #3,D0
00002176  4E4F                    2527          TRAP    #15
00002178                          2528          
00002178  6000 0004               2529          BRA     DLOOPITER
0000217C                          2530          
0000217C                          2531  DLOOPITERCLR        
0000217C  4287                    2532          CLR.L   D7
0000217E                          2533  
0000217E                          2534  DLOOPITER
0000217E                          2535          
0000217E  0C45 0008               2536          CMPI    #8,D5
00002182  6700 0008               2537          BEQ     DLOOPDONE
00002186                          2538  
00002186  5245                    2539          ADDI    #1,D5
00002188  6000 FF56               2540          BRA     DLOOP
0000218C                          2541  
0000218C                          2542  DLOOPDONE
0000218C                          2543  
0000218C  7A09                    2544          MOVE.L  #9,D5  * to be used as a loop counter
0000218E  4283                    2545          CLR.L   D3  * == 1 if we are in a range
00002190  4286                    2546          CLR.L   D6  * == 1 if we have already printed the slash or dash
00002192  4287                    2547          CLR.L   D7  * count of registers in a range
00002194  1C3C 0001               2548          MOVE.B  #1,D6 * to fix fencepost issue     
00002198                          2549  
00002198                          2550  ALOOP * loop to print out the data register portion of the addresses being saved
00002198                          2551  
00002198  E25A                    2552          ROR     #1,D2
0000219A  6500 0006               2553          BCS     AVALID
0000219E                          2554          
0000219E  6000 0068               2555          BRA     AINVALID
000021A2                          2556          
000021A2                          2557  AVALID
000021A2  0C43 0000               2558          CMPI    #0,D3
000021A6  6700 0020               2559          BEQ     AFORWARDVALID * we are not in a range
000021AA                          2560          
000021AA  5247                    2561          ADDI    #1,D7 *increment number of regs in range
000021AC                          2562          
000021AC  0C46 0001               2563          CMPI    #1,D6   *have we already printed a symbol?
000021B0  6700 008C               2564          BEQ     ALOOPITER
000021B4                          2565          
000021B4  43F9 0000260A           2566          LEA     DASH,A1    *print a dash
000021BA  103C 000E               2567          MOVE.B  #14,D0
000021BE  4E4F                    2568          TRAP    #15
000021C0                          2569          
000021C0  1C3C 0001               2570          MOVE.B  #1,D6 * indicates a symbol has been printed
000021C4                          2571          
000021C4  6000 0078               2572          BRA     ALOOPITER
000021C8                          2573          
000021C8                          2574  AFORWARDVALID
000021C8                          2575          * not in a range yet, print
000021C8                          2576          
000021C8                          2577                  
000021C8  0C44 0000               2578          CMPI    #0,D4
000021CC  6700 000E               2579          BEQ     ANOSLASH
000021D0                          2580                  
000021D0  43F9 00002608           2581          LEA     SLASH,A1
000021D6  103C 000E               2582          MOVE.B  #14,D0
000021DA  4E4F                    2583          TRAP    #15
000021DC                          2584          
000021DC                          2585  ANOSLASH
000021DC                          2586  
000021DC  183C 0001               2587          MOVE.B  #1,D4   * we have printed something, now slashes are fair game
000021E0                          2588          
000021E0  1C3C 0001               2589          MOVE.B  #1,D6   * we have printed a symbol
000021E4                          2590          
000021E4  43F9 000025EC           2591          LEA     ASCII_A,A1
000021EA  103C 000E               2592          MOVE.B  #14,D0
000021EE  4E4F                    2593          TRAP    #15
000021F0                          2594          
000021F0  2205                    2595          MOVE.L  D5,D1
000021F2                          2596          
000021F2  0641 FFF8               2597          ADDI    #-8,D1 * it's A, need to adjust by 8
000021F6                          2598          
000021F6  103C 0003               2599          MOVE.B  #3,D0
000021FA  4E4F                    2600          TRAP    #15
000021FC                          2601  
000021FC  163C 0001               2602          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
00002200  1C3C 0000               2603          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
00002204                          2604          
00002204  6000 0038               2605          BRA     ALOOPITER
00002208                          2606  
00002208                          2607  
00002208                          2608  AINVALID
00002208                          2609  
00002208                          2610          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
00002208                          2611          
00002208  0C43 0001               2612          CMPI    #1,D3
0000220C  6600 0030               2613          BNE     ALOOPITER
00002210                          2614          
00002210  163C 0000               2615          MOVE.B  #0,D3
00002214                          2616          
00002214  0C47 0001               2617          CMPI    #1,D7
00002218  6D00 0022               2618          BLT     ALOOPITERCLR
0000221C                          2619          
0000221C  43F9 000025EC           2620          LEA     ASCII_A,A1
00002222  103C 000E               2621          MOVE.B  #14,D0
00002226  4E4F                    2622          TRAP    #15
00002228                          2623          
00002228  2205                    2624          MOVE.L  D5,D1
0000222A                          2625          
0000222A  0641 FFFF               2626          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
0000222E  0641 FFF8               2627          ADDI    #-8,D1 * it's A, need to adjust by 8
00002232                          2628          
00002232  103C 0003               2629          MOVE.B  #3,D0
00002236  4E4F                    2630          TRAP    #15
00002238                          2631          
00002238  6000 0004               2632          BRA     ALOOPITER
0000223C                          2633          
0000223C                          2634  ALOOPITERCLR
0000223C                          2635          
0000223C  4287                    2636          CLR.L   D7
0000223E                          2637  
0000223E                          2638  ALOOPITER
0000223E                          2639          
0000223E  0C45 0010               2640          CMPI     #16,D5
00002242  6700 0008               2641          BEQ     ALOOPDONE
00002246                          2642  
00002246  5245                    2643          ADDI    #1,D5
00002248  6000 FF4E               2644          BRA     ALOOP
0000224C                          2645  
0000224C                          2646  ALOOPDONE
0000224C                          2647          
0000224C  4C9F 7FFF               2648          MOVEM    (A7)+,D0-D7/A0-A6
00002250  4E75                    2649          RTS
00002252                          2650  
00002252                          2651          
00002252                          2652  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002252                          2653  *-----------------------------------------------------------------------------
00002252                          2654  
00002252                          2655  
00002252                          2656  
00002252                          2657  
00002252                          2658  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002252                          2659  *-----------------------------------------------------------------------------
00002252                          2660  *-----------------------------------------------------------------------------
00002252                          2661  * NAME:           MOVEMHELPERPRE
00002252                          2662  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
00002252                          2663  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
00002252                          2664  * POST-CONDITION: The registers being saved are printed
00002252                          2665  * REGISTERS:      A2
00002252                          2666  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002252                          2667  MOVEMHELPERPRE
00002252                          2668  
00002252  48A7 7F00               2669      MOVEM   D1-D7,-(A7)
00002256                          2670  
00002256  3412                    2671      MOVE.W  (A2),D2 * move the data we need to proccess into D2
00002258  7800                    2672      MOVE.L  #0,D4
0000225A  4287                    2673      CLR.L    D7 * put the flipped bits here
0000225C                          2674      
0000225C                          2675      *the following block of code moves bits
0000225C                          2676      *into the same position they would be in if
0000225C                          2677      *the MOVEM was post inc, then simply uses post
0000225C                          2678      *inc to print the registers being saved
0000225C                          2679  PRELOOP
0000225C  E35A                    2680      ROL.W   #1,D2
0000225E                          2681      
0000225E  6500 0006               2682      BCS     PRESETBIT
00002262  6000 0004               2683      BRA     PRELOOPITER
00002266                          2684      
00002266                          2685  PRESETBIT
00002266  09C7                    2686      BSET    D4,D7
00002268                          2687  
00002268                          2688  PRELOOPITER
00002268  0C44 000F               2689      CMPI    #15,D4
0000226C  6700 0006               2690      BEQ     PRELOOPDONE
00002270                          2691      
00002270  5244                    2692      ADDI    #1,D4
00002272  60E8                    2693      BRA     PRELOOP
00002274                          2694  
00002274                          2695  PRELOOPDONE
00002274                          2696  
00002274  3487                    2697      MOVE.W  D7,(A2)    
00002276  4C9F 00FE               2698      MOVEM   (A7)+,D1-D7
0000227A                          2699  
0000227A  6100 FE4E               2700      BSR MOVEMHELPERPOST
0000227E                          2701  
0000227E  4E75                    2702      RTS
00002280                          2703  
00002280                          2704  
00002280                          2705  
00002280                          2706          
00002280                          2707  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002280                          2708  *-----------------------------------------------------------------------------
00002280                          2709  
00002280                          2710  
00002280                          2711  
00002280                          2712  *-----------------------------------------------------------------------------
00002280                          2713  *-----------------------------------------------------------------------------
00002280                          2714  * NAME:           UNKNOWNOP
00002280                          2715  * DESCRIPTION:    a
00002280                          2716  * PRE-CONDITION:  D2 contains the instruction to print. D2 has already been
00002280                          2717  *                 identified as an unknown operation.
00002280                          2718  * POST-CONDITION: D2 is no longer the opcode.
00002280                          2719  * REGISTERS:      a
00002280                          2720  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002280                          2721  UNKNOWNOP
00002280  220A                    2722          MOVE.L  A2,D1   * Prep the add to print
00002282  5581                    2723          SUB.L   #2,D1   * Off by two error due to post increment correct
00002284  2602                    2724          MOVE.L  D2,D3   * Save the opcode to print
00002286                          2725          
00002286  7410                    2726          MOVE.L  #16,D2  * set the base to 16
00002288  700F                    2727          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
0000228A  4E4F                    2728          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
0000228C                          2729          
0000228C  43F9 000025AE           2730          LEA     DATA,A1 * load " DATA $" into register A1
00002292  700E                    2731          MOVE.L  #14,D0  * print the string stored in A1
00002294  4E4F                    2732          TRAP    #15
00002296                          2733          
00002296  2203                    2734          MOVE.L  D3,D1   * move the opcode from D3 into D1 to print
00002298  103C 000F               2735          MOVE.B  #15,D0   * Indicate we are using trap #15, 15 to in a certain #base
0000229C  4E4F                    2736          TRAP    #15      * Perform Trap #3
0000229E                          2737  
0000229E  43F9 00002553           2738          LEA     NEWLINE,A1 * load newline into register A1
000022A4  700E                    2739          MOVE.L  #14,D0  * print the string stored in A1
000022A6  4E4F                    2740          TRAP    #15
000022A8                          2741  
000022A8  4E75                    2742          RTS
000022AA                          2743  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000022AA                          2744  *-----------------------------------------------------------------------------
000022AA                          2745  
000022AA                          2746  
000022AA                          2747  
000022AA                          2748  *-----------------------------------------------------------------------------
000022AA                          2749  *-----------------------------------------------------------------------------
000022AA                          2750  * NAME: Print ASCII hex char
000022AA                          2751  * DESCRIPTION:    Prints and address register to console in hex (ASCII chars)
000022AA                          2752  * PRE-CONDITION:  A6 contains the register of memory to print.
000022AA                          2753  *                 This parameter would be pre-loaded by, for example:
000022AA                          2754  *                 "LEA FOO_BAR_ADDR,A6" or "LEA $1234FEED,A6"
000022AA                          2755  *                 D3 contains the loops to do (number of bytes).
000022AA                          2756  * POST-CONDITION: 
000022AA                          2757  * REGISTERS:      
000022AA                          2758  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000022AA                          2759  PRINT_ASCII_HEX_CHAR
000022AA  48E7 FFFC               2760      MOVEM.L     D0-D7/A0-A5,-(A7) * push data to save
000022AE  4285                    2761      CLR.L       D5
000022B0                          2762      
000022B0                          2763      * fence post check (if-statement, check if 0 > chars)
000022B0  0C03 0000               2764      CMPI.B      #0,D3
000022B4  6700 017C               2765      BEQ         INVALID_ASCII_INPUT * go to very last part if invalid
000022B8                          2766      
000022B8                          2767  *    MOVE.L      A6,D4
000022B8  2E0E                    2768      MOVE.L      A6,D7
000022BA                          2769  PRINT_ASCII_LOOP
000022BA                          2770  *    MOVE.L      A6,D7 * increase a6's pointer position ea. loop
000022BA                          2771  *    MOVE.L      D4,D7 * make a mutable copy
000022BA  E99F                    2772      ROL.L       #4,D7 * roll to next spot
000022BC  48E7 0100               2773      MOVEM.L     D7,-(A7) * save D7
000022C0                          2774  
000022C0  0287 0000000F           2775      ANDI.L      #HEX_VALUE_MASK_LONG,D7
000022C6                          2776      
000022C6  0C87 00000000           2777      CMPI.L      #0,D7
000022CC  6D00 0164               2778      BLT         INVALID_ASCII_INPUT
000022D0                          2779  
000022D0  0C87 0000000F           2780      CMPI.L      #15,D7
000022D6  6E00 015A               2781      BGT         INVALID_ASCII_INPUT
000022DA                          2782  
000022DA                          2783      * this might be faster... to do later, after entire assignment done
000022DA                          2784       * CMPI.L      #9,D7
000022DA                          2785       * BLE         PRINT_ASCII_0_TO_9
000022DA                          2786  
000022DA  0C87 00000000           2787      CMPI.L      #0,D7
000022E0  6700 0098               2788      BEQ         PRINT_ASCII_0
000022E4  0C87 00000001           2789      CMPI.L      #1,D7
000022EA  6700 0098               2790      BEQ         PRINT_ASCII_1
000022EE  0C87 00000002           2791      CMPI.L      #2,D7
000022F4  6700 0098               2792      BEQ         PRINT_ASCII_2
000022F8  0C87 00000003           2793      CMPI.L      #3,D7
000022FE  6700 0098               2794      BEQ         PRINT_ASCII_3
00002302  0C87 00000004           2795      CMPI.L      #4,D7
00002308  6700 0098               2796      BEQ         PRINT_ASCII_4
0000230C  0C87 00000005           2797      CMPI.L      #5,D7
00002312  6700 0098               2798      BEQ         PRINT_ASCII_5
00002316  0C87 00000006           2799      CMPI.L      #6,D7
0000231C  6700 0098               2800      BEQ         PRINT_ASCII_6
00002320  0C87 00000007           2801      CMPI.L      #7,D7
00002326  6700 0098               2802      BEQ         PRINT_ASCII_7
0000232A  0C87 00000008           2803      CMPI.L      #8,D7
00002330  6700 0098               2804      BEQ         PRINT_ASCII_8
00002334  0C87 00000009           2805      CMPI.L      #9,D7
0000233A  6700 0098               2806      BEQ         PRINT_ASCII_9
0000233E  0C87 0000000A           2807      CMPI.L      #10,D7
00002344  6700 0098               2808      BEQ         PRINT_ASCII_A
00002348  0C87 0000000B           2809      CMPI.L      #11,D7
0000234E  6700 0098               2810      BEQ         PRINT_ASCII_B
00002352  0C87 0000000C           2811      CMPI.L      #12,D7
00002358  6700 0098               2812      BEQ         PRINT_ASCII_C
0000235C  0C87 0000000D           2813      CMPI.L      #13,D7
00002362  6700 0098               2814      BEQ         PRINT_ASCII_D
00002366  0C87 0000000E           2815      CMPI.L      #14,D7
0000236C  6700 0098               2816      BEQ         PRINT_ASCII_E
00002370  0C87 0000000F           2817      CMPI.L      #15,D7
00002376  6700 0098               2818      BEQ         PRINT_ASCII_F
0000237A                          2819  PRINT_ASCII_0
0000237A  43F9 000025D8           2820      LEA         ASCII_0,A1
00002380  6000 0098               2821      BRA         PRINT_ASCII_CHAR
00002384                          2822  PRINT_ASCII_1
00002384  43F9 000025DA           2823      LEA         ASCII_1,A1
0000238A  6000 008E               2824      BRA         PRINT_ASCII_CHAR
0000238E                          2825  PRINT_ASCII_2
0000238E  43F9 000025DC           2826      LEA         ASCII_2,A1
00002394  6000 0084               2827      BRA         PRINT_ASCII_CHAR
00002398                          2828  PRINT_ASCII_3
00002398  43F9 000025DE           2829      LEA         ASCII_3,A1
0000239E  6000 007A               2830      BRA         PRINT_ASCII_CHAR
000023A2                          2831  PRINT_ASCII_4
000023A2  43F9 000025E0           2832      LEA         ASCII_4,A1
000023A8  6000 0070               2833      BRA         PRINT_ASCII_CHAR
000023AC                          2834  PRINT_ASCII_5
000023AC  43F9 000025E2           2835      LEA         ASCII_5,A1
000023B2  6000 0066               2836      BRA         PRINT_ASCII_CHAR
000023B6                          2837  PRINT_ASCII_6
000023B6  43F9 000025E4           2838      LEA         ASCII_6,A1
000023BC  6000 005C               2839      BRA         PRINT_ASCII_CHAR
000023C0                          2840  PRINT_ASCII_7
000023C0  43F9 000025E6           2841      LEA         ASCII_7,A1
000023C6  6000 0052               2842      BRA         PRINT_ASCII_CHAR
000023CA                          2843  PRINT_ASCII_8
000023CA  43F9 000025E8           2844      LEA         ASCII_8,A1
000023D0  6000 0048               2845      BRA         PRINT_ASCII_CHAR
000023D4                          2846  PRINT_ASCII_9
000023D4  43F9 000025EA           2847      LEA         ASCII_9,A1
000023DA  6000 003E               2848      BRA         PRINT_ASCII_CHAR
000023DE                          2849  PRINT_ASCII_A
000023DE  43F9 000025EC           2850      LEA         ASCII_A,A1
000023E4  6000 0034               2851      BRA         PRINT_ASCII_CHAR
000023E8                          2852  PRINT_ASCII_B
000023E8  43F9 000025EE           2853      LEA         ASCII_B,A1
000023EE  6000 002A               2854      BRA         PRINT_ASCII_CHAR
000023F2                          2855  PRINT_ASCII_C
000023F2  43F9 000025F0           2856      LEA         ASCII_C,A1
000023F8  6000 0020               2857      BRA         PRINT_ASCII_CHAR
000023FC                          2858  PRINT_ASCII_D
000023FC  43F9 000025F2           2859      LEA         ASCII_D,A1
00002402  6000 0016               2860      BRA         PRINT_ASCII_CHAR
00002406                          2861  PRINT_ASCII_E
00002406  43F9 000025F4           2862      LEA         ASCII_E,A1
0000240C  6000 000C               2863      BRA         PRINT_ASCII_CHAR
00002410                          2864  PRINT_ASCII_F
00002410  43F9 000025F6           2865      LEA         ASCII_F,A1
00002416  6000 0002               2866      BRA         PRINT_ASCII_CHAR
0000241A                          2867  PRINT_ASCII_CHAR
0000241A  103C 000E               2868      MOVE.B      #14,D0
0000241E  4E4F                    2869      TRAP        #15
00002420                          2870      
00002420                          2871          
00002420  4287                    2872      CLR.L       D7
00002422  4CDF 0080               2873      MOVEM.L     (A7)+,D7 * copy back D7 from stack, to mutate its' bits
00002426                          2874      
00002426  5205                    2875      ADD.B       #1,D5 * loop until counter stops
00002428  BA03                    2876      CMP.B       D3,D5
0000242A  6C00 0006               2877      BGE         PRINT_ASCII_FINISH
0000242E                          2878      
0000242E  6000 FE8A               2879      BRA         PRINT_ASCII_LOOP
00002432                          2880  INVALID_ASCII_INPUT
00002432                          2881  PRINT_ASCII_FINISH
00002432  4CDF 3FFF               2882      MOVEM.L     (A7)+,D0-D7/A0-A5 * pop saved memory
00002436  4E75                    2883      RTS
00002438                          2884      
00002438                          2885  PRINTDATA911
00002438  0C46 0E00               2886      CMPI    #%0000111000000000, D6   * Print 7
0000243C  6700 003C               2887      BEQ     PRINT7   
00002440  0C46 0C00               2888      CMPI    #%0000110000000000, D6   * Print 6
00002444  6700 0042               2889      BEQ     PRINT6
00002448  0C46 0A00               2890      CMPI    #%0000101000000000, D6   * Print 5
0000244C  6700 0048               2891      BEQ     PRINT5
00002450  0C46 0800               2892      CMPI    #%0000100000000000, D6   * Print 4
00002454  6700 004E               2893      BEQ     PRINT4 
00002458  0C46 0600               2894      CMPI    #%0000011000000000, D6   * Print 3
0000245C  6700 0054               2895      BEQ     PRINT3    
00002460  0C46 0400               2896      CMPI    #%0000010000000000, D6   * Print 2
00002464  6700 005A               2897      BEQ     PRINT2   
00002468  0C46 0200               2898      CMPI    #%0000001000000000, D6   * Print 1
0000246C  6700 0060               2899      BEQ     PRINT1     
00002470  0C46 0000               2900      CMPI    #%0000000000000000, D6   * Print 0
00002474  6700 0066               2901      BEQ     PRINT8
00002478                          2902      
00002478  4E75                    2903      RTS                             * Fail case  
0000247A                          2904      
0000247A                          2905  PRINT7
0000247A  43F9 000025E6           2906      LEA     ASCII_7, A1
00002480  103C 000E               2907      MOVE.B      #14,D0
00002484  4E4F                    2908      TRAP        #15
00002486  4E75                    2909      RTS
00002488                          2910      
00002488                          2911  PRINT6
00002488  43F9 000025E4           2912      LEA     ASCII_6, A1
0000248E  103C 000E               2913      MOVE.B      #14,D0
00002492  4E4F                    2914      TRAP        #15
00002494  4E75                    2915      RTS
00002496                          2916      
00002496                          2917  PRINT5
00002496  43F9 000025E2           2918      LEA     ASCII_5, A1
0000249C  103C 000E               2919      MOVE.B      #14,D0
000024A0  4E4F                    2920      TRAP        #15
000024A2  4E75                    2921      RTS
000024A4                          2922      
000024A4                          2923  PRINT4
000024A4  43F9 000025E0           2924      LEA     ASCII_4, A1
000024AA  103C 000E               2925      MOVE.B      #14,D0
000024AE  4E4F                    2926      TRAP        #15
000024B0  4E75                    2927      RTS
000024B2                          2928      
000024B2                          2929  PRINT3
000024B2  43F9 000025DE           2930      LEA     ASCII_3, A1
000024B8  103C 000E               2931      MOVE.B      #14,D0
000024BC  4E4F                    2932      TRAP        #15
000024BE  4E75                    2933      RTS
000024C0                          2934      
000024C0                          2935  PRINT2
000024C0  43F9 000025DC           2936      LEA     ASCII_2, A1
000024C6  103C 000E               2937      MOVE.B      #14,D0
000024CA  4E4F                    2938      TRAP        #15
000024CC  4E75                    2939      RTS
000024CE                          2940      
000024CE                          2941  PRINT1
000024CE  43F9 000025DA           2942      LEA     ASCII_1, A1
000024D4  103C 000E               2943      MOVE.B      #14,D0
000024D8  4E4F                    2944      TRAP        #15
000024DA  4E75                    2945      RTS
000024DC                          2946          
000024DC                          2947  PRINT8
000024DC  43F9 000025E8           2948      LEA     ASCII_8, A1
000024E2  103C 000E               2949      MOVE.B      #14,D0
000024E6  4E4F                    2950      TRAP        #15
000024E8  4E75                    2951      RTS
000024EA                          2952  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000024EA                          2953  *-----------------------------------------------------------------------------
000024EA                          2954  
000024EA                          2955  
000024EA                          2956  
000024EA                          2957  *-----------------------------------------------------------------------------
000024EA                          2958  *-----------------------------------------------------------------------------
000024EA                          2959  * NAME: Bitmask
000024EA                          2960  * DESCRIPTION:    Masks bits in a data register.
000024EA                          2961  * PRE-CONDITION:  D6 contains the starting bit to be masked, and D7 contains
000024EA                          2962  *                 the ending bit.  For example, a starting bit of decimal
000024EA                          2963  *                 value 0 and an ending bit of decimal value 3 will mask the
000024EA                          2964  *                 bits 0, 1, 2, and 3.
000024EA                          2965  * POST-CONDITION: D6 contains the bitmask, ready for use.
000024EA                          2966  * REGISTERS:      D5,D6,D7
000024EA                          2967  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000024EA                          2968  BITMASK
000024EA  3F05                    2969          MOVE    D5,-(A7)    * push D5 onto the stack so we can use it to
000024EC  4245                    2970          CLR     D5          * clear D5 so we can use it
000024EE                          2971  LOOPBIT 
000024EE  0DC5                    2972          BSET    D6,D5       * set the D6th bit in D5 to 1
000024F0  5246                    2973          ADD     #1,D6       * increment D6
000024F2                          2974  
000024F2  BC47                    2975          CMP     D7,D6       * have we finished?
000024F4  6E00 0004               2976          BGT     BITMASKDONE * yes
000024F8  60F4                    2977          BRA     LOOPBIT     * no, iterate again
000024FA                          2978  
000024FA                          2979  BITMASKDONE
000024FA  2C05                    2980          MOVE.L  D5,D6
000024FC  3A1F                    2981          MOVE    (A7)+,D5    * restore D5
000024FE  4E75                    2982          RTS
00002500                          2983  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002500                          2984  *-----------------------------------------------------------------------------
00002500                          2985  
00002500                          2986  
00002500                          2987  
00002500                          2988  *-----------------------------------------------------------------------------
00002500                          2989  *-----------------------------------------------------------------------------
00002500                          2990  * SECTION: Constants/variables used throughout the program.
00002500                          2991  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002500                          2992  
00002500                          2993  * ---> GENERAL
00002500  =0000000D               2994  CR          EQU     $0D
00002500  =0000000A               2995  LF          EQU     $0A
00002500= 45 4E 54 45 52 20 ...   2996  MSGSTART    DC.B    'ENTER START ADDRESS: ',CR,LF,0
00002518= 45 4E 54 45 52 20 ...   2997  MSGEND      DC.B    'ENTER END ADDRESS: ',CR,LF,0
0000252E= 48 69 74 20 74 68 ...   2998  CONT_MSG    DC.B    'Hit the [ENTER] key to continue...',CR,LF,0
00002553= 0D 0A 00                2999  NEWLINE     DC.B    CR,LF,0
00002556                          3000  
00002556                          3001  * ---> OPS
00002556= 44 49 56 53 00          3002  DIVSOP      DC.B    'DIVS',0
0000255B= 4E 4F 50 00             3003  NOOPERATION DC.B    'NOP',0
0000255F= 4E 45 47 00             3004  NEGOP       DC.B    'NEG',0
00002563= 4D 4F 56 45 00          3005  MOVEOP      DC.B    'MOVE',0
00002568= 4D 4F 56 45 4D 00       3006  MOVEMOP     DC.B    'MOVEM',0
0000256E= 4A 53 52 00             3007  JSROP       DC.B    'JSR',0
00002572= 52 54 53 00             3008  RTSOP       DC.B    'RTS',0
00002576= 53 55 42 51 00          3009  SUBQOP      DC.B    'SUBQ',0
0000257B= 4C 45 41 00             3010  LEAOP       DC.B    'LEA',0
0000257F= 42 43 4C 52 20 00       3011  BCLROP      DC.B    'BCLR ',0
00002585= 4D 55 4C 53 00          3012  MULSOP      DC.B    'MULS',0
0000258A= 4F 52 00                3013  OROP        DC.B    'OR',0
0000258D= 4F 52 49 00             3014  ORIOP       DC.B    'ORI',0
00002591= 43 4D 50 49 00          3015  CMPIOP      DC.B    'CMPI',0
00002596= 4C 53 4C 00             3016  LSLOP       DC.B    'LSL',0
0000259A= 4C 53 52 00             3017  LSROP       DC.B    'LSR',0
0000259E= 41 53 4C 00             3018  ASLOP       DC.B    'ASL',0
000025A2= 41 53 52 00             3019  ASROP       DC.B    'ASR',0
000025A6= 52 4F 4C 00             3020  ROLOP       DC.B    'ROL',0
000025AA= 52 4F 52 00             3021  ROROP       DC.B    'ROR',0
000025AE= 20 44 41 54 41 20 ...   3022  DATA        DC.B    ' DATA $',0
000025B6= 42 43 43 20 00          3023  OP_BCC_MSG  DC.B    'BCC ',0
000025BB= 42 43 53 20 00          3024  OP_BCS_MSG  DC.B    'BCS ',0
000025C0= 42 47 45 20 00          3025  OP_BGE_MSG  DC.B    'BGE ',0
000025C5= 42 4C 54 20 00          3026  OP_BLT_MSG  DC.B    'BLT ',0
000025CA= 42 56 43 20 00          3027  OP_BVC_MSG  DC.B    'BVC ',0
000025CF= 42 52 41 20 00          3028  OP_BRA_MSG  DC.B    'BRA ',0
000025D4= 41 44 44 00             3029  OP_ADD_MSG  DC.B    'ADD',0
000025D8                          3030  
000025D8                          3031  * ---> HEX CHARS
000025D8= 30 00                   3032  ASCII_0     DC.B    '0',0
000025DA= 31 00                   3033  ASCII_1     DC.B    '1',0
000025DC= 32 00                   3034  ASCII_2     DC.B    '2',0
000025DE= 33 00                   3035  ASCII_3     DC.B    '3',0
000025E0= 34 00                   3036  ASCII_4     DC.B    '4',0
000025E2= 35 00                   3037  ASCII_5     DC.B    '5',0
000025E4= 36 00                   3038  ASCII_6     DC.B    '6',0
000025E6= 37 00                   3039  ASCII_7     DC.B    '7',0
000025E8= 38 00                   3040  ASCII_8     DC.B    '8',0
000025EA= 39 00                   3041  ASCII_9     DC.B    '9',0
000025EC= 41 00                   3042  ASCII_A     DC.B    'A',0
000025EE= 42 00                   3043  ASCII_B     DC.B    'B',0
000025F0= 43 00                   3044  ASCII_C     DC.B    'C',0
000025F2= 44 00                   3045  ASCII_D     DC.B    'D',0
000025F4= 45 00                   3046  ASCII_E     DC.B    'E',0
000025F6= 46 00                   3047  ASCII_F     DC.B    'F',0
000025F8                          3048  
000025F8                          3049  * ---> SPECIAL CHARACTERS
000025F8= 20 00                   3050  SPACE       DC.B    ' ',0
000025FA= 24 00                   3051  DOLLAR      DC.B    '$',0
000025FC= 23 00                   3052  IMD         DC.B    '#',0
000025FE= 2C 00                   3053  COMMA       DC.B    ',',0
00002600= 28 00                   3054  OBRACK      DC.B    '(',0
00002602= 29 00                   3055  CBRACK      DC.B    ')',0
00002604= 2B 00                   3056  PLUS        DC.B    '+',0
00002606= 2D 00                   3057  MINUS       DC.B    '-',0
00002608= 2F 00                   3058  SLASH       DC.B    '/',0
0000260A= 2D 00                   3059  DASH        DC.B    '-',0
0000260C                          3060  
0000260C                          3061  * ---> B/W/L (BYTE, WORD, LONG, RESPECTIVELY)
0000260C= 2E 42 20 00             3062  __B         DC.B    '.B ',0
00002610= 2E 57 20 00             3063  __W         DC.B    '.W ',0
00002614= 2E 4C 20 00             3064  __L         DC.B    '.L ',0
00002618                          3065  
00002618                          3066  * ---> ADDRESS REGISTERS A0-A7
00002618= 41 30 00                3067  __A0        DC.B   'A0',0
0000261B= 41 31 00                3068  __A1        DC.B   'A1',0    
0000261E= 41 32 00                3069  __A2        DC.B   'A2',0
00002621= 41 33 00                3070  __A3        DC.B   'A3',0
00002624= 41 34 00                3071  __A4        DC.B   'A4',0
00002627= 41 35 00                3072  __A5        DC.B   'A5',0
0000262A= 41 36 00                3073  __A6        DC.B   'A6',0
0000262D= 41 37 00                3074  __A7        DC.B   'A7',0
00002630                          3075  
00002630                          3076  * ---> DATA REGISTERS D0-D7
00002630= 44 30 00                3077  __D0        DC.B   'D0',0
00002633= 44 31 00                3078  __D1        DC.B   'D1',0
00002636= 44 32 00                3079  __D2        DC.B   'D2',0
00002639= 44 33 00                3080  __D3        DC.B   'D3',0
0000263C= 44 34 00                3081  __D4        DC.B   'D4',0
0000263F= 44 35 00                3082  __D5        DC.B   'D5',0
00002642= 44 36 00                3083  __D6        DC.B   'D6',0
00002645= 44 37 00                3084  __D7        DC.B   'D7',0
00002648                          3085  
00002648                          3086  __COUNTER   DS.B    1       * main loop counter
00002649                          3087  
00002649                          3088  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002649                          3089  *-----------------------------------------------------------------------------
00002649                          3090  
00002649                          3091  
00002649                          3092  
00002649                          3093  *-----------------------------------------------------------------------------
00002649                          3094  *-----------------------------------------------------------------------------
00002649                          3095  * SECTION: Sample program to run, then attempt testing disassembly on.
00002649                          3096  * STARTING: 16384
00002649                          3097  * ENDING:   16420
00002649                          3098  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00004000                          3099      ORG $4000
00004000                          3100      
00004000  0000 0003               3101      ORI.B   #3,D0
00004004  0042 0290               3102      ORI.W   #$290,D2
00004008  0087 0000000A           3103      ORI.L   #%1010,D7
0000400E  0043 0002               3104      ORI     #2,D3
00004012  4E71                    3105      NOP
00004014  103C 009A               3106      MOVE.B   #%10011010, D0
00004018  123C 00A9               3107      MOVE.B   #%10101001, D1
0000401C  81FC 0001               3108      DIVS     #1, D0
00004020  D200                    3109      ADD.B    D0,D1
00004022  4C9F 3C1A               3110      MOVEM    (A7)+,A2-A5/D1/D3-D4
00004026  43F8 256E               3111      LEA      JSROP,A1
0000402A  4467                    3112      NEG.W    -(A7)
0000402C  4EB9 00004074           3113      JSR      END
00004032  CFFC 0003               3114      MULS.W  #3, D7
00004036  CFC0                    3115      MULS    D0, D7
00004038  C5D9                    3116      MULS    (A1)+, D2
0000403A  4E71                    3117      NOP
0000403C  5146                    3118      SUBQ    #8, D6
0000403E  4E71                    3119      NOP
00004040  5F81                    3120      SUBQ.L  #7, D1
00004042  4E71                    3121      NOP
00004044  0041 0004               3122      ORI     #4, D1
00004048  4E71                    3123      NOP
0000404A  E389                    3124      LSL.L   #1,D1
0000404C  4E71                    3125      NOP
0000404E  E489                    3126      LSR.L   #2,D1
00004050  4E71                    3127      NOP
00004052  E781                    3128      ASL.L   #3,D1
00004054  4E71                    3129      NOP
00004056  E881                    3130      ASR.L   #4,D1
00004058  4E71                    3131      NOP
0000405A  EB99                    3132      ROL.L   #5,D1
0000405C  4E71                    3133      NOP
0000405E  E099                    3134      ROR.L   #8,D1
00004060  4E71                    3135      NOP
00004062  0881 0002               3136      BCLR    #2,D1
00004066  4E71                    3137      NOP
00004068  DAC1                    3138      ADDA.W  D1,A5
0000406A  4E71                    3139      NOP
0000406C  D803                    3140      ADD.B   D3,D4
0000406E  4E71                    3141      NOP
00004070  6000 0004               3142      BRA     RLLYEND
00004074                          3143  
00004074                          3144  END
00004074  4E75                    3145      RTS
00004076                          3146      
00004076                          3147  RLLYEND
00004076                          3148      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_LONG_OP        1A52
ADDA_PRT            1A8E
ADDA_WORD_OP        19EA
ADD_ADDA_END        1ABE
ADD_ADDA_PRINT      1AA6
ADD_ADDA_SPACE      1A80
ADD_EA_DN_GENERIC   1A72
AFORWARDVALID       21C8
AINVALID            2208
ALOOP               2198
ALOOPDONE           224C
ALOOPITER           223E
ALOOPITERCLR        223C
ANOSLASH            21DC
AS                  1B34
ASCII_0             25D8
ASCII_1             25DA
ASCII_2             25DC
ASCII_3             25DE
ASCII_4             25E0
ASCII_5             25E2
ASCII_6             25E4
ASCII_7             25E6
ASCII_8             25E8
ASCII_9             25EA
ASCII_A             25EC
ASCII_B             25EE
ASCII_C             25F0
ASCII_D             25F2
ASCII_E             25F4
ASCII_F             25F6
ASL                 1B4A
ASLOP               259E
ASR                 1B5A
ASROP               25A2
AVALID              21A2
BCC_BYTE_OFFSET     17F8
BCC_END             1814
BCLROP              257F
BITMASK             24EA
BITMASKDONE         24FA
BYTE_DN_EA          1A0A
BYTE_EA_DN          19A2
CBRACK              2602
CLEAR_SCREEN        11AE
CMPIOP              2591
COMMA               25FE
CONT_MSG            252E
CR                  D
DASH                260A
DATA                25AE
DFORWARDVALID       2110
DINVALID            214C
DIVSOP              2556
DLOOP               20E0
DLOOPDONE           218C
DLOOPITER           217E
DLOOPITERCLR        217C
DNOSLASH            2124
DOLLAR              25FA
DONE0100            16DE
DVALID              20EA
EAHELPER05          1CAE
EAHELPER611         1C6C
END                 4074
END0000             133E
END67               2042
ENDEAHELPER05       1DFE
ENDEAHELPER611      1CA8
ENDMODE_AN          1F8E
ENDMODE_DN          1E8E
ENDOP0001           13A4
ENDOP1110           1C54
END_OF_LOOP         1182
HEX_VALUE_MASK_LONG  F
IDLE_STATE          118C
IMD                 25FC
IMD_SIZE_0000       12BE
INVALID_ASCII_INPUT  2432
ITERATION           116A
JSROP               256E
LEAOP               257B
LF                  A
LONG_DN_EA          1A3A
LONG_EA_DN          19D2
LOOP                104C
LOOPBIT             24EE
LOOPUNKNOWNOP       1166
LS                  1AFE
LSL                 1B14
LSLOP               2596
LSR                 1B24
LSROP               259A
MINUS               2606
MODE_AN             1F04
MODE_DN             1E04
MOVEMHELPERPOST     20CA
MOVEMHELPERPRE      2252
MOVEMOP             2568
MOVEMTOMEM          14EE
MOVEMTOREG          1454
MOVEOP              2563
MSGEND              2518
MSGSTART            2500
MULSOP              2585
NEGOP               255F
NEWLINE             2553
NOOPERATION         255B
NOT0000             1076
NOT0001             1086
NOT0010             1096
NOT0011             10A6
NOT0100             10B6
NOT0101             10C6
NOT0110             10D6
NOT0111             10E6
NOT1000             10F6
NOT1001             1106
NOT1010             1116
NOT1011             1126
NOT1100             1136
NOT1101             1146
NOT1110             1156
NOT67BYTE           2026
NOT67WORD           2036
NOTA0               1F26
NOTA1               1F36
NOTA2               1F46
NOTA3               1F56
NOTA4               1F66
NOTA5               1F76
NOTA6               1F86
NOTADRDIRECT        1CDE
NOTADRINDIRECT      1D06
NOTADRINDIRECTPOST  1D3A
NOTADRINDIRECTPRE   1D6E
NOTBCLR             1286
NOTBCLRDYNA         1238
NOTD0               1E26
NOTD1               1E36
NOTD2               1E46
NOTD3               1E56
NOTD4               1E66
NOTD5               1E76
NOTD6               1E86
NOTDATAREG          1CCE
NOTDIVS             189E
NOTIMMBYTE          1DA4
NOTIMMEDIATE        1DFA
NOTIMMWORD          1DD2
NOTJSR              15D6
NOTLONGMOVEM1       14BC
NOTLONGMOVEM2       1556
NOTMOVEM            1588
NOTNEG              1430
NOTNOP              13DA
NOTORI              1324
NOTRTS              15F8
OBRACK              2600
OP0000              11BA
OP0001              1344
OP0010              13AA
OP0011              13B0
OP0100              13BE
OP0101              16E4
OP0110              1752
OP0111              181A
OP1000              1820
OP1000END           18AE
OP1001              18B4
OP1010              18B4
OP1011              18BA
OP1100              18C0
OP1101              194A
OP1110              1AD0
OP1110DATAREG       1C28
OP1110GENERIC       1BA0
OP1110IMMEIGHT      1C00
OP1111              1C66
OP_0000             0
OP_0001             1000
OP_0010             2000
OP_0011             3000
OP_0100             4000
OP_0101             5000
OP_0110             6000
OP_0111             7000
OP_1000             8000
OP_1001             9000
OP_1010             A000
OP_1011             B000
OP_1100             C000
OP_1101             D000
OP_1110             E000
OP_1111             F000
OP_ADD_MSG          25D4
OP_BCC              179C
OP_BCC_MSG          25B6
OP_BCS              17A6
OP_BCS_MSG          25BB
OP_BGE              17B0
OP_BGE_MSG          25C0
OP_BLT              17BA
OP_BLT_MSG          25C5
OP_BRA              17CE
OP_BRANCHES_PRINT   17D8
OP_BRA_MSG          25CF
OP_BVC              17C4
OP_BVC_MSG          25CA
ORIOP               258D
OROP                258A
PLUS                2604
PRELOOP             225C
PRELOOPDONE         2274
PRELOOPITER         2268
PRESETBIT           2266
PRINT1              24CE
PRINT2              24C0
PRINT3              24B2
PRINT4              24A4
PRINT5              2496
PRINT6              2488
PRINT7              247A
PRINT8              24DC
PRINTA0             1F94
PRINTA1             1FA2
PRINTA2             1FB0
PRINTA3             1FBE
PRINTA4             1FCC
PRINTA5             1FDA
PRINTA6             1FE8
PRINTA7             1FF6
PRINTBYTE           20A0
PRINTD0             1E94
PRINTD1             1EA2
PRINTD2             1EB0
PRINTD3             1EBE
PRINTD4             1ECC
PRINTD5             1EDA
PRINTD6             1EE8
PRINTD7             1EF6
PRINTDATA911        2438
PRINTLONG           20BC
PRINTWORD           20AE
PRINT_ASCII_0       237A
PRINT_ASCII_1       2384
PRINT_ASCII_2       238E
PRINT_ASCII_3       2398
PRINT_ASCII_4       23A2
PRINT_ASCII_5       23AC
PRINT_ASCII_6       23B6
PRINT_ASCII_7       23C0
PRINT_ASCII_8       23CA
PRINT_ASCII_9       23D4
PRINT_ASCII_A       23DE
PRINT_ASCII_B       23E8
PRINT_ASCII_C       23F2
PRINT_ASCII_CHAR    241A
PRINT_ASCII_D       23FC
PRINT_ASCII_E       2406
PRINT_ASCII_F       2410
PRINT_ASCII_FINISH  2432
PRINT_ASCII_HEX_CHAR  22AA
PRINT_ASCII_LOOP    22BA
RLLYEND             4076
RO                  1B6A
ROL                 1B80
ROLOP               25A6
ROR                 1B90
ROROP               25AA
RTSOP               2572
SIZE67              2004
SIZE68              2048
SKIPLONG            1302
SKIPNOTLONG1        14C8
SKIPNOTLONG2        1562
SLASH               2608
SPACE               25F8
START               1000
SUBQOP              2576
TWOWORDLEA          1688
UNKNOWN0000         133A
UNKNOWN0100         16DA
UNKNOWN0101         174C
UNKNOWN1100         1940
UNKNOWNOP           2280
UNKNOWNOP0001       13A0
WORD_DN_EA          1A22
WORD_EA_DN          19BA
__A0                2618
__A1                261B
__A2                261E
__A3                2621
__A4                2624
__A5                2627
__A6                262A
__A7                262D
__B                 260C
__COUNTER           2648
__D0                2630
__D1                2633
__D2                2636
__D3                2639
__D4                263C
__D5                263F
__D6                2642
__D7                2645
__L                 2614
__W                 2610
