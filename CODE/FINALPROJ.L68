00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/11/2014 10:25:23 PM

00000000                             1  *    666
00000000                             2  *   66 66
00000000                             3  *  66   66
00000000                             4  *  66   66         8888
00000000                             5  *  66   66       88   kkkk
00000000                             6  *  66  66       8   88   kk      
00000000                             7  *   66  6      8  88  kkk  kk    
00000000                             8  *    66  6    8  88     kk  k
00000000                             9  *     66 66  88 88        kk
00000000                            10  *     6 _______ 8
00000000                            11  *    6    68k    8
00000000                            12  *   6_____PRO_____8
00000000                            13  *  6               8        68k is as easy as
00000000                            14  *  6    0     0    8        6 - 8 - k !
00000000                            15  *  6   /   V   \   8 
00000000                            16  *  6   \__/ \__/   8        Welcome to our Dissasembler, Professor Nash!
00000000                            17  *    6            8         Enjoy your stay!
00000000                            18  *      6        8      
00000000                            19  *        666888
00000000                            20  *  _____                   __    ___  _    
00000000                            21  * | ____|__ _ ___ _   _   / /_  ( _ )| | __
00000000                            22  * |  _| / _` / __| | | | | '_ \ / _ \| |/ /
00000000                            23  * | |__| (_| \__ \ |_| | | (_) | (_) |   < 
00000000                            24  * |_____\__,_|___/\__, |  \___/ \___/|_|\_\
00000000                            25  *                 |___/           
00000000                            26  *-----------------------------------------------------------
00000000                            27  * Title      : 68K Decompiler
00000000                            28  * Written by : Nick Bell, Sammy Nimnuch, Caleb Larson
00000000                            29  * Date       : 11/2014
00000000                            30  * Description: This program decompiles other 68K programs
00000000                            31  *              which are loaded into the simulator simultaneously.
00000000                            32  *-----------------------------------------------------------
00000000                            33  
00000000                            34  
00000000  =00000000                 35  OP_0000     EQU     %0000000000000000
00000000  =00001000                 36  OP_0001     EQU     %0001000000000000
00000000  =00002000                 37  OP_0010     EQU     %0010000000000000
00000000  =00003000                 38  OP_0011     EQU     %0011000000000000
00000000  =00004000                 39  OP_0100     EQU     %0100000000000000
00000000  =00005000                 40  OP_0101     EQU     %0101000000000000
00000000  =00006000                 41  OP_0110     EQU     %0110000000000000
00000000  =00007000                 42  OP_0111     EQU     %0111000000000000
00000000  =00008000                 43  OP_1000     EQU     %1000000000000000
00000000  =00009000                 44  OP_1001     EQU     %1001000000000000
00000000  =0000A000                 45  OP_1010     EQU     %1010000000000000
00000000  =0000B000                 46  OP_1011     EQU     %1011000000000000
00000000  =0000C000                 47  OP_1100     EQU     %1100000000000000
00000000  =0000D000                 48  OP_1101     EQU     %1101000000000000
00000000  =0000E000                 49  OP_1110     EQU     %1110000000000000
00000000  =0000F000                 50  OP_1111     EQU     %1111000000000000
00000000  =0000000F                 51  HEX_VALUE_MASK_LONG EQU     $0000000F  * mask a hex value in 32-bits
00000000                            52  
00000000                            53  * BITMASK     EQU     $F000       * used to bitmask the first nibble
00000000                            54  
00001000                            55  START:  ORG    $1000            * first instruction of program
00001000                            56  
00001000                            57  * -----------------------------------
00001000                            58  * Starting and Ending Addresses
00001000                            59  * -----------------------------------
00001000                            60  *-----------------------------------------------------------------------------
00001000                            61  *-----------------------------------------------------------------------------
00001000                            62  * NAME: x
00001000                            63  * DESCRIPTION:    a
00001000                            64  * PRE-CONDITION:  b
00001000                            65  * POST-CONDITION: c
00001000                            66  * REGISTERS:      d
00001000                            67  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001000                            68  
00001000                            69  * THINK ABOUT ASKING FOR VALID START/END NO NEGATIVE ADDR
00001000                            70  
00001000                            71  * LOAD MSGSTART, ASK FOR INPUT
00001000  43F9 0000279C             72          LEA     MSGSTART,A1     * Load MESSAGE START
00001006  103C 000E                 73          MOVE.B  #14,D0          * Trap #14 to display message
0000100A  4E4F                      74          TRAP    #15             * Perform #14
0000100C                            75          
0000100C                            76  * GETS THE STARTING ADDRESS
0000100C  103C 0004                 77          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001010  4E4F                      78          TRAP    #15             * Perform #15
00001012                            79          
00001012                            80  * MOVE IT TO ANOTHER ADDRESS REGISTER
00001012  2441                      81          MOVEA.L D1,A2           * Move the user input into A2. This is the starting address.
00001014                            82  
00001014                            83  * LOAD MSGSTART, ASK FOR INPUT
00001014  43F9 000027B4             84          LEA     MSGEND,A1       * Load MESSAGE END
0000101A  303C 000E                 85          MOVE.W  #14,D0          * Trap #14 to display message
0000101E  4E4F                      86          TRAP    #15             * Perform #14
00001020                            87          
00001020                            88  * GETS THE ENDING ADDRESS
00001020  103C 0004                 89          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001024  4E4F                      90          TRAP    #15             * Perform Trap #4
00001026  2A01                      91          MOVE.L  D1,D5           * Move the ending address into D5
00001028  43F9 000027EF             92          LEA     NEWLINE,A1      * Store newline variable for seper opcodes
0000102E                            93          
0000102E  3E3C 000F                 94          MOVE.W  #15,D7          * prep D7 for bitmask subroutine
00001032  3C3C 000C                 95          MOVE.W  #12,D6          * prep D6 for bitmask subroutine
00001036  6100 174E                 96          BSR     BITMASK         * obtain a bitmask that goes from 12-15 (inclusive)
0000103A                            97          * MOVE.W  D6,D2           * move the bitmask to D2
0000103A                            98          
0000103A  4279 000028F6             99          CLR     (__COUNTER)              * setup the counter
00001040  33FC 0000 000028F6       100          MOVE    #0,(__COUNTER)           
00001048                           101          
00001048  6100 0164                102          BSR     CLEAR_SCREEN    * clear the prompt for start/end ADDR's
0000104C                           103  LOOP    
0000104C  2C4A                     104          MOVE.L  A2,A6
0000104E  7608                     105          MOVE.L  #8,D3
00001050  6100 14F4                106          BSR     PRINT_ASCII_HEX_CHAR
00001054                           107          
00001054                           108          *MOVE.W  A2,D1           * print what address we are processing
00001054                           109          *MOVE.B  #3,D0
00001054                           110          *TRAP    #15
00001054                           111          
00001054  43F9 000028A6            112          LEA     SPACE,A1        * print a space to seperate the address from the data
0000105A  303C 000E                113          MOVE.W  #14,D0
0000105E  4E4F                     114          TRAP    #15
00001060                           115  
00001060  3F06                     116          MOVE    D6,-(A7)        * save the bitmask on the stack
00001062  341A                     117          MOVE.W  (A2)+,D2        * Read an operation into D2
00001064  CC42                     118          AND.W   D2,D6           * Apply this bitmask
00001066                           119          
00001066  BC7C 0000                120          CMP     #OP_0000,D6     * Does the operation start with 0000?
0000106A  6600 000A                121          BNE     NOT0000         * No, check next case
0000106E  6100 014A                122          BSR     OP0000          * Branch to subroutine 0000
00001072  6000 00F6                123          BRA     ITERATION       * Move to next iteration of the loop
00001076                           124  NOT0000        
00001076  BC7C 1000                125          CMP     #OP_0001,D6     * Does the operation start with 0001?
0000107A  6600 000A                126          BNE     NOT0001         * No, check next case
0000107E  6100 02C4                127          BSR     OP0001          * Branch to subroutine 0001
00001082  6000 00E6                128          BRA     ITERATION       * Move to next iteration of the loop
00001086                           129  NOT0001
00001086  BC7C 2000                130          CMP     #OP_0010,D6     * Does the operation start with 0010?
0000108A  6600 000A                131          BNE     NOT0010         * No, check next case
0000108E  6100 0326                132          BSR     OP0010          * Branch to subroutine 0010
00001092  6000 00D6                133          BRA     ITERATION       * Move to next iteration of the loop
00001096                           134  NOT0010
00001096  BC7C 3000                135          CMP     #OP_0011,D6     * Does the operation start with 0011?
0000109A  6600 000A                136          BNE     NOT0011         * No, check next case
0000109E  6100 0388                137          BSR     OP0011          * Branch to subroutine 0011
000010A2  6000 00C6                138          BRA     ITERATION       * Move to next iteration of the loop
000010A6                           139  NOT0011
000010A6  BC7C 4000                140          CMP     #OP_0100,D6     * Does the operation start with 0100?
000010AA  6600 000A                141          BNE     NOT0100         * No, check next case
000010AE  6100 03EA                142          BSR     OP0100          * Branch to subroutine 0100
000010B2  6000 00B6                143          BRA     ITERATION       * Move to next iteration of the loop
000010B6                           144  NOT0100
000010B6  BC7C 5000                145          CMP     #OP_0101,D6     * Does the operation start with 0101?
000010BA  6600 000A                146          BNE     NOT0101         * No, check next case
000010BE  6100 0708                147          BSR     OP0101          * Branch to subroutine 0101
000010C2  6000 00A6                148          BRA     ITERATION       * Move to next iteration of the loop
000010C6                           149  NOT0101
000010C6  BC7C 6000                150          CMP     #OP_0110,D6     * Does the operation start with 0110?
000010CA  6600 000A                151          BNE     NOT0110         * No, check next case
000010CE  6100 0766                152          BSR     OP0110          * Branch to subroutine 0110
000010D2  6000 0096                153          BRA     ITERATION       * Move to next iteration of the loop
000010D6                           154  NOT0110
000010D6  BC7C 7000                155          CMP     #OP_0111,D6     * Does the operation start with 0111?
000010DA  6600 000A                156          BNE     NOT0111         * No, check next case
000010DE  6100 0868                157          BSR     OP0111          * Branch to subroutine 0111
000010E2  6000 0086                158          BRA     ITERATION       * Move to next iteration of the loop
000010E6                           159  NOT0111
000010E6  BC7C 8000                160          CMP     #OP_1000,D6     * Does the operation start with 1000?
000010EA  6600 000A                161          BNE     NOT1000         * No, check next case
000010EE  6100 085E                162          BSR     OP1000          * Branch to subroutine 1000
000010F2  6000 0076                163          BRA     ITERATION       * Move to next iteration of the loop
000010F6                           164  NOT1000
000010F6  BC7C 9000                165          CMP     #OP_1001,D6     * Does the operation start with 1001?
000010FA  6600 000A                166          BNE     NOT1001         * No, check next case
000010FE  6100 08E2                167          BSR     OP1001          * Branch to subroutine 1001
00001102  6000 0066                168          BRA     ITERATION       * Move to next iteration of the loop
00001106                           169  NOT1001
00001106  BC7C A000                170          CMP     #OP_1010,D6     * Does the operation start with 1010?
0000110A  6600 000A                171          BNE     NOT1010         * No, check next case
0000110E  6100 098C                172          BSR     OP1010          * Branch to subroutine 1010
00001112  6000 0056                173          BRA     ITERATION       * Move to next iteration of the loop
00001116                           174  NOT1010
00001116  BC7C B000                175          CMP     #OP_1011,D6     * Does the operation start with 1011?
0000111A  6600 000A                176          BNE     NOT1011         * No, check next case
0000111E  6100 0982                177          BSR     OP1011          * Branch to subroutine 1011
00001122  6000 0046                178          BRA     ITERATION       * Move to next iteration of the loop
00001126                           179  NOT1011
00001126  BC7C C000                180          CMP     #OP_1100,D6     * Does the operation start with 1100?
0000112A  6600 000A                181          BNE     NOT1100         * No, check next case
0000112E  6100 0A1C                182          BSR     OP1100          * Branch to subroutine 1100
00001132  6000 0036                183          BRA     ITERATION       * Move to next iteration of the loop
00001136                           184  NOT1100
00001136  BC7C D000                185          CMP     #OP_1101,D6     * Does the operation start with 1101?
0000113A  6600 000A                186          BNE     NOT1101         * No, check next case
0000113E  6100 0A96                187          BSR     OP1101          * Branch to subroutine 1101
00001142  6000 0026                188          BRA     ITERATION       * Move to next iteration of the loop
00001146                           189  NOT1101
00001146  BC7C E000                190          CMP     #OP_1110,D6     * Does the operation start with 1110?
0000114A  6600 000A                191          BNE     NOT1110         * No, check next case
0000114E  6100 0C0C                192          BSR     OP1110          * Branch to subroutine 1110
00001152  6000 0016                193          BRA     ITERATION       * Move to next iteration of the loop
00001156                           194  NOT1110
00001156  BC7C F000                195          CMP     #OP_1111,D6     * Does the operation start with 1111?
0000115A  6600 000A                196          BNE     LOOPUNKNOWNOP   * No, check next case
0000115E  6100 0D92                197          BSR     OP1111          * Branch to subroutine 1111
00001162  6000 0006                198          BRA     ITERATION       * Move to next iteration of the loop
00001166                           199          
00001166                           200  LOOPUNKNOWNOP
00001166  6100 13B4                201          BSR     UNKNOWNOP
0000116A                           202          
0000116A                           203  ITERATION
0000116A  3C1F                     204          MOVE    (A7)+,D6        * restore the bitmask to its previous state
0000116C                           205      
0000116C  5279 000028F6            206          ADDI    #1,(__COUNTER)           * Track the lines on screen
00001172  0C79 001E 000028F6       207          CMPI    #30,(__COUNTER)
0000117A  6600 0006                208          BNE     END_OF_LOOP     * Not at 30, go loop more
0000117E  6100 000C                209          BSR     IDLE_STATE      * Break to idle, ask to clear screen
00001182                           210  
00001182                           211  END_OF_LOOP
00001182  BA4A                     212          CMP     A2,D5           * Compare the starting address to ending address
00001184  6700 2F1E                213          BEQ     END             * If they are equal, branch 
00001188  6000 FEC2                214          BRA     LOOP            * Otherwise, branch back to LOOP
0000118C                           215  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000118C                           216  *-----------------------------------------------------------------------------
0000118C                           217  IDLE_STATE
0000118C  43F9 000027CA            218      LEA     CONT_MSG,A1 * show msg to hit enter in order to continue
00001192  103C 000E                219      MOVE.B  #14,D0
00001196  4E4F                     220      TRAP    #15
00001198                           221      
00001198  103C 0004                222      MOVE.B  #4,D0 * trap task 4 - input
0000119C  4E4F                     223      TRAP    #15
0000119E  0C41 000D                224      CMPI    #$D,D1
000011A2                           225      
000011A2  6100 000A                226      BSR     CLEAR_SCREEN * clear everything, so ready to output another 30
000011A6  42B9 000028F6            227      CLR.L   (__COUNTER)
000011AC  4E75                     228      RTS
000011AE                           229  CLEAR_SCREEN
000011AE  103C 000B                230      MOVE.B  #11,D0
000011B2  323C FF00                231      MOVE.W  #$FF00,D1
000011B6  4E4F                     232      TRAP    #15
000011B8  4E75                     233      RTS
000011BA                           234  
000011BA                           235  
000011BA                           236  *-----------------------------------------------------------------------------
000011BA                           237  *-----------------------------------------------------------------------------
000011BA                           238  * NAME: OP_0000   (BCLR, ORI, CMPI)
000011BA                           239  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000011BA                           240  * PRE-CONDITION:  xyz
000011BA                           241  * POST-CONDITION: All registers return to their previous state, and the output
000011BA                           242  *                 goes to the output console for reading the raw data or the
000011BA                           243  *                 actual instruction.
000011BA                           244  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000011BA                           245  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000011BA                           246  OP0000
000011BA  48A7 FFC0                247          MOVEM   D0-D7/A0-A1,-(A7)   * Push values to the stack to save
000011BE                           248                        
000011BE                           249          * Checking for unsupported mode (An) for BCLR, ORI, and CMPI
000011BE  3C3C 0003                250          MOVE.W  #3, D6              * Prep lower value for bitmask
000011C2  3E3C 0005                251          MOVE.W  #5, D7              * Prep upper value for bitmask
000011C6  6100 15BE                252          BSR     BITMASK             * Finalize bitmask setup
000011CA  CC42                     253          AND     D2,D6               * Apply bitmask
000011CC                           254          
000011CC  0C46 0008                255          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
000011D0  6700 0168                256          BEQ     UNKNOWN0000             * If so, the op is unknown
000011D4                           257          
000011D4                           258          * Checking for BCLR Dynamic
000011D4  3C3C 0006                259          MOVE.W  #6, D6              * Prep lower value for bitmask
000011D8  3E3C 0008                260          MOVE.W  #8, D7              * Prep upper value for bitmask
000011DC  6100 15A8                261          BSR     BITMASK             * Finalize bitmask setup
000011E0  CC42                     262          AND     D2,D6               * Apply bitmask
000011E2                           263          
000011E2  0C46 0180                264          CMPI    #%0000000110000000, D6  * Are we BCLR Dynamic?
000011E6  6600 0050                265          BNE     NOTBCLRDYNA             * If not, branch to BCLR Static or other ops
000011EA                           266  
000011EA                           267          * Confirmed BCLR Dynamic at this point
000011EA  43F9 00002829            268          LEA     BCLROP,A1           * We found BCLR
000011F0  103C 000E                269          MOVE.B  #14,D0              * Trap #14 prints out the data
000011F4  4E4F                     270          TRAP    #15                 * Perform Trap #14
000011F6                           271  
000011F6  43F9 000028A6            272          LEA     SPACE,A1            * Formatting
000011FC  103C 000E                273          MOVE.B  #14,D0              * Trap #14 prints out space
00001200  4E4F                     274          TRAP    #15                 * Perform Trap #14
00001202                           275          
00001202                           276          * Set up for printing out the Register
00001202  0882 0006                277          BCLR    #6,D2               * Clear bit 6
00001206  0882 0007                278          BCLR    #7,D2               * Clear bit 7
0000120A  0882 0008                279          BCLR    #8,D2               * Clear bit 8
0000120E                           280          
0000120E  6100 0CE8                281          BSR     EAHELPER611         * Print out Register
00001212                           282  
00001212  43F9 000028AC            283          LEA     COMMA,A1            * formatting
00001218  103C 000E                284          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000121C  4E4F                     285          TRAP    #15                 * Perform Trap #14
0000121E                           286          
0000121E  4243                     287          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
00001220  08C3 0000                288          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
00001224                           289      
00001224  6100 0D14                290          BSR     EAHELPER05          * Print out data.
00001228                           291          
00001228  43F9 000027EF            292          LEA     NEWLINE,A1          * Formatting
0000122E  103C 000E                293          MOVE.B  #14,D0              * Trap #14 prints out the data
00001232  4E4F                     294          TRAP    #15                 * Perform Trap #14
00001234                           295          
00001234  6000 0108                296          BRA     END0000             * Found the op, move to next iteration
00001238                           297          
00001238                           298  NOTBCLRDYNA     * Possible options left are BCLR Static, ORI, and CMPI
00001238  3C3C 0006                299          MOVE.W  #6, D6              * Prep lower value for bitmask
0000123C  3E3C 000B                300          MOVE.W  #11, D7             * Prep upper value for bitmask
00001240  6100 1544                301          BSR     BITMASK             * Finalize bitmask setup
00001244  CC42                     302          AND     D2,D6               * Apply bitmask
00001246                           303          
00001246  0C46 0880                304          CMPI    #%0000100010000000, D6  * Are we BCLR Static?
0000124A  6600 003A                305          BNE     NOTBCLR                 * If not, branch to other functions
0000124E                           306          
0000124E                           307          * Confirmed BCLR Static at this point
0000124E  43F9 00002829            308          LEA     BCLROP,A1           * We found BCLR
00001254  103C 000E                309          MOVE.B  #14,D0              * Trap #14 prints out the data
00001258  4E4F                     310          TRAP    #15                 * Perform Trap #14
0000125A                           311  
0000125A  43F9 000028A6            312          LEA     SPACE,A1            * Formatting
00001260  103C 000E                313          MOVE.B  #14,D0              * Trap #14 prints out space
00001264  4E4F                     314          TRAP    #15                 * Perform Trap #14
00001266                           315          
00001266  2802                     316          MOVE.L  D2, D4              * Saving values
00001268                           317                  
00001268  43F9 000028AA            318          LEA     IMD, A1             * Formatting
0000126E  103C 000E                319          MOVE.B  #14,D0              * Trap #14 prints out the data
00001272  4E4F                     320          TRAP    #15                 * Perform Trap #14
00001274                           321          
00001274                           322          * Grab next word
00001274  3A1A                     323          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
00001276  E18D                     324          LSL.L   #8, D5              * LSL for first nibble of the word
00001278  E18D                     325          LSL.L   #8, D5              * LSL for second nibble of the word
0000127A  2C45                     326          MOVE.L  D5, A6              * Store D5 into A6, to be used as parameter
0000127C  7604                     327          MOVE.L  #4, D3              * Four most significant bits in D3
0000127E  6100 12C6                328          BSR     PRINT_ASCII_HEX_CHAR    * Perform number print out
00001282                           329  
00001282  6000 007E                330          BRA     SKIPLONG            * Formatting, returning saved values, etc.
00001286                           331          
00001286                           332  NOTBCLR * Possible options left are ORI or CMPI
00001286  3C3C 0009                333          MOVE.W  #9, D6              * Prep lower value for bitmask
0000128A  3E3C 000B                334          MOVE.W  #11, D7             * Prep upper value for bitmask
0000128E  6100 14F6                335          BSR     BITMASK             * Finalize bitmask setup
00001292  CC42                     336          AND     D2,D6               * Apply bitmask
00001294                           337          
00001294  0C46 0000                338          CMPI    #%0000000000000000, D6   * Are we possibly ORI?
00001298  6600 008A                339          BNE     NOTORI                   * If not, branch to NOTORI
0000129C                           340          
0000129C                           341          * Size check to see if unsupported ORI mode
0000129C  3C3C 0006                342          MOVE.W  #6, D6              * Prep lower value for bitmask
000012A0  3E3C 0007                343          MOVE.W  #7, D7              * Prep upper value for bitmask
000012A4  6100 14E0                344          BSR     BITMASK             * Finalize bitmask setup
000012A8  CC42                     345          AND     D2,D6               * Apply bitmask
000012AA                           346          
000012AA  0C46 00C0                347          CMPI    #%0000000011000000, D6  * Are bits 6,7 == 1,1?
000012AE  6700 008A                348          BEQ     UNKNOWN0000             * If so, unknown op. 
000012B2                           349          
000012B2                           350          * Confirmed ORI at this point
000012B2  43F9 00002837            351          LEA     ORIOP, A1           * Load 'ORI' into the output window
000012B8  103C 000E                352          MOVE.B  #14,D0              * Trap #14 prints out the data in D0
000012BC  4E4F                     353          TRAP    #15                 * Perform Trap #14
000012BE                           354  
000012BE                           355  IMD_SIZE_0000        
000012BE  6100 0FC0                356          BSR     SIZE67              * Print the size
000012C2                           357  
000012C2                           358          * Mode check to see the size
000012C2  3C3C 0006                359          MOVE.W  #6, D6              * Prep lower value for bitmask
000012C6  3E3C 0007                360          MOVE.W  #7, D7              * Prep upper value for bitmask
000012CA  6100 14BA                361          BSR     BITMASK             * Finalize bitmask setup
000012CE  CC42                     362          AND     D2,D6               * Apply bitmask
000012D0                           363          
000012D0  2802                     364          MOVE.L  D2, D4              * Saving value
000012D2                           365                  
000012D2  43F9 000028AA            366          LEA     IMD, A1             * Formatting
000012D8  103C 000E                367          MOVE.B  #14,D0              * Trap #14 prints out the data
000012DC  4E4F                     368          TRAP    #15                 * Perform Trap #14
000012DE                           369                 
000012DE                           370          * Grab immediate data
000012DE  3A1A                     371          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
000012E0  E18D                     372          LSL.L   #8, D5               
000012E2  E18D                     373          LSL.L   #8, D5
000012E4  2C45                     374          MOVE.L  D5, A6
000012E6  7604                     375          MOVE.L  #4, D3
000012E8  6100 125C                376          BSR     PRINT_ASCII_HEX_CHAR
000012EC                           377  
000012EC  0C46 0080                378          CMPI    #%0000000010000000, D6   * See if the size is a LONG
000012F0  6600 0010                379          BNE     SKIPLONG    
000012F4                           380          
000012F4                           381          * Grab next word
000012F4  3A1A                     382          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
000012F6  E18D                     383          LSL.L   #8, D5              * LSL to get first nibble of the word
000012F8  E18D                     384          LSL.L   #8, D5              * LSL to get second nibble of the word
000012FA  2C45                     385          MOVE.L  D5, A6              * Store D5 into A6 as a parameter
000012FC  7604                     386          MOVE.L  #4, D3              * Move #4 into D3 to show four bits
000012FE  6100 1246                387          BSR     PRINT_ASCII_HEX_CHAR    * Perform number output
00001302                           388  
00001302                           389  SKIPLONG
00001302  43F9 000028AC            390          LEA     COMMA, A1           * Formatting
00001308  103C 000E                391          MOVE.B  #14,D0              * Trap #14 prints out the data
0000130C  4E4F                     392          TRAP    #15                 * Perform Trap #14
0000130E                           393          
0000130E  2404                     394          MOVE.L  D4, D2              * Return saved value
00001310                           395          
00001310  6100 0C28                396          BSR     EAHELPER05          * Print out the EA
00001314                           397          
00001314  43F9 000027EF            398          LEA     NEWLINE,A1          * Formatting
0000131A  103C 000E                399          MOVE.B  #14,D0              * Trap #14 prints out the data
0000131E  4E4F                     400          TRAP    #15                 * Perform Trap #14
00001320                           401          
00001320  6000 001C                402          BRA     END0000             * Done with op. Move to next iteration
00001324                           403  
00001324                           404  NOTORI  * Possible option left is CMPI
00001324                           405  
00001324  0C46 0C00                406          CMPI    #%0000110000000000, D6  * Are we CMPI?
00001328  6600 0010                407          BNE     UNKNOWN0000             * If not, unknown op
0000132C                           408          
0000132C                           409          * Confirmed CMPI at this point
0000132C  43F9 0000283B            410          LEA     CMPIOP, A1          * Formatting
00001332  103C 000E                411          MOVE.B  #14,D0              * Trap #14 prints out the data
00001336  4E4F                     412          TRAP    #15                 * Perform Trap #14
00001338                           413          
00001338  6084                     414          BRA     IMD_SIZE_0000       * Get immediate value and end opcode 0000
0000133A                           415          
0000133A                           416  UNKNOWN0000
0000133A  6100 11E0                417          BSR     UNKNOWNOP          * Unknown op
0000133E                           418  
0000133E                           419  END0000          
0000133E  4C9F 03FF                420          MOVEM   (A7)+,D0-D7/A0-A1   * Push values to the stack to save
00001342  4E75                     421          RTS
00001344                           422  
00001344                           423  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001344                           424  *-----------------------------------------------------------------------------
00001344                           425  
00001344                           426  
00001344                           427  
00001344                           428  *-----------------------------------------------------------------------------
00001344                           429  *-----------------------------------------------------------------------------
00001344                           430  * NAME: OP_0001   (MOVE.B)
00001344                           431  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001344                           432  * PRE-CONDITION:  xyz
00001344                           433  * POST-CONDITION: All registers return to their previous state, and the output
00001344                           434  *                 goes to the output console for reading the raw data or the
00001344                           435  *                 actual instruction.
00001344                           436  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001344                           437  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001344                           438  OP0001  
00001344  48A7 FFC0                439          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
00001348                           440          
00001348  3C3C 0006                441          MOVE.W  #6, D6              * Prep lower value for bitmask
0000134C  3E3C 0008                442          MOVE.W  #8, D7              * Prep upper value for bitmask
00001350  6100 1434                443          BSR     BITMASK             * Finalize bitmask setup
00001354                           444          
00001354  CC42                     445          AND     D2,D6               * Apply bitmask
00001356                           446          
00001356  0C46 0040                447          CMPI    #%0000000001000000,D6
0000135A  6600 0012                448          BNE     OP0001MOVE
0000135E                           449          
0000135E  43F9 0000280C            450          LEA     MOVEAOP,A1   * Put 'MOVE' into the window
00001364  103C 000E                451          MOVE.B  #14,D0      * Trap #14 to print out
00001368  4E4F                     452          TRAP    #15         * Perform Trap #14
0000136A                           453          
0000136A  6000 000E                454          BRA     OP0001MOVEA
0000136E                           455          
0000136E                           456  OP0001MOVE
0000136E                           457  
0000136E  43F9 00002807            458          LEA     MOVEOP,A1   * Put 'MOVE' into the window
00001374  103C 000E                459          MOVE.B  #14,D0      * Trap #14 to print out
00001378  4E4F                     460          TRAP    #15         * Perform Trap #14
0000137A                           461          
0000137A                           462  OP0001MOVEA
0000137A                           463  
0000137A  43F9 000028BA            464          LEA     __B,A1   * Put 'MOVE' into the window
00001380  103C 000E                465          MOVE.B  #14,D0      * Trap #14 to print out
00001384  4E4F                     466          TRAP    #15         * Perform Trap #14
00001386                           467          
00001386  7601                     468          MOVE.L  #1,D3
00001388                           469          
00001388  6100 0BB0                470          BSR     EAHELPER05
0000138C                           471          
0000138C  43F9 000028AC            472          LEA     COMMA,A1
00001392  103C 000E                473          MOVE.B  #14,D0
00001396  4E4F                     474          TRAP    #15
00001398                           475          
00001398  6100 0B5E                476          BSR     EAHELPER611
0000139C                           477          
0000139C  43F9 000027EF            478          LEA     NEWLINE,A1
000013A2  103C 000E                479          MOVE.B  #14,D0
000013A6  4E4F                     480          TRAP    #15
000013A8                           481          
000013A8  6000 0006                482          BRA     ENDOP0001
000013AC                           483          
000013AC                           484  UNKNOWNOP0001
000013AC  6100 116E                485          BSR     UNKNOWNOP
000013B0                           486          
000013B0                           487  ENDOP0001
000013B0  4C9F 03FF                488          MOVEM (A7)+,D0-D7/A0-A1
000013B4  4E75                     489          RTS        
000013B6                           490          
000013B6                           491  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000013B6                           492  *-----------------------------------------------------------------------------
000013B6                           493  
000013B6                           494  
000013B6                           495  
000013B6                           496  *-----------------------------------------------------------------------------
000013B6                           497  *-----------------------------------------------------------------------------
000013B6                           498  * NAME: OP_0010   (MOVE.L, MOVEA.L)
000013B6                           499  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000013B6                           500  * PRE-CONDITION:  xyz
000013B6                           501  * POST-CONDITION: All registers return to their previous state, and the output
000013B6                           502  *                 goes to the output console for reading the raw data or the
000013B6                           503  *                 actual instruction.
000013B6                           504  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000013B6                           505  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000013B6                           506  OP0010  
000013B6  48A7 FFC0                507          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
000013BA                           508          
000013BA  3C3C 0006                509          MOVE.W  #6, D6              * Prep lower value for bitmask
000013BE  3E3C 0008                510          MOVE.W  #8, D7              * Prep upper value for bitmask
000013C2  6100 13C2                511          BSR     BITMASK             * Finalize bitmask setup
000013C6                           512          
000013C6  CC42                     513          AND     D2,D6               * Apply bitmask
000013C8                           514          
000013C8  0C46 0040                515          CMPI    #%0000000001000000,D6
000013CC  6600 0012                516          BNE     OP0010MOVE
000013D0                           517          
000013D0  43F9 0000280C            518          LEA     MOVEAOP,A1   * Put 'MOVE' into the window
000013D6  103C 000E                519          MOVE.B  #14,D0      * Trap #14 to print out
000013DA  4E4F                     520          TRAP    #15         * Perform Trap #14
000013DC                           521          
000013DC  6000 000E                522          BRA     OP0010MOVEA
000013E0                           523          
000013E0                           524  OP0010MOVE
000013E0                           525  
000013E0  43F9 00002807            526          LEA     MOVEOP,A1   * Put 'MOVE' into the window
000013E6  103C 000E                527          MOVE.B  #14,D0      * Trap #14 to print out
000013EA  4E4F                     528          TRAP    #15         * Perform Trap #14
000013EC                           529          
000013EC                           530  OP0010MOVEA
000013EC                           531  
000013EC  43F9 000028C2            532          LEA     __L,A1   * Put 'MOVE' into the window
000013F2  103C 000E                533          MOVE.B  #14,D0      * Trap #14 to print out
000013F6  4E4F                     534          TRAP    #15         * Perform Trap #14
000013F8                           535          
000013F8  7603                     536          MOVE.L  #3,D3
000013FA                           537          
000013FA  6100 0B3E                538          BSR     EAHELPER05
000013FE                           539          
000013FE  43F9 000028AC            540          LEA     COMMA,A1
00001404  103C 000E                541          MOVE.B  #14,D0
00001408  4E4F                     542          TRAP    #15
0000140A                           543          
0000140A  6100 0AEC                544          BSR     EAHELPER611
0000140E                           545          
0000140E  43F9 000027EF            546          LEA     NEWLINE,A1
00001414  103C 000E                547          MOVE.B  #14,D0
00001418  4E4F                     548          TRAP    #15
0000141A                           549          
0000141A  6000 0006                550          BRA     ENDOP0010
0000141E                           551          
0000141E                           552  UNKNOWNOP0010
0000141E  6100 10FC                553          BSR     UNKNOWNOP
00001422                           554          
00001422                           555  ENDOP0010
00001422  4C9F 03FF                556          MOVEM (A7)+,D0-D7/A0-A1
00001426  4E75                     557          RTS        
00001428                           558  
00001428                           559  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001428                           560  *-----------------------------------------------------------------------------
00001428                           561  
00001428                           562  
00001428                           563  
00001428                           564  *-----------------------------------------------------------------------------
00001428                           565  *-----------------------------------------------------------------------------
00001428                           566  * NAME: OP_0011   (MOVE.W, MOVEA.W)
00001428                           567  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001428                           568  * PRE-CONDITION:  xyz
00001428                           569  * POST-CONDITION: All registers return to their previous state, and the output
00001428                           570  *                 goes to the output console for reading the raw data or the
00001428                           571  *                 actual instruction.
00001428                           572  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001428                           573  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001428                           574  OP0011  
00001428  48A7 FFC0                575          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
0000142C                           576          
0000142C  3C3C 0006                577          MOVE.W  #6, D6              * Prep lower value for bitmask
00001430  3E3C 0008                578          MOVE.W  #8, D7              * Prep upper value for bitmask
00001434  6100 1350                579          BSR     BITMASK             * Finalize bitmask setup
00001438                           580          
00001438  CC42                     581          AND     D2,D6               * Apply bitmask
0000143A                           582          
0000143A  0C46 0040                583          CMPI    #%0000000001000000,D6
0000143E  6600 0012                584          BNE     OP0011MOVE
00001442                           585          
00001442  43F9 0000280C            586          LEA     MOVEAOP,A1   * Put 'MOVE' into the window
00001448  103C 000E                587          MOVE.B  #14,D0      * Trap #14 to print out
0000144C  4E4F                     588          TRAP    #15         * Perform Trap #14
0000144E                           589          
0000144E  6000 000E                590          BRA     OP0011MOVEA
00001452                           591          
00001452                           592  OP0011MOVE
00001452                           593  
00001452  43F9 00002807            594          LEA     MOVEOP,A1   * Put 'MOVE' into the window
00001458  103C 000E                595          MOVE.B  #14,D0      * Trap #14 to print out
0000145C  4E4F                     596          TRAP    #15         * Perform Trap #14
0000145E                           597          
0000145E                           598  OP0011MOVEA
0000145E                           599  
0000145E  43F9 000028BE            600          LEA     __W,A1   * Put 'MOVE' into the window
00001464  103C 000E                601          MOVE.B  #14,D0      * Trap #14 to print out
00001468  4E4F                     602          TRAP    #15         * Perform Trap #14
0000146A                           603          
0000146A  7602                     604          MOVE.L  #2,D3
0000146C                           605          
0000146C  6100 0ACC                606          BSR     EAHELPER05
00001470                           607          
00001470  43F9 000028AC            608          LEA     COMMA,A1
00001476  103C 000E                609          MOVE.B  #14,D0
0000147A  4E4F                     610          TRAP    #15
0000147C                           611          
0000147C  6100 0A7A                612          BSR     EAHELPER611
00001480                           613          
00001480  43F9 000027EF            614          LEA     NEWLINE,A1
00001486  103C 000E                615          MOVE.B  #14,D0
0000148A  4E4F                     616          TRAP    #15
0000148C                           617          
0000148C  6000 0006                618          BRA     ENDOP0011
00001490                           619          
00001490                           620  UNKNOWNOP0011
00001490  6100 108A                621          BSR     UNKNOWNOP
00001494                           622          
00001494                           623  ENDOP0011
00001494  4C9F 03FF                624          MOVEM (A7)+,D0-D7/A0-A1
00001498  4E75                     625          RTS        
0000149A                           626  
0000149A                           627  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000149A                           628  *-----------------------------------------------------------------------------
0000149A                           629  
0000149A                           630  *-----------------------------------------------------------------------------
0000149A                           631  *-----------------------------------------------------------------------------
0000149A                           632  * NAME: OP_0100   (NOP, MOVEM, LEA, NEG, JSR, RTS)
0000149A                           633  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000149A                           634  * PRE-CONDITION:  xyz
0000149A                           635  * POST-CONDITION: All registers return to their previous state, and the output
0000149A                           636  *                 goes to the output console for reading the raw data or the
0000149A                           637  *                 actual instruction.
0000149A                           638  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000149A                           639  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000149A                           640  OP0100  
0000149A                           641  
0000149A  48A7 C0C0                642          MOVEM   D0-D1/A0-A1,-(A7) * Push values to the stack to save
0000149E                           643          
0000149E                           644          *NOP
0000149E  0C42 4E71                645          CMPI    #%0100111001110001,D2
000014A2  6600 0012                646          BNE     NOTNOP
000014A6                           647          
000014A6  43F9 000027FF            648          LEA     NOOPERATION,A1
000014AC  103C 000D                649          MOVE.B  #13,D0          * Print a newline
000014B0  4E4F                     650          TRAP    #15
000014B2                           651          
000014B2  6000 030E                652          BRA     DONE0100 *we found it, move on to the next iteration
000014B6                           653  NOTNOP *NEG
000014B6                           654          
000014B6                           655          * prep values for BITMASK subroutine
000014B6  7C08                     656          MOVE.L  #8,D6
000014B8  7E0B                     657          MOVE.L  #11,D7
000014BA                           658          
000014BA  6100 12CA                659          BSR     BITMASK
000014BE                           660          
000014BE  CC42                     661          AND     D2,D6                   * apply bitmask
000014C0                           662          
000014C0  0C46 0400                663          CMPI    #%0000010000000000,D6   * are we NEG?
000014C4  6600 0046                664          BNE     NOTNEG                  * not neg
000014C8                           665          
000014C8  7C03                     666          MOVE.L  #3,D6
000014CA  7E05                     667          MOVE.L  #5,D7
000014CC                           668          
000014CC  6100 12B8                669          BSR     BITMASK * generate a bitmask to be used to check mode
000014D0                           670          
000014D0  0C46 0008                671          CMPI    #%0000000000001000,D6 * check to see if it is the unsupported mode
000014D4  6700 02E8                672          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
000014D8                           673          
000014D8  0C46 0028                674          CMPI    #%0000000000101000,D6 * check to see if it is the unsupported mode
000014DC  6700 02E0                675          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
000014E0                           676          
000014E0  0C46 0030                677          CMPI    #%0000000000110000,D6 * check to see if it is the unsupported mode
000014E4  6700 02D8                678          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
000014E8                           679        
000014E8                           680          * it is NEG, print
000014E8  43F9 00002803            681          LEA     NEGOP,A1
000014EE  103C 000E                682          MOVE.B  #14,D0
000014F2  4E4F                     683          TRAP    #15
000014F4                           684          
000014F4  6100 0D8A                685          BSR     SIZE67
000014F8                           686          
000014F8  6100 0A40                687          BSR     EAHELPER05
000014FC                           688          
000014FC  43F9 000027EF            689          LEA     NEWLINE,A1
00001502  103C 000E                690          MOVE.B  #14,D0
00001506  4E4F                     691          TRAP    #15
00001508                           692          
00001508  6000 02B8                693          BRA     DONE0100 * we found the op, move to next iteration
0000150C                           694          
0000150C                           695  NOTNEG *MOVEM
0000150C                           696  
0000150C                           697          * prep values for BITMASK subroutine
0000150C  7C07                     698          MOVE.L  #7,D6
0000150E  7E09                     699          MOVE.L  #9,D7
00001510                           700          
00001510  6100 1274                701          BSR     BITMASK
00001514                           702          
00001514  CC82                     703          AND.L   D2,D6   * apply bitmask
00001516                           704          
00001516  0C46 0080                705          CMPI    #%0000000010000000,D6 * is it MOVEM?
0000151A  6600 0148                706          BNE     NOTMOVEM          * it is not MOVEM
0000151E                           707          
0000151E  7C0A                     708          MOVE.L  #10,D6
00001520  7E0A                     709          MOVE.L  #10,D7
00001522                           710          
00001522  6100 1262                711          BSR     BITMASK
00001526                           712          
00001526  CC82                     713          AND.L   D2,D6
00001528                           714          
00001528  0C46 0000                715          CMPI    #%0000000000000000,D6 * is it register to memory?
0000152C  6700 009C                716          BEQ     MOVEMTOMEM 
00001530                           717          
00001530                           718  MOVEMTOREG *supported modes: 010 011
00001530                           719  
00001530  7C03                     720          MOVE.L  #3,D6
00001532  7E05                     721          MOVE.L  #5,D7
00001534                           722          
00001534  6100 1250                723          BSR     BITMASK
00001538                           724          
00001538  CC82                     725          AND.L   D2,D6
0000153A                           726          
0000153A  0C46 0000                727          CMPI    #%0000000000000000,D6 * is it an unsupported mode?
0000153E  6700 027E                728          BEQ     UNKNOWN0100
00001542                           729          
00001542  0C46 0008                730          CMPI    #%0000000000001000,D6 * is it an unsupported mode?
00001546  6700 0276                731          BEQ     UNKNOWN0100
0000154A                           732          
0000154A  0C46 0020                733          CMPI    #%0000000000100000,D6 * is it an unsupported mode?
0000154E  6700 026E                734          BEQ     UNKNOWN0100
00001552                           735          
00001552  0C46 0028                736          CMPI    #%0000000000101000,D6 * is it an unsupported mode?
00001556  6700 0266                737          BEQ     UNKNOWN0100
0000155A                           738          
0000155A  0C46 0030                739          CMPI    #%0000000000110000,D6 * is it an unsupported mode?
0000155E  6700 025E                740          BEQ     UNKNOWN0100
00001562                           741          
00001562  0C46 0038                742          CMPI    #%0000000000111000,D6 * is it an unsupported mode?
00001566  6700 0256                743          BEQ     UNKNOWN0100
0000156A                           744          
0000156A  43F9 00002812            745          LEA     MOVEMOP,A1
00001570  103C 000E                746          MOVE.B  #14,D0          * print MOVEM
00001574  4E4F                     747          TRAP    #15
00001576                           748          
00001576  7C06                     749          MOVE.L  #6,D6
00001578  7E06                     750          MOVE.L  #6,D7
0000157A                           751          
0000157A  6100 120A                752          BSR     BITMASK
0000157E                           753          
0000157E  CC82                     754          AND.L   D2,D6
00001580                           755          
00001580  0C46 0040                756          CMPI    #%0000000001000000,D6 * is it a long op?
00001584  6600 0012                757          BNE     NOTLONGMOVEM1       * no, it is a word
00001588                           758          
00001588  43F9 000028C2            759          LEA     __L,A1
0000158E  103C 000E                760          MOVE.B  #14,D0          * print .L 
00001592  4E4F                     761          TRAP    #15
00001594                           762          
00001594  6000 000E                763          BRA     SKIPNOTLONG1
00001598                           764          
00001598                           765  NOTLONGMOVEM1
00001598                           766  
00001598  43F9 000028BE            767          LEA     __W,A1
0000159E  103C 000E                768          MOVE.B  #14,D0          * print .W 
000015A2  4E4F                     769          TRAP    #15
000015A4                           770                  
000015A4                           771  SKIPNOTLONG1
000015A4                           772  
000015A4  6100 0994                773          BSR     EAHELPER05 * print out the register we are moving from
000015A8                           774          
000015A8  43F9 000028AC            775          LEA     COMMA,A1
000015AE  103C 000E                776          MOVE.B  #14,D0          * print , 
000015B2  4E4F                     777          TRAP    #15
000015B4                           778          
000015B4  6100 0DAC                779          BSR     MOVEMHELPERPOST
000015B8                           780          
000015B8  341A                     781          MOVE.W  (A2)+,D2
000015BA                           782          
000015BA  43F9 000027EF            783          LEA     NEWLINE,A1
000015C0  103C 000E                784          MOVE.B  #14,D0          * print a newline 
000015C4  4E4F                     785          TRAP    #15
000015C6                           786      
000015C6  6000 01FA                787          BRA     DONE0100          * we found and printed, move on to the next iteration
000015CA                           788          
000015CA                           789  MOVEMTOMEM * supported modes 010 100
000015CA                           790  
000015CA  7C03                     791          MOVE.L  #3,D6
000015CC  7E05                     792          MOVE.L  #5,D7
000015CE                           793          
000015CE  6100 11B6                794          BSR     BITMASK
000015D2                           795          
000015D2  CC82                     796          AND.L   D2,D6
000015D4                           797          
000015D4  0C46 0000                798          CMPI    #%0000000000000000,D6 * is it an unsopported mode?
000015D8  6700 01E4                799          BEQ     UNKNOWN0100
000015DC                           800          
000015DC  0C46 0008                801          CMPI    #%0000000000001000,D6 * is it an unsopported mode?
000015E0  6700 01DC                802          BEQ     UNKNOWN0100
000015E4                           803          
000015E4  0C46 0018                804          CMPI    #%0000000000011000,D6 * is it an unsopported mode?
000015E8  6700 01D4                805          BEQ     UNKNOWN0100
000015EC                           806          
000015EC  0C46 0028                807          CMPI    #%0000000000101000,D6 * is it an unsopported mode?
000015F0  6700 01CC                808          BEQ     UNKNOWN0100
000015F4                           809          
000015F4  0C46 0030                810          CMPI    #%0000000000110000,D6 * is it an unsopported mode?
000015F8  6700 01C4                811          BEQ     UNKNOWN0100
000015FC                           812          
000015FC  0C46 0070                813          CMPI    #%0000000001110000,D6 * is it an unsopported mode?
00001600  6700 01BC                814          BEQ     UNKNOWN0100
00001604                           815          
00001604  43F9 00002812            816          LEA     MOVEMOP,A1
0000160A  103C 000E                817          MOVE.B  #14,D0          * print MOVEM
0000160E  4E4F                     818          TRAP    #15
00001610                           819          
00001610  7C06                     820          MOVE.L  #6,D6
00001612  7E06                     821          MOVE.L  #6,D7
00001614                           822          
00001614  6100 1170                823          BSR     BITMASK
00001618                           824          
00001618  CC82                     825          AND.L   D2,D6
0000161A                           826          
0000161A  0C46 0040                827          CMPI    #%0000000001000000,D6 * is it a long op?
0000161E  6600 0012                828          BNE     NOTLONGMOVEM2       * no, it is a word
00001622                           829          
00001622  43F9 000028C2            830          LEA     __L,A1
00001628  103C 000E                831          MOVE.B  #14,D0          * print .L 
0000162C  4E4F                     832          TRAP    #15
0000162E                           833          
0000162E  6000 000E                834          BRA     SKIPNOTLONG2
00001632                           835          
00001632                           836  NOTLONGMOVEM2
00001632                           837  
00001632  43F9 000028BE            838          LEA     __W,A1
00001638  103C 000E                839          MOVE.B  #14,D0          * print .W 
0000163C  4E4F                     840          TRAP    #15
0000163E                           841                  
0000163E                           842  SKIPNOTLONG2
0000163E                           843  
0000163E  6100 0EAE                844          BSR     MOVEMHELPERPRE
00001642                           845  
00001642  43F9 000028AC            846          LEA     COMMA,A1
00001648  103C 000E                847          MOVE.B  #14,D0          * print , 
0000164C  4E4F                     848          TRAP    #15
0000164E                           849          
0000164E  6100 08EA                850          BSR     EAHELPER05 * print out the register we are moving to
00001652                           851          
00001652  341A                     852          MOVE.W  (A2)+,D2
00001654                           853          
00001654  43F9 000027EF            854          LEA     NEWLINE,A1
0000165A  103C 000E                855          MOVE.B  #14,D0          * print a newline 
0000165E  4E4F                     856          TRAP    #15
00001660                           857      
00001660  6000 0160                858          BRA     DONE0100          * we found and printed, move on to the next iteration
00001664                           859  
00001664                           860  NOTMOVEM *JSR
00001664                           861          * prep values for BITMASK subroutine
00001664  7C06                     862          MOVE.L  #6,D6
00001666  7E08                     863          MOVE.L  #8,D7
00001668                           864          
00001668  6100 111C                865          BSR     BITMASK
0000166C                           866          
0000166C  CC42                     867          AND     D2,D6   * apply bitmask
0000166E                           868          
0000166E  0C46 0080                869          CMPI    #%0000000010000000,D6
00001672  6600 0046                870          BNE     NOTJSR          * it's not JSR
00001676                           871          
00001676  43F9 00002818            872          LEA     JSROP,A1
0000167C  103C 000E                873          MOVE.B  #14,D0          * Print JSR
00001680  4E4F                     874          TRAP    #15
00001682                           875          
00001682  43F9 000028A6            876          LEA     SPACE,A1
00001688  103C 000E                877          MOVE.B  #14,D0          * Print space
0000168C  4E4F                     878          TRAP    #15
0000168E                           879          
0000168E  43F9 000028A8            880          LEA     DOLLAR,A1
00001694  103C 000E                881          MOVE.B  #14,D0          * Print $
00001698  4E4F                     882          TRAP    #15
0000169A                           883          
0000169A                           884          * print out where we are jumping to
0000169A                           885          
0000169A  241A                     886          MOVE.L  (A2)+,D2 * read in the next word of the instruction
0000169C                           887  
0000169C  2E02                     888          MOVE.L  D2,D7
0000169E                           889  
0000169E  2C47                     890          MOVE.L  D7,A6
000016A0                           891          
000016A0  4283                     892          CLR.L   D3
000016A2                           893          
000016A2  163C 0008                894          MOVE.B  #8,D3
000016A6                           895          
000016A6  6100 0E9E                896          BSR     PRINT_ASCII_HEX_CHAR
000016AA                           897          
000016AA                           898          *MOVE.L  D2,D1   * save the opcode to print
000016AA                           899          
000016AA                           900          *MOVE.L  #16,D2  * set the base to 16
000016AA                           901          
000016AA                           902          *MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000016AA                           903          *TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000016AA                           904          
000016AA                           905          *MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
000016AA                           906          
000016AA                           907          *MOVE.L  D2,D1   * save the opcode to print
000016AA                           908          
000016AA                           909          *MOVE.L  #16,D2  * set the base to 16
000016AA                           910          
000016AA                           911          *MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000016AA                           912          *TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000016AA                           913          
000016AA  43F9 000027EF            914          LEA     NEWLINE,A1
000016B0  103C 000E                915          MOVE.B  #14,D0          * Print a newline
000016B4  4E4F                     916          TRAP    #15
000016B6                           917          
000016B6  6000 010A                918          BRA     DONE0100          * we already found instruction, next iteration
000016BA                           919  NOTJSR *RTS
000016BA                           920  
000016BA                           921          * prep values for BITMASK subroutine
000016BA  7C06                     922          MOVE.L  #6,D6
000016BC  7E08                     923          MOVE.L  #8,D7
000016BE                           924          
000016BE  6100 10C6                925          BSR     BITMASK
000016C2                           926          
000016C2  CC42                     927          AND     D2,D6   * apply bitmask
000016C4                           928          
000016C4  0C46 0040                929          CMPI    #%0000000001000000,D6
000016C8  6600 0012                930          BNE     NOTRTS          * it's not RTS
000016CC                           931          
000016CC  43F9 0000281C            932          LEA     RTSOP,A1
000016D2  103C 000D                933          MOVE.B  #13,D0          * Print a newline and RTS
000016D6  4E4F                     934          TRAP    #15
000016D8                           935          
000016D8  6000 00E8                936          BRA     DONE0100          * we already found instruction, next iteration
000016DC                           937  NOTRTS  *LEA
000016DC                           938         
000016DC                           939          * prep values for BITMASK subroutine
000016DC  7C06                     940          MOVE.L  #6,D6
000016DE  7E08                     941          MOVE.L  #8,D7
000016E0                           942          
000016E0  6100 10A4                943          BSR     BITMASK
000016E4                           944          
000016E4  CC42                     945          AND     D2,D6   * apply bitmask
000016E6                           946          
000016E6  0C46 01C0                947          CMPI    #%0000000111000000,D6
000016EA  6600 00D2                948          BNE     UNKNOWN0100          * it's not LEA, we dont know what it is
000016EE                           949          
000016EE                           950          * prep values for BITMASK subroutine
000016EE  7C03                     951          MOVE.L  #3,D6
000016F0  7E05                     952          MOVE.L  #5,D7
000016F2                           953          
000016F2  6100 1092                954          BSR     BITMASK
000016F6                           955          
000016F6  CC42                     956          AND     D2,D6   * apply bitmask
000016F8                           957          
000016F8  0C46 0008                958          CMPI    #%0000000000001000,D6
000016FC  6700 00C0                959          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001700                           960          
00001700  0C46 0018                961          CMPI    #%0000000000011000,D6
00001704  6700 00B8                962          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001708                           963          
00001708  0C46 0020                964          CMPI    #%0000000000100000,D6
0000170C  6700 00B0                965          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001710                           966          
00001710  0C46 0028                967          CMPI    #%0000000000101000,D6
00001714  6700 00A8                968          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001718                           969          
00001718  0C46 0030                970          CMPI    #%0000000000110000,D6
0000171C  6700 00A0                971          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001720                           972          
00001720  0C46 0038                973          CMPI    #%0000000000111000,D6
00001724  6700 0046                974          BEQ     TWOWORDLEA          * it's a two word LEA
00001728                           975          
00001728  43F9 00002825            976          LEA     LEAOP,A1
0000172E  103C 000E                977          MOVE.B  #14,D0          * Print LEA
00001732  4E4F                     978          TRAP    #15
00001734                           979          
00001734  0882 0007                980          BCLR    #7,D2
00001738  0882 0008                981          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
0000173C                           982          
0000173C  43F9 000028A6            983          LEA     SPACE,A1
00001742  103C 000E                984          MOVE.B  #14,D0          * Print SPACE
00001746  4E4F                     985          TRAP    #15
00001748                           986          
00001748  6100 07F0                987          BSR     EAHELPER05
0000174C                           988          
0000174C  43F9 000028AC            989          LEA     COMMA,A1
00001752  103C 000E                990          MOVE.B  #14,D0          * Print COMMA
00001756  4E4F                     991          TRAP    #15
00001758                           992          
00001758  6100 079E                993          BSR     EAHELPER611
0000175C                           994          
0000175C  43F9 000027EF            995          LEA     NEWLINE,A1
00001762  103C 000E                996          MOVE.B  #14,D0          * Start a new line
00001766  4E4F                     997          TRAP    #15
00001768                           998          
00001768                           999          
00001768                          1000          * call EA helper
00001768                          1001          * MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
00001768                          1002                  
00001768  6000 0058               1003          BRA     DONE0100          * we already found instruction, next iteration
0000176C                          1004          
0000176C                          1005  TWOWORDLEA
0000176C                          1006  
0000176C  43F9 00002825           1007          LEA     LEAOP,A1
00001772  103C 000E               1008          MOVE.B  #14,D0   * Print LEA
00001776  4E4F                    1009          TRAP    #15
00001778                          1010          
00001778  43F9 000028A6           1011          LEA     SPACE,A1
0000177E  103C 000E               1012          MOVE.B  #14,D0   * Print SPACE
00001782  4E4F                    1013          TRAP    #15
00001784                          1014  
00001784  321A                    1015          MOVE.W  (A2)+,D1
00001786                          1016          
00001786  7C00                    1017          MOVE.L  #0,D6
00001788  7E0F                    1018          MOVE.L  #15,D7
0000178A                          1019          
0000178A  6100 0FFA               1020          BSR     BITMASK
0000178E                          1021          
0000178E  C286                    1022          AND.L   D6,D1   * shave off bad info
00001790                          1023          
00001790  103C 0003               1024          MOVE.B  #3,D0   * Print the address which was the source
00001794  4E4F                    1025          TRAP    #15
00001796                          1026          
00001796  43F9 000028AC           1027          LEA     COMMA,A1
0000179C  103C 000E               1028          MOVE.B  #14,D0  * Print COMMA
000017A0  4E4F                    1029          TRAP    #15
000017A2                          1030          
000017A2  0882 0007               1031          BCLR    #7,D2
000017A6  0882 0008               1032          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
000017AA                          1033          
000017AA  6100 074C               1034          BSR     EAHELPER611
000017AE                          1035          
000017AE  43F9 000027EF           1036          LEA     NEWLINE,A1
000017B4  103C 000E               1037          MOVE.B  #14,D0          * Start a new line
000017B8  4E4F                    1038          TRAP    #15
000017BA                          1039          
000017BA  6000 0006               1040          BRA     DONE0100
000017BE                          1041          
000017BE                          1042  UNKNOWN0100 *dont know what it is
000017BE  6100 0D5C               1043          BSR     UNKNOWNOP
000017C2                          1044          
000017C2                          1045  DONE0100
000017C2  4C9F 0303               1046          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
000017C6  4E75                    1047          RTS
000017C8                          1048          
000017C8                          1049  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000017C8                          1050  *-----------------------------------------------------------------------------
000017C8                          1051        
000017C8                          1052          
000017C8                          1053          
000017C8                          1054  
000017C8                          1055  *-----------------------------------------------------------------------------
000017C8                          1056  *-----------------------------------------------------------------------------
000017C8                          1057  * NAME: OP_0101   (SUBQ)
000017C8                          1058  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000017C8                          1059  * PRE-CONDITION:  xyz
000017C8                          1060  * POST-CONDITION: All registers return to their previous state, and the output
000017C8                          1061  *                 goes to the output console for reading the raw data or the
000017C8                          1062  *                 actual instruction.
000017C8                          1063  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000017C8                          1064  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000017C8                          1065  OP0101
000017C8  48A7 FFC0               1066          MOVEM   D0-D7/A0-A1,-(A7)       * Push values to the stack to save
000017CC                          1067  
000017CC  CC7C 0100               1068          AND     #%0000000100000000, D6  * Baby-Bitmask for the 8th digit.
000017D0  0C46 0100               1069          CMPI    #%0000000100000000, D6  * Is the 8th digit a 1?
000017D4  6700 005A               1070          BEQ     UNKNOWN0101             * If so, unknown op
000017D8                          1071        
000017D8  0C46 0100               1072          CMPI    #%0000000100000000, D6  * Is the size 11, an unsupported value?
000017DC  6700 0052               1073          BEQ     UNKNOWN0101             * If so, unknown op
000017E0                          1074            
000017E0                          1075          * Verified SUBQ at this point
000017E0  43F9 00002820           1076          LEA     SUBQOP,A1           * Print out SUBQ
000017E6  103C 000E               1077          MOVE.B  #14,D0              * Trap #14 to print out
000017EA  4E4F                    1078          TRAP    #15                 * Perform Trap #14
000017EC                          1079                          
000017EC  6100 0A92               1080          BSR     SIZE67              * Print out size
000017F0                          1081          
000017F0  43F9 000028AA           1082          LEA     IMD,A1              * Formatting
000017F6  103C 000E               1083          MOVE.B  #14,D0              * Trap #14 prints out space
000017FA  4E4F                    1084          TRAP    #15                 * Perform Trap #14
000017FC                          1085          
000017FC  3C3C 0009               1086          MOVE.W  #9, D6              * Prep lower value for bitmask
00001800  3E3C 000B               1087          MOVE.W  #11,D7              * Prep upper value for bitmask
00001804  6100 0F80               1088          BSR     BITMASK             * Finalize bitmask setup
00001808  CC42                    1089          AND     D2,D6               * Apply bitmask
0000180A                          1090          
0000180A  6100 0EC8               1091          BSR     PRINTDATA911        * Special op for immediate in bits 9->11
0000180E                          1092            
0000180E  43F9 000028AC           1093          LEA     COMMA,A1            * Formatting
00001814  103C 000E               1094          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001818  4E4F                    1095          TRAP    #15                 * Perform Trap #14
0000181A                          1096          
0000181A  6100 071E               1097          BSR     EAHELPER05          * Print out the Effective Address
0000181E                          1098          
0000181E  43F9 000027EF           1099          LEA     NEWLINE,A1          * Formatting
00001824  103C 000E               1100          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001828  4E4F                    1101          TRAP    #15                 * Perform Trap #14
0000182A                          1102          
0000182A  4C9F 03FF               1103          MOVEM   (A7)+,D0-D7/A0-A1   * Pop off the stack to return our registers
0000182E  4E75                    1104          RTS
00001830                          1105      
00001830                          1106  UNKNOWN0101
00001830  6100 0CEA               1107          BSR     UNKNOWNOP
00001834  4E75                    1108          RTS
00001836                          1109  
00001836                          1110  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001836                          1111  *-----------------------------------------------------------------------------
00001836                          1112  
00001836                          1113  
00001836                          1114  
00001836                          1115  *-----------------------------------------------------------------------------
00001836                          1116  *-----------------------------------------------------------------------------
00001836                          1117  * NAME: OP_0110   (BCC, BCS, BGE, BLT, BVC, BRA)
00001836                          1118  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001836                          1119  * PRE-CONDITION:  Given the possibilties for 0110, masks the next 4 bits
00001836                          1120  *                 in the instruction and determines what the bits match to a
00001836                          1121  *                 given condition code. If the 8 bit offset is $00, or $FF,
00001836                          1122  *                 this signifies a word or long offset (for $00 and $FF
00001836                          1123  *                 respectively). The 8 bit offset is in 2's comp. form, and
00001836                          1124  *                 should be un-done, then plus or minus to the current
00001836                          1125  *                 program counter (PC) to get the actual memory label to
00001836                          1126  *                 output to console. The word offset signal eats an
00001836                          1127  *                 additional 16 bits and the long offset eats an additional
00001836                          1128  *                 32 bits. The word/long offset are for memory alignment.
00001836                          1129  * POST-CONDITION: All registers return to their previous state, and the output
00001836                          1130  *                 goes to the output console for reading the raw data or the
00001836                          1131  *                 actual instruction.
00001836                          1132  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001836                          1133  *                 A1 (output)
00001836                          1134  * CONDITIONS TABLE:
00001836                          1135  *                Condition Names  - Mnemonic - Condition Code
00001836                          1136  *                --------------------------------------------
00001836                          1137  *                True             -    T     - 0000
00001836                          1138  *                False            -    F     - 0001
00001836                          1139  *                Higher           -    HI    - 0010
00001836                          1140  *                Lower or Same    -    LS    - 0011
00001836                          1141  *                Carry Clear      -    CC    - 0100
00001836                          1142  *                Carry Set        -    CS    - 0101
00001836                          1143  *                Not Equal        -    NE    - 0110
00001836                          1144  *                Equal            -    EQ    - 0111
00001836                          1145  *                Overflow Clear   -    VC    - 1000
00001836                          1146  *                Overflow Set     -    VS    - 1001
00001836                          1147  *                Plus             -    PL    - 1010
00001836                          1148  *                Minus            -    MI    - 1011
00001836                          1149  *                Greater or Equal -    GE    - 1100
00001836                          1150  *                Less Than        -    LT    - 1101
00001836                          1151  *                Greater Than     -    GT    - 1110
00001836                          1152  *                Less or Equal    -    LE    - 1111
00001836                          1153  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001836  48E7 FFC2               1154  OP0110  MOVEM.L D0-D7/A0-A1/A6,-(A7) * Save main method routine vars to stack
0000183A                          1155                          
0000183A  3C3C 0009               1156          MOVE.W  #9,D6  * Move in 9 to D6
0000183E  3E3C 000B               1157          MOVE.W  #11,D7 * Move in 11 to D7
00001842                          1158                                        
00001842  6100 0F42               1159          BSR     BITMASK * Call BITMASK sub-routine, Returns a bitmask in D6
00001846  CC42                    1160          AND     D2,D6   * apply the BITMASK
00001848                          1161          
00001848  0C46 0400               1162          CMPI    #%0000010000000000,D6 * CASE 1: BCC - BINARY FOR "CARRY CLEAR" FLAG
0000184C  6700 0032               1163          BEQ     OP_BCC
00001850  0C46 0500               1164          CMPI    #%0000010100000000,D6 * CASE 2: BCS - BINARY FOR "CARRY SET" FLAG
00001854  6700 0034               1165          BEQ     OP_BCS
00001858  0C46 0C00               1166          CMPI    #%0000110000000000,D6 * CASE 3: BGE - BINARY FOR "GREATER OR EQUAL" FLAG
0000185C  6700 0036               1167          BEQ     OP_BGE
00001860  0C46 0D00               1168          CMPI    #%0000110100000000,D6 * CASE 4: BLT - BINARY FOR "LESS THAN" FLAG
00001864  6700 0038               1169          BEQ     OP_BLT
00001868  0C46 0800               1170          CMPI    #%0000100000000000,D6 * CASE 5: BVC - BINARY FOR "OVERFLOW CLEAR" FLAG
0000186C  6700 003A               1171          BEQ     OP_BVC
00001870  0C46 0000               1172          CMPI    #%0000000000000000,D6 * CASE 6: BRA - BINARY FOR "BRANCH ALWAYS" FLAG
00001874  6700 003C               1173          BEQ     OP_BRA
00001878  6100 0CA2               1174          BSR     UNKNOWNOP             * don't know what it is, print it out, skip to end
0000187C  6000 00C4               1175          BRA     BCC_END
00001880                          1176  
00001880  43F9 00002864           1177  OP_BCC  LEA     OP_BCC_MSG,A1
00001886  6000 0034               1178          BRA     OP_BRANCHES_PRINT
0000188A  43F9 00002869           1179  OP_BCS  LEA     OP_BCS_MSG,A1
00001890  6000 002A               1180          BRA     OP_BRANCHES_PRINT
00001894  43F9 0000286E           1181  OP_BGE  LEA     OP_BGE_MSG,A1
0000189A  6000 0020               1182          BRA     OP_BRANCHES_PRINT
0000189E  43F9 00002873           1183  OP_BLT  LEA     OP_BLT_MSG,A1
000018A4  6000 0016               1184          BRA     OP_BRANCHES_PRINT
000018A8  43F9 00002878           1185  OP_BVC  LEA     OP_BVC_MSG,A1
000018AE  6000 000C               1186          BRA     OP_BRANCHES_PRINT
000018B2  43F9 0000287D           1187  OP_BRA  LEA     OP_BRA_MSG,A1
000018B8  6000 0002               1188          BRA     OP_BRANCHES_PRINT
000018BC                          1189  OP_BRANCHES_PRINT
000018BC  103C 000E               1190          MOVE.B  #14,D0 * print instruction op, chosen from cases directly above
000018C0  4E4F                    1191          TRAP    #15
000018C2                          1192          
000018C2  43F9 000028A8           1193          LEA     DOLLAR,A1
000018C8  103C 000E               1194          MOVE.B  #14,D0 * print raw data hex of the LABEL
000018CC  4E4F                    1195          TRAP    #15
000018CE                          1196          
000018CE  3C3C 0000               1197          MOVE.W  #0,D6                 * Move in 0 to D6 - prep mask
000018D2  3E3C 0007               1198          MOVE.W  #7,D7                 * Move in 7 to D7
000018D6  6100 0EAE               1199          BSR     BITMASK               * Call BITMASK sub-routine, return in D6
000018DA  CC42                    1200          AND     D2,D6                 * AND mask with op bits, get last 8 bits in D6
000018DC                          1201          
000018DC  0C46 0000               1202          CMPI    #%00000000,D6         * all 0's == word offset
000018E0  6700 0028               1203          BEQ     BCC_WORD_OFFSET
000018E4                          1204          
000018E4  0C46 00FF               1205          CMPI    #%11111111,D6         * all F's == long offset
000018E8  6700 003E               1206          BEQ     BCC_LONG_OFFSET
000018EC                          1207  BCC_BYTE_OFFSET
000018EC  E18E                    1208          LSL.L   #8,D6
000018EE  E18E                    1209          LSL.L   #8,D6
000018F0  E18E                    1210          LSL.L   #8,D6
000018F2                          1211          
000018F2  2C46                    1212          MOVE.L  D6,A6
000018F4  7602                    1213          MOVE.L  #2,D3
000018F6                          1214          
000018F6  6100 0C4E               1215          BSR     PRINT_ASCII_HEX_CHAR
000018FA                          1216          
000018FA  43F9 000027EF           1217          LEA     NEWLINE,A1
00001900  103C 000E               1218          MOVE.B  #14,D0
00001904  4E4F                    1219          TRAP    #15
00001906                          1220          
00001906  6000 003A               1221          BRA     BCC_END
0000190A                          1222  BCC_WORD_OFFSET
0000190A                          1223  
0000190A  3C1A                    1224          MOVE.W  (A2)+,D6
0000190C                          1225  
0000190C  E18E                    1226          LSL.L   #8,D6
0000190E  E18E                    1227          LSL.L   #8,D6
00001910                          1228          
00001910  2C46                    1229          MOVE.L  D6,A6
00001912  7604                    1230          MOVE.L  #4,D3
00001914                          1231          
00001914  6100 0C30               1232          BSR     PRINT_ASCII_HEX_CHAR
00001918                          1233          
00001918  43F9 000027EF           1234          LEA     NEWLINE,A1
0000191E  103C 000E               1235          MOVE.B  #14,D0
00001922  4E4F                    1236          TRAP    #15
00001924                          1237          
00001924  6000 001C               1238          BRA     BCC_END
00001928                          1239  BCC_LONG_OFFSET
00001928                          1240  
00001928  2C1A                    1241          MOVE.L  (A2)+,D6
0000192A                          1242  
0000192A  2C46                    1243          MOVE.L  D6,A6
0000192C  7608                    1244          MOVE.L  #8,D3
0000192E                          1245          
0000192E  6100 0C16               1246          BSR     PRINT_ASCII_HEX_CHAR
00001932                          1247          
00001932  43F9 000027EF           1248          LEA     NEWLINE,A1
00001938  103C 000E               1249          MOVE.B  #14,D0
0000193C  4E4F                    1250          TRAP    #15
0000193E                          1251          
0000193E  6000 0002               1252          BRA     BCC_END
00001942                          1253  BCC_END * reload the memory, call RTS
00001942  4CDF 43FF               1254          MOVEM.L (A7)+,D0-D7/A0-A1/A6 * Pop off the stack to return our registers
00001946  4E75                    1255          RTS
00001948                          1256  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001948                          1257  *-----------------------------------------------------------------------------
00001948                          1258  
00001948                          1259  
00001948                          1260  
00001948                          1261  *-----------------------------------------------------------------------------
00001948                          1262  *-----------------------------------------------------------------------------
00001948                          1263  * NAME: OP_0111   ()
00001948                          1264  * DESCRIPTION:    OP code 0111 is not supported. 
00001948                          1265  * PRE-CONDITION:  
00001948                          1266  * POST-CONDITION: 
00001948                          1267  * REGISTERS:
00001948                          1268  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001948                          1269  OP0111
00001948  6100 0BD2               1270      BSR     UNKNOWNOP
0000194C  4E75                    1271      RTS
0000194E                          1272  
0000194E                          1273  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000194E                          1274  *-----------------------------------------------------------------------------
0000194E                          1275  
0000194E                          1276  
0000194E                          1277  
0000194E                          1278  *-----------------------------------------------------------------------------
0000194E                          1279  *-----------------------------------------------------------------------------
0000194E                          1280  * NAME: OP_1000   (DIVS, OR)
0000194E                          1281  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000194E                          1282  * PRE-CONDITION:  xyz
0000194E                          1283  * POST-CONDITION: All registers return to their previous state, and the output
0000194E                          1284  *                 goes to the output console for reading the raw data or the
0000194E                          1285  *                 actual instruction.
0000194E                          1286  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000194E                          1287  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000194E                          1288  OP1000
0000194E  48A7 FFC0               1289          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
00001952                          1290  
00001952                          1291          * Check if the EA Mode is 001 since both DIVS and OR do not support it
00001952  3C3C 0003               1292          MOVE.W  #3, D6              * Prep lower value for bitmask
00001956  3E3C 0005               1293          MOVE.W  #5, D7              * Prep upper value for bitmask
0000195A  6100 0E2A               1294          BSR     BITMASK             * Finalize bitmask setup
0000195E  CC42                    1295          AND     D2,D6               * Apply bitmask
00001960                          1296          
00001960  0C46 0008               1297          CMPI    #%0000000000001000, D6  * Is the mode 001, an unsupported mode?
00001964  6700 0BB6               1298          BEQ     UNKNOWNOP                 * If so, the op is not supported
00001968                          1299          
00001968                          1300          * Checking for DIVS
00001968  3C3C 0006               1301          MOVE.W  #6, D6              * Prep lower value for bitmask
0000196C  3E3C 0008               1302          MOVE.W  #8, D7              * Prep upper value for bitmask
00001970  6100 0E14               1303          BSR     BITMASK             * Finalize bitmask setup
00001974  CC42                    1304          AND     D2,D6               * Apply bitmask
00001976                          1305          
00001976  0C46 01C0               1306          CMPI    #%0000000111000000, D6  * Are we DIVS?
0000197A  6600 0050               1307          BNE     NOTDIVS                 * If not, branch to see if it's OR
0000197E                          1308          
0000197E  43F9 000027F2           1309          LEA     DIVSOP,A1           * We found DIVS
00001984  103C 000E               1310          MOVE.B  #14,D0              * Trap #14 prints out the data
00001988  4E4F                    1311          TRAP    #15                 * Perform Trap #14
0000198A                          1312          
0000198A  43F9 000028A6           1313          LEA     SPACE,A1            * formatting
00001990  103C 000E               1314          MOVE.B  #14,D0              * Trap #14 prints out space
00001994  4E4F                    1315          TRAP    #15                 * Perform Trap #14
00001996                          1316          
00001996  4243                    1317          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
00001998  08C3 0000               1318          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
0000199C                          1319                                      * to indicate a potential immediate of size word
0000199C                          1320          
0000199C  6100 059C               1321          BSR     EAHELPER05          * Print out data
000019A0                          1322  
000019A0  43F9 000028AC           1323          LEA     COMMA,A1            * formatting
000019A6  103C 000E               1324          MOVE.B  #14,D0              * Trap #14 prints out a comma
000019AA  4E4F                    1325          TRAP    #15                 * Perform Trap #14
000019AC                          1326          
000019AC                          1327          * bit manipulation is needed to make the outlier DIVS work
000019AC                          1328          * with the generic EAHELPER611
000019AC  0882 0006               1329          BCLR    #6,D2
000019B0  0882 0007               1330          BCLR    #7,D2
000019B4  0882 0008               1331          BCLR    #8,D2
000019B8                          1332          
000019B8                          1333          * the above bits were cleared so that eahelper05 knows the destination
000019B8                          1334          * is a data register.
000019B8                          1335          
000019B8  6100 053E               1336          BSR     EAHELPER611 
000019BC                          1337  
000019BC  43F9 000027EF           1338          LEA     NEWLINE,A1          * We found DIVS
000019C2  103C 000E               1339          MOVE.B  #14,D0              * Trap #14 prints out the data
000019C6  4E4F                    1340          TRAP    #15                 * Perform Trap #14
000019C8                          1341          
000019C8  6000 0012               1342          BRA     OP1000END
000019CC                          1343          
000019CC                          1344  NOTDIVS * It is confirmed OR at this point
000019CC  43F9 00002834           1345          LEA     OROP,A1         * We found OR
000019D2  103C 000E               1346          MOVE.B  #14,D0          * Trap #14 prints out the data
000019D6  4E4F                    1347          TRAP    #15             * Perform Trap #14
000019D8                          1348          *================================================================
000019D8                          1349          * todo, move the size of the operation into the leading bits of D5
000019D8                          1350          * before subroutine call
000019D8  6100 051E               1351          BSR     EAHELPER611
000019DC                          1352  
000019DC                          1353  OP1000END
000019DC  4C9F 03FF               1354          MOVEM   (A7)+,D0-D7/A0-A1
000019E0  4E75                    1355          RTS
000019E2                          1356  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000019E2                          1357  *-----------------------------------------------------------------------------
000019E2                          1358  
000019E2                          1359  
000019E2                          1360  
000019E2                          1361  *-----------------------------------------------------------------------------
000019E2                          1362  *-----------------------------------------------------------------------------
000019E2                          1363  * NAME: OP_1001   (SUB)
000019E2                          1364  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000019E2                          1365  * PRE-CONDITION:  xyz
000019E2                          1366  * POST-CONDITION: All registers return to their previous state, and the output
000019E2                          1367  *                 goes to the output console for reading the raw data or the
000019E2                          1368  *                 actual instruction.
000019E2                          1369  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000019E2                          1370  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000019E2                          1371  OP1001
000019E2  48A7 FFC0               1372          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
000019E6                          1373          
000019E6  3C3C 0006               1374          MOVE.W  #6, D6              * Prep lower value for bitmask
000019EA  3E3C 0008               1375          MOVE.W  #8, D7              * Prep upper value for bitmask
000019EE  6100 0D96               1376          BSR     BITMASK             * Finalize bitmask setup
000019F2  CC42                    1377          AND     D2,D6               * Apply bitmask
000019F4                          1378          
000019F4                          1379          * Check to see if opmode is unsupported for both EOR and CMP
000019F4  0C46 00C0               1380          CMPI    #%0000000011000000, D6      * Is the OPMODE 011, unsupported by SUB?
000019F8  6700 0098               1381          BEQ     UNKNOWN1001                 * If so, the OP is unknown
000019FC  0C46 01C0               1382          CMPI    #%0000000111000000, D6      * Is the OPMODE 111, unsupported by SUB?
00001A00  6700 0090               1383          BEQ     UNKNOWN1001                 * If so, the OP is unknown
00001A04                          1384            
00001A04                          1385          * Check to see if the opmode is EA v Dn -> Dn
00001A04  0C46 0000               1386          CMPI    #%0000000000000000, D6      * Is the OPMODE 000, a BYTE for EA v DN?
00001A08  6700 0070               1387          BEQ     SUB_EA_DN                   * If so, branch to SUB_EA_DN
00001A0C  0C46 0040               1388          CMPI    #%0000000001000000, D6      * Is the OPMODE 001, a WORD for EA v DN?
00001A10  6700 0068               1389          BEQ     SUB_EA_DN                   * If so, branch to SUB_EA_DN
00001A14  0C46 0080               1390          CMPI    #%0000000010000000, D6      * Is the OPMODE 010, a LONG for EA v DN?
00001A18  6700 0060               1391          BEQ     SUB_EA_DN                   * If so, branch to SUB_EA_DN
00001A1C                          1392          
00001A1C                          1393          * Need to see if the size is a BYTE and the mode is An direct
00001A1C                          1394          * Since this is not supported
00001A1C  3C3C 0003               1395          MOVE.W  #3, D6              * Prep lower value for bitmask
00001A20  3E3C 0008               1396          MOVE.W  #8, D7              * Prep upper value for bitmask
00001A24  6100 0D60               1397          BSR     BITMASK             * Finalize bitmask setup
00001A28  CC42                    1398          AND     D2,D6               * Apply bitmask
00001A2A                          1399          
00001A2A  0C46 0108               1400          CMPI    #%0000000100001000, D6      * Is the mode 001 and is a byte?
00001A2E  6700 0062               1401          BEQ     UNKNOWN1001                 * If so, unsupported op
00001A32                          1402          
00001A32                          1403          * Verified to be SUB_DN_EA here
00001A32  0C46 0000               1404          CMPI    #%0000000000000000, D6      * Is the  000, a BYTE for EA v DN?
00001A36  6700 0042               1405          BEQ     SUB_EA_DN                   * If so, branch to SUB_EA_DN
00001A3A                          1406  
00001A3A                          1407  PRINT1001   
00001A3A  43F9 00002858           1408          LEA     SUBOP,A1    * We found SUB
00001A40  103C 000E               1409          MOVE.B  #14,D0      * Trap #14 prints out a comma
00001A44  4E4F                    1410          TRAP    #15         * Perform Trap #14
00001A46                          1411          
00001A46  6100 087C               1412          BSR     SIZE68      * print out the size
00001A4A                          1413          
00001A4A  6100 04EE               1414          BSR     EAHELPER05
00001A4E                          1415          
00001A4E                          1416          * bit manipulation is needed to make EAHELPER611 work
00001A4E  0882 0006               1417          BCLR    #6,D2
00001A52  0882 0007               1418          BCLR    #7,D2
00001A56  0882 0008               1419          BCLR    #8,D2
00001A5A                          1420               
00001A5A  43F9 000028AC           1421          LEA     COMMA,A1            * formatting
00001A60  103C 000E               1422          MOVE.B  #14,D0              * Trap #14 prints out comma
00001A64  4E4F                    1423          TRAP    #15                 * Perform Trap #1
00001A66                          1424          
00001A66  6100 0490               1425          BSR     EAHELPER611 
00001A6A                          1426          
00001A6A  43F9 000027EF           1427          LEA     NEWLINE,A1          * formatting
00001A70  103C 000E               1428          MOVE.B  #14,D0              * Trap #14 prints out comma
00001A74  4E4F                    1429          TRAP    #15                 * Perform Trap #1
00001A76                          1430          
00001A76  6000 001E               1431          BRA     DONE1001
00001A7A                          1432          
00001A7A                          1433  SUB_EA_DN
00001A7A                          1434          * SUBA is not supported and must be checked
00001A7A  3C3C 0003               1435          MOVE.W  #3, D6              * Prep lower value for bitmask
00001A7E  3E3C 0005               1436          MOVE.W  #5, D7              * Prep upper value for bitmask
00001A82  6100 0D02               1437          BSR     BITMASK             * Finalize bitmask setup
00001A86  CC42                    1438          AND     D2,D6               * Apply bitmask
00001A88                          1439          
00001A88  0C46 0008               1440          CMPI    #%0000000000001000, D6      * Is the mode 001, an unsupported mode for SUB?
00001A8C  6700 0004               1441          BEQ     UNKNOWN1001                 * If so, branch to UNKNOWN100
00001A90                          1442          
00001A90  60A8                    1443          BRA     PRINT1001           * Verified to be valid at this point
00001A92                          1444          
00001A92                          1445  UNKNOWN1001
00001A92  6100 0A88               1446          BSR     UNKNOWNOP           * Unknown op
00001A96                          1447          
00001A96                          1448  DONE1001
00001A96  4C9F 03FF               1449          MOVEM   (A7)+,D0-D7/A0-A1   * Return vales
00001A9A  4E75                    1450          RTS                         * Return to main
00001A9C                          1451  
00001A9C                          1452  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001A9C                          1453  *-----------------------------------------------------------------------------
00001A9C                          1454  
00001A9C                          1455  
00001A9C                          1456  
00001A9C                          1457  *-----------------------------------------------------------------------------
00001A9C                          1458  *-----------------------------------------------------------------------------
00001A9C                          1459  * NAME: OP_1010   ()
00001A9C                          1460  * DESCRIPTION:    a
00001A9C                          1461  * PRE-CONDITION:  b
00001A9C                          1462  * POST-CONDITION: c
00001A9C                          1463  * REGISTERS:      d
00001A9C                          1464  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001A9C                          1465  OP1010
00001A9C                          1466  
00001A9C  6100 0A7E               1467      BSR     UNKNOWNOP
00001AA0  4E75                    1468      RTS
00001AA2                          1469  
00001AA2                          1470  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001AA2                          1471  *-----------------------------------------------------------------------------
00001AA2                          1472  
00001AA2                          1473  
00001AA2                          1474  
00001AA2                          1475  *-----------------------------------------------------------------------------
00001AA2                          1476  *-----------------------------------------------------------------------------
00001AA2                          1477  * NAME: OP_1011   (EOR, CMP)
00001AA2                          1478  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001AA2                          1479  * PRE-CONDITION:  xyz
00001AA2                          1480  * POST-CONDITION: All registers return to their previous state, and the output
00001AA2                          1481  *                 goes to the output console for reading the raw data or the
00001AA2                          1482  *                 actual instruction.
00001AA2                          1483  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001AA2                          1484  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001AA2                          1485  OP1011
00001AA2                          1486  
00001AA2  48A7 FFC0               1487          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
00001AA6                          1488  
00001AA6  3C3C 0006               1489          MOVE.W  #6, D6              * Prep lower value for bitmask
00001AAA  3E3C 0008               1490          MOVE.W  #8, D7              * Prep upper value for bitmask
00001AAE  6100 0CD6               1491          BSR     BITMASK             * Finalize bitmask setup
00001AB2  CC42                    1492          AND     D2,D6               * Apply bitmask
00001AB4                          1493          
00001AB4                          1494          * Check to see if opmode is unsupported for both EOR and CMP
00001AB4  0C46 00C0               1495          CMPI    #%0000000011000000, D6      * Is the OPMODE 011, unsupported by EOR/CMP?
00001AB8  6700 0088               1496          BEQ     UNKNOWN1011                 * If so, the OP is unknown
00001ABC  0C46 01C0               1497          CMPI    #%0000000111000000, D6      * Is the OPMODE 111, unsupported by EOR/CMP?
00001AC0  6700 0080               1498          BEQ     UNKNOWN1011                 * If so, the OP is unknown
00001AC4                          1499          
00001AC4                          1500          * Check to see if it is CMP
00001AC4  0C46 0000               1501          CMPI    #%0000000000000000, D6      * Is the OPMODE 000, a BYTE for CMP?
00001AC8  6700 0038               1502          BEQ     NOTEOR                      * If so, the OP is CMP
00001ACC  0C46 0040               1503          CMPI    #%0000000001000000, D6      * Is the OPMODE 000, a WORD for CMP?
00001AD0  6700 0030               1504          BEQ     NOTEOR                      * If so, the OP is CMP
00001AD4  0C46 0080               1505          CMPI    #%0000000010000000, D6      * Is the OPMODE 000, a LONG for CMP?
00001AD8  6700 0028               1506          BEQ     NOTEOR                      * If so, the OP is CMP
00001ADC                          1507  
00001ADC                          1508          * Check to see EA mode is 001, unsupported by EOR
00001ADC  3C3C 0003               1509          MOVE.W  #3, D6              * Prep lower value for bitmask
00001AE0  3E3C 0005               1510          MOVE.W  #5, D7              * Prep upper value for bitmask
00001AE4  6100 0CA0               1511          BSR     BITMASK             * Finalize bitmask setup
00001AE8  CC42                    1512          AND     D2,D6               * Apply bitmask
00001AEA                          1513          
00001AEA  0C46 0040               1514          CMPI    #%0000000001000000, D6      * Is the mode 001, unsupported for EOR?
00001AEE  6700 0052               1515          BEQ     UNKNOWN1011                 * If so, the op is unknown
00001AF2                          1516          
00001AF2                          1517          * Verified to be EOR at this point
00001AF2  43F9 000027FB           1518          LEA     EOROP,A1            * We found EOR
00001AF8  103C 000E               1519          MOVE.B  #14,D0              * Trap #14 prints out the data
00001AFC  4E4F                    1520          TRAP    #15                 * Perform Trap #14
00001AFE                          1521          
00001AFE  6000 000E               1522          BRA     DISPLAY1011         * Branch to the end of 1011       
00001B02                          1523  
00001B02                          1524  NOTEOR
00001B02  43F9 000027F7           1525          LEA     CMPOP,A1            * We found CMP
00001B08  103C 000E               1526          MOVE.B  #14,D0              * Trap #14 prints out the data
00001B0C  4E4F                    1527          TRAP    #15                 * Perform Trap #14
00001B0E                          1528          
00001B0E                          1529  DISPLAY1011
00001B0E  6100 07B4               1530          BSR     SIZE68
00001B12                          1531          
00001B12  6100 0426               1532          BSR     EAHELPER05
00001B16                          1533          
00001B16  43F9 000028AC           1534          LEA     COMMA,A1            * Formatting
00001B1C  103C 000E               1535          MOVE.B  #14,D0              * Trap #14 prints out the data
00001B20  4E4F                    1536          TRAP    #15                 * Perform Trap #14
00001B22                          1537          
00001B22  0882 0006               1538          BCLR    #6,D2               * Bit manipulation is 
00001B26  0882 0007               1539          BCLR    #7,D2               * necessary in order to make
00001B2A  0882 0008               1540          BCLR    #8,D2               * EAHELPER611 work generically
00001B2E                          1541          
00001B2E  6100 03C8               1542          BSR     EAHELPER611         * Print out EA
00001B32                          1543          
00001B32  43F9 000027EF           1544          LEA     NEWLINE,A1          * Formatting
00001B38  103C 000E               1545          MOVE.B  #14,D0              * Trap #14 prints out the data
00001B3C  4E4F                    1546          TRAP    #15                 * Perform Trap #14
00001B3E                          1547          
00001B3E  6000 0006               1548          BRA     DONE1011            * Branch to end 1011 and move to next op
00001B42                          1549          
00001B42                          1550  UNKNOWN1011
00001B42  6100 09D8               1551          BSR     UNKNOWNOP           * Unknown op
00001B46                          1552                   
00001B46                          1553  DONE1011
00001B46  4C9F 03FF               1554          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
00001B4A  4E75                    1555          RTS                         * Return to main
00001B4C                          1556  
00001B4C                          1557  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001B4C                          1558  *-----------------------------------------------------------------------------
00001B4C                          1559  
00001B4C                          1560  
00001B4C                          1561  
00001B4C                          1562  *-----------------------------------------------------------------------------
00001B4C                          1563  *-----------------------------------------------------------------------------
00001B4C                          1564  * NAME: OP_1100   (MULS)
00001B4C                          1565  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001B4C                          1566  * PRE-CONDITION:  xyz
00001B4C                          1567  * POST-CONDITION: All registers return to their previous state, and the output
00001B4C                          1568  *                 goes to the output console for reading the raw data or the
00001B4C                          1569  *                 actual instruction.
00001B4C                          1570  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001B4C                          1571  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001B4C                          1572  OP1100
00001B4C  48A7 FFC0               1573          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
00001B50                          1574  
00001B50                          1575          * Check if the EA Mode is 001 since MULS does not support it
00001B50  3C3C 0003               1576          MOVE.W  #3, D6              * Prep lower value for bitmask
00001B54  3E3C 0005               1577          MOVE.W  #5, D7              * Prep upper value for bitmask
00001B58  6100 0C2C               1578          BSR     BITMASK             * Finalize bitmask setup
00001B5C  CC42                    1579          AND     D2,D6               * Apply bitmask
00001B5E                          1580          
00001B5E  0C46 0008               1581          CMPI    #%0000000000001000, D6    * Is the mode 001, an unsupported mode?
00001B62  6700 0068               1582          BEQ     UNKNOWN1100               * If so, the op is not supported
00001B66                          1583          
00001B66  3C3C 0006               1584          MOVE.W  #6, D6              * Prep lower value for bitmask
00001B6A  3E3C 0008               1585          MOVE.W  #8, D7              * Prep upper value for bitmask
00001B6E  6100 0C16               1586          BSR     BITMASK             * Finalize bitmask setup
00001B72  CC42                    1587          AND     D2,D6               * Apply bitmask
00001B74                          1588          
00001B74  0C46 01C0               1589          CMPI    #%0000000111000000, D6  * Are we MULS?
00001B78  6600 0052               1590          BNE     UNKNOWN1100             * If not, it is an unknown op
00001B7C                          1591          
00001B7C  43F9 0000282F           1592          LEA     MULSOP,A1           * We found MULS
00001B82  103C 000E               1593          MOVE.B  #14,D0              * Trap #14 prints out the data
00001B86  4E4F                    1594          TRAP    #15                 * Perform Trap #14
00001B88                          1595          
00001B88  43F9 000028A6           1596          LEA     SPACE,A1            * formatting
00001B8E  103C 000E               1597          MOVE.B  #14,D0              * Trap #14 prints out space
00001B92  4E4F                    1598          TRAP    #15                 * Perform Trap #14
00001B94                          1599          
00001B94  4243                    1600          CLR     D3                  * clear D3, it is a parameter
00001B96  08C3 0000               1601          BSET    #0,D3               * of EAHELPER05 to indicate size
00001B9A                          1602          
00001B9A  6100 039E               1603          BSR     EAHELPER05          * Print out data
00001B9E                          1604  
00001B9E  43F9 000028AC           1605          LEA     COMMA,A1            * formatting
00001BA4  103C 000E               1606          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001BA8  4E4F                    1607          TRAP    #15                 * Perform Trap #14
00001BAA                          1608          
00001BAA  0882 0006               1609          BCLR    #6,D2               * Bit manipulation is 
00001BAE  0882 0007               1610          BCLR    #7,D2               * necessary in order to make
00001BB2  0882 0008               1611          BCLR    #8,D2               * EAHELPER611 work generically
00001BB6                          1612          
00001BB6  6100 0340               1613          BSR     EAHELPER611         * Print out EA
00001BBA                          1614  
00001BBA  43F9 000027EF           1615          LEA     NEWLINE,A1          * Formatting
00001BC0  103C 000E               1616          MOVE.B  #14,D0              * Trap #14 prints out the data
00001BC4  4E4F                    1617          TRAP    #15                 * Perform Trap #14
00001BC6                          1618          
00001BC6  4C9F 03FF               1619          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
00001BCA  4E75                    1620          RTS                         * Return to main
00001BCC                          1621          
00001BCC                          1622  UNKNOWN1100
00001BCC  6100 094E               1623          BSR     UNKNOWNOP
00001BD0                          1624       
00001BD0  4C9F 03FF               1625          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
00001BD4  4E75                    1626          RTS                         * Return to main
00001BD6                          1627          
00001BD6                          1628  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001BD6                          1629  *-----------------------------------------------------------------------------
00001BD6                          1630  
00001BD6                          1631  
00001BD6                          1632  
00001BD6                          1633  
00001BD6                          1634  
00001BD6                          1635  
00001BD6                          1636  *-----------------------------------------------------------------------------
00001BD6                          1637  *-----------------------------------------------------------------------------
00001BD6                          1638  * NAME: OP_1101   (ADD, ADDA)
00001BD6                          1639  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001BD6                          1640  * PRE-CONDITION:  xyz
00001BD6                          1641  * POST-CONDITION: All registers return to their previous state, and the output
00001BD6                          1642  *                 goes to the output console for reading the raw data or the
00001BD6                          1643  *                 actual instruction.
00001BD6                          1644  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001BD6                          1645  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001BD6                          1646  OP1101
00001BD6  48E7 FFFE               1647          MOVEM.L A0-A6/D0-D7,-(A7)
00001BDA                          1648          
00001BDA  3C3C 0006               1649          MOVE.W  #6, D6              * Prep lower value for bitmask
00001BDE  3E3C 0008               1650          MOVE.W  #8, D7              * Prep upper value for bitmask
00001BE2  6100 0BA2               1651          BSR     BITMASK             * Finalize bitmask setup
00001BE6  CC42                    1652          AND     D2,D6               * Apply bitmask
00001BE8  EC4E                    1653          LSR     #6,D6
00001BEA                          1654  
00001BEA  0C06 0000               1655          CMPI.B  #%0000000000000000,D6
00001BEE  6700 003E               1656          BEQ     BYTE_EA_DN
00001BF2                          1657  
00001BF2  0C06 0001               1658          CMPI.B  #%0000000000000001,D6
00001BF6  6700 004E               1659          BEQ     WORD_EA_DN
00001BFA                          1660  
00001BFA  0C06 0002               1661          CMPI.B  #%0000000000000010,D6
00001BFE  6700 005E               1662          BEQ     LONG_EA_DN
00001C02                          1663  
00001C02  0C06 0003               1664          CMPI.B  #%0000000000000011,D6
00001C06  6700 006E               1665          BEQ     ADDA_WORD_OP
00001C0A                          1666  
00001C0A  0C06 0004               1667          CMPI.B  #%0000000000000100,D6
00001C0E  6700 0086               1668          BEQ     BYTE_DN_EA
00001C12                          1669  
00001C12  0C06 0005               1670          CMPI.B  #%0000000000000101,D6
00001C16  6700 0096               1671          BEQ     WORD_DN_EA
00001C1A                          1672  
00001C1A  0C06 0006               1673          CMPI.B  #%0000000000000110,D6
00001C1E  6700 00A6               1674          BEQ     LONG_DN_EA
00001C22                          1675  
00001C22  0C06 0007               1676          CMPI.B  #%0000000000000111,D6
00001C26  6700 00B6               1677          BEQ     ADDA_LONG_OP
00001C2A                          1678  
00001C2A  6000 011E               1679          BRA     ADD_ADDA_END
00001C2E                          1680          
00001C2E                          1681  BYTE_EA_DN
00001C2E  6100 00CE               1682          BSR     ADD_EA_DN_GENERIC       * print out 'ADD' base op name for ADDA too
00001C32                          1683  
00001C32  43F9 000028BA           1684          LEA     __B,A1                  * print out size
00001C38  103C 000E               1685          MOVE.B  #14,D0
00001C3C  4E4F                    1686          TRAP    #15
00001C3E                          1687  
00001C3E  6100 00CC               1688          BSR     ADD_ADDA_SPACE          * print out space
00001C42  6000 00EE               1689          BRA     ADD_ADDA_PRINT
00001C46                          1690  
00001C46                          1691  WORD_EA_DN
00001C46  6100 00B6               1692          BSR     ADD_EA_DN_GENERIC
00001C4A                          1693  
00001C4A  43F9 000028BE           1694          LEA     __W,A1
00001C50  103C 000E               1695          MOVE.B  #14,D0
00001C54  4E4F                    1696          TRAP    #15
00001C56                          1697          
00001C56  6100 00B4               1698          BSR     ADD_ADDA_SPACE
00001C5A  6000 00D6               1699          BRA     ADD_ADDA_PRINT
00001C5E                          1700          
00001C5E                          1701  LONG_EA_DN
00001C5E  6100 009E               1702          BSR     ADD_EA_DN_GENERIC
00001C62                          1703  
00001C62  43F9 000028C2           1704          LEA     __L,A1
00001C68  103C 000E               1705          MOVE.B  #14,D0
00001C6C  4E4F                    1706          TRAP    #15
00001C6E                          1707  
00001C6E  6100 009C               1708          BSR     ADD_ADDA_SPACE
00001C72  6000 00BE               1709          BRA     ADD_ADDA_PRINT
00001C76                          1710          
00001C76                          1711  ADDA_WORD_OP
00001C76  6100 0086               1712          BSR     ADD_EA_DN_GENERIC
00001C7A                          1713  
00001C7A  43F9 0000289A           1714          LEA     ASCII_A,A1
00001C80  103C 000E               1715          MOVE.B  #14,D0
00001C84  4E4F                    1716          TRAP    #15
00001C86                          1717  
00001C86  43F9 000028BE           1718          LEA     __W,A1
00001C8C  103C 000E               1719          MOVE.B  #14,D0
00001C90  4E4F                    1720          TRAP    #15
00001C92                          1721          
00001C92  6000 0086               1722          BRA     ADDA_PRT
00001C96                          1723          
00001C96                          1724  BYTE_DN_EA
00001C96  6100 0066               1725          BSR     ADD_EA_DN_GENERIC
00001C9A                          1726          
00001C9A  43F9 000028BA           1727          LEA     __B,A1
00001CA0  103C 000E               1728          MOVE.B  #14,D0
00001CA4  4E4F                    1729          TRAP    #15
00001CA6                          1730          
00001CA6  6100 0064               1731          BSR     ADD_ADDA_SPACE
00001CAA  6000 0086               1732          BRA     ADD_ADDA_PRINT
00001CAE                          1733  
00001CAE                          1734  WORD_DN_EA
00001CAE  6100 004E               1735          BSR     ADD_EA_DN_GENERIC
00001CB2                          1736  
00001CB2  43F9 000028BE           1737          LEA     __W,A1
00001CB8  103C 000E               1738          MOVE.B  #14,D0
00001CBC  4E4F                    1739          TRAP    #15 
00001CBE                          1740  
00001CBE  6100 004C               1741          BSR     ADD_ADDA_SPACE
00001CC2  6000 006E               1742          BRA     ADD_ADDA_PRINT
00001CC6                          1743  
00001CC6                          1744  LONG_DN_EA
00001CC6  6100 0036               1745          BSR     ADD_EA_DN_GENERIC
00001CCA                          1746          
00001CCA  43F9 000028C2           1747          LEA     __L,A1
00001CD0  103C 000E               1748          MOVE.B  #14,D0
00001CD4  4E4F                    1749          TRAP    #15     
00001CD6                          1750          
00001CD6  6100 0034               1751          BSR     ADD_ADDA_SPACE
00001CDA  6000 0056               1752          BRA     ADD_ADDA_PRINT
00001CDE                          1753  
00001CDE                          1754  ADDA_LONG_OP
00001CDE  6100 001E               1755          BSR     ADD_EA_DN_GENERIC
00001CE2                          1756          
00001CE2  43F9 0000289A           1757          LEA     ASCII_A,A1
00001CE8  103C 000E               1758          MOVE.B  #14,D0
00001CEC  4E4F                    1759          TRAP    #15
00001CEE                          1760          
00001CEE  43F9 000028C2           1761          LEA     __L,A1
00001CF4  103C 000E               1762          MOVE.B  #14,D0
00001CF8  4E4F                    1763          TRAP    #15
00001CFA                          1764          
00001CFA  6000 001E               1765          BRA     ADDA_PRT
00001CFE                          1766          
00001CFE                          1767  ADD_EA_DN_GENERIC
00001CFE  43F9 00002882           1768          LEA     OP_ADD_MSG,A1           * print out 'ADD'
00001D04  103C 000E               1769          MOVE.B  #14,D0
00001D08  4E4F                    1770          TRAP    #15
00001D0A  4E75                    1771          RTS
00001D0C                          1772          
00001D0C                          1773  ADD_ADDA_SPACE
00001D0C  43F9 000028A6           1774          LEA     SPACE,A1
00001D12  103C 000E               1775          MOVE.B  #14,D0
00001D16  4E4F                    1776          TRAP    #15
00001D18  4E75                    1777          RTS
00001D1A                          1778  
00001D1A                          1779  ADDA_PRT
00001D1A  6100 0364               1780          BSR     MODE_DN
00001D1E  43F9 000028AC           1781          LEA     COMMA,A1
00001D24  103C 000E               1782          MOVE.B  #14,D0
00001D28  4E4F                    1783          TRAP    #15
00001D2A  6100 0454               1784          BSR     MODE_AN
00001D2E  6000 001A               1785          BRA     ADD_ADDA_END
00001D32                          1786  
00001D32                          1787  ADD_ADDA_PRINT
00001D32                          1788  
00001D32  6100 0206               1789          BSR     EAHELPER05          * Print out data. TODO: DOESN'T WORK.
00001D36                          1790  
00001D36  43F9 000028AC           1791          LEA     COMMA,A1            * formatting
00001D3C  103C 000E               1792          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001D40  4E4F                    1793          TRAP    #15                 * Perform Trap #14
00001D42                          1794          
00001D42  6100 01B4               1795          BSR     EAHELPER611
00001D46  6000 0002               1796          BRA     ADD_ADDA_END
00001D4A                          1797          
00001D4A                          1798  ADD_ADDA_END
00001D4A  43F9 000027EF           1799          LEA     NEWLINE,A1
00001D50  103C 000E               1800          MOVE.B  #14,D0
00001D54  4E4F                    1801          TRAP    #15
00001D56                          1802          
00001D56  4CDF 7FFF               1803          MOVEM.L (A7)+,A0-A6/D0-D7
00001D5A  4E75                    1804          RTS
00001D5C                          1805  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001D5C                          1806  *-----------------------------------------------------------------------------
00001D5C                          1807  
00001D5C                          1808  
00001D5C                          1809  
00001D5C                          1810  *-----------------------------------------------------------------------------
00001D5C                          1811  *-----------------------------------------------------------------------------
00001D5C                          1812  * NAME: OP_1110   (LSL, LSR, ASL, ASR, ROL, ROR)
00001D5C                          1813  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001D5C                          1814  * PRE-CONDITION:  xyz
00001D5C                          1815  * POST-CONDITION: All registers return to their previous state, and the output
00001D5C                          1816  *                 goes to the output console for reading the raw data or the
00001D5C                          1817  *                 actual instruction.
00001D5C                          1818  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001D5C                          1819  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001D5C                          1820  OP1110
00001D5C                          1821  
00001D5C  48A7 FFC0               1822      MOVEM   D0-D7/A0-A1,-(A7)   * Caller saved
00001D60                          1823  
00001D60  7C03                    1824      MOVE.L  #3,D6
00001D62  7E04                    1825      MOVE.L  #4,D7
00001D64                          1826      
00001D64  6100 0A20               1827      BSR     BITMASK * generate a bitmask for the 3 and 4 bits
00001D68                          1828      
00001D68  CC82                    1829      AND.L   D2,D6
00001D6A                          1830      
00001D6A  0C46 0008               1831      CMPI    #%0000000000001000,D6 *is it a logical shift
00001D6E  6700 001A               1832      BEQ     LS
00001D72                          1833      
00001D72  0C46 0000               1834      CMPI    #%0000000000000000,D6 *is it an arithmatic shift
00001D76  6700 0048               1835      BEQ     AS
00001D7A                          1836      
00001D7A  0C46 0018               1837      CMPI    #%0000000000011000,D6 *is it a rorate?
00001D7E  6700 0076               1838      BEQ     RO
00001D82                          1839  
00001D82  6100 0798               1840      BSR     UNKNOWNOP *if nothing above, we don't know what it is
00001D86  6000 0158               1841      BRA     ENDOP1110
00001D8A                          1842      
00001D8A                          1843  LS
00001D8A  7C08                    1844      MOVE.L  #8,D6
00001D8C  7E08                    1845      MOVE.L  #8,D7
00001D8E                          1846      
00001D8E  6100 09F6               1847      BSR     BITMASK
00001D92                          1848      
00001D92  CC82                    1849      AND.L   D2,D6
00001D94                          1850      
00001D94  0C46 0000               1851      CMPI    #0,D6 * is it a left shift?
00001D98  6700 0016               1852      BEQ     LSR
00001D9C                          1853      
00001D9C  6000 0002               1854      BRA     LSL * if not a left shift, must be right
00001DA0                          1855  
00001DA0                          1856  LSL
00001DA0                          1857  
00001DA0  43F9 00002840           1858      LEA     LSLOP,A1            * formatting
00001DA6  103C 000E               1859      MOVE.B  #14,D0              * Trap #14 prints out LSL
00001DAA  4E4F                    1860      TRAP    #15                 * Perform Trap #14
00001DAC                          1861      
00001DAC  6000 007E               1862      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001DB0                          1863                                  * prints the registers and imm data
00001DB0                          1864  LSR
00001DB0                          1865  
00001DB0  43F9 00002844           1866      LEA     LSROP,A1            * formatting
00001DB6  103C 000E               1867      MOVE.B  #14,D0              * Trap #14 prints out LSR
00001DBA  4E4F                    1868      TRAP    #15                 * Perform Trap #14
00001DBC                          1869      
00001DBC  6000 006E               1870      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001DC0                          1871                                  * prints the registers and imm data
00001DC0                          1872  
00001DC0                          1873  AS
00001DC0  7C08                    1874      MOVE.L  #8,D6
00001DC2  7E08                    1875      MOVE.L  #8,D7
00001DC4                          1876      
00001DC4  6100 09C0               1877      BSR     BITMASK
00001DC8                          1878      
00001DC8  CC82                    1879      AND.L   D2,D6
00001DCA                          1880      
00001DCA  0C46 0000               1881      CMPI    #0,D6 * is it a left shift?
00001DCE  6700 0016               1882      BEQ     ASR
00001DD2                          1883      
00001DD2  6000 0002               1884      BRA     ASL * if not a left shift, must be right
00001DD6                          1885      
00001DD6                          1886  ASL
00001DD6                          1887  
00001DD6  43F9 00002848           1888      LEA     ASLOP,A1            * formatting
00001DDC  103C 000E               1889      MOVE.B  #14,D0              * Trap #14 prints out ASL
00001DE0  4E4F                    1890      TRAP    #15                 * Perform Trap #14
00001DE2                          1891      
00001DE2  6000 0048               1892      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001DE6                          1893                                  * prints the registers and imm data
00001DE6                          1894  ASR
00001DE6                          1895  
00001DE6  43F9 0000284C           1896      LEA     ASROP,A1            * formatting
00001DEC  103C 000E               1897      MOVE.B  #14,D0              * Trap #14 prints out ASR
00001DF0  4E4F                    1898      TRAP    #15                 * Perform Trap #14
00001DF2                          1899      
00001DF2  6000 0038               1900      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001DF6                          1901                                  * prints the registers and imm data
00001DF6                          1902  RO
00001DF6  7C08                    1903      MOVE.L  #8,D6
00001DF8  7E08                    1904      MOVE.L  #8,D7
00001DFA                          1905      
00001DFA  6100 098A               1906      BSR     BITMASK
00001DFE                          1907      
00001DFE  CC82                    1908      AND.L   D2,D6
00001E00                          1909      
00001E00  0C46 0000               1910      CMPI    #0,D6 * is it a left shift?
00001E04  6700 0016               1911      BEQ     ROR
00001E08                          1912      
00001E08  6000 0002               1913      BRA     ROL * if not a left shift, must be right
00001E0C                          1914  
00001E0C                          1915  ROL
00001E0C                          1916  
00001E0C  43F9 00002850           1917      LEA     ROLOP,A1            * formatting
00001E12  103C 000E               1918      MOVE.B  #14,D0              * Trap #14 prints out ROL
00001E16  4E4F                    1919      TRAP    #15                 * Perform Trap #14
00001E18                          1920      
00001E18  6000 0012               1921      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001E1C                          1922                                  * prints the registers and imm data
00001E1C                          1923  ROR
00001E1C                          1924  
00001E1C  43F9 00002854           1925      LEA     ROROP,A1            * formatting
00001E22  103C 000E               1926      MOVE.B  #14,D0              * Trap #14 prints out ROR
00001E26  4E4F                    1927      TRAP    #15                 * Perform Trap #14
00001E28                          1928      
00001E28  6000 0002               1929      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001E2C                          1930                                  * prints the registers and imm data
00001E2C                          1931  
00001E2C                          1932  OP1110GENERIC
00001E2C                          1933  
00001E2C  6100 0452               1934      BSR     SIZE67
00001E30                          1935      
00001E30  7C05                    1936      MOVE.L  #5,D6
00001E32  7E05                    1937      MOVE.L  #5,D7
00001E34                          1938      
00001E34  6100 0950               1939      BSR     BITMASK
00001E38                          1940      
00001E38  CC82                    1941      AND.L   D2,D6
00001E3A                          1942      
00001E3A  0C46 0020               1943      CMPI    #%0000000000100000,D6   *is it a data reg?
00001E3E  6700 0074               1944      BEQ     OP1110DATAREG
00001E42                          1945      
00001E42  43F9 000028AA           1946      LEA     IMD,A1              * formatting
00001E48  103C 000E               1947      MOVE.B  #14,D0              * Trap #14 prints out pound #
00001E4C  4E4F                    1948      TRAP    #15                 * Perform Trap #14
00001E4E                          1949      
00001E4E  7C09                    1950      MOVE.L  #9,D6
00001E50  7E0B                    1951      MOVE.L  #11,D7
00001E52                          1952      
00001E52  6100 0932               1953      BSR     BITMASK
00001E56                          1954      
00001E56  CC82                    1955      AND.L   D2,D6
00001E58                          1956      
00001E58  0C46 0000               1957      CMPI    #0,D6 * special case, if zero print #8 not #0
00001E5C  6700 002E               1958      BEQ     OP1110IMMEIGHT
00001E60                          1959      
00001E60  E08E                    1960      LSR.L   #8,D6
00001E62  E28E                    1961      LSR.L   #1,D6
00001E64                          1962      
00001E64  2206                    1963      MOVE.L  D6,D1              * formatting
00001E66  103C 0003               1964      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001E6A  4E4F                    1965      TRAP    #15                * Perform Trap #14
00001E6C                          1966      
00001E6C  43F9 000028AC           1967      LEA     COMMA,A1            * formatting
00001E72  103C 000E               1968      MOVE.B  #14,D0              * Trap #14 prints out comma
00001E76  4E4F                    1969      TRAP    #15                 * Perform Trap #1
00001E78                          1970      
00001E78                          1971      * in order to use the eahlpers, we need to do some bit manipulation
00001E78                          1972      * clearing the bits below lets our helper know that the mode is Dn
00001E78  0882 0003               1973      BCLR    #3,D2
00001E7C  0882 0004               1974      BCLR    #4,D2
00001E80  0882 0005               1975      BCLR    #5,D2
00001E84                          1976      
00001E84  6100 00B4               1977      BSR     EAHELPER05
00001E88                          1978      
00001E88  6000 0056               1979      BRA     ENDOP1110
00001E8C                          1980      
00001E8C                          1981  OP1110IMMEIGHT
00001E8C                          1982  
00001E8C  7208                    1983      MOVE.L  #8,D1              * formatting
00001E8E  103C 0003               1984      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001E92  4E4F                    1985      TRAP    #15                * Perform Trap #14
00001E94                          1986      
00001E94  43F9 000028AC           1987      LEA     COMMA,A1            * formatting
00001E9A  103C 000E               1988      MOVE.B  #14,D0              * Trap #14 prints out comma
00001E9E  4E4F                    1989      TRAP    #15                 * Perform Trap #1
00001EA0                          1990      
00001EA0                          1991      * in order to use the eahlpers, we need to do some bit manipulation
00001EA0                          1992      * clearing the bits below lets our helper know that the mode is Dn
00001EA0  0882 0003               1993      BCLR    #3,D2
00001EA4  0882 0004               1994      BCLR    #4,D2
00001EA8  0882 0005               1995      BCLR    #5,D2
00001EAC                          1996      
00001EAC  6100 008C               1997      BSR     EAHELPER05
00001EB0                          1998      
00001EB0  6000 002E               1999      BRA     ENDOP1110
00001EB4                          2000  
00001EB4                          2001  OP1110DATAREG
00001EB4                          2002  
00001EB4                          2003      * in order to use the eahlpers, we need to do some bit manipulation
00001EB4                          2004      * clearing the bits below lets our helper know that the mode is Dn
00001EB4  0882 0003               2005      BCLR    #3,D2
00001EB8  0882 0004               2006      BCLR    #4,D2
00001EBC  0882 0005               2007      BCLR    #5,D2
00001EC0  0882 0006               2008      BCLR    #6,D2
00001EC4  0882 0007               2009      BCLR    #7,D2
00001EC8  0882 0008               2010      BCLR    #8,D2
00001ECC                          2011      
00001ECC  6100 002A               2012      BSR     EAHELPER611
00001ED0                          2013      
00001ED0  43F9 000028AC           2014      LEA     COMMA,A1            * formatting
00001ED6  103C 000E               2015      MOVE.B  #14,D0              * Trap #14 prints out comma
00001EDA  4E4F                    2016      TRAP    #15                 * Perform Trap #14
00001EDC                          2017      
00001EDC  6100 005C               2018      BSR     EAHELPER05
00001EE0                          2019  
00001EE0                          2020  ENDOP1110
00001EE0                          2021  
00001EE0  43F9 000027EF           2022      LEA     NEWLINE,A1          * formatting
00001EE6  103C 000E               2023      MOVE.B  #14,D0              * Trap #14 prints out a new line
00001EEA  4E4F                    2024      TRAP    #15                 * Perform Trap #14
00001EEC                          2025      
00001EEC  4C9F 03FF               2026      MOVEM   (A7)+,D0-D7/A0-A1   * Caller saved
00001EF0  4E75                    2027      RTS
00001EF2                          2028  
00001EF2                          2029  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001EF2                          2030  *-----------------------------------------------------------------------------
00001EF2                          2031  
00001EF2                          2032  
00001EF2                          2033  
00001EF2                          2034  *-----------------------------------------------------------------------------
00001EF2                          2035  *-----------------------------------------------------------------------------
00001EF2                          2036  * NAME: OP_1111   ()
00001EF2                          2037  * DESCRIPTION:    a
00001EF2                          2038  * PRE-CONDITION:  b
00001EF2                          2039  * POST-CONDITION: c
00001EF2                          2040  * REGISTERS:      d
00001EF2                          2041  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001EF2                          2042  OP1111
00001EF2                          2043  
00001EF2  6100 0628               2044      BSR     UNKNOWNOP
00001EF6  4E75                    2045      RTS
00001EF8                          2046  
00001EF8                          2047  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001EF8                          2048  *-----------------------------------------------------------------------------
00001EF8                          2049  
00001EF8                          2050  
00001EF8                          2051  
00001EF8                          2052  *-----------------------------------------------------------------------------
00001EF8                          2053  *-----------------------------------------------------------------------------
00001EF8                          2054  * NAME:           EAHELPER611
00001EF8                          2055  * DESCRIPTION:    a
00001EF8                          2056  * PRE-CONDITION:  D2 contains the instruction to print modes for.
00001EF8                          2057  *                 D5 contains the size of the data to be printed
00001EF8                          2058  * POST-CONDITION: Determines if mode is direct, if it's not, passes D2 to 
00001EF8                          2059  *                 EAHELPER05 to print.
00001EF8                          2060  * REGISTERS:      a
00001EF8                          2061  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001EF8                          2062  EAHELPER611
00001EF8  48A7 FFC0               2063      MOVEM  D0-D7/A0-A1,-(A7)    * Push values onto stack
00001EFC                          2064      
00001EFC  3C3C 0006               2065      MOVE.W  #6, D6              * Prep lower value for bitmask
00001F00  3E3C 0008               2066      MOVE.W  #8, D7              * Prep upper value for bitmask
00001F04  6100 0880               2067      BSR     BITMASK             * Finalize bitmask setup
00001F08  CC42                    2068      AND     D2,D6               * Apply bitmask
00001F0A                          2069      
00001F0A                          2070      * to move the mode where EAHELPER50 can process it
00001F0A  7C06                    2071      MOVE.L  #6,D6       * Prep lower value of bitmask
00001F0C  7E08                    2072      MOVE.L  #8,D7       * Prep upper value of bitmask
00001F0E  6100 0876               2073      BSR     BITMASK     * Create bitmask
00001F12  CC42                    2074      AND     D2,D6       * Apply bitmask
00001F14                          2075      
00001F14  4243                    2076      CLR     D3      * prep D3 to store values
00001F16  3606                    2077      MOVE.W  D6,D3   * store bitmasked value in D3
00001F18  E64B                    2078      LSR     #3,D3   * move bits 6-8 to 3-5
00001F1A                          2079      
00001F1A                          2080      * to move the register where EAHELPER50 can process it
00001F1A  7C09                    2081      MOVE.L  #9,D6   * Prep lower value for bitmask
00001F1C  7E0B                    2082      MOVE.L  #11,D7  * Prep upper value for bitmask
00001F1E  6100 0866               2083      BSR     BITMASK * create bitmask
00001F22  CC42                    2084      AND     D2,D6   * apply bitmask
00001F24                          2085      
00001F24  4244                    2086      CLR     D4      * prep D3 to store values
00001F26  3806                    2087      MOVE.W  D6,D4   * store bitmasked value in D3
00001F28                          2088      
00001F28  E04C                    2089      LSR     #8,D4   * move bits 9-11 to 0-2
00001F2A  E24C                    2090      LSR     #1,D4   * move bits 9-11 to 0-2
00001F2C                          2091    
00001F2C  8684                    2092      OR.L    D4,D3   * combind the register and mode
00001F2E  2403                    2093      MOVE.L  D3,D2   * put the result in D2 so EAHELPER05 can process it
00001F30                          2094      
00001F30  6100 0008               2095      BSR     EAHELPER05
00001F34                          2096      
00001F34                          2097  ENDEAHELPER611
00001F34                          2098      
00001F34  4C9F 03FF               2099      MOVEM  (A7)+,D0-D7/A0-A1    * Revert back
00001F38  4E75                    2100      RTS
00001F3A                          2101  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001F3A                          2102  *-----------------------------------------------------------------------------
00001F3A                          2103  
00001F3A                          2104  
00001F3A                          2105  
00001F3A                          2106  *-----------------------------------------------------------------------------
00001F3A                          2107  *-----------------------------------------------------------------------------
00001F3A                          2108  * NAME:           EAHELPER05
00001F3A                          2109  * DESCRIPTION:    a
00001F3A                          2110  * PRE-CONDITION:  D2 contains the instruction to print modes for. Only call
00001F3A                          2111  *                 this sub-routine helper for operations that only have one
00001F3A                          2112  *                 mode register.
00001F3A                          2113  *                 D3 contains the size of immediate it could be, 1 = byte
00001F3A                          2114  *                 2 = word, 3 = long
00001F3A                          2115  * POST-CONDITION: Determines mode, passes D2 to REGHELPER to print.
00001F3A                          2116  * REGISTERS:      a
00001F3A                          2117  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001F3A                          2118  EAHELPER05
00001F3A                          2119      * todo: add code for printing immediate values
00001F3A                          2120      
00001F3A  48A7 FFC0               2121      MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001F3E                          2122      
00001F3E  7C03                    2123      MOVE.L  #3,D6
00001F40  7E05                    2124      MOVE.L  #5,D7
00001F42                          2125      
00001F42  6100 0842               2126      BSR     BITMASK * generate a bitmask to identify the mode
00001F46                          2127      
00001F46  CC42                    2128      AND     D2,D6   * mask off the parts of D2 we don't need
00001F48                          2129      
00001F48  2A06                    2130      MOVE.L  D6,D5   * store the 3-5 bitmask for later use
00001F4A                          2131      
00001F4A  0C46 0000               2132      CMPI    #%0000000000000000,D6 * is it data register direct?
00001F4E  6600 000A               2133      BNE     NOTDATAREG
00001F52                          2134      
00001F52  6100 012C               2135      BSR     MODE_DN
00001F56                          2136       
00001F56  6000 0122               2137      BRA     ENDEAHELPER05
00001F5A                          2138      
00001F5A                          2139  NOTDATAREG * address register direct
00001F5A                          2140      
00001F5A  0C46 0008               2141      CMPI    #%0000000000001000,D6 * is it address register direct?
00001F5E  6600 000A               2142      BNE     NOTADRDIRECT
00001F62                          2143      
00001F62  6100 021C               2144      BSR     MODE_AN * simply prints out the address register
00001F66                          2145       
00001F66  6000 0112               2146      BRA     ENDEAHELPER05
00001F6A                          2147      
00001F6A                          2148  NOTADRDIRECT * address register indirect
00001F6A                          2149          
00001F6A  0C46 0010               2150      CMPI    #%0000000000010000,D6 * is it address register indirect?
00001F6E  6600 0022               2151      BNE     NOTADRINDIRECT
00001F72                          2152      
00001F72  43F9 000028AE           2153      LEA     OBRACK,A1       * Load '('
00001F78  303C 000E               2154      MOVE.W  #14,D0          * Trap #14 to display message
00001F7C  4E4F                    2155      TRAP    #15             * Perform #14
00001F7E                          2156          
00001F7E                          2157  
00001F7E  6100 0200               2158      BSR     MODE_AN * print out an address register
00001F82                          2159      
00001F82  43F9 000028B0           2160      LEA     CBRACK,A1       * Load ')'
00001F88  303C 000E               2161      MOVE.W  #14,D0          * Trap #14 to display message
00001F8C  4E4F                    2162      TRAP    #15             * Perform #14
00001F8E                          2163       
00001F8E  6000 00EA               2164      BRA     ENDEAHELPER05
00001F92                          2165      
00001F92                          2166  NOTADRINDIRECT * address register indirect, post increment
00001F92                          2167      
00001F92  0C46 0018               2168      CMPI    #%0000000000011000,D6 * is it address register indirect post increment?
00001F96  6600 002E               2169      BNE     NOTADRINDIRECTPOST
00001F9A                          2170      
00001F9A  43F9 000028AE           2171      LEA     OBRACK,A1       * Load '('
00001FA0  303C 000E               2172      MOVE.W  #14,D0          * Trap #14 to display message
00001FA4  4E4F                    2173      TRAP    #15             * Perform #14
00001FA6                          2174          
00001FA6                          2175  
00001FA6  6100 01D8               2176      BSR     MODE_AN * print out an address register
00001FAA                          2177      
00001FAA  43F9 000028B0           2178      LEA     CBRACK,A1       * Load ')'
00001FB0  303C 000E               2179      MOVE.W  #14,D0          * Trap #14 to display message
00001FB4  4E4F                    2180      TRAP    #15             * Perform #14
00001FB6                          2181      
00001FB6  43F9 000028B2           2182      LEA     PLUS,A1       * Load '+'
00001FBC  303C 000E               2183      MOVE.W  #14,D0          * Trap #14 to display message
00001FC0  4E4F                    2184      TRAP    #15             * Perform #14
00001FC2                          2185       
00001FC2  6000 00B6               2186      BRA     ENDEAHELPER05
00001FC6                          2187      
00001FC6                          2188  NOTADRINDIRECTPOST * address register indirect, pre decrement
00001FC6                          2189      
00001FC6  0C46 0020               2190      CMPI    #%0000000000100000,D6 * is it address register indirect pre decrement?
00001FCA  6600 002E               2191      BNE     NOTADRINDIRECTPRE
00001FCE                          2192      
00001FCE  43F9 000028B4           2193      LEA     MINUS,A1       * Load '-'
00001FD4  303C 000E               2194      MOVE.W  #14,D0          * Trap #14 to display message
00001FD8  4E4F                    2195      TRAP    #15             * Perform #14
00001FDA                          2196      
00001FDA  43F9 000028AE           2197      LEA     OBRACK,A1       * Load '('
00001FE0  303C 000E               2198      MOVE.W  #14,D0          * Trap #14 to display message
00001FE4  4E4F                    2199      TRAP    #15             * Perform #14
00001FE6                          2200          
00001FE6                          2201  
00001FE6  6100 0198               2202      BSR     MODE_AN * print out an address register
00001FEA                          2203      
00001FEA  43F9 000028B0           2204      LEA     CBRACK,A1       * Load ')'
00001FF0  303C 000E               2205      MOVE.W  #14,D0          * Trap #14 to display message
00001FF4  4E4F                    2206      TRAP    #15             * Perform #14
00001FF6                          2207       
00001FF6  6000 0082               2208      BRA     ENDEAHELPER05
00001FFA                          2209  
00001FFA                          2210  NOTADRINDIRECTPRE
00001FFA                          2211  
00001FFA  0C46 0038               2212      CMPI    #%0000000000111000,D6 * is it immediate?
00001FFE  6600 0076               2213      BNE     NOTIMMEDIATE
00002002                          2214  
00002002  0C43 0001               2215      CMPI    #1,D3 * is it a byte?
00002006  6600 0024               2216      BNE     NOTIMMBYTE
0000200A                          2217      
0000200A  43F9 000028AA           2218      LEA     IMD,A1 *print out the '#' indicating an immediate value
00002010  103C 000E               2219      MOVE.B  #14,D0
00002014  4E4F                    2220      TRAP    #15
00002016                          2221      
00002016  7C00                    2222      MOVE.L  #0, D6              * Prep lower value for bitmask
00002018  7E07                    2223      MOVE.L  #7, D7              * Prep upper value for bitmask
0000201A  6100 076A               2224      BSR     BITMASK             * Finalize bitmask setup
0000201E                          2225          
0000201E  321A                    2226      MOVE.W  (A2)+,D1
00002020                          2227      
00002020  C286                    2228      AND.L     D6,D1
00002022                          2229          
00002022  103C 0003               2230      MOVE.B  #3,D0   
00002026  4E4F                    2231      TRAP    #15      * Perform Trap #3
00002028                          2232      
00002028  6000 0050               2233      BRA     ENDEAHELPER05
0000202C                          2234  
0000202C                          2235  NOTIMMBYTE
0000202C                          2236      
0000202C  0C43 0002               2237      CMPI    #2,D3 * is it a word?
00002030  6600 0024               2238      BNE     NOTIMMWORD
00002034                          2239      
00002034  43F9 000028AA           2240      LEA     IMD,A1 *print out the '#' indicating an immediate value
0000203A  103C 000E               2241      MOVE.B  #14,D0
0000203E  4E4F                    2242      TRAP    #15
00002040                          2243      
00002040  7C00                    2244      MOVE.L  #0, D6              * Prep lower value for bitmask
00002042  7E0F                    2245      MOVE.L  #15, D7             * Prep upper value for bitmask
00002044  6100 0740               2246      BSR     BITMASK             * Finalize bitmask setup
00002048                          2247          
00002048  321A                    2248      MOVE.W  (A2)+,D1
0000204A                          2249      
0000204A  C286                    2250      AND.L    D6,D1               * Apply bitmask
0000204C                          2251          
0000204C  103C 0003               2252      MOVE.B  #3,D0   
00002050  4E4F                    2253      TRAP    #15      * Perform Trap #3
00002052                          2254      
00002052  6000 0026               2255      BRA     ENDEAHELPER05
00002056                          2256      
00002056                          2257  NOTIMMWORD
00002056  0C43 0003               2258      CMPI    #3,D3 * is it a long?
0000205A  6600 001A               2259      BNE     NOTIMMEDIATE
0000205E                          2260      
0000205E  43F9 000028AA           2261      LEA     IMD,A1 *print out the '#' indicating an immediate value
00002064  103C 000E               2262      MOVE.B  #14,D0
00002068  4E4F                    2263      TRAP    #15
0000206A                          2264          
0000206A  221A                    2265      MOVE.L  (A2)+,D1
0000206C                          2266          
0000206C  103C 0003               2267      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00002070  4E4F                    2268      TRAP    #15      * Perform Trap #3
00002072                          2269      
00002072  6000 0006               2270      BRA     ENDEAHELPER05
00002076                          2271  
00002076                          2272  NOTIMMEDIATE
00002076  6100 04A4               2273      BSR     UNKNOWNOP
0000207A                          2274      
0000207A                          2275  ENDEAHELPER05
0000207A  4C9F 03FF               2276      MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
0000207E  4E75                    2277      RTS
00002080                          2278  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002080                          2279  *-----------------------------------------------------------------------------
00002080                          2280  
00002080                          2281  
00002080                          2282  
00002080                          2283  *-----------------------------------------------------------------------------
00002080                          2284  *-----------------------------------------------------------------------------
00002080                          2285  * NAME:           MODE_DN
00002080                          2286  * DESCRIPTION:    Generalize the EA part of the project.
00002080                          2287  * PRE-CONDITION:  The mode must have been correctly identified. All modes
00002080                          2288  *                 must be called by RTS.
00002080                          2289  * POST-CONDITION: After the EA, the entire op will head back to the BSR that
00002080                          2290  *                 called it.
00002080                          2291  * REGISTERS:      a
00002080                          2292  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002080                          2293  * ---> Dn
00002080                          2294  MODE_DN
00002080  48A7 FFC0               2295          MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00002084                          2296  
00002084  3C3C 0000               2297          MOVE.W  #0, D6              * Prep lower value for bitmask
00002088  3E3C 0002               2298          MOVE.W  #2, D7              * Prep upper value for bitmask
0000208C  6100 06F8               2299          BSR     BITMASK             * Finalize bitmask setup
00002090  CC42                    2300          AND     D2,D6               * Apply bitmask
00002092                          2301          
00002092  0C46 0000               2302          CMPI    #%000000000000000, D6   * Data Register D0?
00002096  6600 000A               2303          BNE     NOTD0
0000209A                          2304          
0000209A  6100 0074               2305          BSR     PRINTD0
0000209E  6000 006A               2306          BRA     ENDMODE_DN
000020A2                          2307  NOTD0      
000020A2  0C46 0001               2308          CMPI    #%000000000000001, D6   * Data Register D1?
000020A6  6600 000A               2309          BNE     NOTD1
000020AA                          2310          
000020AA  6100 0072               2311          BSR     PRINTD1
000020AE  6000 005A               2312          BRA     ENDMODE_DN
000020B2                          2313  NOTD1
000020B2  0C46 0002               2314          CMPI    #%000000000000010, D6   * Data Register D2?
000020B6  6600 000A               2315          BNE     NOTD2
000020BA                          2316          
000020BA  6100 0070               2317          BSR     PRINTD2
000020BE  6000 004A               2318          BRA     ENDMODE_DN
000020C2                          2319  NOTD2
000020C2  0C46 0003               2320          CMPI    #%000000000000011, D6   * Data Register D3?
000020C6  6600 000A               2321          BNE     NOTD3
000020CA                          2322          
000020CA  6100 006E               2323          BSR     PRINTD3
000020CE  6000 003A               2324          BRA     ENDMODE_DN
000020D2                          2325  NOTD3
000020D2  0C46 0004               2326          CMPI    #%000000000000100, D6   * Data Register D4?
000020D6  6600 000A               2327          BNE     NOTD4
000020DA                          2328          
000020DA  6100 006C               2329          BSR     PRINTD4
000020DE  6000 002A               2330          BRA     ENDMODE_DN
000020E2                          2331  NOTD4
000020E2  0C46 0005               2332          CMPI    #%000000000000101, D6   * Data Register D5?
000020E6  6600 000A               2333          BNE     NOTD5
000020EA                          2334          
000020EA  6100 006A               2335          BSR     PRINTD5
000020EE  6000 001A               2336          BRA     ENDMODE_DN
000020F2                          2337  NOTD5
000020F2  0C46 0006               2338          CMPI    #%000000000000110, D6   * Data Register D6?
000020F6  6600 000A               2339          BNE     NOTD6
000020FA                          2340          
000020FA  6100 0068               2341          BSR     PRINTD6
000020FE  6000 000A               2342          BRA     ENDMODE_DN
00002102                          2343  NOTD6
00002102  6100 006E               2344          BSR     PRINTD7
00002106  6000 0002               2345          BRA     ENDMODE_DN
0000210A                          2346          
0000210A                          2347  ENDMODE_DN
0000210A  4C9F 03FF               2348          MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
0000210E  4E75                    2349          RTS
00002110                          2350  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002110                          2351  *-----------------------------------------------------------------------------
00002110                          2352  
00002110                          2353  
00002110                          2354  
00002110                          2355  *-----------------------------------------------------------------------------
00002110                          2356  *-----------------------------------------------------------------------------
00002110                          2357  * NAME:           PRINTD0
00002110                          2358  * DESCRIPTION:    Simply prints D0, D1, ..., up to D7.
00002110                          2359  * PRE-CONDITION:  a
00002110                          2360  * POST-CONDITION: a
00002110                          2361  * REGISTERS:      a
00002110                          2362  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002110                          2363  PRINTD0
00002110  43F9 000028DE           2364          LEA     __D0, A1        * Load 'D0'
00002116  103C 000E               2365          MOVE.B  #14, D0         * Load Trap #14 to print out
0000211A  4E4F                    2366          TRAP    #15             * Perform Trap #14
0000211C  4E75                    2367          RTS
0000211E                          2368  PRINTD1
0000211E  43F9 000028E1           2369          LEA     __D1, A1        * Load 'D1'
00002124  103C 000E               2370          MOVE.B  #14, D0         * Load Trap #14 to print out
00002128  4E4F                    2371          TRAP    #15             * Perform Trap #14
0000212A  4E75                    2372          RTS      
0000212C                          2373  PRINTD2
0000212C  43F9 000028E4           2374          LEA     __D2, A1        * Load 'D2'
00002132  103C 000E               2375          MOVE.B  #14, D0         * Load Trap #14 to print out
00002136  4E4F                    2376          TRAP    #15             * Perform Trap #14
00002138  4E75                    2377          RTS      
0000213A                          2378  PRINTD3
0000213A  43F9 000028E7           2379          LEA     __D3, A1        * Load 'D3'
00002140  103C 000E               2380          MOVE.B  #14, D0         * Load Trap #14 to print out
00002144  4E4F                    2381          TRAP    #15             * Perform Trap #14
00002146  4E75                    2382          RTS      
00002148                          2383  PRINTD4
00002148  43F9 000028EA           2384          LEA     __D4, A1        * Load 'D4'
0000214E  103C 000E               2385          MOVE.B  #14, D0         * Load Trap #14 to print out
00002152  4E4F                    2386          TRAP    #15             * Perform Trap #14
00002154  4E75                    2387          RTS       
00002156                          2388  PRINTD5
00002156  43F9 000028ED           2389          LEA     __D5, A1        * Load 'D5'
0000215C  103C 000E               2390          MOVE.B  #14, D0         * Load Trap #14 to print out
00002160  4E4F                    2391          TRAP    #15             * Perform Trap #14
00002162  4E75                    2392          RTS      
00002164                          2393  PRINTD6
00002164  43F9 000028F0           2394          LEA     __D6, A1        * Load 'D6'
0000216A  103C 000E               2395          MOVE.B  #14, D0         * Load Trap #14 to print out
0000216E  4E4F                    2396          TRAP    #15             * Perform Trap #14
00002170  4E75                    2397          RTS
00002172                          2398  PRINTD7
00002172  43F9 000028F3           2399          LEA     __D7, A1        * Load 'D7'
00002178  103C 000E               2400          MOVE.B  #14, D0         * Load Trap #14 to print out
0000217C  4E4F                    2401          TRAP    #15             * Perform Trap #14
0000217E  4E75                    2402          RTS
00002180                          2403  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002180                          2404  *-----------------------------------------------------------------------------
00002180                          2405  
00002180                          2406  
00002180                          2407  
00002180                          2408  *-----------------------------------------------------------------------------
00002180                          2409  *-----------------------------------------------------------------------------
00002180                          2410  * NAME:           MODE_AN
00002180                          2411  * DESCRIPTION:    Simply chooses to print A0-A7.
00002180                          2412  * PRE-CONDITION:  a
00002180                          2413  * POST-CONDITION: a
00002180                          2414  * REGISTERS:      a
00002180                          2415  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002180                          2416  MODE_AN
00002180  48A7 FFC0               2417          MOVEM   D0-D7/A0-A1,-(A7)   * Save information
00002184                          2418  
00002184  3C3C 0000               2419          MOVE.W  #0, D6              * Prep lower value for bitmask
00002188  3E3C 0002               2420          MOVE.W  #2, D7              * Prep upper value for bitmask
0000218C  6100 05F8               2421          BSR     BITMASK             * Finalize bitmask setup
00002190  CC42                    2422          AND     D2,D6               * Apply bitmask
00002192                          2423          
00002192  0C46 0000               2424          CMPI    #%000000000000000, D6   * Address Register A0?
00002196  6600 000A               2425          BNE     NOTA0
0000219A                          2426          
0000219A  6100 0074               2427          BSR     PRINTA0
0000219E                          2428          
0000219E  6000 006A               2429          BRA     ENDMODE_AN
000021A2                          2430  NOTA0      
000021A2  0C46 0001               2431          CMPI    #%000000000000001, D6   * Address Register A1?
000021A6  6600 000A               2432          BNE     NOTA1
000021AA                          2433          
000021AA  6100 0072               2434          BSR     PRINTA1
000021AE                          2435          
000021AE  6000 005A               2436          BRA     ENDMODE_AN
000021B2                          2437  NOTA1
000021B2  0C46 0002               2438          CMPI    #%000000000000010, D6   * Address Register A2?
000021B6  6600 000A               2439          BNE     NOTA2
000021BA                          2440          
000021BA  6100 0070               2441          BSR     PRINTA2
000021BE                          2442          
000021BE  6000 004A               2443          BRA     ENDMODE_AN
000021C2                          2444  NOTA2
000021C2  0C46 0003               2445          CMPI    #%000000000000011, D6   * Address Register A3?
000021C6  6600 000A               2446          BNE     NOTA3
000021CA                          2447          
000021CA  6100 006E               2448          BSR     PRINTA3
000021CE                          2449          
000021CE  6000 003A               2450          BRA     ENDMODE_AN
000021D2                          2451  NOTA3
000021D2  0C46 0004               2452          CMPI    #%000000000000100, D6   * Address Register A4?
000021D6  6600 000A               2453          BNE     NOTA4
000021DA                          2454          
000021DA  6100 006C               2455          BSR     PRINTA4
000021DE                          2456          
000021DE  6000 002A               2457          BRA     ENDMODE_AN
000021E2                          2458  NOTA4
000021E2  0C46 0005               2459          CMPI    #%000000000000101, D6   * Address Register A5?
000021E6  6600 000A               2460          BNE     NOTA5
000021EA                          2461          
000021EA  6100 006A               2462          BSR     PRINTA5
000021EE                          2463          
000021EE  6000 001A               2464          BRA     ENDMODE_AN
000021F2                          2465  NOTA5
000021F2  0C46 0006               2466          CMPI    #%000000000000110, D6   * Address Register A6?
000021F6  6600 000A               2467          BNE     NOTA6
000021FA                          2468          
000021FA  6100 0068               2469          BSR     PRINTA6
000021FE                          2470          
000021FE  6000 000A               2471          BRA     ENDMODE_AN
00002202                          2472  NOTA6
00002202  6100 006E               2473          BSR     PRINTA7
00002206                          2474          
00002206  6000 0002               2475          BRA     ENDMODE_AN
0000220A                          2476  ENDMODE_AN
0000220A  4C9F 03FF               2477          MOVEM   (A7)+,D0-D7/A0-A1   * Restore registers
0000220E  4E75                    2478          RTS
00002210                          2479  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002210                          2480  *-----------------------------------------------------------------------------
00002210                          2481  
00002210                          2482  
00002210                          2483  
00002210                          2484  *-----------------------------------------------------------------------------
00002210                          2485  *-----------------------------------------------------------------------------
00002210                          2486  * NAME:           PRINTA0
00002210                          2487  * DESCRIPTION:    Simply print out the address register.
00002210                          2488  * PRE-CONDITION:  a
00002210                          2489  * POST-CONDITION: a
00002210                          2490  * REGISTERS:      a
00002210                          2491  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002210                          2492  PRINTA0
00002210  43F9 000028C6           2493          LEA     __A0, A1        * Load 'A0'
00002216  103C 000E               2494          MOVE.B  #14, D0         * Load Trap #14 to print out
0000221A  4E4F                    2495          TRAP    #15             * Perform Trap #14
0000221C  4E75                    2496          RTS
0000221E                          2497  
0000221E                          2498  PRINTA1
0000221E  43F9 000028C9           2499          LEA     __A1, A1        * Load 'A1'
00002224  103C 000E               2500          MOVE.B  #14, D0         * Load Trap #14 to print out
00002228  4E4F                    2501          TRAP    #15             * Perform Trap #14
0000222A  4E75                    2502          RTS
0000222C                          2503          
0000222C                          2504  PRINTA2
0000222C  43F9 000028CC           2505          LEA     __A2, A1        * Load 'A2'
00002232  103C 000E               2506          MOVE.B  #14, D0         * Load Trap #14 to print out
00002236  4E4F                    2507          TRAP    #15             * Perform Trap #14
00002238  4E75                    2508          RTS
0000223A                          2509  
0000223A                          2510  PRINTA3
0000223A  43F9 000028CF           2511          LEA     __A3, A1        * Load 'A3'
00002240  103C 000E               2512          MOVE.B  #14, D0         * Load Trap #14 to print out
00002244  4E4F                    2513          TRAP    #15             * Perform Trap #14
00002246  4E75                    2514          RTS
00002248                          2515  
00002248                          2516  PRINTA4
00002248  43F9 000028D2           2517          LEA     __A4, A1        * Load 'A4'
0000224E  103C 000E               2518          MOVE.B  #14, D0         * Load Trap #14 to print out
00002252  4E4F                    2519          TRAP    #15             * Perform Trap #14
00002254  4E75                    2520          RTS
00002256                          2521  
00002256                          2522  PRINTA5
00002256  43F9 000028D5           2523          LEA     __A5, A1        * Load 'A5'
0000225C  103C 000E               2524          MOVE.B  #14, D0         * Load Trap #14 to print out
00002260  4E4F                    2525          TRAP    #15             * Perform Trap #14
00002262  4E75                    2526          RTS
00002264                          2527  
00002264                          2528  PRINTA6
00002264  43F9 000028D8           2529          LEA     __A6, A1        * Load 'A6'
0000226A  103C 000E               2530          MOVE.B  #14, D0         * Load Trap #14 to print out
0000226E  4E4F                    2531          TRAP    #15             * Perform Trap #14
00002270  4E75                    2532          RTS
00002272                          2533  
00002272                          2534  PRINTA7
00002272  43F9 000028DB           2535          LEA     __A7, A1        * Load 'A7'
00002278  103C 000E               2536          MOVE.B  #14, D0         * Load Trap #14 to print out
0000227C  4E4F                    2537          TRAP    #15             * Perform Trap #14
0000227E  4E75                    2538          RTS
00002280                          2539  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002280                          2540  *-----------------------------------------------------------------------------
00002280                          2541  
00002280                          2542  
00002280                          2543  
00002280                          2544  *-----------------------------------------------------------------------------
00002280                          2545  *-----------------------------------------------------------------------------
00002280                          2546  * NAME:           SIZE67
00002280                          2547  * DESCRIPTION:    Called if the size is stored in bits 6 to 7.
00002280                          2548  * PRE-CONDITION:  a
00002280                          2549  * POST-CONDITION: a
00002280                          2550  * REGISTERS:      a
00002280                          2551  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002280                          2552  SIZE67
00002280  48A7 FFFE               2553          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
00002284  3C3C 0006               2554          MOVE.W  #6, D6              * Prep lower value for bitmask
00002288  3E3C 0007               2555          MOVE.W  #7, D7              * Prep upper value for bitmask
0000228C  6100 04F8               2556          BSR     BITMASK             * Finalize bitmask setup
00002290  CC42                    2557          AND     D2,D6               * Apply bitmask     
00002292                          2558  
00002292  0C46 0000               2559          CMPI    #%0000000000000000, D6   * is it a BYTE?
00002296  6600 000A               2560          BNE     NOT67BYTE
0000229A                          2561          
0000229A  6100 009C               2562          BSR     PRINTBYTE               * Branch to handle BYTE sizes
0000229E  6000 001E               2563          BRA     END67
000022A2                          2564  NOT67BYTE        
000022A2  0C46 0040               2565          CMPI    #%0000000001000000, D6   * is it a WORD?
000022A6  6600 000A               2566          BNE     NOT67WORD
000022AA                          2567          
000022AA  6100 009A               2568          BSR     PRINTWORD               * Branch to handle WORD sizes
000022AE  6000 000E               2569          BRA     END67
000022B2                          2570  NOT67WORD
000022B2  0C46 0080               2571          CMPI    #%0000000010000000, D6   * is it a LONG?
000022B6  6600 0006               2572          BNE     END67
000022BA                          2573          
000022BA  6100 0098               2574          BSR     PRINTLONG               * Branch to handle LONG sizes
000022BE                          2575  END67
000022BE  4C9F 7FFF               2576          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
000022C2  4E75                    2577          RTS                             * Return. Size handling is finished.
000022C4                          2578  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000022C4                          2579  *-----------------------------------------------------------------------------
000022C4                          2580  
000022C4                          2581  
000022C4                          2582  
000022C4                          2583  *-----------------------------------------------------------------------------
000022C4                          2584  *-----------------------------------------------------------------------------
000022C4                          2585  * NAME:           SIZE68
000022C4                          2586  * DESCRIPTION:    Called if the size is stored in bits 6 to 8.
000022C4                          2587  * PRE-CONDITION:  a
000022C4                          2588  * POST-CONDITION: a
000022C4                          2589  * REGISTERS:      a
000022C4                          2590  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000022C4                          2591  SIZE68
000022C4                          2592  
000022C4  48A7 FFFE               2593          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
000022C8  3C3C 0006               2594          MOVE.W  #6, D6              * Prep lower value for bitmask
000022CC  3E3C 0008               2595          MOVE.W  #8, D7              * Prep upper value for bitmask
000022D0  6100 04B4               2596          BSR     BITMASK             * Finalize bitmask setup
000022D4  CC42                    2597          AND     D2,D6               * Apply bitmask       
000022D6                          2598  
000022D6  0C46 0000               2599          CMPI    #%0000000000000000, D6  * is it a BYTE?
000022DA  6700 003E               2600          BEQ     PRINTBYTE68               * Branch to handle BYTE sizes
000022DE  0C46 0100               2601          CMPI    #%0000000100000000, D6  * is it a BYTE?
000022E2  6700 0036               2602          BEQ     PRINTBYTE68               * Branch to handle BYTE sizes 
000022E6                          2603        
000022E6  0C46 0040               2604          CMPI    #%0000000001000000, D6  * is it a WORD?
000022EA  6700 0036               2605          BEQ     PRINTWORD68               * Branch to handle BYTE sizes
000022EE  0C46 0140               2606          CMPI    #%0000000101000000, D6  * is it a WORD?
000022F2  6700 002E               2607          BEQ     PRINTWORD68               * Branch to handle BYTE sizes
000022F6  0C46 00C0               2608          CMPI    #%0000000011000000, D6  * is it a WORD (ADDA)?
000022FA  6700 0026               2609          BEQ     PRINTWORD68               * Branch to handle BYTE sizes
000022FE                          2610  
000022FE  0C46 0080               2611          CMPI    #%0000000010000000, D6  * is it a LONG?
00002302  6700 0026               2612          BEQ     PRINTLONG68               * Branch to handle BYTE sizes
00002306  0C46 0180               2613          CMPI    #%0000000110000000, D6  * is it a LONG?
0000230A  6700 001E               2614          BEQ     PRINTLONG68               * Branch to handle BYTE sizes
0000230E  0C46 01C0               2615          CMPI    #%0000000111000000, D6  * is it a LONG (ADDA)?
00002312  6700 0016               2616          BEQ     PRINTLONG68               * Branch to handle BYTE sizes
00002316                          2617  
00002316  6000 001A               2618          BRA     END68
0000231A                          2619          
0000231A                          2620  PRINTBYTE68
0000231A  6100 001C               2621          BSR     PRINTBYTE
0000231E  6000 0012               2622          BRA     END68
00002322                          2623  
00002322                          2624  PRINTWORD68
00002322  6100 0022               2625          BSR     PRINTWORD
00002326  6000 000A               2626          BRA     END68
0000232A                          2627          
0000232A                          2628  PRINTLONG68
0000232A  6100 0028               2629          BSR     PRINTLONG
0000232E  6000 0002               2630          BRA     END68
00002332                          2631  
00002332                          2632  END68
00002332  4C9F 7FFF               2633          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
00002336  4E75                    2634          RTS                             * Return. Size handling is finished.
00002338                          2635  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002338                          2636  *-----------------------------------------------------------------------------
00002338                          2637  
00002338                          2638  
00002338                          2639  
00002338                          2640  *-----------------------------------------------------------------------------
00002338                          2641  *-----------------------------------------------------------------------------
00002338                          2642  * NAME:           PRINTBYTE
00002338                          2643  * DESCRIPTION:    a
00002338                          2644  * PRE-CONDITION:  a
00002338                          2645  * POST-CONDITION: a
00002338                          2646  * REGISTERS:      a
00002338                          2647  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002338                          2648  PRINTBYTE
00002338  43F9 000028BA           2649          LEA     __B,A1      * Load '.B ' into A1
0000233E  103C 000E               2650          MOVE.B  #14,D0      * Trap #14 setup to print
00002342  4E4F                    2651          TRAP    #15         * Perform Trap #14
00002344  4E75                    2652          RTS                 * Return to SIZE67/SIZE68
00002346                          2653          
00002346                          2654  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002346                          2655  *-----------------------------------------------------------------------------
00002346                          2656  
00002346                          2657  
00002346                          2658  
00002346                          2659  *-----------------------------------------------------------------------------
00002346                          2660  *-----------------------------------------------------------------------------
00002346                          2661  * NAME:           PRINTWORD
00002346                          2662  * DESCRIPTION:    a
00002346                          2663  * PRE-CONDITION:  a
00002346                          2664  * POST-CONDITION: a
00002346                          2665  * REGISTERS:      a
00002346                          2666  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002346                          2667  PRINTWORD
00002346  43F9 000028BE           2668          LEA     __W,A1      * Load '.W ' into A1
0000234C  103C 000E               2669          MOVE.B  #14,D0      * Trap #14 setup to print
00002350  4E4F                    2670          TRAP    #15         * Perform Trap #14
00002352  4E75                    2671          RTS                 * Return to SIZE67/SIZE68
00002354                          2672          
00002354                          2673  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002354                          2674  *-----------------------------------------------------------------------------
00002354                          2675  
00002354                          2676  
00002354                          2677  
00002354                          2678  *-----------------------------------------------------------------------------
00002354                          2679  *-----------------------------------------------------------------------------
00002354                          2680  * NAME:           PRINTLONG
00002354                          2681  * DESCRIPTION:    a
00002354                          2682  * PRE-CONDITION:  a
00002354                          2683  * POST-CONDITION: a
00002354                          2684  * REGISTERS:      a
00002354                          2685  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002354                          2686  PRINTLONG
00002354  43F9 000028C2           2687          LEA     __L,A1      * Load '.L ' into A1
0000235A  103C 000E               2688          MOVE.B  #14,D0      * Trap #14 setup to print
0000235E  4E4F                    2689          TRAP    #15         * Perform Trap #14
00002360  4E75                    2690          RTS                 * Return to SIZE67/SIZE68
00002362                          2691          
00002362                          2692  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002362                          2693  *-----------------------------------------------------------------------------
00002362                          2694  
00002362                          2695  
00002362                          2696  
00002362                          2697  *-----------------------------------------------------------------------------
00002362                          2698  *-----------------------------------------------------------------------------
00002362                          2699  * NAME:           MOVEMHELPERPOST
00002362                          2700  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
00002362                          2701  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
00002362                          2702  * POST-CONDITION: The registers being saved are printed
00002362                          2703  * REGISTERS:      A2
00002362                          2704  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002362                          2705  MOVEMHELPERPOST
00002362  48A7 FFFE               2706          MOVEM  D0-D7/A0-A6,-(A7)
00002366                          2707          
00002366  4285                    2708          CLR.L   D5  * to be used as a loop counter
00002368  4284                    2709          CLR.L   D4  * == 1 if we have printed any registers (for fencepost issue)
0000236A  4283                    2710          CLR.L   D3  * == 1 if we are in a range
0000236C  4286                    2711          CLR.L   D6  * == 1 if we have already printed the slash or dash
0000236E  4287                    2712          CLR.L   D7  * == counts the number of registers in a range
00002370  1C3C 0001               2713          MOVE.B  #1,D6 * to fix fencepost issue
00002374  4282                    2714          CLR.L   D2
00002376  3412                    2715          MOVE.W  (A2),D2
00002378                          2716          
00002378                          2717  DLOOP * loop to print out the data register portion of the addresses being saved
00002378                          2718  
00002378  E25A                    2719          ROR     #1,D2
0000237A  6500 0006               2720          BCS     DVALID
0000237E                          2721          
0000237E  6000 0064               2722          BRA     DINVALID
00002382                          2723          
00002382                          2724  DVALID
00002382  0C43 0000               2725          CMPI    #0,D3
00002386  6700 0020               2726          BEQ     DFORWARDVALID * we are not in a range
0000238A                          2727          
0000238A  5247                    2728          ADDI    #1,D7 *increment number of regs in range
0000238C                          2729          
0000238C  0C46 0001               2730          CMPI    #1,D6   *have we already printed a symbol?
00002390  6700 0086               2731          BEQ     DLOOPITER
00002394                          2732          
00002394  43F9 000028B8           2733          LEA     DASH,A1    *print a dash
0000239A  103C 000E               2734          MOVE.B  #14,D0
0000239E  4E4F                    2735          TRAP    #15
000023A0                          2736          
000023A0  1C3C 0001               2737          MOVE.B  #1,D6 * indicates a symbol has been printed
000023A4                          2738          
000023A4  6000 0072               2739          BRA     DLOOPITER
000023A8                          2740          
000023A8                          2741  DFORWARDVALID
000023A8                          2742          * not in a range yet, print
000023A8                          2743          
000023A8  0C44 0000               2744          CMPI    #0,D4
000023AC  6700 000E               2745          BEQ     DNOSLASH
000023B0                          2746                  
000023B0  43F9 000028B6           2747          LEA     SLASH,A1
000023B6  103C 000E               2748          MOVE.B  #14,D0
000023BA  4E4F                    2749          TRAP    #15
000023BC                          2750          
000023BC                          2751  DNOSLASH
000023BC                          2752  
000023BC  183C 0001               2753          MOVE.B  #1,D4 * we have printed something, now slashes are fair game
000023C0                          2754          
000023C0  1C3C 0001               2755          MOVE.B  #1,D6   * we have printed a symbol
000023C4                          2756          
000023C4  43F9 000028A0           2757          LEA     ASCII_D,A1
000023CA  103C 000E               2758          MOVE.B  #14,D0
000023CE  4E4F                    2759          TRAP    #15
000023D0                          2760          
000023D0  2205                    2761          MOVE.L  D5,D1
000023D2  103C 0003               2762          MOVE.B  #3,D0
000023D6  4E4F                    2763          TRAP    #15
000023D8                          2764  
000023D8  163C 0001               2765          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
000023DC  1C3C 0000               2766          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
000023E0                          2767          
000023E0  6000 0036               2768          BRA     DLOOPITER
000023E4                          2769  
000023E4                          2770  
000023E4                          2771  DINVALID
000023E4                          2772  
000023E4                          2773          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
000023E4                          2774          
000023E4  0C43 0001               2775          CMPI    #1,D3
000023E8  6600 002E               2776          BNE     DLOOPITER
000023EC                          2777          
000023EC  163C 0000               2778          MOVE.B  #0,D3
000023F0                          2779          
000023F0  0C47 0001               2780          CMPI    #1,D7
000023F4  6D00 0020               2781          BLT     DLOOPITERCLR
000023F8                          2782          
000023F8  43F9 000028A0           2783          LEA     ASCII_D,A1
000023FE  103C 000E               2784          MOVE.B  #14,D0
00002402  4E4F                    2785          TRAP    #15
00002404                          2786          
00002404  2205                    2787          MOVE.L  D5,D1
00002406                          2788          
00002406  0641 FFFF               2789          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
0000240A                          2790          
0000240A  103C 0003               2791          MOVE.B  #3,D0
0000240E  4E4F                    2792          TRAP    #15
00002410                          2793          
00002410  4287                    2794          CLR.L   D7
00002412                          2795          
00002412  6000 0004               2796          BRA     DLOOPITER
00002416                          2797          
00002416                          2798  DLOOPITERCLR        
00002416  4287                    2799          CLR.L   D7
00002418                          2800  
00002418                          2801  DLOOPITER
00002418                          2802          
00002418  0C45 0008               2803          CMPI    #8,D5
0000241C  6700 0008               2804          BEQ     DLOOPDONE
00002420                          2805  
00002420  5245                    2806          ADDI    #1,D5
00002422  6000 FF54               2807          BRA     DLOOP
00002426                          2808  
00002426                          2809  DLOOPDONE
00002426                          2810  
00002426  7A09                    2811          MOVE.L  #9,D5  * to be used as a loop counter
00002428  4283                    2812          CLR.L   D3  * == 1 if we are in a range
0000242A  4286                    2813          CLR.L   D6  * == 1 if we have already printed the slash or dash
0000242C  4287                    2814          CLR.L   D7  * count of registers in a range
0000242E  1C3C 0001               2815          MOVE.B  #1,D6 * to fix fencepost issue     
00002432                          2816  
00002432                          2817  ALOOP * loop to print out the data register portion of the addresses being saved
00002432                          2818  
00002432  E25A                    2819          ROR     #1,D2
00002434  6500 0006               2820          BCS     AVALID
00002438                          2821          
00002438  6000 0068               2822          BRA     AINVALID
0000243C                          2823          
0000243C                          2824  AVALID
0000243C  0C43 0000               2825          CMPI    #0,D3
00002440  6700 0020               2826          BEQ     AFORWARDVALID * we are not in a range
00002444                          2827          
00002444  5247                    2828          ADDI    #1,D7 *increment number of regs in range
00002446                          2829          
00002446  0C46 0001               2830          CMPI    #1,D6   *have we already printed a symbol?
0000244A  6700 008E               2831          BEQ     ALOOPITER
0000244E                          2832          
0000244E  43F9 000028B8           2833          LEA     DASH,A1    *print a dash
00002454  103C 000E               2834          MOVE.B  #14,D0
00002458  4E4F                    2835          TRAP    #15
0000245A                          2836          
0000245A  1C3C 0001               2837          MOVE.B  #1,D6 * indicates a symbol has been printed
0000245E                          2838          
0000245E  6000 007A               2839          BRA     ALOOPITER
00002462                          2840          
00002462                          2841  AFORWARDVALID
00002462                          2842          * not in a range yet, print
00002462                          2843          
00002462                          2844                  
00002462  0C44 0000               2845          CMPI    #0,D4
00002466  6700 000E               2846          BEQ     ANOSLASH
0000246A                          2847                  
0000246A  43F9 000028B6           2848          LEA     SLASH,A1
00002470  103C 000E               2849          MOVE.B  #14,D0
00002474  4E4F                    2850          TRAP    #15
00002476                          2851          
00002476                          2852  ANOSLASH
00002476                          2853  
00002476  183C 0001               2854          MOVE.B  #1,D4   * we have printed something, now slashes are fair game
0000247A                          2855          
0000247A  1C3C 0001               2856          MOVE.B  #1,D6   * we have printed a symbol
0000247E                          2857          
0000247E  43F9 0000289A           2858          LEA     ASCII_A,A1
00002484  103C 000E               2859          MOVE.B  #14,D0
00002488  4E4F                    2860          TRAP    #15
0000248A                          2861          
0000248A  2205                    2862          MOVE.L  D5,D1
0000248C                          2863          
0000248C  0641 FFF8               2864          ADDI    #-8,D1 * it's A, need to adjust by 8
00002490                          2865          
00002490  103C 0003               2866          MOVE.B  #3,D0
00002494  4E4F                    2867          TRAP    #15
00002496                          2868  
00002496  163C 0001               2869          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
0000249A  1C3C 0000               2870          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
0000249E                          2871          
0000249E  6000 003A               2872          BRA     ALOOPITER
000024A2                          2873  
000024A2                          2874  
000024A2                          2875  AINVALID
000024A2                          2876  
000024A2                          2877          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
000024A2                          2878          
000024A2  0C43 0001               2879          CMPI    #1,D3
000024A6  6600 0032               2880          BNE     ALOOPITER
000024AA                          2881          
000024AA  163C 0000               2882          MOVE.B  #0,D3
000024AE                          2883          
000024AE  0C47 0001               2884          CMPI    #1,D7
000024B2  6D00 0024               2885          BLT     ALOOPITERCLR
000024B6                          2886          
000024B6  43F9 0000289A           2887          LEA     ASCII_A,A1
000024BC  103C 000E               2888          MOVE.B  #14,D0
000024C0  4E4F                    2889          TRAP    #15
000024C2                          2890          
000024C2  2205                    2891          MOVE.L  D5,D1
000024C4                          2892          
000024C4  0641 FFFF               2893          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
000024C8  0641 FFF8               2894          ADDI    #-8,D1 * it's A, need to adjust by 8
000024CC                          2895          
000024CC  103C 0003               2896          MOVE.B  #3,D0
000024D0  4E4F                    2897          TRAP    #15
000024D2                          2898          
000024D2  4287                    2899          CLR.L   D7
000024D4                          2900          
000024D4  6000 0004               2901          BRA     ALOOPITER
000024D8                          2902          
000024D8                          2903  ALOOPITERCLR
000024D8                          2904          
000024D8  4287                    2905          CLR.L   D7
000024DA                          2906  
000024DA                          2907  ALOOPITER
000024DA                          2908          
000024DA  0C45 0010               2909          CMPI     #16,D5
000024DE  6700 0008               2910          BEQ     ALOOPDONE
000024E2                          2911  
000024E2  5245                    2912          ADDI    #1,D5
000024E4  6000 FF4C               2913          BRA     ALOOP
000024E8                          2914  
000024E8                          2915  ALOOPDONE
000024E8                          2916          
000024E8  4C9F 7FFF               2917          MOVEM    (A7)+,D0-D7/A0-A6
000024EC  4E75                    2918          RTS
000024EE                          2919  
000024EE                          2920          
000024EE                          2921  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000024EE                          2922  *-----------------------------------------------------------------------------
000024EE                          2923  
000024EE                          2924  
000024EE                          2925  
000024EE                          2926  
000024EE                          2927  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000024EE                          2928  *-----------------------------------------------------------------------------
000024EE                          2929  *-----------------------------------------------------------------------------
000024EE                          2930  * NAME:           MOVEMHELPERPRE
000024EE                          2931  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
000024EE                          2932  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
000024EE                          2933  * POST-CONDITION: The registers being saved are printed
000024EE                          2934  * REGISTERS:      A2
000024EE                          2935  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000024EE                          2936  MOVEMHELPERPRE
000024EE                          2937  
000024EE  48A7 7F00               2938      MOVEM   D1-D7,-(A7)
000024F2                          2939  
000024F2  3412                    2940      MOVE.W  (A2),D2 * move the data we need to proccess into D2
000024F4  7800                    2941      MOVE.L  #0,D4
000024F6  4287                    2942      CLR.L    D7 * put the flipped bits here
000024F8                          2943      
000024F8                          2944      *the following block of code moves bits
000024F8                          2945      *into the same position they would be in if
000024F8                          2946      *the MOVEM was post inc, then simply uses post
000024F8                          2947      *inc to print the registers being saved
000024F8                          2948  PRELOOP
000024F8  E35A                    2949      ROL.W   #1,D2
000024FA                          2950      
000024FA  6500 0006               2951      BCS     PRESETBIT
000024FE  6000 0004               2952      BRA     PRELOOPITER
00002502                          2953      
00002502                          2954  PRESETBIT
00002502  09C7                    2955      BSET    D4,D7
00002504                          2956  
00002504                          2957  PRELOOPITER
00002504  0C44 000F               2958      CMPI    #15,D4
00002508  6700 0006               2959      BEQ     PRELOOPDONE
0000250C                          2960      
0000250C  5244                    2961      ADDI    #1,D4
0000250E  60E8                    2962      BRA     PRELOOP
00002510                          2963  
00002510                          2964  PRELOOPDONE
00002510                          2965  
00002510  3487                    2966      MOVE.W  D7,(A2)    
00002512  4C9F 00FE               2967      MOVEM   (A7)+,D1-D7
00002516                          2968  
00002516  6100 FE4A               2969      BSR MOVEMHELPERPOST
0000251A                          2970  
0000251A  4E75                    2971      RTS
0000251C                          2972  
0000251C                          2973  
0000251C                          2974  
0000251C                          2975          
0000251C                          2976  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000251C                          2977  *-----------------------------------------------------------------------------
0000251C                          2978  
0000251C                          2979  
0000251C                          2980  
0000251C                          2981  *-----------------------------------------------------------------------------
0000251C                          2982  *-----------------------------------------------------------------------------
0000251C                          2983  * NAME:           UNKNOWNOP
0000251C                          2984  * DESCRIPTION:    a
0000251C                          2985  * PRE-CONDITION:  D2 contains the instruction to print. D2 has already been
0000251C                          2986  *                 identified as an unknown operation.
0000251C                          2987  * POST-CONDITION: D2 is no longer the opcode.
0000251C                          2988  * REGISTERS:      a
0000251C                          2989  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000251C                          2990  UNKNOWNOP
0000251C  48A7 FFC0               2991          MOVEM   D0-D7/A0-A1,-(A7)
00002520                          2992          
00002520  43F9 0000285C           2993          LEA     DATA,A1 * load " DATA $" into register A1
00002526  700E                    2994          MOVE.L  #14,D0  * print the string stored in A1
00002528  4E4F                    2995          TRAP    #15
0000252A                          2996          
0000252A  E18A                    2997          LSL.L   #8,D2
0000252C  E18A                    2998          LSL.L   #8,D2
0000252E                          2999          
0000252E  2C42                    3000          MOVE.L  D2,A6
00002530                          3001          
00002530  7604                    3002          MOVE.L  #4,D3
00002532                          3003          
00002532  6100 0012               3004          BSR     PRINT_ASCII_HEX_CHAR
00002536                          3005  
00002536  43F9 000027EF           3006          LEA     NEWLINE,A1 * load newline into register A1
0000253C  700E                    3007          MOVE.L  #14,D0  * print the string stored in A1
0000253E  4E4F                    3008          TRAP    #15
00002540                          3009  
00002540  4C9F 03FF               3010          MOVEM   (A7)+,D0-D7/A0-A1
00002544  4E75                    3011          RTS
00002546                          3012  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002546                          3013  *-----------------------------------------------------------------------------
00002546                          3014  
00002546                          3015  
00002546                          3016  
00002546                          3017  *-----------------------------------------------------------------------------
00002546                          3018  *-----------------------------------------------------------------------------
00002546                          3019  * NAME: Print ASCII hex char
00002546                          3020  * DESCRIPTION:    Prints and address register to console in hex (ASCII chars)
00002546                          3021  * PRE-CONDITION:  A6 contains the register of memory to print.
00002546                          3022  *                 This parameter would be pre-loaded by, for example:
00002546                          3023  *                 "LEA FOO_BAR_ADDR,A6" or "LEA $1234FEED,A6"
00002546                          3024  *                 D3 contains the loops to do (number of nibbles).
00002546                          3025  * POST-CONDITION: 
00002546                          3026  * REGISTERS:      
00002546                          3027  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002546                          3028  PRINT_ASCII_HEX_CHAR
00002546  48E7 FFFC               3029      MOVEM.L     D0-D7/A0-A5,-(A7) * push data to save
0000254A  4285                    3030      CLR.L       D5
0000254C                          3031      
0000254C                          3032      * fence post check (if-statement, check if 0 > chars)
0000254C  0C03 0000               3033      CMPI.B      #0,D3
00002550  6700 017C               3034      BEQ         INVALID_ASCII_INPUT * go to very last part if invalid
00002554                          3035      
00002554                          3036  *    MOVE.L      A6,D4
00002554  2E0E                    3037      MOVE.L      A6,D7
00002556                          3038  PRINT_ASCII_LOOP
00002556                          3039  *    MOVE.L      A6,D7 * increase a6's pointer position ea. loop
00002556                          3040  *    MOVE.L      D4,D7 * make a mutable copy
00002556  E99F                    3041      ROL.L       #4,D7 * roll to next spot
00002558  48E7 0100               3042      MOVEM.L     D7,-(A7) * save D7
0000255C                          3043  
0000255C  0287 0000000F           3044      ANDI.L      #HEX_VALUE_MASK_LONG,D7
00002562                          3045      
00002562  0C87 00000000           3046      CMPI.L      #0,D7
00002568  6D00 0164               3047      BLT         INVALID_ASCII_INPUT
0000256C                          3048  
0000256C  0C87 0000000F           3049      CMPI.L      #15,D7
00002572  6E00 015A               3050      BGT         INVALID_ASCII_INPUT
00002576                          3051  
00002576                          3052      * this might be faster... to do later, after entire assignment done
00002576                          3053       * CMPI.L      #9,D7
00002576                          3054       * BLE         PRINT_ASCII_0_TO_9
00002576                          3055  
00002576  0C87 00000000           3056      CMPI.L      #0,D7
0000257C  6700 0098               3057      BEQ         PRINT_ASCII_0
00002580  0C87 00000001           3058      CMPI.L      #1,D7
00002586  6700 0098               3059      BEQ         PRINT_ASCII_1
0000258A  0C87 00000002           3060      CMPI.L      #2,D7
00002590  6700 0098               3061      BEQ         PRINT_ASCII_2
00002594  0C87 00000003           3062      CMPI.L      #3,D7
0000259A  6700 0098               3063      BEQ         PRINT_ASCII_3
0000259E  0C87 00000004           3064      CMPI.L      #4,D7
000025A4  6700 0098               3065      BEQ         PRINT_ASCII_4
000025A8  0C87 00000005           3066      CMPI.L      #5,D7
000025AE  6700 0098               3067      BEQ         PRINT_ASCII_5
000025B2  0C87 00000006           3068      CMPI.L      #6,D7
000025B8  6700 0098               3069      BEQ         PRINT_ASCII_6
000025BC  0C87 00000007           3070      CMPI.L      #7,D7
000025C2  6700 0098               3071      BEQ         PRINT_ASCII_7
000025C6  0C87 00000008           3072      CMPI.L      #8,D7
000025CC  6700 0098               3073      BEQ         PRINT_ASCII_8
000025D0  0C87 00000009           3074      CMPI.L      #9,D7
000025D6  6700 0098               3075      BEQ         PRINT_ASCII_9
000025DA  0C87 0000000A           3076      CMPI.L      #10,D7
000025E0  6700 0098               3077      BEQ         PRINT_ASCII_A
000025E4  0C87 0000000B           3078      CMPI.L      #11,D7
000025EA  6700 0098               3079      BEQ         PRINT_ASCII_B
000025EE  0C87 0000000C           3080      CMPI.L      #12,D7
000025F4  6700 0098               3081      BEQ         PRINT_ASCII_C
000025F8  0C87 0000000D           3082      CMPI.L      #13,D7
000025FE  6700 0098               3083      BEQ         PRINT_ASCII_D
00002602  0C87 0000000E           3084      CMPI.L      #14,D7
00002608  6700 0098               3085      BEQ         PRINT_ASCII_E
0000260C  0C87 0000000F           3086      CMPI.L      #15,D7
00002612  6700 0098               3087      BEQ         PRINT_ASCII_F
00002616                          3088  PRINT_ASCII_0
00002616  43F9 00002886           3089      LEA         ASCII_0,A1
0000261C  6000 0098               3090      BRA         PRINT_ASCII_CHAR
00002620                          3091  PRINT_ASCII_1
00002620  43F9 00002888           3092      LEA         ASCII_1,A1
00002626  6000 008E               3093      BRA         PRINT_ASCII_CHAR
0000262A                          3094  PRINT_ASCII_2
0000262A  43F9 0000288A           3095      LEA         ASCII_2,A1
00002630  6000 0084               3096      BRA         PRINT_ASCII_CHAR
00002634                          3097  PRINT_ASCII_3
00002634  43F9 0000288C           3098      LEA         ASCII_3,A1
0000263A  6000 007A               3099      BRA         PRINT_ASCII_CHAR
0000263E                          3100  PRINT_ASCII_4
0000263E  43F9 0000288E           3101      LEA         ASCII_4,A1
00002644  6000 0070               3102      BRA         PRINT_ASCII_CHAR
00002648                          3103  PRINT_ASCII_5
00002648  43F9 00002890           3104      LEA         ASCII_5,A1
0000264E  6000 0066               3105      BRA         PRINT_ASCII_CHAR
00002652                          3106  PRINT_ASCII_6
00002652  43F9 00002892           3107      LEA         ASCII_6,A1
00002658  6000 005C               3108      BRA         PRINT_ASCII_CHAR
0000265C                          3109  PRINT_ASCII_7
0000265C  43F9 00002894           3110      LEA         ASCII_7,A1
00002662  6000 0052               3111      BRA         PRINT_ASCII_CHAR
00002666                          3112  PRINT_ASCII_8
00002666  43F9 00002896           3113      LEA         ASCII_8,A1
0000266C  6000 0048               3114      BRA         PRINT_ASCII_CHAR
00002670                          3115  PRINT_ASCII_9
00002670  43F9 00002898           3116      LEA         ASCII_9,A1
00002676  6000 003E               3117      BRA         PRINT_ASCII_CHAR
0000267A                          3118  PRINT_ASCII_A
0000267A  43F9 0000289A           3119      LEA         ASCII_A,A1
00002680  6000 0034               3120      BRA         PRINT_ASCII_CHAR
00002684                          3121  PRINT_ASCII_B
00002684  43F9 0000289C           3122      LEA         ASCII_B,A1
0000268A  6000 002A               3123      BRA         PRINT_ASCII_CHAR
0000268E                          3124  PRINT_ASCII_C
0000268E  43F9 0000289E           3125      LEA         ASCII_C,A1
00002694  6000 0020               3126      BRA         PRINT_ASCII_CHAR
00002698                          3127  PRINT_ASCII_D
00002698  43F9 000028A0           3128      LEA         ASCII_D,A1
0000269E  6000 0016               3129      BRA         PRINT_ASCII_CHAR
000026A2                          3130  PRINT_ASCII_E
000026A2  43F9 000028A2           3131      LEA         ASCII_E,A1
000026A8  6000 000C               3132      BRA         PRINT_ASCII_CHAR
000026AC                          3133  PRINT_ASCII_F
000026AC  43F9 000028A4           3134      LEA         ASCII_F,A1
000026B2  6000 0002               3135      BRA         PRINT_ASCII_CHAR
000026B6                          3136  PRINT_ASCII_CHAR
000026B6  103C 000E               3137      MOVE.B      #14,D0
000026BA  4E4F                    3138      TRAP        #15
000026BC                          3139      
000026BC                          3140          
000026BC  4287                    3141      CLR.L       D7
000026BE  4CDF 0080               3142      MOVEM.L     (A7)+,D7 * copy back D7 from stack, to mutate its' bits
000026C2                          3143      
000026C2  5205                    3144      ADD.B       #1,D5 * loop until counter stops
000026C4  BA03                    3145      CMP.B       D3,D5
000026C6  6C00 0006               3146      BGE         PRINT_ASCII_FINISH
000026CA                          3147      
000026CA  6000 FE8A               3148      BRA         PRINT_ASCII_LOOP
000026CE                          3149  INVALID_ASCII_INPUT
000026CE                          3150  PRINT_ASCII_FINISH
000026CE  4CDF 3FFF               3151      MOVEM.L     (A7)+,D0-D7/A0-A5 * pop saved memory
000026D2  4E75                    3152      RTS
000026D4                          3153      
000026D4                          3154  PRINTDATA911
000026D4  0C46 0E00               3155      CMPI    #%0000111000000000, D6   * Print 7
000026D8  6700 003C               3156      BEQ     PRINT7   
000026DC  0C46 0C00               3157      CMPI    #%0000110000000000, D6   * Print 6
000026E0  6700 0042               3158      BEQ     PRINT6
000026E4  0C46 0A00               3159      CMPI    #%0000101000000000, D6   * Print 5
000026E8  6700 0048               3160      BEQ     PRINT5
000026EC  0C46 0800               3161      CMPI    #%0000100000000000, D6   * Print 4
000026F0  6700 004E               3162      BEQ     PRINT4 
000026F4  0C46 0600               3163      CMPI    #%0000011000000000, D6   * Print 3
000026F8  6700 0054               3164      BEQ     PRINT3    
000026FC  0C46 0400               3165      CMPI    #%0000010000000000, D6   * Print 2
00002700  6700 005A               3166      BEQ     PRINT2   
00002704  0C46 0200               3167      CMPI    #%0000001000000000, D6   * Print 1
00002708  6700 0060               3168      BEQ     PRINT1     
0000270C  0C46 0000               3169      CMPI    #%0000000000000000, D6   * Print 0
00002710  6700 0066               3170      BEQ     PRINT8
00002714                          3171      
00002714  4E75                    3172      RTS                             * Fail case  
00002716                          3173      
00002716                          3174  PRINT7
00002716  43F9 00002894           3175      LEA     ASCII_7, A1
0000271C  103C 000E               3176      MOVE.B      #14,D0
00002720  4E4F                    3177      TRAP        #15
00002722  4E75                    3178      RTS
00002724                          3179      
00002724                          3180  PRINT6
00002724  43F9 00002892           3181      LEA     ASCII_6, A1
0000272A  103C 000E               3182      MOVE.B      #14,D0
0000272E  4E4F                    3183      TRAP        #15
00002730  4E75                    3184      RTS
00002732                          3185      
00002732                          3186  PRINT5
00002732  43F9 00002890           3187      LEA     ASCII_5, A1
00002738  103C 000E               3188      MOVE.B      #14,D0
0000273C  4E4F                    3189      TRAP        #15
0000273E  4E75                    3190      RTS
00002740                          3191      
00002740                          3192  PRINT4
00002740  43F9 0000288E           3193      LEA     ASCII_4, A1
00002746  103C 000E               3194      MOVE.B      #14,D0
0000274A  4E4F                    3195      TRAP        #15
0000274C  4E75                    3196      RTS
0000274E                          3197      
0000274E                          3198  PRINT3
0000274E  43F9 0000288C           3199      LEA     ASCII_3, A1
00002754  103C 000E               3200      MOVE.B      #14,D0
00002758  4E4F                    3201      TRAP        #15
0000275A  4E75                    3202      RTS
0000275C                          3203      
0000275C                          3204  PRINT2
0000275C  43F9 0000288A           3205      LEA     ASCII_2, A1
00002762  103C 000E               3206      MOVE.B      #14,D0
00002766  4E4F                    3207      TRAP        #15
00002768  4E75                    3208      RTS
0000276A                          3209      
0000276A                          3210  PRINT1
0000276A  43F9 00002888           3211      LEA     ASCII_1, A1
00002770  103C 000E               3212      MOVE.B      #14,D0
00002774  4E4F                    3213      TRAP        #15
00002776  4E75                    3214      RTS
00002778                          3215          
00002778                          3216  PRINT8
00002778  43F9 00002896           3217      LEA     ASCII_8, A1
0000277E  103C 000E               3218      MOVE.B      #14,D0
00002782  4E4F                    3219      TRAP        #15
00002784  4E75                    3220      RTS
00002786                          3221  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002786                          3222  *-----------------------------------------------------------------------------
00002786                          3223  
00002786                          3224  
00002786                          3225  
00002786                          3226  *-----------------------------------------------------------------------------
00002786                          3227  *-----------------------------------------------------------------------------
00002786                          3228  * NAME: Bitmask
00002786                          3229  * DESCRIPTION:    Masks bits in a data register.
00002786                          3230  * PRE-CONDITION:  D6 contains the starting bit to be masked, and D7 contains
00002786                          3231  *                 the ending bit.  For example, a starting bit of decimal
00002786                          3232  *                 value 0 and an ending bit of decimal value 3 will mask the
00002786                          3233  *                 bits 0, 1, 2, and 3.
00002786                          3234  * POST-CONDITION: D6 contains the bitmask, ready for use.
00002786                          3235  * REGISTERS:      D5,D6,D7
00002786                          3236  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002786                          3237  BITMASK
00002786  3F05                    3238          MOVE    D5,-(A7)    * push D5 onto the stack so we can use it to
00002788  4245                    3239          CLR     D5          * clear D5 so we can use it
0000278A                          3240  LOOPBIT 
0000278A  0DC5                    3241          BSET    D6,D5       * set the D6th bit in D5 to 1
0000278C  5246                    3242          ADD     #1,D6       * increment D6
0000278E                          3243  
0000278E  BC47                    3244          CMP     D7,D6       * have we finished?
00002790  6E00 0004               3245          BGT     BITMASKDONE * yes
00002794  60F4                    3246          BRA     LOOPBIT     * no, iterate again
00002796                          3247  
00002796                          3248  BITMASKDONE
00002796  2C05                    3249          MOVE.L  D5,D6
00002798  3A1F                    3250          MOVE    (A7)+,D5    * restore D5
0000279A  4E75                    3251          RTS
0000279C                          3252  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000279C                          3253  *-----------------------------------------------------------------------------
0000279C                          3254  
0000279C                          3255  
0000279C                          3256  
0000279C                          3257  *-----------------------------------------------------------------------------
0000279C                          3258  *-----------------------------------------------------------------------------
0000279C                          3259  * SECTION: Constants/variables used throughout the program.
0000279C                          3260  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000279C                          3261  
0000279C                          3262  * ---> GENERAL
0000279C  =0000000D               3263  CR          EQU     $0D
0000279C  =0000000A               3264  LF          EQU     $0A
0000279C= 45 4E 54 45 52 20 ...   3265  MSGSTART    DC.B    'ENTER START ADDRESS: ',CR,LF,0
000027B4= 45 4E 54 45 52 20 ...   3266  MSGEND      DC.B    'ENTER END ADDRESS: ',CR,LF,0
000027CA= 48 69 74 20 74 68 ...   3267  CONT_MSG    DC.B    'Hit the [ENTER] key to continue...',CR,LF,0
000027EF= 0D 0A 00                3268  NEWLINE     DC.B    CR,LF,0
000027F2                          3269  
000027F2                          3270  * ---> OPS
000027F2= 44 49 56 53 00          3271  DIVSOP      DC.B    'DIVS',0
000027F7= 43 4D 50 00             3272  CMPOP       DC.B    'CMP',0
000027FB= 45 4F 52 00             3273  EOROP       DC.B    'EOR',0
000027FF= 4E 4F 50 00             3274  NOOPERATION DC.B    'NOP',0
00002803= 4E 45 47 00             3275  NEGOP       DC.B    'NEG',0
00002807= 4D 4F 56 45 00          3276  MOVEOP      DC.B    'MOVE',0
0000280C= 4D 4F 56 45 41 00       3277  MOVEAOP      DC.B   'MOVEA',0
00002812= 4D 4F 56 45 4D 00       3278  MOVEMOP     DC.B    'MOVEM',0
00002818= 4A 53 52 00             3279  JSROP       DC.B    'JSR',0
0000281C= 52 54 53 00             3280  RTSOP       DC.B    'RTS',0
00002820= 53 55 42 51 00          3281  SUBQOP      DC.B    'SUBQ',0
00002825= 4C 45 41 00             3282  LEAOP       DC.B    'LEA',0
00002829= 42 43 4C 52 20 00       3283  BCLROP      DC.B    'BCLR ',0
0000282F= 4D 55 4C 53 00          3284  MULSOP      DC.B    'MULS',0
00002834= 4F 52 00                3285  OROP        DC.B    'OR',0
00002837= 4F 52 49 00             3286  ORIOP       DC.B    'ORI',0
0000283B= 43 4D 50 49 00          3287  CMPIOP      DC.B    'CMPI',0
00002840= 4C 53 4C 00             3288  LSLOP       DC.B    'LSL',0
00002844= 4C 53 52 00             3289  LSROP       DC.B    'LSR',0
00002848= 41 53 4C 00             3290  ASLOP       DC.B    'ASL',0
0000284C= 41 53 52 00             3291  ASROP       DC.B    'ASR',0
00002850= 52 4F 4C 00             3292  ROLOP       DC.B    'ROL',0
00002854= 52 4F 52 00             3293  ROROP       DC.B    'ROR',0
00002858= 53 55 42 00             3294  SUBOP       DC.B    'SUB',0
0000285C= 20 44 41 54 41 20 ...   3295  DATA        DC.B    ' DATA $',0
00002864= 42 43 43 20 00          3296  OP_BCC_MSG  DC.B    'BCC ',0
00002869= 42 43 53 20 00          3297  OP_BCS_MSG  DC.B    'BCS ',0
0000286E= 42 47 45 20 00          3298  OP_BGE_MSG  DC.B    'BGE ',0
00002873= 42 4C 54 20 00          3299  OP_BLT_MSG  DC.B    'BLT ',0
00002878= 42 56 43 20 00          3300  OP_BVC_MSG  DC.B    'BVC ',0
0000287D= 42 52 41 20 00          3301  OP_BRA_MSG  DC.B    'BRA ',0
00002882= 41 44 44 00             3302  OP_ADD_MSG  DC.B    'ADD',0
00002886                          3303  
00002886                          3304  * ---> HEX CHARS
00002886= 30 00                   3305  ASCII_0     DC.B    '0',0
00002888= 31 00                   3306  ASCII_1     DC.B    '1',0
0000288A= 32 00                   3307  ASCII_2     DC.B    '2',0
0000288C= 33 00                   3308  ASCII_3     DC.B    '3',0
0000288E= 34 00                   3309  ASCII_4     DC.B    '4',0
00002890= 35 00                   3310  ASCII_5     DC.B    '5',0
00002892= 36 00                   3311  ASCII_6     DC.B    '6',0
00002894= 37 00                   3312  ASCII_7     DC.B    '7',0
00002896= 38 00                   3313  ASCII_8     DC.B    '8',0
00002898= 39 00                   3314  ASCII_9     DC.B    '9',0
0000289A= 41 00                   3315  ASCII_A     DC.B    'A',0
0000289C= 42 00                   3316  ASCII_B     DC.B    'B',0
0000289E= 43 00                   3317  ASCII_C     DC.B    'C',0
000028A0= 44 00                   3318  ASCII_D     DC.B    'D',0
000028A2= 45 00                   3319  ASCII_E     DC.B    'E',0
000028A4= 46 00                   3320  ASCII_F     DC.B    'F',0
000028A6                          3321  
000028A6                          3322  * ---> SPECIAL CHARACTERS
000028A6= 20 00                   3323  SPACE       DC.B    ' ',0
000028A8= 24 00                   3324  DOLLAR      DC.B    '$',0
000028AA= 23 00                   3325  IMD         DC.B    '#',0
000028AC= 2C 00                   3326  COMMA       DC.B    ',',0
000028AE= 28 00                   3327  OBRACK      DC.B    '(',0
000028B0= 29 00                   3328  CBRACK      DC.B    ')',0
000028B2= 2B 00                   3329  PLUS        DC.B    '+',0
000028B4= 2D 00                   3330  MINUS       DC.B    '-',0
000028B6= 2F 00                   3331  SLASH       DC.B    '/',0
000028B8= 2D 00                   3332  DASH        DC.B    '-',0
000028BA                          3333  
000028BA                          3334  * ---> B/W/L (BYTE, WORD, LONG, RESPECTIVELY)
000028BA= 2E 42 20 00             3335  __B         DC.B    '.B ',0
000028BE= 2E 57 20 00             3336  __W         DC.B    '.W ',0
000028C2= 2E 4C 20 00             3337  __L         DC.B    '.L ',0
000028C6                          3338  
000028C6                          3339  * ---> ADDRESS REGISTERS A0-A7
000028C6= 41 30 00                3340  __A0        DC.B   'A0',0
000028C9= 41 31 00                3341  __A1        DC.B   'A1',0    
000028CC= 41 32 00                3342  __A2        DC.B   'A2',0
000028CF= 41 33 00                3343  __A3        DC.B   'A3',0
000028D2= 41 34 00                3344  __A4        DC.B   'A4',0
000028D5= 41 35 00                3345  __A5        DC.B   'A5',0
000028D8= 41 36 00                3346  __A6        DC.B   'A6',0
000028DB= 41 37 00                3347  __A7        DC.B   'A7',0
000028DE                          3348  
000028DE                          3349  * ---> DATA REGISTERS D0-D7
000028DE= 44 30 00                3350  __D0        DC.B   'D0',0
000028E1= 44 31 00                3351  __D1        DC.B   'D1',0
000028E4= 44 32 00                3352  __D2        DC.B   'D2',0
000028E7= 44 33 00                3353  __D3        DC.B   'D3',0
000028EA= 44 34 00                3354  __D4        DC.B   'D4',0
000028ED= 44 35 00                3355  __D5        DC.B   'D5',0
000028F0= 44 36 00                3356  __D6        DC.B   'D6',0
000028F3= 44 37 00                3357  __D7        DC.B   'D7',0
000028F6                          3358  
000028F6                          3359  __COUNTER   DS.B    1       * main loop counter
000028F7                          3360  
000028F7                          3361  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000028F7                          3362  *-----------------------------------------------------------------------------
000028F7                          3363  
000028F7                          3364  
000028F7                          3365  
000028F7                          3366  *-----------------------------------------------------------------------------
000028F7                          3367  *-----------------------------------------------------------------------------
000028F7                          3368  * SECTION: Sample program to run, then attempt testing disassembly on.
000028F7                          3369  * STARTING: 16384
000028F7                          3370  * ENDING:   Any even number before 16384 to continue FOREVER
000028F7                          3371  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00004000                          3372      ORG $4000
00004000                          3373      
00004000  9240                    3374      SUB     D0,D1
00004002  944A                    3375      SUB     A2,D2   * Should be invalid since this is SUBA
00004004  B200                    3376      CMP.B   D0,D1
00004006  B441                    3377      CMP.W   D1,D2
00004008  B682                    3378      CMP.L   D2,D3
0000400A  B248                    3379      CMP     A0,D1
0000400C  B25A                    3380      CMP     (A2)+,D1
0000400E  B101                    3381      EOR.B   D0,D1
00004010  B342                    3382      EOR.W   D1,D2
00004012  B583                    3383      EOR.L   D2,D3
00004014  B150                    3384      EOR     D0,(A0)
00004016  B359                    3385      EOR     D1,(A1)+
00004018  0000 0003               3386      ORI.B   #3,D0 
0000401C  0042 0290               3387      ORI.W   #$290,D2
00004020  0087 0000000A           3388      ORI.L   #%1010,D7   * $1010 == A
00004026  0043 0002               3389      ORI     #2,D3
0000402A  4E71                    3390      NOP
0000402C  103C 009A               3391      MOVE.B   #%10011010, D0
00004030  123C 00A9               3392      MOVE.B   #%10101001, D1
00004034  303C 009A               3393      MOVE.W   #%10011010, D0
00004038  323C 00A9               3394      MOVE.W   #%10101001, D1
0000403C  203C 00011170           3395      MOVE.L   #70000, D0
00004042  223C 00011170           3396      MOVE.L   #70000, D1
00004048  81FC 0001               3397      DIVS     #1, D0
0000404C  D200                    3398      ADD.B    D0,D1
0000404E  4C9F 3C1A               3399      MOVEM    (A7)+,A2-A5/D1/D3-D4
00004052  43F8 2818               3400      LEA      JSROP,A1
00004056  4467                    3401      NEG.W    -(A7)
00004058  4EB9 000040A4           3402      JSR      END
0000405E  CFFC 0003               3403      MULS.W  #3, D7
00004062  CFC0                    3404      MULS    D0, D7
00004064  C5D9                    3405      MULS    (A1)+, D2
00004066  4E71                    3406      NOP
00004068  C682                    3407      AND.L   D2,D3
0000406A  5146                    3408      SUBQ    #8, D6
0000406C  4E71                    3409      NOP
0000406E  5F81                    3410      SUBQ.L  #7, D1
00004070  4E71                    3411      NOP
00004072  0041 0004               3412      ORI     #4, D1
00004076  4E71                    3413      NOP
00004078  E389                    3414      LSL.L   #1,D1
0000407A  4E71                    3415      NOP
0000407C  E489                    3416      LSR.L   #2,D1
0000407E  4E71                    3417      NOP
00004080  E781                    3418      ASL.L   #3,D1
00004082  4E71                    3419      NOP
00004084  E881                    3420      ASR.L   #4,D1
00004086  4E71                    3421      NOP
00004088  EB99                    3422      ROL.L   #5,D1
0000408A  4E71                    3423      NOP
0000408C  E099                    3424      ROR.L   #8,D1
0000408E  4E71                    3425      NOP
00004090  0881 0002               3426      BCLR    #2,D1
00004094  4E71                    3427      NOP
00004096                          3428  SOMELABLE
00004096  DAC1                    3429      ADDA.W  D1,A5
00004098  4E71                    3430      NOP
0000409A  D803                    3431      ADD.B   D3,D4
0000409C  4E71                    3432      NOP
0000409E  6000 0006               3433      BRA     RLLYEND
000040A2  65F2                    3434      BCS     SOMELABLE
000040A4                          3435  
000040A4                          3436  END
000040A4  4E75                    3437      RTS
000040A6                          3438      
000040A6                          3439  RLLYEND
000040A6                          3440      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_LONG_OP        1CDE
ADDA_PRT            1D1A
ADDA_WORD_OP        1C76
ADD_ADDA_END        1D4A
ADD_ADDA_PRINT      1D32
ADD_ADDA_SPACE      1D0C
ADD_EA_DN_GENERIC   1CFE
AFORWARDVALID       2462
AINVALID            24A2
ALOOP               2432
ALOOPDONE           24E8
ALOOPITER           24DA
ALOOPITERCLR        24D8
ANOSLASH            2476
AS                  1DC0
ASCII_0             2886
ASCII_1             2888
ASCII_2             288A
ASCII_3             288C
ASCII_4             288E
ASCII_5             2890
ASCII_6             2892
ASCII_7             2894
ASCII_8             2896
ASCII_9             2898
ASCII_A             289A
ASCII_B             289C
ASCII_C             289E
ASCII_D             28A0
ASCII_E             28A2
ASCII_F             28A4
ASL                 1DD6
ASLOP               2848
ASR                 1DE6
ASROP               284C
AVALID              243C
BCC_BYTE_OFFSET     18EC
BCC_END             1942
BCC_LONG_OFFSET     1928
BCC_WORD_OFFSET     190A
BCLROP              2829
BITMASK             2786
BITMASKDONE         2796
BYTE_DN_EA          1C96
BYTE_EA_DN          1C2E
CBRACK              28B0
CLEAR_SCREEN        11AE
CMPIOP              283B
CMPOP               27F7
COMMA               28AC
CONT_MSG            27CA
CR                  D
DASH                28B8
DATA                285C
DFORWARDVALID       23A8
DINVALID            23E4
DISPLAY1011         1B0E
DIVSOP              27F2
DLOOP               2378
DLOOPDONE           2426
DLOOPITER           2418
DLOOPITERCLR        2416
DNOSLASH            23BC
DOLLAR              28A8
DONE0100            17C2
DONE1001            1A96
DONE1011            1B46
DVALID              2382
EAHELPER05          1F3A
EAHELPER611         1EF8
END                 40A4
END0000             133E
END67               22BE
END68               2332
ENDEAHELPER05       207A
ENDEAHELPER611      1F34
ENDMODE_AN          220A
ENDMODE_DN          210A
ENDOP0001           13B0
ENDOP0010           1422
ENDOP0011           1494
ENDOP1110           1EE0
END_OF_LOOP         1182
EOROP               27FB
HEX_VALUE_MASK_LONG  F
IDLE_STATE          118C
IMD                 28AA
IMD_SIZE_0000       12BE
INVALID_ASCII_INPUT  26CE
ITERATION           116A
JSROP               2818
LEAOP               2825
LF                  A
LONG_DN_EA          1CC6
LONG_EA_DN          1C5E
LOOP                104C
LOOPBIT             278A
LOOPUNKNOWNOP       1166
LS                  1D8A
LSL                 1DA0
LSLOP               2840
LSR                 1DB0
LSROP               2844
MINUS               28B4
MODE_AN             2180
MODE_DN             2080
MOVEAOP             280C
MOVEMHELPERPOST     2362
MOVEMHELPERPRE      24EE
MOVEMOP             2812
MOVEMTOMEM          15CA
MOVEMTOREG          1530
MOVEOP              2807
MSGEND              27B4
MSGSTART            279C
MULSOP              282F
NEGOP               2803
NEWLINE             27EF
NOOPERATION         27FF
NOT0000             1076
NOT0001             1086
NOT0010             1096
NOT0011             10A6
NOT0100             10B6
NOT0101             10C6
NOT0110             10D6
NOT0111             10E6
NOT1000             10F6
NOT1001             1106
NOT1010             1116
NOT1011             1126
NOT1100             1136
NOT1101             1146
NOT1110             1156
NOT67BYTE           22A2
NOT67WORD           22B2
NOTA0               21A2
NOTA1               21B2
NOTA2               21C2
NOTA3               21D2
NOTA4               21E2
NOTA5               21F2
NOTA6               2202
NOTADRDIRECT        1F6A
NOTADRINDIRECT      1F92
NOTADRINDIRECTPOST  1FC6
NOTADRINDIRECTPRE   1FFA
NOTBCLR             1286
NOTBCLRDYNA         1238
NOTD0               20A2
NOTD1               20B2
NOTD2               20C2
NOTD3               20D2
NOTD4               20E2
NOTD5               20F2
NOTD6               2102
NOTDATAREG          1F5A
NOTDIVS             19CC
NOTEOR              1B02
NOTIMMBYTE          202C
NOTIMMEDIATE        2076
NOTIMMWORD          2056
NOTJSR              16BA
NOTLONGMOVEM1       1598
NOTLONGMOVEM2       1632
NOTMOVEM            1664
NOTNEG              150C
NOTNOP              14B6
NOTORI              1324
NOTRTS              16DC
OBRACK              28AE
OP0000              11BA
OP0001              1344
OP0001MOVE          136E
OP0001MOVEA         137A
OP0010              13B6
OP0010MOVE          13E0
OP0010MOVEA         13EC
OP0011              1428
OP0011MOVE          1452
OP0011MOVEA         145E
OP0100              149A
OP0101              17C8
OP0110              1836
OP0111              1948
OP1000              194E
OP1000END           19DC
OP1001              19E2
OP1010              1A9C
OP1011              1AA2
OP1100              1B4C
OP1101              1BD6
OP1110              1D5C
OP1110DATAREG       1EB4
OP1110GENERIC       1E2C
OP1110IMMEIGHT      1E8C
OP1111              1EF2
OP_0000             0
OP_0001             1000
OP_0010             2000
OP_0011             3000
OP_0100             4000
OP_0101             5000
OP_0110             6000
OP_0111             7000
OP_1000             8000
OP_1001             9000
OP_1010             A000
OP_1011             B000
OP_1100             C000
OP_1101             D000
OP_1110             E000
OP_1111             F000
OP_ADD_MSG          2882
OP_BCC              1880
OP_BCC_MSG          2864
OP_BCS              188A
OP_BCS_MSG          2869
OP_BGE              1894
OP_BGE_MSG          286E
OP_BLT              189E
OP_BLT_MSG          2873
OP_BRA              18B2
OP_BRANCHES_PRINT   18BC
OP_BRA_MSG          287D
OP_BVC              18A8
OP_BVC_MSG          2878
ORIOP               2837
OROP                2834
PLUS                28B2
PRELOOP             24F8
PRELOOPDONE         2510
PRELOOPITER         2504
PRESETBIT           2502
PRINT1              276A
PRINT1001           1A3A
PRINT2              275C
PRINT3              274E
PRINT4              2740
PRINT5              2732
PRINT6              2724
PRINT7              2716
PRINT8              2778
PRINTA0             2210
PRINTA1             221E
PRINTA2             222C
PRINTA3             223A
PRINTA4             2248
PRINTA5             2256
PRINTA6             2264
PRINTA7             2272
PRINTBYTE           2338
PRINTBYTE68         231A
PRINTD0             2110
PRINTD1             211E
PRINTD2             212C
PRINTD3             213A
PRINTD4             2148
PRINTD5             2156
PRINTD6             2164
PRINTD7             2172
PRINTDATA911        26D4
PRINTLONG           2354
PRINTLONG68         232A
PRINTWORD           2346
PRINTWORD68         2322
PRINT_ASCII_0       2616
PRINT_ASCII_1       2620
PRINT_ASCII_2       262A
PRINT_ASCII_3       2634
PRINT_ASCII_4       263E
PRINT_ASCII_5       2648
PRINT_ASCII_6       2652
PRINT_ASCII_7       265C
PRINT_ASCII_8       2666
PRINT_ASCII_9       2670
PRINT_ASCII_A       267A
PRINT_ASCII_B       2684
PRINT_ASCII_C       268E
PRINT_ASCII_CHAR    26B6
PRINT_ASCII_D       2698
PRINT_ASCII_E       26A2
PRINT_ASCII_F       26AC
PRINT_ASCII_FINISH  26CE
PRINT_ASCII_HEX_CHAR  2546
PRINT_ASCII_LOOP    2556
RLLYEND             40A6
RO                  1DF6
ROL                 1E0C
ROLOP               2850
ROR                 1E1C
ROROP               2854
RTSOP               281C
SIZE67              2280
SIZE68              22C4
SKIPLONG            1302
SKIPNOTLONG1        15A4
SKIPNOTLONG2        163E
SLASH               28B6
SOMELABLE           4096
SPACE               28A6
START               1000
SUBOP               2858
SUBQOP              2820
SUB_EA_DN           1A7A
TWOWORDLEA          176C
UNKNOWN0000         133A
UNKNOWN0100         17BE
UNKNOWN0101         1830
UNKNOWN1001         1A92
UNKNOWN1011         1B42
UNKNOWN1100         1BCC
UNKNOWNOP           251C
UNKNOWNOP0001       13AC
UNKNOWNOP0010       141E
UNKNOWNOP0011       1490
WORD_DN_EA          1CAE
WORD_EA_DN          1C46
__A0                28C6
__A1                28C9
__A2                28CC
__A3                28CF
__A4                28D2
__A5                28D5
__A6                28D8
__A7                28DB
__B                 28BA
__COUNTER           28F6
__D0                28DE
__D1                28E1
__D2                28E4
__D3                28E7
__D4                28EA
__D5                28ED
__D6                28F0
__D7                28F3
__L                 28C2
__W                 28BE
