00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/23/2014 5:53:44 PM

00000000                             1  *    666
00000000                             2  *   66 66
00000000                             3  *  66   66
00000000                             4  *  66   66         8888
00000000                             5  *  66   66       88   kkkk
00000000                             6  *  66  66       8   88   kk      
00000000                             7  *   66  6      8  88  kkk  kk    
00000000                             8  *    66  6    8  88     kk  k
00000000                             9  *     66 66  88 88        kk
00000000                            10  *     6 _______ 8
00000000                            11  *    6    68k    8
00000000                            12  *   6_____PRO_____8
00000000                            13  *  6               8        68k is as easy as
00000000                            14  *  6    0     0    8        6 - 8 - k !
00000000                            15  *  6   /   V   \   8 
00000000                            16  *  6   \__/ \__/   8        Welcome to our Dissasembler, Professor Nash!
00000000                            17  *    6            8         Enjoy your stay!
00000000                            18  *      6        8      
00000000                            19  *        666888
00000000                            20  *  _____                   __    ___  _    
00000000                            21  * | ____|__ _ ___ _   _   / /_  ( _ )| | __
00000000                            22  * |  _| / _` / __| | | | | '_ \ / _ \| |/ /
00000000                            23  * | |__| (_| \__ \ |_| | | (_) | (_) |   < 
00000000                            24  * |_____\__,_|___/\__, |  \___/ \___/|_|\_\
00000000                            25  *                 |___/           
00000000                            26  *-----------------------------------------------------------
00000000                            27  * Title      : 68K Decompiler
00000000                            28  * Written by : Nick Bell, Sammy Nimnuch, Caleb Larson
00000000                            29  * Date       : 11/2014
00000000                            30  * Description: This program decompiles other 68K programs
00000000                            31  *              which are loaded into the simulator simultaneously.
00000000                            32  *-----------------------------------------------------------
00000000                            33  
00000000                            34  
00000000  =00000000                 35  OP_0000     EQU     %0000000000000000
00000000  =00001000                 36  OP_0001     EQU     %0001000000000000
00000000  =00002000                 37  OP_0010     EQU     %0010000000000000
00000000  =00003000                 38  OP_0011     EQU     %0011000000000000
00000000  =00004000                 39  OP_0100     EQU     %0100000000000000
00000000  =00005000                 40  OP_0101     EQU     %0101000000000000
00000000  =00006000                 41  OP_0110     EQU     %0110000000000000
00000000  =00007000                 42  OP_0111     EQU     %0111000000000000
00000000  =00008000                 43  OP_1000     EQU     %1000000000000000
00000000  =00009000                 44  OP_1001     EQU     %1001000000000000
00000000  =0000A000                 45  OP_1010     EQU     %1010000000000000
00000000  =0000B000                 46  OP_1011     EQU     %1011000000000000
00000000  =0000C000                 47  OP_1100     EQU     %1100000000000000
00000000  =0000D000                 48  OP_1101     EQU     %1101000000000000
00000000  =0000E000                 49  OP_1110     EQU     %1110000000000000
00000000  =0000F000                 50  OP_1111     EQU     %1111000000000000
00000000                            51  
00000000                            52  * BITMASK     EQU     $F000       * used to bitmask the first nibble
00000000                            53  
00001000                            54  START:  ORG    $1000            * first instruction of program
00001000                            55  
00001000                            56  * -----------------------------------
00001000                            57  * Starting and Ending Addresses
00001000                            58  * -----------------------------------
00001000                            59  
00001000                            60  * THINK ABOUT ASKING FOR VALID START/END NO NEGATIVE ADDR
00001000                            61  
00001000                            62  * LOAD MSGSTART, ASK FOR INPUT
00001000  43F9 0000124C             63          LEA     MSGSTART,A1     * Load MESSAGE START
00001006  103C 000E                 64          MOVE.B  #14,D0          * Trap #14 to display message
0000100A  4E4F                      65          TRAP    #15             * Perform #14
0000100C                            66          
0000100C                            67  * GETS THE STARTING ADDRESS
0000100C  103C 0004                 68          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001010  4E4F                      69          TRAP    #15             * Perform #15
00001012                            70          
00001012                            71  * MOVE IT TO ANOTHER ADDRESS REGISTER
00001012  2441                      72          MOVEA.L D1,A2           * Move the user input into A2. This is the starting address.
00001014                            73  
00001014                            74  * LOAD MSGSTART, ASK FOR INPUT
00001014  43F9 00001264             75          LEA     MSGEND,A1       * Load MESSAGE END
0000101A  303C 000E                 76          MOVE.W  #14,D0          * Trap #14 to display message
0000101E  4E4F                      77          TRAP    #15             * Perform #14
00001020                            78          
00001020                            79  * GETS THE ENDING ADDRESS
00001020  103C 0004                 80          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001024  4E4F                      81          TRAP    #15             * Perform Trap #4
00001026  2A01                      82          MOVE.L  D1,D5           * Move the ending address into D5
00001028  43F9 0000127A             83          LEA     NEWLINE,A1      * Store newline variable for seper opcodes
0000102E                            84          
0000102E  3E3C 000F                 85          MOVE.W  #15,D7          * prep D7 for bitmask subroutine
00001032  3C3C 000C                 86          MOVE.W  #12,D6          * prep D6 for bitmask subroutine
00001036  6100 01FE                 87          BSR     BITMASK         * obtain a bitmask that goes from 12-15 (inclusive)
0000103A                            88          * MOVE.W  D6,D2           * move the bitmask to D2
0000103A                            89          
0000103A                            90  LOOP    
0000103A                            91          
0000103A                            92          * MOVE.W  #BITMASK,D2     * Load the bitmask into data register D2
0000103A  3F06                      93          MOVE    D6,-(A7)        * save the bitmask
0000103C  341A                      94          MOVE.W  (A2)+,D2        * Read an operation into D1
0000103E  CC42                      95          AND.W   D2,D6           * Apply this bitmask
00001040                            96          
00001040  BC7C 4000                 97          CMP     #OP_0100,D6     * Does the operation start with 0100?
00001044  6600 000A                 98          BNE     NEXT16          * No, check next case
00001048  6100 0188                 99          BSR     OP0100          * Branch to subroutine 0100
0000104C  6000 000A                100          BRA     ITERATION       * Move to next iteration of the loop
00001050                           101          
00001050                           102  NEXT16
00001050  3202                     103          MOVE.W  D2,D1           * Print opcode we don't recognize
00001052                           104  
00001052  103C 0003                105          MOVE.B  #3,D0           * Print out operation we don't recognize
00001056  4E4F                     106          TRAP    #15             * Perform Trap #3
00001058                           107          
00001058                           108  ITERATION
00001058  3C1F                     109          MOVE    (A7)+,D6        * restore the bitmask to its previous state
0000105A                           110  
0000105A  103C 000E                111          MOVE.B  #14,D0          * Print a newline
0000105E  4E4F                     112          TRAP    #15             * Perform Trap #14
00001060                           113  
00001060  BA4A                     114          CMP     A2,D5           * Compare the starting address to ending address
00001062  6700 2FAE                115          BEQ     END             * If they are equal, branch 
00001066  60D2                     116          BRA     LOOP            * Otherwise, branch back to LOOP
00001068                           117  
00001068                           118  * --- OP 0000 ------------------------------------------
00001068                           119  * FUNCTIONS     BCLR, ORI, CMPI
00001068                           120  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask. 
00001068                           121  * ADDR REG        
00001068                           122  * POST COND     All registers return to their previous state.
00001068                           123  * ------------------------------------------------------
00001068                           124  OP0000
00001068  48A7 C0C0                125          MOVEM   D0-D1/A0-A1,-(A7)   * Push values to the stack to save
0000106C  3C3C 0006                126          MOVE.W  #6, D6              * Prep lower value for bitmask
00001070  3E3C 0008                127          MOVE.W  #8, D7              * Prep upper value for bitmask
00001074  6100 01C0                128          BSR     BITMASK             * Finalize bitmask setup
00001078  CC42                     129          AND     D2,D6               * Apply bitmask
0000107A                           130          
0000107A  0C46 0180                131          CMPI    #%0000000110000000, D6  * Are we BCLR?
0000107E  6600 0012                132          BNE     NOTBCLR                 * If not, branch to other OP0000 functions
00001082                           133          
00001082  43F9 00001281            134          LEA     BCLROP,A1           * We found BCLR
00001088  103C 000E                135          MOVE.B  #14,D0              * Trap #14 prints out the data
0000108C  4E4F                     136          TRAP    #15                 * Perform Trap #14
0000108E  6000 01A0                137          BRA     NEXT17              * Found the op, move to next iteration
00001092                           138  
00001092                           139  NOTBCLR
00001092  3C3C 0009                140          MOVE.W  #9, D6              * Prep lower value for bitmask
00001096  3E3C 000B                141          MOVE.W  #11, D7             * Prep upper value for bitmask
0000109A  6100 019A                142          BSR     BITMASK             * Finalize bitmask setup
0000109E  CC42                     143          AND     D2,D6               * Apply bitmask
000010A0                           144          
000010A0  0C46 0000                145          CMPI    #%0000000000000000, D6  * Are we ORI?
000010A4  6700 000E                146          BEQ     ISORI                   * If ORI, branch to ISORI
000010A8                           147          
000010A8  0C46 0C00                148          CMPI    #%0000110000000000, D6  * Hmm... Maybe we're CMPI?
000010AC  6700 0006                149          BEQ     ISCMPI                  * If CMPI, branch to ISCMPI
000010B0                           150          
000010B0  6600 0104                151          BNE     UNKNOWNOP               * Otherwise, this op is an imposter. 
000010B4                           152                                          * We don't deal too kindly with imposters.
000010B4                           153          
000010B4                           154  ISORI
000010B4                           155          
000010B4                           156  
000010B4                           157  ISCMPI
000010B4  43F9 0000128E            158          LEA     CMPIOP, A1          * Load 'CMPI' into the output window
000010BA  103C 000E                159          MOVE.B  #14,D0              * Trap #14 prints out the data in D0
000010BE  4E4F                     160          TRAP    #15                 * Perform Trap #14
000010C0                           161          
000010C0                           162          * Determine the Size
000010C0  3C3C 0006                163          MOVE.W  #6, D6              * Prep lower value for bitmask
000010C4  3E3C 0007                164          MOVE.W  #7, D7              * Prep upper value for bitmask
000010C8  6100 016C                165          BSR     BITMASK             * Finalize bitmask setup
000010CC  CC42                     166          AND     D2,D6               * Apply bitmask
000010CE                           167          
000010CE  0C46 00C0                168          CMPI    #%0000000011000000, D6  * Imposter Op
000010D2  6700 00E2                169          BEQ     UNKNOWNOP               * Deal with the imposter
000010D6                           170          
000010D6  0C46 0000                171          CMPI    #%0000000000000000, D6  * The size is a BYTE
000010DA  6700 0012                172          BEQ     CMPIBYTE                * Branch to CMPI.B
000010DE                           173          
000010DE  0C46 0040                174          CMPI    #%0000000001000000, D6  * The size is a WORD
000010E2  6700 0032                175          BEQ     CMPIWORD                * Branch to CMPI.W
000010E6                           176          
000010E6  0C46 0080                177          CMPI    #%0000000010000000, D6  * The size is a LONG
000010EA  6700 0050                178          BEQ     CMPILONG                * Branch to CMPI.L
000010EE                           179          
000010EE                           180  CMPIBYTE
000010EE  43F9 0000129A            181          LEA     __B, A1     * Load .B
000010F4  103C 000E                182          MOVE.B  #14, D0     * Print out data
000010F8  4E4F                     183          TRAP    #15         * Perform Trap #14
000010FA                           184          
000010FA  43F9 00001299            185          LEA     IMD, A1     * Load #
00001100  103C 000E                186          MOVE.B  #14, D0     * Print out data
00001104  4E4F                     187          TRAP    #15         * Perform Trap #14
00001106                           188          
00001106  361A                     189          MOVE.W  (A2)+,D3    * Advance a word forward to get the value.
00001108  1203                     190          MOVE.B  D3,D1       * Move the lower byte from D3 into D1
0000110A  3622                     191          MOVE.W  -(A2),D3    * Now go back a word
0000110C  103C 000E                192          MOVE.B  #14, D0     * Print out the data
00001110  4E4F                     193          TRAP    #15         * Perform Trap #14 
00001112                           194          
00001112  6000 004E                195          BRA     CMPIEA      * Branch to determine Effective Address
00001116                           196          
00001116                           197  CMPIWORD
00001116  43F9 0000129C            198          LEA     __W, A1     * Load .W
0000111C  103C 000E                199          MOVE.B  #14, D0     * Print out data
00001120  4E4F                     200          TRAP    #15         * Perform Trap #14
00001122                           201          
00001122  43F9 00001299            202          LEA     IMD, A1     * Load #
00001128  103C 000E                203          MOVE.B  #14, D0     * Print out data
0000112C  4E4F                     204          TRAP    #15         * Perform Trap #14
0000112E                           205          
0000112E  361A                     206          MOVE.W  (A2)+,D3    * Advance a word forward to get the value.
00001130  3222                     207          MOVE.W  -(A2),D1    * Copy the immediate Value into D1, then go back a word
00001132  103C 000E                208          MOVE.B  #14, D0     * Print out the data
00001136  4E4F                     209          TRAP    #15         * Perform Trap #14
00001138                           210          
00001138                           211          
00001138  6000 0028                212          BRA     CMPIEA      * Branch to determine Effective Address
0000113C                           213          
0000113C                           214  CMPILONG
0000113C  43F9 0000129E            215          LEA     __L, A1     * Load .L
00001142  103C 000E                216          MOVE.B  #14, D0     * Print out data
00001146  4E4F                     217          TRAP    #15         * Perform Trap #14
00001148                           218          
00001148  43F9 00001299            219          LEA     IMD, A1     * Load #
0000114E  103C 000E                220          MOVE.B  #14, D0     * Print out data
00001152  4E4F                     221          TRAP    #15         * Perform Trap #14
00001154                           222          
00001154  361A                     223          MOVE.W  (A2)+,D3    * Advance a word forward to get the value.
00001156  2222                     224          MOVE.L  -(A2),D1    * Copy the immediate Value into D1, then go back a word
00001158  103C 000E                225          MOVE.B  #14, D0     * Print out the data
0000115C  4E4F                     226          TRAP    #15         * Perform Trap #14
0000115E                           227          
0000115E  6000 0002                228          BRA     CMPIEA      * Branch to determine Effective Address
00001162                           229          
00001162                           230  CMPIEA
00001162                           231          * Determine the mode
00001162  3C3C 0003                232          MOVE.W  #3, D6              * Prep lower value for bitmask
00001166  3E3C 0005                233          MOVE.W  #5, D7              * Prep upper value for bitmask
0000116A  6100 00CA                234          BSR     BITMASK             * Finalize bitmask setup
0000116E  CC42                     235          AND     D2,D6               * Apply bitmask
00001170                           236          
00001170  0C46 0008                237          CMPI    #%0000000000001000, D6  * Is the Mode 001, an unsupported mode for CMPI?
00001174  6700 0040                238          BEQ     UNKNOWNOP               * Imposter op
00001178                           239          
00001178  0C46 0028                240          CMPI    #%0000000000101000, D6  * Is the Mode 101, an unsupported mode?
0000117C  6700 0038                241          BEQ     UNKNOWNOP               * Imposter op
00001180                           242          
00001180  0C46 0030                243          CMPI    #%0000000000110000, D6  * Is the Mode 110, an unsupported mode?
00001184  6700 0030                244          BEQ     UNKNOWNOP               * Imposter op
00001188                           245  
00001188  0C46 0038                246          CMPI    #%0000000000111000, D6  * Is the Mode 111?
0000118C  6700 000A                247          BEQ     CMPIREG                 * Further investigation is needed
00001190                           248          
00001190                           249          * Mode is valid at this point
00001190  0C46 0000                250          CMPI    #%0000000000000000, D6  * AMode = Dn, Reg = Dn
Line 251 ERROR: Undefined symbol
00001194  6700 F394                251          BEQ     MODEDN
00001198                           252  
00001198                           253          
00001198                           254  CMPIREG
00001198  3C3C 0000                255          MOVE.W  #0, D6              * Prep lower value for bitmask
0000119C  3E3C 0002                256          MOVE.W  #2, D7              * Prep upper value for bitmask
000011A0  6100 0094                257          BSR     BITMASK             * Finalize bitmask setup
000011A4  CC42                     258          AND     D2,D6               * Apply bitmask
000011A6                           259          
000011A6  0C46 0000                260          CMPI    #%0000000000000000, D6  * Is the Register 000?
000011AA  6700 000A                261          BEQ     CMPIREG000
000011AE                           262          
000011AE  0C46 0001                263          CMPI    #%0000000000000001, D6  * Is the Register 001?
000011B2  6700 0002                264          BEQ     CMPIREG001
000011B6                           265            
000011B6                           266  
000011B6                           267  CMPIREG000  * TODO (xxx).W for CMPI
000011B6                           268  
000011B6                           269  CMPIREG001  * TODO (xxx).L for CMPI
000011B6                           270          
000011B6                           271          
000011B6                           272  MODE_DN
000011B6                           273  MODE_AN
000011B6                           274  MODE_IAN
000011B6                           275  MODE_IAN_POS
000011B6                           276  MODE_IAN_PRE
000011B6                           277  
000011B6                           278     
000011B6                           279  UNKNOWNOP
000011B6                           280          
000011B6                           281  
000011B6                           282  
000011B6                           283  
000011B6                           284  * --- OP 0001 ------------------------------------------
000011B6                           285  * FUNCTIONS     MOVE.B
000011B6                           286  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000011B6                           287  * ADDR REG        
000011B6                           288  * POST COND     All registers return to their previous state.
000011B6                           289  * ------------------------------------------------------
000011B6                           290  OP0001  
000011B6                           291  
000011B6                           292  
000011B6                           293  
000011B6                           294  
000011B6                           295  * --- OP 0010 ------------------------------------------
000011B6                           296  * FUNCTIONS     MOVE.L, MOVEA.L,
000011B6                           297  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000011B6                           298  * ADDR REG        
000011B6                           299  * POST COND     All registers return to their previous state.
000011B6                           300  * ------------------------------------------------------
000011B6                           301  OP0010  
000011B6                           302  
000011B6                           303  
000011B6                           304  * --- OP 0011 ------------------------------------------
000011B6                           305  * FUNCTIONS     MOVE.W, MOVEA.W
000011B6                           306  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000011B6                           307  * ADDR REG        
000011B6                           308  * POST COND     All registers return to their previous state.
000011B6                           309  * ------------------------------------------------------
000011B6                           310  OP0011
000011B6  48A7 FFFE                311      MOVEM   D0-D7/A0-A6, -(A7)
000011BA                           312      
000011BA  3C3C 0006                313      MOVE.W  #6,D6
000011BE  3E3C 0008                314      MOVE.W  #8,D7
000011C2                           315      
000011C2  6100 0072                316      BSR     BITMASK
000011C6                           317      
000011C6  CC42                     318      AND.W   D2,D6
000011C8                           319      
000011C8  BC7C 0040                320      CMP     #%0000000001000000,D6
000011CC  6600 0004                321      BNE     NEXT15
000011D0  61FE                     322      BSR     * for MOVEA.W
000011D2                           323      
000011D2                           324  NEXT15
000011D2                           325  
000011D2                           326  
000011D2                           327  * --- OP 0100 ------------------------------------------
000011D2                           328  * FUNCTIONS     NO_OP, MOVEM, LEA, NEG, JSR, RTS
000011D2                           329  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
000011D2                           330  * ADDR REG        
000011D2                           331  * POST COND     All registers return to their previous state.
000011D2                           332  * ------------------------------------------------------
000011D2                           333  OP0100  * TODO: movem, lea, neg, jsr, rts
000011D2                           334  
000011D2  48A7 C0C0                335          MOVEM   D0-D1/A0-A1,-(A7) * Push values to the stack to save
000011D6                           336          
000011D6                           337          * prep values for BITMASK subroutine
000011D6  3C3C 0008                338          MOVE.W  #8,D6
000011DA  3E3C 000B                339          MOVE.W  #11,D7
000011DE                           340          
000011DE  6100 0056                341          BSR     BITMASK
000011E2                           342          
000011E2  CC42                     343          AND     D2,D6                   * apply bitmask
000011E4                           344          
000011E4  0C46 0400                345          CMPI    #%0000010000000000,D6   * are we NEG?
000011E8  6600 0012                346          BNE     NEXT19                  * not neg
000011EC                           347        
000011EC                           348          * it is NEG, print
000011EC  43F9 00001286            349          LEA     NEGOP,A1
000011F2  103C 000E                350          MOVE.B  #14,D0
000011F6  4E4F                     351          TRAP    #15
000011F8                           352          
000011F8  6000 0036                353          BRA     NEXT17 * we found the op, move to next iteration
000011FC                           354          
000011FC                           355  NEXT19 * is it MOVEM?
000011FC                           356  
000011FC                           357          * prep values for BITMASK subroutine
000011FC  3C3C 0007                358          MOVE.W  #7,D6
00001200  3E3C 0009                359          MOVE.W  #9,D7
00001204                           360          
00001204  6100 0030                361          BSR     BITMASK
00001208                           362          
00001208  CC42                     363          AND     D2,D6   * apply bitmask
0000120A                           364          
0000120A  0C46 0080                365          CMPI    #%0000000010000000,D6 * is it MOVEM?
0000120E  6600 0014                366          BNE     NEXT18          * it is not MOVEM
00001212                           367          
00001212                           368          * it is MOVEM
00001212  43F9 00001293            369          LEA     MOVEMOP,A1
00001218  103C 000E                370          MOVE.B  #14,D0          * Print a newline
0000121C  4E4F                     371          TRAP    #15
0000121E                           372          
0000121E  341A                     373          MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
00001220                           374          
00001220  6000 000E                375          BRA     NEXT17
00001224                           376  NEXT18
00001224                           377          
00001224  43F9 0000127D            378          LEA     NOOPERATION,A1
0000122A  103C 000E                379          MOVE.B  #14,D0          * Print a newline
0000122E  4E4F                     380          TRAP    #15
00001230                           381          
00001230                           382  NEXT17
00001230  4C9F 0303                383          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
00001234  4E75                     384          RTS
00001236                           385          
00001236                           386          
00001236                           387          
00001236                           388  
00001236                           389  * --- OP 0101 ------------------------------------------
00001236                           390  * FUNCTIONS     SUBQ
00001236                           391  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001236                           392  * ADDR REG        
00001236                           393  * POST COND     All registers return to their previous state.
00001236                           394  * ------------------------------------------------------
00001236                           395  OP0101
00001236                           396  
00001236                           397  
00001236                           398  
00001236                           399  * --- OP 0110 ------------------------------------------
00001236                           400  * FUNCTIONS     BCC, BCS, BGE, BLT, BVC, BRA
00001236                           401  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001236                           402  * ADDR REG        
00001236                           403  * POST COND     All registers return to their previous state.
00001236                           404  * ------------------------------------------------------
00001236                           405  OP0110
00001236                           406  
00001236                           407  
00001236                           408  
00001236                           409  
00001236                           410  * --- OP 0111 ------------------------------------------
00001236                           411  * FUNCTIONS     
00001236                           412  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001236                           413  * ADDR REG        
00001236                           414  * POST COND     All registers return to their previous state.
00001236                           415  * ------------------------------------------------------
00001236                           416  OP0111
00001236                           417  
00001236                           418  
00001236                           419  
00001236                           420  * --- OP 1000 ------------------------------------------
00001236                           421  * FUNCTIONS     DIVS, OR
00001236                           422  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001236                           423  * ADDR REG        
00001236                           424  * POST COND     All registers return to their previous state.
00001236                           425  * ------------------------------------------------------
00001236                           426  OP1000
00001236                           427  
00001236                           428  
00001236                           429  
00001236                           430  * --- OP 1001 ------------------------------------------
00001236                           431  * FUNCTIONS     SUB
00001236                           432  * DATA REG      D0, D1 for output. D2 for entire instruction. D6 for bitmask.
00001236                           433  * ADDR REG        
00001236                           434  * POST COND     All registers return to their previous state.
00001236                           435  * ------------------------------------------------------
00001236                           436  OP1001
00001236                           437  
00001236                           438  
00001236                           439  
00001236                           440  * --- OP 1010 ------------------------------------------
00001236                           441  * FUNCTIONS     
00001236                           442  * DATA REG      D0, D1 for output. D2 for entire instruction. D6 for bitmask.
00001236                           443  * ADDR REG        
00001236                           444  * POST COND     All registers return to their previous state.
00001236                           445  * ------------------------------------------------------
00001236                           446  OP1010
00001236                           447  
00001236                           448  
00001236                           449  * --- OP 1011 ------------------------------------------
00001236                           450  * FUNCTIONS     EOR, CMP 
00001236                           451  * DATA REG      D0, D1 for output. D2 for entire opcode. D6 for bitmask.
00001236                           452  * ADDR REG        
00001236                           453  * POST COND     All registers return to their previous state.
00001236                           454  * ------------------------------------------------------
00001236                           455  OP1011
00001236                           456  
00001236                           457  
00001236                           458  * --- OP 1100 ------------------------------------------
00001236                           459  * FUNCTIONS     MULS
00001236                           460  * DATA REG      D0, D1 for output. D2 for entire opcode. D6 for bitmask.
00001236                           461  * ADDR REG        
00001236                           462  * POST COND     All registers return to their previous state.
00001236                           463  * ------------------------------------------------------
00001236                           464  OP1100
00001236                           465  
00001236                           466  
00001236                           467  
00001236                           468  * --- OP 1101 ------------------------------------------
00001236                           469  * FUNCTIONS     ADD, ADDA,
00001236                           470  * DATA REG      D0, D1 for output. D2 for entire opcode. D6 for bitmask.
00001236                           471  * ADDR REG        
00001236                           472  * POST COND     All registers return to their previous state.
00001236                           473  * ------------------------------------------------------
00001236                           474  OP1101
00001236                           475  
00001236                           476  
00001236                           477  
00001236                           478  * --- OP 1110 ------------------------------------------
00001236                           479  * FUNCTIONS     LSL, LSR, ASL, ASR, ROL, ROR, 
00001236                           480  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001236                           481  * ADDR REG        
00001236                           482  * POST COND     All registers return to their previous state.
00001236                           483  * ------------------------------------------------------
00001236                           484  OP1110
00001236                           485  
00001236                           486  
00001236                           487  
00001236                           488  
00001236                           489  * --- OP 1111 ------------------------------------------
00001236                           490  * FUNCTIONS     
00001236                           491  * DATA REG      D0, D1 for output. D2 for opcode. D6 for bitmask.
00001236                           492  * ADDR REG        
00001236                           493  * POST COND     All registers return to their previous state.
00001236                           494  * ------------------------------------------------------
00001236                           495  OP1111
00001236                           496  
00001236                           497  
00001236                           498  
00001236                           499  
00001236                           500  
00001236                           501  
00001236                           502   * --- BITMASK ----------------------------------------------------------------
00001236                           503   *@pre      D6 contains the starting bit you want masked, D7 the ending bit
00001236                           504   *
00001236                           505   *@post     D6 contains the bitmask, ready for use
00001236                           506   
00001236                           507  BITMASK
00001236  3F05                     508          MOVE    D5,-(A7)    * push D5 onto the stack so we can use it to
00001238  4245                     509          CLR     D5          * clear D5 so we can use it
0000123A                           510  LOOPBIT 
0000123A  0DC5                     511          BSET    D6,D5       * set the D6th bit in D5 to 1
0000123C  5246                     512          ADD     #1,D6       * increment D6
0000123E                           513          
0000123E  BC47                     514          CMP     D7,D6       * have we finished?
00001240  6E00 0004                515          BGT     BITMASKDONE * yes
00001244  60F4                     516          BRA     LOOPBIT     * no, iterate again
00001246                           517          
00001246                           518  BITMASKDONE
00001246                           519  
00001246  2C05                     520          MOVE.L  D5,D6
00001248  3A1F                     521          MOVE    (A7)+,D5    * restore D5
0000124A  4E75                     522          RTS
0000124C                           523          
0000124C                           524   * --- OP0100 -----------------------------------------------------------------
0000124C                           525   * @pre      D2 contains the opcode
0000124C                           526   *
0000124C                           527   * @post     all registers are returned to their previous state
0000124C                           528  
0000124C                           529  
0000124C                           530  
0000124C                           531   * ----------------------------------------------------------------------------
0000124C                           532   * ----------------------------------------------------------------------------
0000124C                           533   * Constants for printing information to the console
0000124C                           534  
0000124C  =0000000D                535  CR      EQU     $0D
0000124C  =0000000A                536  LF      EQU     $0A
0000124C= 45 4E 54 45 52 20 ...    537  MSGSTART    DC.B    'ENTER START ADDRESS: ',CR,LF,0
00001264= 45 4E 54 45 52 20 ...    538  MSGEND      DC.B    'ENTER END ADDRESS: ',CR,LF,0
0000127A= 0D 0A 00                 539  NEWLINE     DC.B    CR,LF,0
0000127D= 4E 4F 50 00              540  NOOPERATION DC.B    'NOP',0
00001281= 42 43 4C 52 00           541  BCLROP      DC.B    'BCLR',0
00001286= 4E 45 47 00              542  NEGOP       DC.B    'NEG',0
0000128A= 4F 52 49 00              543  ORIOP       DC.B    'ORI',0
0000128E= 43 4D 50 49 00           544  CMPIOP      DC.B    'CMPI',0
00001293= 4D 4F 56 45 4D 00        545  MOVEMOP     DC.B    'MOVEM',0
00001299                           546  
00001299                           547   * ----------------------------------------------------------------------------
00001299                           548   * ----------------------------------------------------------------------------
00001299                           549   * Data defined constants
00001299                           550   *   - B/W/L (representing Byte, Word, Long)
00001299                           551   *   - A0-A7 (representing the 8 address registers)
00001299                           552   *   - D0-D7 (representing the 8 data registers)
00001299                           553   * ----------------------------------------------------------------------------
00001299= 23                       554  IMD        DC.B    '#'
0000129A= 42 20                    555  __B        DC.B    'B '
0000129C= 57 20                    556  __W        DC.B    'W '
0000129E= 4C 20                    557  __L        DC.B    'L '
000012A0                           558  
000012A0= 41 30                    559  __A0        DC.B   'A0'
000012A2= 41 31                    560  __A1        DC.B   'A1'    
000012A4= 41 32                    561  __A2        DC.B   'A2'
000012A6= 41 33                    562  __A3        DC.B   'A3'
000012A8= 41 34                    563  __A4        DC.B   'A4'
000012AA= 41 35                    564  __A5        DC.B   'A5'
000012AC= 41 36                    565  __A6        DC.B   'A6'
000012AE= 41 37                    566  __A7        DC.B   'A7'
000012B0                           567  
000012B0= 44 30                    568  __D0        DC.B   'D0'
000012B2= 44 31                    569  __D1        DC.B   'D1'
000012B4= 44 32                    570  __D2        DC.B   'D2'
000012B6= 44 33                    571  __D3        DC.B   'D3'
000012B8= 44 34                    572  __D4        DC.B   'D4'
000012BA= 44 35                    573  __D5        DC.B   'D5'
000012BC= 44 36                    574  __D6        DC.B   'D6'
000012BE= 44 37                    575  __D7        DC.B   'D7'
000012C0                           576   * ---------------------------------------------------------------------------
000012C0                           577   * End of definition segment
000012C0                           578   * ---------------------------------------------------------------------------
000012C0                           579   * ---------------------------------------------------------------------------
000012C0                           580  
000012C0                           581  * Put variables and constants here
000012C0                           582  
00004000                           583      ORG $4000
00004000                           584  
00004000  4E71                     585      NOP
00004002  103C 009A                586      MOVE.B   #%10011010, D0
00004006  123C 00A9                587      MOVE.B   #%10101001, D1
0000400A  D200                     588      ADD.B    D0,D1
0000400C  48A7 4000                589      MOVEM    D1,-(A7)
00004010  4443                     590      NEG.W    D3
00004012                           591  
00004012                           592  END
00004012                           593      END    START        ; last line of source

1 error detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BCLROP              1281
BITMASK             1236
BITMASKDONE         1246
CMPIBYTE            10EE
CMPIEA              1162
CMPILONG            113C
CMPIOP              128E
CMPIREG             1198
CMPIREG000          11B6
CMPIREG001          11B6
CMPIWORD            1116
CR                  D
END                 4012
IMD                 1299
ISCMPI              10B4
ISORI               10B4
ITERATION           1058
LF                  A
LOOP                103A
LOOPBIT             123A
MODE_AN             11B6
MODE_DN             11B6
MODE_IAN            11B6
MODE_IAN_POS        11B6
MODE_IAN_PRE        11B6
MOVEMOP             1293
MSGEND              1264
MSGSTART            124C
NEGOP               1286
NEWLINE             127A
NEXT15              11D2
NEXT16              1050
NEXT17              1230
NEXT18              1224
NEXT19              11FC
NOOPERATION         127D
NOTBCLR             1092
OP0000              1068
OP0001              11B6
OP0010              11B6
OP0011              11B6
OP0100              11D2
OP0101              1236
OP0110              1236
OP0111              1236
OP1000              1236
OP1001              1236
OP1010              1236
OP1011              1236
OP1100              1236
OP1101              1236
OP1110              1236
OP1111              1236
OP_0000             0
OP_0001             1000
OP_0010             2000
OP_0011             3000
OP_0100             4000
OP_0101             5000
OP_0110             6000
OP_0111             7000
OP_1000             8000
OP_1001             9000
OP_1010             A000
OP_1011             B000
OP_1100             C000
OP_1101             D000
OP_1110             E000
OP_1111             F000
ORIOP               128A
START               1000
UNKNOWNOP           11B6
__A0                12A0
__A1                12A2
__A2                12A4
__A3                12A6
__A4                12A8
__A5                12AA
__A6                12AC
__A7                12AE
__B                 129A
__D0                12B0
__D1                12B2
__D2                12B4
__D3                12B6
__D4                12B8
__D5                12BA
__D6                12BC
__D7                12BE
__L                 129E
__W                 129C
