00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/11/2014 1:32:11 PM

00000000                             1  *    666
00000000                             2  *   66 66
00000000                             3  *  66   66
00000000                             4  *  66   66         8888
00000000                             5  *  66   66       88   kkkk
00000000                             6  *  66  66       8   88   kk      
00000000                             7  *   66  6      8  88  kkk  kk    
00000000                             8  *    66  6    8  88     kk  k
00000000                             9  *     66 66  88 88        kk
00000000                            10  *     6 _______ 8
00000000                            11  *    6    68k    8
00000000                            12  *   6_____PRO_____8
00000000                            13  *  6               8        68k is as easy as
00000000                            14  *  6    0     0    8        6 - 8 - k !
00000000                            15  *  6   /   V   \   8 
00000000                            16  *  6   \__/ \__/   8        Welcome to our Dissasembler, Professor Nash!
00000000                            17  *    6            8         Enjoy your stay!
00000000                            18  *      6        8      
00000000                            19  *        666888
00000000                            20  *  _____                   __    ___  _    
00000000                            21  * | ____|__ _ ___ _   _   / /_  ( _ )| | __
00000000                            22  * |  _| / _` / __| | | | | '_ \ / _ \| |/ /
00000000                            23  * | |__| (_| \__ \ |_| | | (_) | (_) |   < 
00000000                            24  * |_____\__,_|___/\__, |  \___/ \___/|_|\_\
00000000                            25  *                 |___/           
00000000                            26  *-----------------------------------------------------------
00000000                            27  * Title      : 68K Decompiler
00000000                            28  * Written by : Nick Bell, Sammy Nimnuch, Caleb Larson
00000000                            29  * Date       : 11/2014
00000000                            30  * Description: This program decompiles other 68K programs
00000000                            31  *              which are loaded into the simulator simultaneously.
00000000                            32  *-----------------------------------------------------------
00000000                            33  
00000000                            34  
00000000  =00000000                 35  OP_0000     EQU     %0000000000000000
00000000  =00001000                 36  OP_0001     EQU     %0001000000000000
00000000  =00002000                 37  OP_0010     EQU     %0010000000000000
00000000  =00003000                 38  OP_0011     EQU     %0011000000000000
00000000  =00004000                 39  OP_0100     EQU     %0100000000000000
00000000  =00005000                 40  OP_0101     EQU     %0101000000000000
00000000  =00006000                 41  OP_0110     EQU     %0110000000000000
00000000  =00007000                 42  OP_0111     EQU     %0111000000000000
00000000  =00008000                 43  OP_1000     EQU     %1000000000000000
00000000  =00009000                 44  OP_1001     EQU     %1001000000000000
00000000  =0000A000                 45  OP_1010     EQU     %1010000000000000
00000000  =0000B000                 46  OP_1011     EQU     %1011000000000000
00000000  =0000C000                 47  OP_1100     EQU     %1100000000000000
00000000  =0000D000                 48  OP_1101     EQU     %1101000000000000
00000000  =0000E000                 49  OP_1110     EQU     %1110000000000000
00000000  =0000F000                 50  OP_1111     EQU     %1111000000000000
00000000  =0000000F                 51  HEX_VALUE_MASK_LONG EQU     $0000000F  * mask a hex value in 32-bits
00000000                            52  
00000000                            53  * BITMASK     EQU     $F000       * used to bitmask the first nibble
00000000                            54  
00001000                            55  START:  ORG    $1000            * first instruction of program
00001000                            56  
00001000                            57  * -----------------------------------
00001000                            58  * Starting and Ending Addresses
00001000                            59  * -----------------------------------
00001000                            60  *-----------------------------------------------------------------------------
00001000                            61  *-----------------------------------------------------------------------------
00001000                            62  * NAME: x
00001000                            63  * DESCRIPTION:    a
00001000                            64  * PRE-CONDITION:  b
00001000                            65  * POST-CONDITION: c
00001000                            66  * REGISTERS:      d
00001000                            67  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001000                            68  
00001000                            69  * THINK ABOUT ASKING FOR VALID START/END NO NEGATIVE ADDR
00001000                            70  
00001000                            71  * LOAD MSGSTART, ASK FOR INPUT
00001000  43F9 0000243A             72          LEA     MSGSTART,A1     * Load MESSAGE START
00001006  103C 000E                 73          MOVE.B  #14,D0          * Trap #14 to display message
0000100A  4E4F                      74          TRAP    #15             * Perform #14
0000100C                            75          
0000100C                            76  * GETS THE STARTING ADDRESS
0000100C  103C 0004                 77          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001010  4E4F                      78          TRAP    #15             * Perform #15
00001012                            79          
00001012                            80  * MOVE IT TO ANOTHER ADDRESS REGISTER
00001012  2441                      81          MOVEA.L D1,A2           * Move the user input into A2. This is the starting address.
00001014                            82  
00001014                            83  * LOAD MSGSTART, ASK FOR INPUT
00001014  43F9 00002452             84          LEA     MSGEND,A1       * Load MESSAGE END
0000101A  303C 000E                 85          MOVE.W  #14,D0          * Trap #14 to display message
0000101E  4E4F                      86          TRAP    #15             * Perform #14
00001020                            87          
00001020                            88  * GETS THE ENDING ADDRESS
00001020  103C 0004                 89          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001024  4E4F                      90          TRAP    #15             * Perform Trap #4
00001026  2A01                      91          MOVE.L  D1,D5           * Move the ending address into D5
00001028  43F9 00002468             92          LEA     NEWLINE,A1      * Store newline variable for seper opcodes
0000102E                            93          
0000102E  3E3C 000F                 94          MOVE.W  #15,D7          * prep D7 for bitmask subroutine
00001032  3C3C 000C                 95          MOVE.W  #12,D6          * prep D6 for bitmask subroutine
00001036  6100 13EC                 96          BSR     BITMASK         * obtain a bitmask that goes from 12-15 (inclusive)
0000103A                            97          * MOVE.W  D6,D2           * move the bitmask to D2
0000103A                            98          
0000103A                            99  LOOP    
0000103A                           100  
0000103A  2C4A                     101          MOVE.L  A2,A6
0000103C  7608                     102          MOVE.L  #8,D3
0000103E  6100 11A4                103          BSR     PRINT_ASCII_HEX_CHAR
00001042                           104          
00001042                           105          *MOVE.W  A2,D1           * print what address we are processing
00001042                           106          *MOVE.B  #3,D0
00001042                           107          *TRAP    #15
00001042                           108          
00001042  43F9 0000250D            109          LEA     SPACE,A1        * print a space to seperate the address from the data
00001048  303C 000E                110          MOVE.W  #14,D0
0000104C  4E4F                     111          TRAP    #15
0000104E                           112  
0000104E  3F06                     113          MOVE    D6,-(A7)        * save the bitmask on the stack
00001050  341A                     114          MOVE.W  (A2)+,D2        * Read an operation into D2
00001052  CC42                     115          AND.W   D2,D6           * Apply this bitmask
00001054                           116          
00001054  BC7C 0000                117          CMP     #OP_0000,D6     * Does the operation start with 0000?
00001058  6600 000A                118          BNE     NOT0000         * No, check next case
0000105C  6100 0106                119          BSR     OP0000          * Branch to subroutine 0000
00001060  6000 00F6                120          BRA     ITERATION       * Move to next iteration of the loop
00001064                           121  NOT0000        
00001064  BC7C 1000                122          CMP     #OP_0001,D6     * Does the operation start with 0001?
00001068  6600 000A                123          BNE     NOT0001         * No, check next case
0000106C  6100 023A                124          BSR     OP0001          * Branch to subroutine 0001
00001070  6000 00E6                125          BRA     ITERATION       * Move to next iteration of the loop
00001074                           126  NOT0001
00001074  BC7C 2000                127          CMP     #OP_0010,D6     * Does the operation start with 0010?
00001078  6600 000A                128          BNE     NOT0010         * No, check next case
0000107C  6100 0290                129          BSR     OP0010          * Branch to subroutine 0010
00001080  6000 00D6                130          BRA     ITERATION       * Move to next iteration of the loop
00001084                           131  NOT0010
00001084  BC7C 3000                132          CMP     #OP_0011,D6     * Does the operation start with 0011?
00001088  6600 000A                133          BNE     NOT0011         * No, check next case
0000108C  6100 0286                134          BSR     OP0011          * Branch to subroutine 0011
00001090  6000 00C6                135          BRA     ITERATION       * Move to next iteration of the loop
00001094                           136  NOT0011
00001094  BC7C 4000                137          CMP     #OP_0100,D6     * Does the operation start with 0100?
00001098  6600 000A                138          BNE     NOT0100         * No, check next case
0000109C  6100 0284                139          BSR     OP0100          * Branch to subroutine 0100
000010A0  6000 00B6                140          BRA     ITERATION       * Move to next iteration of the loop
000010A4                           141  NOT0100
000010A4  BC7C 5000                142          CMP     #OP_0101,D6     * Does the operation start with 0101?
000010A8  6600 000A                143          BNE     NOT0101         * No, check next case
000010AC  6100 059E                144          BSR     OP0101          * Branch to subroutine 0101
000010B0  6000 00A6                145          BRA     ITERATION       * Move to next iteration of the loop
000010B4                           146  NOT0101
000010B4  BC7C 6000                147          CMP     #OP_0110,D6     * Does the operation start with 0110?
000010B8  6600 000A                148          BNE     NOT0110         * No, check next case
000010BC  6100 05FC                149          BSR     OP0110          * Branch to subroutine 0110
000010C0  6000 0096                150          BRA     ITERATION       * Move to next iteration of the loop
000010C4                           151  NOT0110
000010C4  BC7C 7000                152          CMP     #OP_0111,D6     * Does the operation start with 0111?
000010C8  6600 000A                153          BNE     NOT0111         * No, check next case
000010CC  6100 06B4                154          BSR     OP0111          * Branch to subroutine 0111
000010D0  6000 0086                155          BRA     ITERATION       * Move to next iteration of the loop
000010D4                           156  NOT0111
000010D4  BC7C 8000                157          CMP     #OP_1000,D6     * Does the operation start with 1000?
000010D8  6600 000A                158          BNE     NOT1000         * No, check next case
000010DC  6100 06AA                159          BSR     OP1000          * Branch to subroutine 1000
000010E0  6000 0076                160          BRA     ITERATION       * Move to next iteration of the loop
000010E4                           161  NOT1000
000010E4  BC7C 9000                162          CMP     #OP_1001,D6     * Does the operation start with 1001?
000010E8  6600 000A                163          BNE     NOT1001         * No, check next case
000010EC  6100 072E                164          BSR     OP1001          * Branch to subroutine 1001
000010F0  6000 0066                165          BRA     ITERATION       * Move to next iteration of the loop
000010F4                           166  NOT1001
000010F4  BC7C A000                167          CMP     #OP_1010,D6     * Does the operation start with 1010?
000010F8  6600 000A                168          BNE     NOT1010         * No, check next case
000010FC  6100 071E                169          BSR     OP1010          * Branch to subroutine 1010
00001100  6000 0056                170          BRA     ITERATION       * Move to next iteration of the loop
00001104                           171  NOT1010
00001104  BC7C B000                172          CMP     #OP_1011,D6     * Does the operation start with 1011?
00001108  6600 000A                173          BNE     NOT1011         * No, check next case
0000110C  6100 0714                174          BSR     OP1011          * Branch to subroutine 1011
00001110  6000 0046                175          BRA     ITERATION       * Move to next iteration of the loop
00001114                           176  NOT1011
00001114  BC7C C000                177          CMP     #OP_1100,D6     * Does the operation start with 1100?
00001118  6600 000A                178          BNE     NOT1100         * No, check next case
0000111C  6100 070A                179          BSR     OP1100          * Branch to subroutine 1100
00001120  6000 0036                180          BRA     ITERATION       * Move to next iteration of the loop
00001124                           181  NOT1100
00001124  BC7C D000                182          CMP     #OP_1101,D6     * Does the operation start with 1101?
00001128  6600 000A                183          BNE     NOT1101         * No, check next case
0000112C  6100 0784                184          BSR     OP1101          * Branch to subroutine 1101
00001130  6000 0026                185          BRA     ITERATION       * Move to next iteration of the loop
00001134                           186  NOT1101
00001134  BC7C E000                187          CMP     #OP_1110,D6     * Does the operation start with 1110?
00001138  6600 000A                188          BNE     NOT1110         * No, check next case
0000113C  6100 08FA                189          BSR     OP1110          * Branch to subroutine 1110
00001140  6000 0016                190          BRA     ITERATION       * Move to next iteration of the loop
00001144                           191  NOT1110
00001144  BC7C F000                192          CMP     #OP_1111,D6     * Does the operation start with 1111?
00001148  6600 000A                193          BNE     LOOPUNKNOWNOP   * No, check next case
0000114C  6100 0A80                194          BSR     OP1111          * Branch to subroutine 1111
00001150  6000 0006                195          BRA     ITERATION       * Move to next iteration of the loop
00001154                           196          
00001154                           197  LOOPUNKNOWNOP
00001154  6100 1064                198          BSR     UNKNOWNOP
00001158                           199          
00001158                           200  ITERATION
00001158  3C1F                     201          MOVE    (A7)+,D6        * restore the bitmask to its previous state
0000115A                           202  
0000115A                           203          *MOVE.B  #14,D0          * Print a newline
0000115A                           204          *TRAP    #15             * Perform Trap #14
0000115A                           205  
0000115A  BA4A                     206          CMP     A2,D5           * Compare the starting address to ending address
0000115C  6700 2EE6                207          BEQ     END             * If they are equal, branch 
00001160  6000 FED8                208          BRA     LOOP            * Otherwise, branch back to LOOP
00001164                           209  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001164                           210  *-----------------------------------------------------------------------------
00001164                           211  
00001164                           212  
00001164                           213  
00001164                           214  *-----------------------------------------------------------------------------
00001164                           215  *-----------------------------------------------------------------------------
00001164                           216  * NAME: OP_0000   (BCLR, ORI, CMPI)
00001164                           217  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001164                           218  * PRE-CONDITION:  xyz
00001164                           219  * POST-CONDITION: All registers return to their previous state, and the output
00001164                           220  *                 goes to the output console for reading the raw data or the
00001164                           221  *                 actual instruction.
00001164                           222  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001164                           223  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001164                           224  OP0000
00001164  48A7 FFC0                225          MOVEM   D0-D7/A0-A1,-(A7)   * Push values to the stack to save
00001168  3C3C 0006                226          MOVE.W  #6, D6              * Prep lower value for bitmask
0000116C  3E3C 0008                227          MOVE.W  #8, D7              * Prep upper value for bitmask
00001170  6100 12B2                228          BSR     BITMASK             * Finalize bitmask setup
00001174  CC42                     229          AND     D2,D6               * Apply bitmask
00001176                           230          
00001176                           231          * TODO: Consider static  AND dynamic BCLR.
00001176                           232          * Only works for Dynamic right now
00001176  0C46 0180                233          CMPI    #%0000000110000000, D6  * Are we BCLR?
0000117A  6600 0066                234          BNE     NOTBCLR                 * If not, branch to other OP0000 functions
0000117E                           235          
0000117E  3C3C 0003                236          MOVE.W  #3, D6              * Prep lower value for bitmask
00001182  3E3C 0005                237          MOVE.W  #5, D7              * Prep upper value for bitmask
00001186  6100 129C                238          BSR     BITMASK             * Finalize bitmask setup
0000118A  CC42                     239          AND     D2,D6               * Apply bitmask
0000118C                           240          
0000118C                           241          * Checking for unsupported mode
0000118C  0C46 0008                242          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
00001190  6700 010C                243          BEQ     UNKNOWN0000             * If so, branch to other OP0000 functions
00001194                           244          
00001194                           245          * Confirmed BCLR at this point
00001194  43F9 00002494            246          LEA     BCLROP,A1           * We found BCLR
0000119A  103C 000E                247          MOVE.B  #14,D0              * Trap #14 prints out the data
0000119E  4E4F                     248          TRAP    #15                 * Perform Trap #14
000011A0                           249  
000011A0  43F9 0000250D            250          LEA     SPACE,A1            * Formatting
000011A6  103C 000E                251          MOVE.B  #14,D0              * Trap #14 prints out space
000011AA  4E4F                     252          TRAP    #15                 * Perform Trap #14
000011AC                           253          
000011AC                           254          * Set up for printing out the Register
000011AC  0882 0006                255          BCLR    #6,D2               * Clear bit 6
000011B0  0882 0007                256          BCLR    #7,D2               * Clear bit 7
000011B4  0882 0008                257          BCLR    #8,D2               * Clear bit 8
000011B8                           258          
000011B8  6100 0A1A                259          BSR     EAHELPER611         * Print out Register
000011BC                           260  
000011BC  43F9 00002513            261          LEA     COMMA,A1            * formatting
000011C2  103C 000E                262          MOVE.B  #14,D0              * Trap #14 prints out a comma
000011C6  4E4F                     263          TRAP    #15                 * Perform Trap #14
000011C8                           264          
000011C8  4243                     265          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
000011CA  08C3 0000                266          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
000011CE                           267      
000011CE  6100 0A46                268          BSR     EAHELPER05          * Print out data.
000011D2                           269          
000011D2  43F9 00002468            270          LEA     NEWLINE,A1          * Formatting
000011D8  103C 000E                271          MOVE.B  #14,D0              * Trap #14 prints out the data
000011DC  4E4F                     272          TRAP    #15                 * Perform Trap #14
000011DE                           273          
000011DE  6000 00C2                274          BRA     END0000             * Found the op, move to next iteration
000011E2                           275          
000011E2                           276  NOTBCLR * Possible options left are ORI or CMPI
000011E2  3C3C 0009                277          MOVE.W  #9, D6              * Prep lower value for bitmask
000011E6  3E3C 000B                278          MOVE.W  #11, D7             * Prep upper value for bitmask
000011EA  6100 1238                279          BSR     BITMASK             * Finalize bitmask setup
000011EE  CC42                     280          AND     D2,D6               * Apply bitmask
000011F0                           281          
000011F0  0C46 0000                282          CMPI    #%0000000000000000, D6   * Are we possibly ORI?
000011F4  6600 00A0                283          BNE     NOTORI                   * If not, branch to NOTORI
000011F8                           284          
000011F8                           285          * Size check to see if unsupported ORI mode
000011F8  3C3C 0006                286          MOVE.W  #6, D6              * Prep lower value for bitmask
000011FC  3E3C 0007                287          MOVE.W  #7, D7              * Prep upper value for bitmask
00001200  6100 1222                288          BSR     BITMASK             * Finalize bitmask setup
00001204  CC42                     289          AND     D2,D6               * Apply bitmask
00001206                           290          
00001206  0C46 00C0                291          CMPI    #%0000000011000000, D6  * Are bits 6,7 == 1,1?
0000120A  6700 0092                292          BEQ     UNKNOWN0000             * If so, unknown op. 
0000120E                           293          
0000120E                           294          * Mode check to see if unsupported ORI mode
0000120E  3C3C 0003                295          MOVE.W  #3, D6              * Prep lower value for bitmask
00001212  3E3C 0005                296          MOVE.W  #5, D7              * Prep upper value for bitmask
00001216  6100 120C                297          BSR     BITMASK             * Finalize bitmask setup
0000121A  CC42                     298          AND     D2,D6               * Apply bitmask
0000121C                           299          
0000121C  0C46 0008                300          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
00001220  6700 007C                301          BEQ     UNKNOWN0000             * If so, unknown op. 
00001224                           302          
00001224                           303          * Confirmed ORI at this point
00001224  43F9 000024A2            304          LEA     ORIOP, A1           * Load 'ORI' into the output window
0000122A  103C 000E                305          MOVE.B  #14,D0              * Trap #14 prints out the data in D0
0000122E  4E4F                     306          TRAP    #15                 * Perform Trap #14
00001230                           307          
00001230  6100 0D3A                308          BSR     SIZE67              * Print the size
00001234                           309          
00001234                           310          * Mode check to see the size
00001234  3C3C 0006                311          MOVE.W  #6, D6              * Prep lower value for bitmask
00001238  3E3C 0007                312          MOVE.W  #7, D7              * Prep upper value for bitmask
0000123C  6100 11E6                313          BSR     BITMASK             * Finalize bitmask setup
00001240  CC42                     314          AND     D2,D6               * Apply bitmask
00001242                           315          
00001242  2802                     316          MOVE.L  D2, D4              * Saving stuff
00001244                           317                  
00001244  43F9 00002511            318          LEA     IMD, A1             * Formatting
0000124A  103C 000E                319          MOVE.B  #14,D0              * Trap #14 prints out the data
0000124E  4E4F                     320          TRAP    #15                 * Perform Trap #14
00001250                           321          
00001250                           322          * Grab immediate data
00001250  3A1A                     323          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
00001252  E18D                     324          LSL.L   #8, D5
00001254  E18D                     325          LSL.L   #8, D5
00001256  2C45                     326          MOVE.L  D5, A6
00001258  7604                     327          MOVE.L  #4, D3
0000125A  6100 0F88                328          BSR     PRINT_ASCII_HEX_CHAR
0000125E                           329  
0000125E                           330          
0000125E  0C46 0080                331          CMPI    #%0000000010000000, D6   * See if the size is a LONG
00001262  6600 0010                332          BNE     SKIPLONG    
00001266                           333          
00001266                           334          * Grab next word
00001266  3A1A                     335          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
00001268  E18D                     336          LSL.L   #8, D5
0000126A  E18D                     337          LSL.L   #8, D5
0000126C  2C45                     338          MOVE.L  D5, A6
0000126E  7604                     339          MOVE.L  #4, D3
00001270  6100 0F72                340          BSR     PRINT_ASCII_HEX_CHAR
00001274                           341  
00001274                           342  SKIPLONG
00001274  43F9 00002513            343          LEA     COMMA, A1           * Formatting
0000127A  103C 000E                344          MOVE.B  #14,D0              * Trap #14 prints out the data
0000127E  4E4F                     345          TRAP    #15                 * Perform Trap #14
00001280                           346          
00001280  2404                     347          MOVE.L  D4, D2          * Return stuff
00001282                           348          
00001282  6100 0992                349          BSR     EAHELPER05          * Print out the EA
00001286                           350          
00001286  43F9 00002468            351          LEA     NEWLINE,A1          * Formatting
0000128C  103C 000E                352          MOVE.B  #14,D0              * Trap #14 prints out the data
00001290  4E4F                     353          TRAP    #15                 * Perform Trap #14
00001292                           354          
00001292  6000 000E                355          BRA     END0000             * Done with op. Move to next iteration
00001296                           356  
00001296                           357          
00001296                           358  NOTORI  * Possible option left is CMPI
00001296  0C46 0C00                359          CMPI    #%0000110000000000, D6  * Are we CMPI?
0000129A  6600 0002                360          BNE     UNKNOWN0000             * If not, unknown op
0000129E                           361          
0000129E                           362          * TODO: Continue checking for CMPI validity
0000129E                           363          
0000129E                           364  UNKNOWN0000
0000129E  6100 0F1A                365          BSR     UNKNOWNOP       * Unknown op
000012A2                           366          
000012A2                           367  END0000          
000012A2  4C9F 03FF                368         MOVEM   (A7)+,D0-D7/A0-A1   * Push values to the stack to save
000012A6  4E75                     369         RTS
000012A8                           370  
000012A8                           371  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000012A8                           372  *-----------------------------------------------------------------------------
000012A8                           373  
000012A8                           374  
000012A8                           375  
000012A8                           376  *-----------------------------------------------------------------------------
000012A8                           377  *-----------------------------------------------------------------------------
000012A8                           378  * NAME: OP_0001   (MOVE.B)
000012A8                           379  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000012A8                           380  * PRE-CONDITION:  xyz
000012A8                           381  * POST-CONDITION: All registers return to their previous state, and the output
000012A8                           382  *                 goes to the output console for reading the raw data or the
000012A8                           383  *                 actual instruction.
000012A8                           384  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000012A8                           385  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000012A8                           386  OP0001  
000012A8  48A7 FFC0                387          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
000012AC  3C3C 0006                388          MOVE.W  #6, D6              * Prep lower value for bitmask
000012B0  3E3C 0008                389          MOVE.W  #8, D7              * Prep upper value for bitmask
000012B4  6100 116E                390          BSR     BITMASK             * Finalize bitmask setup
000012B8  CC42                     391          AND     D2,D6               * Apply bitmask
000012BA                           392          
000012BA                           393          * I may have fucked off this part, sorry - Caleb
000012BA                           394          * CMPI    #%0000000001000000, D6  * Is the destination mode 001?
000012BA                           395          * BNE     UNKNOWNOP0001                 * If so, it's unknown.
000012BA                           396          
000012BA  43F9 00002478            397          LEA     MOVEOP,A1   * Put 'MOVE' into the window
000012C0  103C 000E                398          MOVE.B  #14,D0      * Trap #14 to print out
000012C4  4E4F                     399          TRAP    #15         * Perform Trap #14
000012C6                           400          
000012C6                           401          *-----------------------------------------------------------
000012C6                           402          * the following code is to move the size bits into the
000012C6                           403          * 0-1 positions of D3 so that eahelper05 case use that as a "parameter"
000012C6                           404          * for eahelper05
000012C6                           405          
000012C6  3C3C 000C                406          MOVE.W  #12, D6              * Prep lower value for bitmask
000012CA  3E3C 000D                407          MOVE.W  #13, D7              * Prep upper value for bitmask
000012CE  6100 1154                408          BSR     BITMASK              * Finalize bitmask setup
000012D2  CC42                     409          AND     D2,D6                * Apply bitmask
000012D4                           410          
000012D4  E04E                     411          LSR     #8,D6
000012D6  E84E                     412          LSR     #4,D6
000012D8                           413          
000012D8  4243                     414          CLR     D3
000012DA                           415          
000012DA  1606                     416          MOVE.B  D6,D3
000012DC                           417          
000012DC                           418          *---------------------------------------------------------------
000012DC                           419          
000012DC                           420          
000012DC  6100 0C8E                421          BSR     SIZE67
000012E0  6100 0934                422          BSR     EAHELPER05
000012E4                           423          
000012E4  43F9 00002513            424          LEA     COMMA,A1
000012EA  103C 000E                425          MOVE.B  #14,D0
000012EE  4E4F                     426          TRAP    #15
000012F0                           427          
000012F0  6100 08E2                428          BSR     EAHELPER611
000012F4                           429          
000012F4  43F9 00002468            430          LEA     NEWLINE,A1
000012FA  103C 000E                431          MOVE.B  #14,D0
000012FE  4E4F                     432          TRAP    #15
00001300                           433          
00001300  6000 0006                434          BRA     ENDOP0001
00001304                           435          *LEA     __B,A1      * Put '.B' into the window
00001304                           436          *MOVE.B  #14,D0      * Trap #14 to print out
00001304                           437          *TRAP    #15         * Perform Trap #14
00001304                           438          
00001304                           439  UNKNOWNOP0001
00001304  6100 0EB4                440          BSR     UNKNOWNOP
00001308                           441          
00001308                           442  ENDOP0001
00001308  4C9F 03FF                443          MOVEM (A7)+,D0-D7/A0-A1
0000130C  4E75                     444          RTS        
0000130E                           445          
0000130E                           446          * TODO: DETERMINE THE MODE AND REG FOR DESTINATION AND SOURCE
0000130E                           447  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000130E                           448  *-----------------------------------------------------------------------------
0000130E                           449  
0000130E                           450  
0000130E                           451  
0000130E                           452  *-----------------------------------------------------------------------------
0000130E                           453  *-----------------------------------------------------------------------------
0000130E                           454  * NAME: OP_0010   (MOVE.L, MOVEA.L)
0000130E                           455  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000130E                           456  * PRE-CONDITION:  xyz
0000130E                           457  * POST-CONDITION: All registers return to their previous state, and the output
0000130E                           458  *                 goes to the output console for reading the raw data or the
0000130E                           459  *                 actual instruction.
0000130E                           460  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000130E                           461  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000130E                           462  OP0010
0000130E                           463  
0000130E  6100 0EAA                464      BSR     UNKNOWNOP
00001312  4E75                     465      RTS
00001314                           466  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001314                           467  *-----------------------------------------------------------------------------
00001314                           468  
00001314                           469  
00001314                           470  
00001314                           471  *-----------------------------------------------------------------------------
00001314                           472  *-----------------------------------------------------------------------------
00001314                           473  * NAME: OP_0011   (MOVE.W, MOVEA.W)
00001314                           474  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001314                           475  * PRE-CONDITION:  xyz
00001314                           476  * POST-CONDITION: All registers return to their previous state, and the output
00001314                           477  *                 goes to the output console for reading the raw data or the
00001314                           478  *                 actual instruction.
00001314                           479  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001314                           480  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001314                           481  OP0011
00001314  48A7 FFFE                482      MOVEM   D0-D7/A0-A6, -(A7)
00001318                           483      
00001318                           484      *MOVE.W  #6,D6
00001318                           485      *MOVE.W  #8,D7
00001318                           486      
00001318                           487      *BSR     BITMASK
00001318                           488      
00001318                           489      *AND.W   D2,D6
00001318                           490      
00001318                           491      *CMP     #%0000000001000000,D6
00001318                           492      *BNE     NEXT15
00001318                           493      *BSR     * for MOVEA.W
00001318                           494      
00001318  4C9F 7FFF                495      MOVEM   (A7)+,D0-D7/A0-A6
0000131C                           496      
0000131C  6100 0E9C                497      BSR     UNKNOWNOP
00001320  4E75                     498      RTS
00001322                           499  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001322                           500  *-----------------------------------------------------------------------------
00001322                           501  
00001322                           502  *-----------------------------------------------------------------------------
00001322                           503  *-----------------------------------------------------------------------------
00001322                           504  * NAME: OP_0100   (NOP, MOVEM, LEA, NEG, JSR, RTS)
00001322                           505  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001322                           506  * PRE-CONDITION:  xyz
00001322                           507  * POST-CONDITION: All registers return to their previous state, and the output
00001322                           508  *                 goes to the output console for reading the raw data or the
00001322                           509  *                 actual instruction.
00001322                           510  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001322                           511  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001322                           512  OP0100  
00001322                           513          * TODO: movem
00001322                           514  
00001322  48A7 C0C0                515          MOVEM   D0-D1/A0-A1,-(A7) * Push values to the stack to save
00001326                           516          
00001326                           517          *NOP
00001326  0C42 4E71                518          CMPI    #%0100111001110001,D2
0000132A  6600 0012                519          BNE     NOTNOP
0000132E                           520          
0000132E  43F9 00002470            521          LEA     NOOPERATION,A1
00001334  103C 000D                522          MOVE.B  #13,D0          * Print a newline
00001338  4E4F                     523          TRAP    #15
0000133A                           524          
0000133A  6000 0306                525          BRA     DONE0100 *we found it, move on to the next iteration
0000133E                           526  NOTNOP *NEG
0000133E                           527          
0000133E                           528          * prep values for BITMASK subroutine
0000133E  7C08                     529          MOVE.L  #8,D6
00001340  7E0B                     530          MOVE.L  #11,D7
00001342                           531          
00001342  6100 10E0                532          BSR     BITMASK
00001346                           533          
00001346  CC42                     534          AND     D2,D6                   * apply bitmask
00001348                           535          
00001348  0C46 0400                536          CMPI    #%0000010000000000,D6   * are we NEG?
0000134C  6600 0046                537          BNE     NOTNEG                  * not neg
00001350                           538          
00001350  7C03                     539          MOVE.L  #3,D6
00001352  7E05                     540          MOVE.L  #5,D7
00001354                           541          
00001354  6100 10CE                542          BSR     BITMASK * generate a bitmask to be used to check mode
00001358                           543          
00001358  0C46 0008                544          CMPI    #%0000000000001000,D6 * check to see if it is the unsupported mode
0000135C  6700 02E0                545          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
00001360                           546          
00001360  0C46 0028                547          CMPI    #%0000000000101000,D6 * check to see if it is the unsupported mode
00001364  6700 02D8                548          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
00001368                           549          
00001368  0C46 0030                550          CMPI    #%0000000000110000,D6 * check to see if it is the unsupported mode
0000136C  6700 02D0                551          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
00001370                           552        
00001370                           553          * it is NEG, print
00001370  43F9 00002474            554          LEA     NEGOP,A1
00001376  103C 000E                555          MOVE.B  #14,D0
0000137A  4E4F                     556          TRAP    #15
0000137C                           557          
0000137C  6100 0BEE                558          BSR     SIZE67
00001380                           559          
00001380  6100 0894                560          BSR     EAHELPER05
00001384                           561          
00001384  43F9 00002468            562          LEA     NEWLINE,A1
0000138A  103C 000E                563          MOVE.B  #14,D0
0000138E  4E4F                     564          TRAP    #15
00001390                           565          
00001390  6000 02B0                566          BRA     DONE0100 * we found the op, move to next iteration
00001394                           567          
00001394                           568  NOTNEG *MOVEM
00001394                           569  
00001394                           570          * prep values for BITMASK subroutine
00001394  7C07                     571          MOVE.L  #7,D6
00001396  7E09                     572          MOVE.L  #9,D7
00001398                           573          
00001398  6100 108A                574          BSR     BITMASK
0000139C                           575          
0000139C  CC82                     576          AND.L   D2,D6   * apply bitmask
0000139E                           577          
0000139E  0C46 0080                578          CMPI    #%0000000010000000,D6 * is it MOVEM?
000013A2  6600 0148                579          BNE     NOTMOVEM          * it is not MOVEM
000013A6                           580          
000013A6  7C08                     581          MOVE.L  #8,D6
000013A8  7E08                     582          MOVE.L  #8,D7
000013AA                           583          
000013AA  6100 1078                584          BSR     BITMASK
000013AE                           585          
000013AE  CC82                     586          AND.L   D2,D6
000013B0                           587          
000013B0  0C46 0100                588          CMPI    #%0000000100000000,D6 * is it register to memory?
000013B4  6700 009C                589          BEQ     MOVEMTOMEM 
000013B8                           590          
000013B8                           591  MOVEMTOREG *supported modes: 010 011
000013B8                           592  
000013B8  7C03                     593          MOVE.L  #3,D6
000013BA  7E05                     594          MOVE.L  #5,D7
000013BC                           595          
000013BC  6100 1066                596          BSR     BITMASK
000013C0                           597          
000013C0  CC82                     598          AND.L   D2,D6
000013C2                           599          
000013C2  0C46 0000                600          CMPI    #%0000000000000000,D6 * is it an unsupported mode?
000013C6  6700 0276                601          BEQ     UNKNOWN0100
000013CA                           602          
000013CA  0C46 0008                603          CMPI    #%0000000000001000,D6 * is it an unsupported mode?
000013CE  6700 026E                604          BEQ     UNKNOWN0100
000013D2                           605          
000013D2  0C46 0020                606          CMPI    #%0000000000100000,D6 * is it an unsupported mode?
000013D6  6700 0266                607          BEQ     UNKNOWN0100
000013DA                           608          
000013DA  0C46 0028                609          CMPI    #%0000000000101000,D6 * is it an unsupported mode?
000013DE  6700 025E                610          BEQ     UNKNOWN0100
000013E2                           611          
000013E2  0C46 0030                612          CMPI    #%0000000000110000,D6 * is it an unsupported mode?
000013E6  6700 0256                613          BEQ     UNKNOWN0100
000013EA                           614          
000013EA  0C46 0038                615          CMPI    #%0000000000111000,D6 * is it an unsupported mode?
000013EE  6700 024E                616          BEQ     UNKNOWN0100
000013F2                           617          
000013F2  43F9 0000247D            618          LEA     MOVEMOP,A1
000013F8  103C 000E                619          MOVE.B  #14,D0          * print MOVEM
000013FC  4E4F                     620          TRAP    #15
000013FE                           621          
000013FE  7C06                     622          MOVE.L  #6,D6
00001400  7E06                     623          MOVE.L  #6,D7
00001402                           624          
00001402  6100 1020                625          BSR     BITMASK
00001406                           626          
00001406  CC82                     627          AND.L   D2,D6
00001408                           628          
00001408  0C46 0040                629          CMPI    #%0000000001000000,D6 * is it a long op?
0000140C  6600 0012                630          BNE     NOTLONGMOVEM1       * no, it is a word
00001410                           631          
00001410  43F9 00002529            632          LEA     __L,A1
00001416  103C 000E                633          MOVE.B  #14,D0          * print .L 
0000141A  4E4F                     634          TRAP    #15
0000141C                           635          
0000141C  6000 000E                636          BRA     SKIPNOTLONG1
00001420                           637          
00001420                           638  NOTLONGMOVEM1
00001420                           639  
00001420  43F9 00002525            640          LEA     __W,A1
00001426  103C 000E                641          MOVE.B  #14,D0          * print .W 
0000142A  4E4F                     642          TRAP    #15
0000142C                           643                  
0000142C                           644  SKIPNOTLONG1
0000142C                           645  
0000142C  6100 07E8                646          BSR     EAHELPER05 * print out the register we are moving from
00001430                           647          
00001430  43F9 00002513            648          LEA     COMMA,A1
00001436  103C 000E                649          MOVE.B  #14,D0          * print , 
0000143A  4E4F                     650          TRAP    #15
0000143C                           651          
0000143C  6100 0BF4                652          BSR     MOVEMHELPERPOST
00001440                           653          
00001440  341A                     654          MOVE.W  (A2)+,D2
00001442                           655          
00001442  43F9 00002468            656          LEA     NEWLINE,A1
00001448  103C 000E                657          MOVE.B  #14,D0          * print a newline 
0000144C  4E4F                     658          TRAP    #15
0000144E                           659      
0000144E  6000 01F2                660          BRA     DONE0100          * we found and printed, move on to the next iteration
00001452                           661          
00001452                           662  MOVEMTOMEM * supported modes 010 100
00001452                           663  
00001452  7C03                     664          MOVE.L  #3,D6
00001454  7E05                     665          MOVE.L  #5,D7
00001456                           666          
00001456  6100 0FCC                667          BSR     BITMASK
0000145A                           668          
0000145A  CC82                     669          AND.L   D2,D6
0000145C                           670          
0000145C  0C46 0000                671          CMPI    #%0000000000000000,D6 * is it an unsopported mode?
00001460  6700 01DC                672          BEQ     UNKNOWN0100
00001464                           673          
00001464  0C46 0008                674          CMPI    #%0000000000001000,D6 * is it an unsopported mode?
00001468  6700 01D4                675          BEQ     UNKNOWN0100
0000146C                           676          
0000146C  0C46 0018                677          CMPI    #%0000000000011000,D6 * is it an unsopported mode?
00001470  6700 01CC                678          BEQ     UNKNOWN0100
00001474                           679          
00001474  0C46 0028                680          CMPI    #%0000000000101000,D6 * is it an unsopported mode?
00001478  6700 01C4                681          BEQ     UNKNOWN0100
0000147C                           682          
0000147C  0C46 0030                683          CMPI    #%0000000000110000,D6 * is it an unsopported mode?
00001480  6700 01BC                684          BEQ     UNKNOWN0100
00001484                           685          
00001484  0C46 0070                686          CMPI    #%0000000001110000,D6 * is it an unsopported mode?
00001488  6700 01B4                687          BEQ     UNKNOWN0100
0000148C                           688          
0000148C  43F9 0000247D            689          LEA     MOVEMOP,A1
00001492  103C 000E                690          MOVE.B  #14,D0          * print MOVEM
00001496  4E4F                     691          TRAP    #15
00001498                           692          
00001498  7C06                     693          MOVE.L  #6,D6
0000149A  7E06                     694          MOVE.L  #6,D7
0000149C                           695          
0000149C  6100 0F86                696          BSR     BITMASK
000014A0                           697          
000014A0  CC82                     698          AND.L   D2,D6
000014A2                           699          
000014A2  0C46 0040                700          CMPI    #%0000000001000000,D6 * is it a long op?
000014A6  6600 0012                701          BNE     NOTLONGMOVEM2       * no, it is a word
000014AA                           702          
000014AA  43F9 00002529            703          LEA     __L,A1
000014B0  103C 000E                704          MOVE.B  #14,D0          * print .L 
000014B4  4E4F                     705          TRAP    #15
000014B6                           706          
000014B6  6000 000E                707          BRA     SKIPNOTLONG2
000014BA                           708          
000014BA                           709  NOTLONGMOVEM2
000014BA                           710  
000014BA  43F9 00002525            711          LEA     __W,A1
000014C0  103C 000E                712          MOVE.B  #14,D0          * print .W 
000014C4  4E4F                     713          TRAP    #15
000014C6                           714                  
000014C6                           715  SKIPNOTLONG2
000014C6                           716  
000014C6  6100 0CF2                717          BSR     MOVEMHELPERPRE
000014CA                           718  
000014CA  43F9 00002513            719          LEA     COMMA,A1
000014D0  103C 000E                720          MOVE.B  #14,D0          * print , 
000014D4  4E4F                     721          TRAP    #15
000014D6                           722          
000014D6  6100 073E                723          BSR     EAHELPER05 * print out the register we are moving to
000014DA                           724          
000014DA  341A                     725          MOVE.W  (A2)+,D2
000014DC                           726          
000014DC  43F9 00002468            727          LEA     NEWLINE,A1
000014E2  103C 000E                728          MOVE.B  #14,D0          * print a newline 
000014E6  4E4F                     729          TRAP    #15
000014E8                           730      
000014E8  6000 0158                731          BRA     DONE0100          * we found and printed, move on to the next iteration
000014EC                           732  
000014EC                           733  NOTMOVEM *JSR
000014EC                           734          * prep values for BITMASK subroutine
000014EC  7C06                     735          MOVE.L  #6,D6
000014EE  7E08                     736          MOVE.L  #8,D7
000014F0                           737          
000014F0  6100 0F32                738          BSR     BITMASK
000014F4                           739          
000014F4  CC42                     740          AND     D2,D6   * apply bitmask
000014F6                           741          
000014F6  0C46 0080                742          CMPI    #%0000000010000000,D6
000014FA  6600 003E                743          BNE     NOTJSR          * it's not JSR
000014FE                           744          
000014FE  43F9 00002483            745          LEA     JSROP,A1
00001504  103C 000E                746          MOVE.B  #14,D0          * Print a newline and JSR
00001508  4E4F                     747          TRAP    #15
0000150A                           748          
0000150A  43F9 0000250D            749          LEA     SPACE,A1
00001510  103C 000E                750          MOVE.B  #14,D0          * Print a newline and JSR
00001514  4E4F                     751          TRAP    #15
00001516                           752          
00001516                           753          * print out where we are jumping to
00001516                           754          
00001516  341A                     755          MOVE.W  (A2)+,D2 * read in the next word of the instruction 
00001518                           756          
00001518  2202                     757          MOVE.L  D2,D1   * save the opcode to print
0000151A                           758          
0000151A  7410                     759          MOVE.L  #16,D2  * set the base to 16
0000151C                           760          
0000151C  700F                     761          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
0000151E  4E4F                     762          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
00001520                           763          
00001520  341A                     764          MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
00001522                           765          
00001522  2202                     766          MOVE.L  D2,D1   * save the opcode to print
00001524                           767          
00001524  7410                     768          MOVE.L  #16,D2  * set the base to 16
00001526                           769          
00001526  700F                     770          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
00001528  4E4F                     771          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
0000152A                           772          
0000152A  43F9 00002468            773          LEA     NEWLINE,A1
00001530  103C 000E                774          MOVE.B  #14,D0          * Print a newline
00001534  4E4F                     775          TRAP    #15
00001536                           776          
00001536  6000 010A                777          BRA     DONE0100          * we already found instruction, next iteration
0000153A                           778  NOTJSR *RTS
0000153A                           779  
0000153A                           780          * prep values for BITMASK subroutine
0000153A  7C06                     781          MOVE.L  #6,D6
0000153C  7E08                     782          MOVE.L  #8,D7
0000153E                           783          
0000153E  6100 0EE4                784          BSR     BITMASK
00001542                           785          
00001542  CC42                     786          AND     D2,D6   * apply bitmask
00001544                           787          
00001544  0C46 0040                788          CMPI    #%0000000001000000,D6
00001548  6600 0012                789          BNE     NOTRTS          * it's not RTS
0000154C                           790          
0000154C  43F9 00002487            791          LEA     RTSOP,A1
00001552  103C 000D                792          MOVE.B  #13,D0          * Print a newline and RTS
00001556  4E4F                     793          TRAP    #15
00001558                           794          
00001558  6000 00E8                795          BRA     DONE0100          * we already found instruction, next iteration
0000155C                           796  NOTRTS  *LEA
0000155C                           797         
0000155C                           798          * prep values for BITMASK subroutine
0000155C  7C06                     799          MOVE.L  #6,D6
0000155E  7E08                     800          MOVE.L  #8,D7
00001560                           801          
00001560  6100 0EC2                802          BSR     BITMASK
00001564                           803          
00001564  CC42                     804          AND     D2,D6   * apply bitmask
00001566                           805          
00001566  0C46 01C0                806          CMPI    #%0000000111000000,D6
0000156A  6600 00D2                807          BNE     UNKNOWN0100          * it's not LEA, we dont know what it is
0000156E                           808          
0000156E                           809          * prep values for BITMASK subroutine
0000156E  7C03                     810          MOVE.L  #3,D6
00001570  7E05                     811          MOVE.L  #5,D7
00001572                           812          
00001572  6100 0EB0                813          BSR     BITMASK
00001576                           814          
00001576  CC42                     815          AND     D2,D6   * apply bitmask
00001578                           816          
00001578  0C46 0008                817          CMPI    #%0000000000001000,D6
0000157C  6700 00C0                818          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001580                           819          
00001580  0C46 0018                820          CMPI    #%0000000000011000,D6
00001584  6700 00B8                821          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001588                           822          
00001588  0C46 0020                823          CMPI    #%0000000000100000,D6
0000158C  6700 00B0                824          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001590                           825          
00001590  0C46 0028                826          CMPI    #%0000000000101000,D6
00001594  6700 00A8                827          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001598                           828          
00001598  0C46 0030                829          CMPI    #%0000000000110000,D6
0000159C  6700 00A0                830          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
000015A0                           831          
000015A0  0C46 0038                832          CMPI    #%0000000000111000,D6
000015A4  6700 0046                833          BEQ     TWOWORDLEA          * it's a two word LEA
000015A8                           834          
000015A8                           835          * check to make sure it is a supported mode and size
000015A8                           836          
000015A8  43F9 00002490            837          LEA     LEAOP,A1
000015AE  103C 000E                838          MOVE.B  #14,D0          * Print LEA
000015B2  4E4F                     839          TRAP    #15
000015B4                           840          
000015B4  0882 0007                841          BCLR    #7,D2
000015B8  0882 0008                842          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
000015BC                           843          
000015BC  43F9 0000250D            844          LEA     SPACE,A1
000015C2  103C 000E                845          MOVE.B  #14,D0          * Print SPACE
000015C6  4E4F                     846          TRAP    #15
000015C8                           847          
000015C8  6100 064C                848          BSR     EAHELPER05
000015CC                           849          
000015CC  43F9 00002513            850          LEA     COMMA,A1
000015D2  103C 000E                851          MOVE.B  #14,D0          * Print COMMA
000015D6  4E4F                     852          TRAP    #15
000015D8                           853          
000015D8  6100 05FA                854          BSR     EAHELPER611
000015DC                           855          
000015DC  43F9 00002468            856          LEA     NEWLINE,A1
000015E2  103C 000E                857          MOVE.B  #14,D0          * Start a new line
000015E6  4E4F                     858          TRAP    #15
000015E8                           859          
000015E8                           860          
000015E8                           861          * call EA helper
000015E8                           862          * MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
000015E8                           863                  
000015E8  6000 0058                864          BRA     DONE0100          * we already found instruction, next iteration
000015EC                           865          
000015EC                           866  TWOWORDLEA
000015EC                           867  
000015EC  43F9 00002490            868          LEA     LEAOP,A1
000015F2  103C 000E                869          MOVE.B  #14,D0   * Print LEA
000015F6  4E4F                     870          TRAP    #15
000015F8                           871          
000015F8  43F9 0000250D            872          LEA     SPACE,A1
000015FE  103C 000E                873          MOVE.B  #14,D0   * Print SPACE
00001602  4E4F                     874          TRAP    #15
00001604                           875  
00001604  321A                     876          MOVE.W  (A2)+,D1
00001606                           877          
00001606  7C00                     878          MOVE.L  #0,D6
00001608  7E0F                     879          MOVE.L  #15,D7
0000160A                           880          
0000160A  6100 0E18                881          BSR     BITMASK
0000160E                           882          
0000160E  C286                     883          AND.L   D6,D1   * shave off bad info
00001610                           884          
00001610  103C 0003                885          MOVE.B  #3,D0   * Print the address which was the source
00001614  4E4F                     886          TRAP    #15
00001616                           887          
00001616  43F9 00002513            888          LEA     COMMA,A1
0000161C  103C 000E                889          MOVE.B  #14,D0  * Print COMMA
00001620  4E4F                     890          TRAP    #15
00001622                           891          
00001622  0882 0007                892          BCLR    #7,D2
00001626  0882 0008                893          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
0000162A                           894          
0000162A  6100 05A8                895          BSR     EAHELPER611
0000162E                           896          
0000162E  43F9 00002468            897          LEA     NEWLINE,A1
00001634  103C 000E                898          MOVE.B  #14,D0          * Start a new line
00001638  4E4F                     899          TRAP    #15
0000163A                           900          
0000163A  6000 0006                901          BRA     DONE0100
0000163E                           902          
0000163E                           903  UNKNOWN0100 *dont know what it is
0000163E  6100 0B7A                904          BSR     UNKNOWNOP
00001642                           905          
00001642                           906  DONE0100
00001642  4C9F 0303                907          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
00001646  4E75                     908          RTS
00001648                           909          
00001648  6000 FB0E                910          BRA     ITERATION
0000164C                           911  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000164C                           912  *-----------------------------------------------------------------------------        
0000164C                           913          
0000164C                           914          
0000164C                           915  
0000164C                           916  *-----------------------------------------------------------------------------
0000164C                           917  *-----------------------------------------------------------------------------
0000164C                           918  * NAME: OP_0101   (SUBQ)
0000164C                           919  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000164C                           920  * PRE-CONDITION:  xyz
0000164C                           921  * POST-CONDITION: All registers return to their previous state, and the output
0000164C                           922  *                 goes to the output console for reading the raw data or the
0000164C                           923  *                 actual instruction.
0000164C                           924  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000164C                           925  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000164C                           926  OP0101
0000164C  48A7 FFC0                927          MOVEM   D0-D7/A0-A1,-(A7)       * Push values to the stack to save
00001650                           928  
00001650  CC7C 0100                929          AND     #%0000000100000000, D6  * Baby-Bitmask for the 8th digit.
00001654  0C46 0100                930          CMPI    #%0000000100000000, D6  * Is the 8th digit a 1?
00001658  6700 005A                931          BEQ     UNKNOWN0101             * If so, unknown op
0000165C                           932        
0000165C  0C46 0100                933          CMPI    #%0000000100000000, D6  * Is the size 11, an unsupported value?
00001660  6700 0052                934          BEQ     UNKNOWN0101             * If so, unknown op
00001664                           935            
00001664                           936          * Verified SUBQ at this point
00001664  43F9 0000248B            937          LEA     SUBQOP,A1           * Print out SUBQ
0000166A  103C 000E                938          MOVE.B  #14,D0              * Trap #14 to print out
0000166E  4E4F                     939          TRAP    #15                 * Perform Trap #14
00001670                           940                          
00001670  6100 08FA                941          BSR     SIZE67              * Print out size
00001674                           942          
00001674  43F9 00002511            943          LEA     IMD,A1              * Formatting
0000167A  103C 000E                944          MOVE.B  #14,D0              * Trap #14 prints out space
0000167E  4E4F                     945          TRAP    #15                 * Perform Trap #14
00001680                           946          
00001680  3C3C 0009                947          MOVE.W  #9, D6              * Prep lower value for bitmask
00001684  3E3C 000B                948          MOVE.W  #11,D7              * Prep upper value for bitmask
00001688  6100 0D9A                949          BSR     BITMASK             * Finalize bitmask setup
0000168C  CC42                     950          AND     D2,D6               * Apply bitmask
0000168E                           951          
0000168E  6100 0CE2                952          BSR     PRINTDATA911        * Special op for immediate in bits 9->11
00001692                           953            
00001692  43F9 00002513            954          LEA     COMMA,A1            * Formatting
00001698  103C 000E                955          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000169C  4E4F                     956          TRAP    #15                 * Perform Trap #14
0000169E                           957          
0000169E  6100 0576                958          BSR     EAHELPER05          * Print out the Effective Address
000016A2                           959          
000016A2  43F9 00002468            960          LEA     NEWLINE,A1          * Formatting
000016A8  103C 000E                961          MOVE.B  #14,D0              * Trap #14 prints out a comma
000016AC  4E4F                     962          TRAP    #15                 * Perform Trap #14
000016AE                           963          
000016AE  4C9F 03FF                964          MOVEM   (A7)+,D0-D7/A0-A1   * Pop off the stack to return our registers
000016B2  4E75                     965          RTS
000016B4                           966      
000016B4                           967  UNKNOWN0101
000016B4  6100 0B04                968          BSR     UNKNOWNOP
000016B8  4E75                     969          RTS
000016BA                           970  
000016BA                           971  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000016BA                           972  *-----------------------------------------------------------------------------
000016BA                           973  
000016BA                           974  
000016BA                           975  
000016BA                           976  *-----------------------------------------------------------------------------
000016BA                           977  *-----------------------------------------------------------------------------
000016BA                           978  * NAME: OP_0110   (BCC, BCS, BGE, BLT, BVC, BRA)
000016BA                           979  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000016BA                           980  * PRE-CONDITION:  Given the possibilties for 0110, masks the next 4 bits
000016BA                           981  *                 in the instruction and determines what the bits match to a
000016BA                           982  *                 given condition code. If the 8 bit offset is $00, or $FF,
000016BA                           983  *                 this signifies a word or long offset (for $00 and $FF
000016BA                           984  *                 respectively). The 8 bit offset is in 2's comp. form, and
000016BA                           985  *                 should be un-done, then plus or minus to the current
000016BA                           986  *                 program counter (PC) to get the actual memory label to
000016BA                           987  *                 output to console. The word offset signal eats an
000016BA                           988  *                 additional 16 bits and the long offset eats an additional
000016BA                           989  *                 32 bits. The word/long offset are for memory alignment.
000016BA                           990  * POST-CONDITION: All registers return to their previous state, and the output
000016BA                           991  *                 goes to the output console for reading the raw data or the
000016BA                           992  *                 actual instruction.
000016BA                           993  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000016BA                           994  *                 A1 (output)
000016BA                           995  * CONDITIONS TABLE:
000016BA                           996  *                Condition Names  - Mnemonic - Condition Code
000016BA                           997  *                --------------------------------------------
000016BA                           998  *                True             -    T     - 0000
000016BA                           999  *                False            -    F     - 0001
000016BA                          1000  *                Higher           -    HI    - 0010
000016BA                          1001  *                Lower or Same    -    LS    - 0011
000016BA                          1002  *                Carry Clear      -    CC    - 0100
000016BA                          1003  *                Carry Set        -    CS    - 0101
000016BA                          1004  *                Not Equal        -    NE    - 0110
000016BA                          1005  *                Equal            -    EQ    - 0111
000016BA                          1006  *                Overflow Clear   -    VC    - 1000
000016BA                          1007  *                Overflow Set     -    VS    - 1001
000016BA                          1008  *                Plus             -    PL    - 1010
000016BA                          1009  *                Minus            -    MI    - 1011
000016BA                          1010  *                Greater or Equal -    GE    - 1100
000016BA                          1011  *                Less Than        -    LT    - 1101
000016BA                          1012  *                Greater Than     -    GT    - 1110
000016BA                          1013  *                Less or Equal    -    LE    - 1111
000016BA                          1014  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000016BA  48E7 FFFE               1015  OP0110  MOVEM.L D0-D7/A0-A6,-(A7) * Save main method routine vars to stack
000016BE                          1016                          
000016BE  3C3C 0009               1017          MOVE.W  #9,D6  * Move in 9 to D6
000016C2  3E3C 000B               1018          MOVE.W  #11,D7 * Move in 11 to D7
000016C6                          1019                                        
000016C6  6100 0D5C               1020          BSR     BITMASK * Call BITMASK sub-routine, Returns a bitmask in D6
000016CA  CC42                    1021          AND     D2,D6   * apply the BITMASK
000016CC                          1022          
000016CC  0C46 0400               1023          CMPI    #%0000010000000000,D6 * CASE 1: BCC - BINARY FOR "CARRY CLEAR" FLAG
000016D0  6700 0032               1024          BEQ     OP_BCC
000016D4  0C46 0500               1025          CMPI    #%0000010100000000,D6 * CASE 2: BCS - BINARY FOR "CARRY SET" FLAG
000016D8  6700 0034               1026          BEQ     OP_BCS
000016DC  0C46 0C00               1027          CMPI    #%0000110000000000,D6 * CASE 3: BGE - BINARY FOR "GREATER OR EQUAL" FLAG
000016E0  6700 0036               1028          BEQ     OP_BGE
000016E4  0C46 0D00               1029          CMPI    #%0000110100000000,D6 * CASE 4: BLT - BINARY FOR "LESS THAN" FLAG
000016E8  6700 0038               1030          BEQ     OP_BLT
000016EC  0C46 0800               1031          CMPI    #%0000100000000000,D6 * CASE 5: BVC - BINARY FOR "OVERFLOW CLEAR" FLAG
000016F0  6700 003A               1032          BEQ     OP_BVC
000016F4  0C46 0000               1033          CMPI    #%0000000000000000,D6 * CASE 6: BRA - BINARY FOR "BRANCH ALWAYS" FLAG
000016F8  6700 003C               1034          BEQ     OP_BRA
000016FC  6100 0ABC               1035          BSR     UNKNOWNOP             * don't know what it is, print it out, skip to end
00001700  6000 007A               1036          BRA     BCC_END
00001704                          1037  
00001704  43F9 000024CB           1038  OP_BCC  LEA     OP_BCC_MSG,A1
0000170A  6000 0034               1039          BRA     OP_BRANCHES_PRINT
0000170E  43F9 000024D0           1040  OP_BCS  LEA     OP_BCS_MSG,A1
00001714  6000 002A               1041          BRA     OP_BRANCHES_PRINT
00001718  43F9 000024D5           1042  OP_BGE  LEA     OP_BGE_MSG,A1
0000171E  6000 0020               1043          BRA     OP_BRANCHES_PRINT
00001722  43F9 000024DA           1044  OP_BLT  LEA     OP_BLT_MSG,A1
00001728  6000 0016               1045          BRA     OP_BRANCHES_PRINT
0000172C  43F9 000024DF           1046  OP_BVC  LEA     OP_BVC_MSG,A1
00001732  6000 000C               1047          BRA     OP_BRANCHES_PRINT
00001736  43F9 000024E4           1048  OP_BRA  LEA     OP_BRA_MSG,A1
0000173C  6000 0002               1049          BRA     OP_BRANCHES_PRINT
00001740                          1050  OP_BRANCHES_PRINT
00001740  103C 000E               1051          MOVE.B  #14,D0 * print instruction op, chosen from cases directly above
00001744  4E4F                    1052          TRAP    #15
00001746                          1053          
00001746  43F9 0000250F           1054          LEA     DOLLAR,A1
0000174C  103C 000E               1055          MOVE.B  #14,D0 * print raw data hex of the LABEL
00001750  4E4F                    1056          TRAP    #15
00001752                          1057          
00001752  3C3C 0000               1058          MOVE.W  #0,D6                 * Move in 0 to D6 - prep mask
00001756  3E3C 0007               1059          MOVE.W  #7,D7                 * Move in 7 to D7
0000175A  6100 0CC8               1060          BSR     BITMASK               * Call BITMASK sub-routine, return in D6
0000175E  CC42                    1061          AND     D2,D6                 * AND mask with op bits, get last 8 bits in D6
00001760                          1062          
00001760                          1063  *        CMPI    #%00000000,D6         * all 0's == word offset
00001760                          1064  *        BEQ     BCC_WORD_OFFSET
00001760                          1065          
00001760                          1066  *        CMPI    #%11111111,D6         * all F's == long offset
00001760                          1067  *        BEQ     BCC_LONG_OFFSET
00001760                          1068  BCC_BYTE_OFFSET
00001760  4254                    1069          CLR     (A4)
00001762  2846                    1070          MOVE.L  D6,A4
00001764  43D4                    1071          LEA     (A4),A1
00001766  103C 000E               1072          MOVE.B  #14,D0
0000176A  4E4F                    1073          TRAP    #15
0000176C  43F9 00002468           1074          LEA     NEWLINE,A1
00001772  103C 000E               1075          MOVE.B  #14,D0
00001776  4E4F                    1076          TRAP    #15
00001778                          1077          
00001778  6000 0002               1078          BRA     BCC_END
0000177C                          1079  *BCC_WORD_OFFSET
0000177C                          1080  *        MOVEM.W (A2)+,A1
0000177C                          1081  *        MOVE.B  #13,D0
0000177C                          1082  *        TRAP    #15
0000177C                          1083  *        BRA     BCC_END
0000177C                          1084  *BCC_LONG_OFFSET
0000177C                          1085  *        MOVEM.L (A2)+,A1
0000177C                          1086  *        MOVE.B  #13,D0
0000177C                          1087  *        TRAP    #15
0000177C                          1088  *        BRA     BCC_END
0000177C                          1089  BCC_END * reload the memory, call RTS
0000177C  4C9F 7FFF               1090          MOVEM   (A7)+,D0-D7/A0-A6 * Pop off the stack to return our registers
00001780  4E75                    1091          RTS
00001782                          1092  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001782                          1093  *-----------------------------------------------------------------------------
00001782                          1094  
00001782                          1095  
00001782                          1096  
00001782                          1097  *-----------------------------------------------------------------------------
00001782                          1098  *-----------------------------------------------------------------------------
00001782                          1099  * NAME: OP_0111   ()
00001782                          1100  * DESCRIPTION:    OP code 0111 is not supported. 
00001782                          1101  * PRE-CONDITION:  
00001782                          1102  * POST-CONDITION: 
00001782                          1103  * REGISTERS:
00001782                          1104  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001782                          1105  OP0111
00001782  6100 0A36               1106      BSR     UNKNOWNOP
00001786  4E75                    1107      RTS
00001788                          1108  
00001788                          1109  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001788                          1110  *-----------------------------------------------------------------------------
00001788                          1111  
00001788                          1112  
00001788                          1113  
00001788                          1114  *-----------------------------------------------------------------------------
00001788                          1115  *-----------------------------------------------------------------------------
00001788                          1116  * NAME: OP_1000   (DIVS, OR)
00001788                          1117  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001788                          1118  * PRE-CONDITION:  xyz
00001788                          1119  * POST-CONDITION: All registers return to their previous state, and the output
00001788                          1120  *                 goes to the output console for reading the raw data or the
00001788                          1121  *                 actual instruction.
00001788                          1122  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001788                          1123  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001788                          1124  OP1000
00001788  48A7 FFC0               1125          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
0000178C                          1126  
0000178C                          1127          * Check if the EA Mode is 001 since both DIVS and OR do not support it
0000178C  3C3C 0003               1128          MOVE.W  #3, D6              * Prep lower value for bitmask
00001790  3E3C 0005               1129          MOVE.W  #5, D7              * Prep upper value for bitmask
00001794  6100 0C8E               1130          BSR     BITMASK             * Finalize bitmask setup
00001798  CC42                    1131          AND     D2,D6               * Apply bitmask
0000179A                          1132          
0000179A  0C46 0008               1133          CMPI    #%0000000000001000, D6  * Is the mode 001, an unsupported mode?
0000179E  6700 0A1A               1134          BEQ     UNKNOWNOP                 * If so, the op is not supported
000017A2                          1135          
000017A2                          1136          * Checking for DIVS
000017A2  3C3C 0006               1137          MOVE.W  #6, D6              * Prep lower value for bitmask
000017A6  3E3C 0008               1138          MOVE.W  #8, D7              * Prep upper value for bitmask
000017AA  6100 0C78               1139          BSR     BITMASK             * Finalize bitmask setup
000017AE  CC42                    1140          AND     D2,D6               * Apply bitmask
000017B0                          1141          
000017B0  0C46 01C0               1142          CMPI    #%0000000111000000, D6  * Are we DIVS?
000017B4  6600 0050               1143          BNE     NOTDIVS                 * If not, branch to see if it's OR
000017B8                          1144          
000017B8  43F9 0000246B           1145          LEA     DIVSOP,A1           * We found DIVS
000017BE  103C 000E               1146          MOVE.B  #14,D0              * Trap #14 prints out the data
000017C2  4E4F                    1147          TRAP    #15                 * Perform Trap #14
000017C4                          1148          
000017C4  43F9 0000250D           1149          LEA     SPACE,A1            * formatting
000017CA  103C 000E               1150          MOVE.B  #14,D0              * Trap #14 prints out space
000017CE  4E4F                    1151          TRAP    #15                 * Perform Trap #14
000017D0                          1152          
000017D0  4243                    1153          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
000017D2  08C3 0000               1154          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
000017D6                          1155                                      * to indicate a potential immediate of size word
000017D6                          1156          
000017D6  6100 043E               1157          BSR     EAHELPER05          * Print out data
000017DA                          1158  
000017DA  43F9 00002513           1159          LEA     COMMA,A1            * formatting
000017E0  103C 000E               1160          MOVE.B  #14,D0              * Trap #14 prints out a comma
000017E4  4E4F                    1161          TRAP    #15                 * Perform Trap #14
000017E6                          1162          
000017E6                          1163          * bit manipulation is needed to make the outlier DIVS work
000017E6                          1164          * with the generic EAHELPER611
000017E6  0882 0006               1165          BCLR    #6,D2
000017EA  0882 0007               1166          BCLR    #7,D2
000017EE  0882 0008               1167          BCLR    #8,D2
000017F2                          1168          
000017F2                          1169          * the above bits were cleared so that eahelper05 knows the destination
000017F2                          1170          * is a data register.
000017F2                          1171          
000017F2  6100 03E0               1172          BSR     EAHELPER611 
000017F6                          1173  
000017F6  43F9 00002468           1174          LEA     NEWLINE,A1          * We found DIVS
000017FC  103C 000E               1175          MOVE.B  #14,D0              * Trap #14 prints out the data
00001800  4E4F                    1176          TRAP    #15                 * Perform Trap #14
00001802                          1177          
00001802  6000 0012               1178          BRA     OP1000END
00001806                          1179          
00001806                          1180  NOTDIVS * It is confirmed OR at this point
00001806  43F9 0000249F           1181          LEA     OROP,A1         * We found OR
0000180C  103C 000E               1182          MOVE.B  #14,D0          * Trap #14 prints out the data
00001810  4E4F                    1183          TRAP    #15             * Perform Trap #14
00001812                          1184          *================================================================
00001812                          1185          * todo, move the size of the operation into the leading bits of D5
00001812                          1186          * before subroutine call
00001812  6100 03C0               1187          BSR     EAHELPER611
00001816                          1188  
00001816                          1189  OP1000END
00001816  4C9F 03FF               1190          MOVEM   (A7)+,D0-D7/A0-A1
0000181A  4E75                    1191          RTS
0000181C                          1192  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000181C                          1193  *-----------------------------------------------------------------------------
0000181C                          1194  
0000181C                          1195  
0000181C                          1196  
0000181C                          1197  *-----------------------------------------------------------------------------
0000181C                          1198  *-----------------------------------------------------------------------------
0000181C                          1199  * NAME: OP_1001   (SUB)
0000181C                          1200  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000181C                          1201  * PRE-CONDITION:  xyz
0000181C                          1202  * POST-CONDITION: All registers return to their previous state, and the output
0000181C                          1203  *                 goes to the output console for reading the raw data or the
0000181C                          1204  *                 actual instruction.
0000181C                          1205  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000181C                          1206  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000181C                          1207  OP1001
0000181C                          1208  
0000181C                          1209  
0000181C                          1210  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000181C                          1211  *-----------------------------------------------------------------------------
0000181C                          1212  
0000181C                          1213  
0000181C                          1214  
0000181C                          1215  *-----------------------------------------------------------------------------
0000181C                          1216  *-----------------------------------------------------------------------------
0000181C                          1217  * NAME: OP_1010   ()
0000181C                          1218  * DESCRIPTION:    a
0000181C                          1219  * PRE-CONDITION:  b
0000181C                          1220  * POST-CONDITION: c
0000181C                          1221  * REGISTERS:      d
0000181C                          1222  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000181C                          1223  OP1010
0000181C                          1224  
0000181C  6100 099C               1225      BSR     UNKNOWNOP
00001820  4E75                    1226      RTS
00001822                          1227  
00001822                          1228  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001822                          1229  *-----------------------------------------------------------------------------
00001822                          1230  
00001822                          1231  
00001822                          1232  
00001822                          1233  *-----------------------------------------------------------------------------
00001822                          1234  *-----------------------------------------------------------------------------
00001822                          1235  * NAME: OP_1011   (EOR, CMP)
00001822                          1236  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001822                          1237  * PRE-CONDITION:  xyz
00001822                          1238  * POST-CONDITION: All registers return to their previous state, and the output
00001822                          1239  *                 goes to the output console for reading the raw data or the
00001822                          1240  *                 actual instruction.
00001822                          1241  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001822                          1242  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001822                          1243  OP1011
00001822                          1244  
00001822  6100 0996               1245      BSR     UNKNOWNOP
00001826  4E75                    1246      RTS
00001828                          1247  
00001828                          1248  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001828                          1249  *-----------------------------------------------------------------------------
00001828                          1250  
00001828                          1251  
00001828                          1252  
00001828                          1253  *-----------------------------------------------------------------------------
00001828                          1254  *-----------------------------------------------------------------------------
00001828                          1255  * NAME: OP_1100   (MULS)
00001828                          1256  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001828                          1257  * PRE-CONDITION:  xyz
00001828                          1258  * POST-CONDITION: All registers return to their previous state, and the output
00001828                          1259  *                 goes to the output console for reading the raw data or the
00001828                          1260  *                 actual instruction.
00001828                          1261  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001828                          1262  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001828                          1263  OP1100
00001828  48A7 FFC0               1264          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
0000182C                          1265  
0000182C                          1266          * Check if the EA Mode is 001 since MULS does not support it
0000182C  3C3C 0003               1267          MOVE.W  #3, D6              * Prep lower value for bitmask
00001830  3E3C 0005               1268          MOVE.W  #5, D7              * Prep upper value for bitmask
00001834  6100 0BEE               1269          BSR     BITMASK             * Finalize bitmask setup
00001838  CC42                    1270          AND     D2,D6               * Apply bitmask
0000183A                          1271          
0000183A  0C46 0008               1272          CMPI    #%0000000000001000, D6    * Is the mode 001, an unsupported mode?
0000183E  6700 0068               1273          BEQ     UNKNOWN1100               * If so, the op is not supported
00001842                          1274          
00001842  3C3C 0006               1275          MOVE.W  #6, D6              * Prep lower value for bitmask
00001846  3E3C 0008               1276          MOVE.W  #8, D7              * Prep upper value for bitmask
0000184A  6100 0BD8               1277          BSR     BITMASK             * Finalize bitmask setup
0000184E  CC42                    1278          AND     D2,D6               * Apply bitmask
00001850                          1279          
00001850  0C46 01C0               1280          CMPI    #%0000000111000000, D6  * Are we MULS?
00001854  6600 0052               1281          BNE     UNKNOWN1100             * If not, it is an unknown op
00001858                          1282          
00001858  43F9 0000249A           1283          LEA     MULSOP,A1           * We found MULS
0000185E  103C 000E               1284          MOVE.B  #14,D0              * Trap #14 prints out the data
00001862  4E4F                    1285          TRAP    #15                 * Perform Trap #14
00001864                          1286          
00001864  43F9 0000250D           1287          LEA     SPACE,A1            * formatting
0000186A  103C 000E               1288          MOVE.B  #14,D0              * Trap #14 prints out space
0000186E  4E4F                    1289          TRAP    #15                 * Perform Trap #14
00001870                          1290          
00001870  4243                    1291          CLR     D3                  * clear D3, it is a parameter
00001872  08C3 0000               1292          BSET    #0,D3               * of EAHELPER05 to indicate size
00001876                          1293          
00001876  6100 039E               1294          BSR     EAHELPER05          * Print out data
0000187A                          1295  
0000187A  43F9 00002513           1296          LEA     COMMA,A1            * formatting
00001880  103C 000E               1297          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001884  4E4F                    1298          TRAP    #15                 * Perform Trap #14
00001886                          1299          
00001886  0882 0006               1300          BCLR    #6,D2               * Bit manipulation is 
0000188A  0882 0007               1301          BCLR    #7,D2               * necessary in order to make
0000188E  0882 0008               1302          BCLR    #8,D2               * EAHELPER611 work generically
00001892                          1303          
00001892  6100 0340               1304          BSR     EAHELPER611         * Print out EA
00001896                          1305  
00001896  43F9 00002468           1306          LEA     NEWLINE,A1          * Formatting
0000189C  103C 000E               1307          MOVE.B  #14,D0              * Trap #14 prints out the data
000018A0  4E4F                    1308          TRAP    #15                 * Perform Trap #14
000018A2                          1309          
000018A2  4C9F 03FF               1310          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
000018A6  4E75                    1311          RTS                         * Return to main
000018A8                          1312          
000018A8                          1313  UNKNOWN1100
000018A8  6100 0910               1314          BSR     UNKNOWNOP
000018AC                          1315       
000018AC  4C9F 03FF               1316          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
000018B0  4E75                    1317          RTS                         * Return to main
000018B2                          1318          
000018B2                          1319  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000018B2                          1320  *-----------------------------------------------------------------------------
000018B2                          1321  
000018B2                          1322  
000018B2                          1323  
000018B2                          1324  
000018B2                          1325  
000018B2                          1326  
000018B2                          1327  *-----------------------------------------------------------------------------
000018B2                          1328  *-----------------------------------------------------------------------------
000018B2                          1329  * NAME: OP_1101   (ADD, ADDA)
000018B2                          1330  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000018B2                          1331  * PRE-CONDITION:  xyz
000018B2                          1332  * POST-CONDITION: All registers return to their previous state, and the output
000018B2                          1333  *                 goes to the output console for reading the raw data or the
000018B2                          1334  *                 actual instruction.
000018B2                          1335  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000018B2                          1336  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000018B2                          1337  OP1101
000018B2  48E7 FFFE               1338          MOVEM.L A0-A6/D0-D7,-(A7)
000018B6                          1339          
000018B6  3C3C 0006               1340          MOVE.W  #6, D6              * Prep lower value for bitmask
000018BA  3E3C 0008               1341          MOVE.W  #8, D7              * Prep upper value for bitmask
000018BE  6100 0B64               1342          BSR     BITMASK             * Finalize bitmask setup
000018C2  CC42                    1343          AND     D2,D6               * Apply bitmask
000018C4  EC4E                    1344          LSR     #6,D6
000018C6                          1345  
000018C6  0C06 0000               1346          CMPI.B  #%0000000000000000,D6
000018CA  6700 003E               1347          BEQ     BYTE_EA_DN
000018CE                          1348  
000018CE  0C06 0001               1349          CMPI.B  #%0000000000000001,D6
000018D2  6700 004E               1350          BEQ     WORD_EA_DN
000018D6                          1351  
000018D6  0C06 0002               1352          CMPI.B  #%0000000000000010,D6
000018DA  6700 005E               1353          BEQ     LONG_EA_DN
000018DE                          1354  
000018DE  0C06 0003               1355          CMPI.B  #%0000000000000011,D6
000018E2  6700 006E               1356          BEQ     ADDA_WORD_OP
000018E6                          1357  
000018E6  0C06 0004               1358          CMPI.B  #%0000000000000100,D6
000018EA  6700 0086               1359          BEQ     BYTE_DN_EA
000018EE                          1360  
000018EE  0C06 0005               1361          CMPI.B  #%0000000000000101,D6
000018F2  6700 0096               1362          BEQ     WORD_DN_EA
000018F6                          1363  
000018F6  0C06 0006               1364          CMPI.B  #%0000000000000110,D6
000018FA  6700 00A6               1365          BEQ     LONG_DN_EA
000018FE                          1366  
000018FE  0C06 0007               1367          CMPI.B  #%0000000000000111,D6
00001902  6700 00B6               1368          BEQ     ADDA_LONG_OP
00001906                          1369  
00001906  6000 011E               1370          BRA     ADD_ADDA_END
0000190A                          1371          
0000190A                          1372  BYTE_EA_DN
0000190A  6100 00CE               1373          BSR     ADD_EA_DN_GENERIC       * print out 'ADD' base op name for ADDA too
0000190E                          1374  
0000190E  43F9 00002521           1375          LEA     __B,A1                  * print out size
00001914  103C 000E               1376          MOVE.B  #14,D0
00001918  4E4F                    1377          TRAP    #15
0000191A                          1378  
0000191A  6100 00CC               1379          BSR     ADD_ADDA_SPACE          * print out space
0000191E  6000 00EE               1380          BRA     ADD_ADDA_PRINT
00001922                          1381  
00001922                          1382  WORD_EA_DN
00001922  6100 00B6               1383          BSR     ADD_EA_DN_GENERIC
00001926                          1384  
00001926  43F9 00002525           1385          LEA     __W,A1
0000192C  103C 000E               1386          MOVE.B  #14,D0
00001930  4E4F                    1387          TRAP    #15
00001932                          1388          
00001932  6100 00B4               1389          BSR     ADD_ADDA_SPACE
00001936  6000 00D6               1390          BRA     ADD_ADDA_PRINT
0000193A                          1391          
0000193A                          1392  LONG_EA_DN
0000193A  6100 009E               1393          BSR     ADD_EA_DN_GENERIC
0000193E                          1394  
0000193E  43F9 00002529           1395          LEA     __L,A1
00001944  103C 000E               1396          MOVE.B  #14,D0
00001948  4E4F                    1397          TRAP    #15
0000194A                          1398  
0000194A  6100 009C               1399          BSR     ADD_ADDA_SPACE
0000194E  6000 00BE               1400          BRA     ADD_ADDA_PRINT
00001952                          1401          
00001952                          1402  ADDA_WORD_OP
00001952  6100 0086               1403          BSR     ADD_EA_DN_GENERIC
00001956                          1404  
00001956  43F9 00002501           1405          LEA     ASCII_A,A1
0000195C  103C 000E               1406          MOVE.B  #14,D0
00001960  4E4F                    1407          TRAP    #15
00001962                          1408  
00001962  43F9 00002525           1409          LEA     __W,A1
00001968  103C 000E               1410          MOVE.B  #14,D0
0000196C  4E4F                    1411          TRAP    #15
0000196E                          1412          
0000196E  6000 0086               1413          BRA     ADDA_PRT
00001972                          1414          
00001972                          1415  BYTE_DN_EA
00001972  6100 0066               1416          BSR     ADD_EA_DN_GENERIC
00001976                          1417          
00001976  43F9 00002521           1418          LEA     __B,A1
0000197C  103C 000E               1419          MOVE.B  #14,D0
00001980  4E4F                    1420          TRAP    #15
00001982                          1421          
00001982  6100 0064               1422          BSR     ADD_ADDA_SPACE
00001986  6000 0086               1423          BRA     ADD_ADDA_PRINT
0000198A                          1424  
0000198A                          1425  WORD_DN_EA
0000198A  6100 004E               1426          BSR     ADD_EA_DN_GENERIC
0000198E                          1427  
0000198E  43F9 00002525           1428          LEA     __W,A1
00001994  103C 000E               1429          MOVE.B  #14,D0
00001998  4E4F                    1430          TRAP    #15 
0000199A                          1431  
0000199A  6100 004C               1432          BSR     ADD_ADDA_SPACE
0000199E  6000 006E               1433          BRA     ADD_ADDA_PRINT
000019A2                          1434  
000019A2                          1435  LONG_DN_EA
000019A2  6100 0036               1436          BSR     ADD_EA_DN_GENERIC
000019A6                          1437          
000019A6  43F9 00002529           1438          LEA     __L,A1
000019AC  103C 000E               1439          MOVE.B  #14,D0
000019B0  4E4F                    1440          TRAP    #15     
000019B2                          1441          
000019B2  6100 0034               1442          BSR     ADD_ADDA_SPACE
000019B6  6000 0056               1443          BRA     ADD_ADDA_PRINT
000019BA                          1444  
000019BA                          1445  ADDA_LONG_OP
000019BA  6100 001E               1446          BSR     ADD_EA_DN_GENERIC
000019BE                          1447          
000019BE  43F9 00002501           1448          LEA     ASCII_A,A1
000019C4  103C 000E               1449          MOVE.B  #14,D0
000019C8  4E4F                    1450          TRAP    #15
000019CA                          1451          
000019CA  43F9 00002529           1452          LEA     __L,A1
000019D0  103C 000E               1453          MOVE.B  #14,D0
000019D4  4E4F                    1454          TRAP    #15
000019D6                          1455          
000019D6  6000 001E               1456          BRA     ADDA_PRT
000019DA                          1457          
000019DA                          1458  ADD_EA_DN_GENERIC
000019DA  43F9 000024E9           1459          LEA     OP_ADD_MSG,A1           * print out 'ADD'
000019E0  103C 000E               1460          MOVE.B  #14,D0
000019E4  4E4F                    1461          TRAP    #15
000019E6  4E75                    1462          RTS
000019E8                          1463          
000019E8                          1464  ADD_ADDA_SPACE
000019E8  43F9 0000250D           1465          LEA     SPACE,A1
000019EE  103C 000E               1466          MOVE.B  #14,D0
000019F2  4E4F                    1467          TRAP    #15
000019F4  4E75                    1468          RTS
000019F6                          1469  
000019F6                          1470  ADDA_PRT
000019F6  6100 0374               1471          BSR     MODE_DN
000019FA  43F9 00002513           1472          LEA     COMMA,A1
00001A00  103C 000E               1473          MOVE.B  #14,D0
00001A04  4E4F                    1474          TRAP    #15
00001A06  6100 0464               1475          BSR     MODE_AN
00001A0A  6000 001A               1476          BRA     ADD_ADDA_END
00001A0E                          1477  
00001A0E                          1478  ADD_ADDA_PRINT
00001A0E                          1479  
00001A0E  6100 0206               1480          BSR     EAHELPER05          * Print out data. TODO: DOESN'T WORK.
00001A12                          1481  
00001A12  43F9 00002513           1482          LEA     COMMA,A1            * formatting
00001A18  103C 000E               1483          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001A1C  4E4F                    1484          TRAP    #15                 * Perform Trap #14
00001A1E                          1485          
00001A1E  6100 01B4               1486          BSR     EAHELPER611
00001A22  6000 0002               1487          BRA     ADD_ADDA_END
00001A26                          1488          
00001A26                          1489  ADD_ADDA_END
00001A26  43F9 00002468           1490          LEA     NEWLINE,A1
00001A2C  103C 000E               1491          MOVE.B  #14,D0
00001A30  4E4F                    1492          TRAP    #15
00001A32                          1493          
00001A32  4CDF 7FFF               1494          MOVEM.L (A7)+,A0-A6/D0-D7
00001A36  4E75                    1495          RTS
00001A38                          1496  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001A38                          1497  *-----------------------------------------------------------------------------
00001A38                          1498  
00001A38                          1499  
00001A38                          1500  
00001A38                          1501  *-----------------------------------------------------------------------------
00001A38                          1502  *-----------------------------------------------------------------------------
00001A38                          1503  * NAME: OP_1110   (LSL, LSR, ASL, ASR, ROL, ROR)
00001A38                          1504  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001A38                          1505  * PRE-CONDITION:  xyz
00001A38                          1506  * POST-CONDITION: All registers return to their previous state, and the output
00001A38                          1507  *                 goes to the output console for reading the raw data or the
00001A38                          1508  *                 actual instruction.
00001A38                          1509  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001A38                          1510  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001A38                          1511  OP1110
00001A38                          1512  
00001A38  48A7 FFC0               1513      MOVEM   D0-D7/A0-A1,-(A7)   * Caller saved
00001A3C                          1514  
00001A3C  7C03                    1515      MOVE.L  #3,D6
00001A3E  7E04                    1516      MOVE.L  #4,D7
00001A40                          1517      
00001A40  6100 09E2               1518      BSR     BITMASK * generate a bitmask for the 3 and 4 bits
00001A44                          1519      
00001A44  CC82                    1520      AND.L   D2,D6
00001A46                          1521      
00001A46  0C46 0008               1522      CMPI    #%0000000000001000,D6 *is it a logical shift
00001A4A  6700 001A               1523      BEQ     LS
00001A4E                          1524      
00001A4E  0C46 0000               1525      CMPI    #%0000000000000000,D6 *is it an arithmatic shift
00001A52  6700 0048               1526      BEQ     AS
00001A56                          1527      
00001A56  0C46 0018               1528      CMPI    #%0000000000011000,D6 *is it a rorate?
00001A5A  6700 0076               1529      BEQ     RO
00001A5E                          1530  
00001A5E  6100 075A               1531      BSR     UNKNOWNOP *if nothing above, we don't know what it is
00001A62  6000 0158               1532      BRA     ENDOP1110
00001A66                          1533      
00001A66                          1534  LS
00001A66  7C08                    1535      MOVE.L  #8,D6
00001A68  7E08                    1536      MOVE.L  #8,D7
00001A6A                          1537      
00001A6A  6100 09B8               1538      BSR     BITMASK
00001A6E                          1539      
00001A6E  CC82                    1540      AND.L   D2,D6
00001A70                          1541      
00001A70  0C46 0000               1542      CMPI    #0,D6 * is it a left shift?
00001A74  6700 0016               1543      BEQ     LSR
00001A78                          1544      
00001A78  6000 0002               1545      BRA     LSL * if not a left shift, must be right
00001A7C                          1546  
00001A7C                          1547  LSL
00001A7C                          1548  
00001A7C  43F9 000024AB           1549      LEA     LSLOP,A1            * formatting
00001A82  103C 000E               1550      MOVE.B  #14,D0              * Trap #14 prints out LSL
00001A86  4E4F                    1551      TRAP    #15                 * Perform Trap #14
00001A88                          1552      
00001A88  6000 007E               1553      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001A8C                          1554                                  * prints the registers and imm data
00001A8C                          1555  LSR
00001A8C                          1556  
00001A8C  43F9 000024AF           1557      LEA     LSROP,A1            * formatting
00001A92  103C 000E               1558      MOVE.B  #14,D0              * Trap #14 prints out LSR
00001A96  4E4F                    1559      TRAP    #15                 * Perform Trap #14
00001A98                          1560      
00001A98  6000 006E               1561      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001A9C                          1562                                  * prints the registers and imm data
00001A9C                          1563  
00001A9C                          1564  AS
00001A9C  7C08                    1565      MOVE.L  #8,D6
00001A9E  7E08                    1566      MOVE.L  #8,D7
00001AA0                          1567      
00001AA0  6100 0982               1568      BSR     BITMASK
00001AA4                          1569      
00001AA4  CC82                    1570      AND.L   D2,D6
00001AA6                          1571      
00001AA6  0C46 0000               1572      CMPI    #0,D6 * is it a left shift?
00001AAA  6700 0016               1573      BEQ     ASR
00001AAE                          1574      
00001AAE  6000 0002               1575      BRA     ASL * if not a left shift, must be right
00001AB2                          1576      
00001AB2                          1577  ASL
00001AB2                          1578  
00001AB2  43F9 000024B3           1579      LEA     ASLOP,A1            * formatting
00001AB8  103C 000E               1580      MOVE.B  #14,D0              * Trap #14 prints out ASL
00001ABC  4E4F                    1581      TRAP    #15                 * Perform Trap #14
00001ABE                          1582      
00001ABE  6000 0048               1583      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001AC2                          1584                                  * prints the registers and imm data
00001AC2                          1585  ASR
00001AC2                          1586  
00001AC2  43F9 000024B7           1587      LEA     ASROP,A1            * formatting
00001AC8  103C 000E               1588      MOVE.B  #14,D0              * Trap #14 prints out ASR
00001ACC  4E4F                    1589      TRAP    #15                 * Perform Trap #14
00001ACE                          1590      
00001ACE  6000 0038               1591      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001AD2                          1592                                  * prints the registers and imm data
00001AD2                          1593  RO
00001AD2  7C08                    1594      MOVE.L  #8,D6
00001AD4  7E08                    1595      MOVE.L  #8,D7
00001AD6                          1596      
00001AD6  6100 094C               1597      BSR     BITMASK
00001ADA                          1598      
00001ADA  CC82                    1599      AND.L   D2,D6
00001ADC                          1600      
00001ADC  0C46 0000               1601      CMPI    #0,D6 * is it a left shift?
00001AE0  6700 0016               1602      BEQ     ROR
00001AE4                          1603      
00001AE4  6000 0002               1604      BRA     ROL * if not a left shift, must be right
00001AE8                          1605  
00001AE8                          1606  ROL
00001AE8                          1607  
00001AE8  43F9 000024BB           1608      LEA     ROLOP,A1            * formatting
00001AEE  103C 000E               1609      MOVE.B  #14,D0              * Trap #14 prints out ROL
00001AF2  4E4F                    1610      TRAP    #15                 * Perform Trap #14
00001AF4                          1611      
00001AF4  6000 0012               1612      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001AF8                          1613                                  * prints the registers and imm data
00001AF8                          1614  ROR
00001AF8                          1615  
00001AF8  43F9 000024BF           1616      LEA     ROROP,A1            * formatting
00001AFE  103C 000E               1617      MOVE.B  #14,D0              * Trap #14 prints out ROR
00001B02  4E4F                    1618      TRAP    #15                 * Perform Trap #14
00001B04                          1619      
00001B04  6000 0002               1620      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001B08                          1621                                  * prints the registers and imm data
00001B08                          1622  
00001B08                          1623  OP1110GENERIC
00001B08                          1624  
00001B08  6100 0462               1625      BSR     SIZE67
00001B0C                          1626      
00001B0C  7C05                    1627      MOVE.L  #5,D6
00001B0E  7E05                    1628      MOVE.L  #5,D7
00001B10                          1629      
00001B10  6100 0912               1630      BSR     BITMASK
00001B14                          1631      
00001B14  CC82                    1632      AND.L   D2,D6
00001B16                          1633      
00001B16  0C46 0020               1634      CMPI    #%0000000000100000,D6   *is it a data reg?
00001B1A  6700 0074               1635      BEQ     OP1110DATAREG
00001B1E                          1636      
00001B1E  43F9 00002511           1637      LEA     IMD,A1              * formatting
00001B24  103C 000E               1638      MOVE.B  #14,D0              * Trap #14 prints out pound #
00001B28  4E4F                    1639      TRAP    #15                 * Perform Trap #14
00001B2A                          1640      
00001B2A  7C09                    1641      MOVE.L  #9,D6
00001B2C  7E0B                    1642      MOVE.L  #11,D7
00001B2E                          1643      
00001B2E  6100 08F4               1644      BSR     BITMASK
00001B32                          1645      
00001B32  CC82                    1646      AND.L   D2,D6
00001B34                          1647      
00001B34  0C46 0000               1648      CMPI    #0,D6 * special case, if zero print #8 not #0
00001B38  6700 002E               1649      BEQ     OP1110IMMEIGHT
00001B3C                          1650      
00001B3C  E08E                    1651      LSR.L   #8,D6
00001B3E  E28E                    1652      LSR.L   #1,D6
00001B40                          1653      
00001B40  2206                    1654      MOVE.L  D6,D1              * formatting
00001B42  103C 0003               1655      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001B46  4E4F                    1656      TRAP    #15                * Perform Trap #14
00001B48                          1657      
00001B48  43F9 00002513           1658      LEA     COMMA,A1            * formatting
00001B4E  103C 000E               1659      MOVE.B  #14,D0              * Trap #14 prints out comma
00001B52  4E4F                    1660      TRAP    #15                 * Perform Trap #1
00001B54                          1661      
00001B54                          1662      * in order to use the eahlpers, we need to do some bit manipulation
00001B54                          1663      * clearing the bits below lets our helper know that the mode is Dn
00001B54  0882 0003               1664      BCLR    #3,D2
00001B58  0882 0004               1665      BCLR    #4,D2
00001B5C  0882 0005               1666      BCLR    #5,D2
00001B60                          1667      
00001B60  6100 00B4               1668      BSR     EAHELPER05
00001B64                          1669      
00001B64  6000 0056               1670      BRA     ENDOP1110
00001B68                          1671      
00001B68                          1672  OP1110IMMEIGHT
00001B68                          1673  
00001B68  7208                    1674      MOVE.L  #8,D1              * formatting
00001B6A  103C 0003               1675      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001B6E  4E4F                    1676      TRAP    #15                * Perform Trap #14
00001B70                          1677      
00001B70  43F9 00002513           1678      LEA     COMMA,A1            * formatting
00001B76  103C 000E               1679      MOVE.B  #14,D0              * Trap #14 prints out comma
00001B7A  4E4F                    1680      TRAP    #15                 * Perform Trap #1
00001B7C                          1681      
00001B7C                          1682      * in order to use the eahlpers, we need to do some bit manipulation
00001B7C                          1683      * clearing the bits below lets our helper know that the mode is Dn
00001B7C  0882 0003               1684      BCLR    #3,D2
00001B80  0882 0004               1685      BCLR    #4,D2
00001B84  0882 0005               1686      BCLR    #5,D2
00001B88                          1687      
00001B88  6100 008C               1688      BSR     EAHELPER05
00001B8C                          1689      
00001B8C  6000 002E               1690      BRA     ENDOP1110
00001B90                          1691  
00001B90                          1692  OP1110DATAREG
00001B90                          1693  
00001B90                          1694      * in order to use the eahlpers, we need to do some bit manipulation
00001B90                          1695      * clearing the bits below lets our helper know that the mode is Dn
00001B90  0882 0003               1696      BCLR    #3,D2
00001B94  0882 0004               1697      BCLR    #4,D2
00001B98  0882 0005               1698      BCLR    #5,D2
00001B9C  0882 0006               1699      BCLR    #6,D2
00001BA0  0882 0007               1700      BCLR    #7,D2
00001BA4  0882 0008               1701      BCLR    #8,D2
00001BA8                          1702      
00001BA8  6100 002A               1703      BSR     EAHELPER611
00001BAC                          1704      
00001BAC  43F9 00002513           1705      LEA     COMMA,A1            * formatting
00001BB2  103C 000E               1706      MOVE.B  #14,D0              * Trap #14 prints out comma
00001BB6  4E4F                    1707      TRAP    #15                 * Perform Trap #14
00001BB8                          1708      
00001BB8  6100 005C               1709      BSR     EAHELPER05
00001BBC                          1710  
00001BBC                          1711  ENDOP1110
00001BBC                          1712  
00001BBC  43F9 00002468           1713      LEA     NEWLINE,A1          * formatting
00001BC2  103C 000E               1714      MOVE.B  #14,D0              * Trap #14 prints out a new line
00001BC6  4E4F                    1715      TRAP    #15                 * Perform Trap #14
00001BC8                          1716      
00001BC8  4C9F 03FF               1717      MOVEM   (A7)+,D0-D7/A0-A1   * Caller saved
00001BCC  4E75                    1718      RTS
00001BCE                          1719  
00001BCE                          1720  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001BCE                          1721  *-----------------------------------------------------------------------------
00001BCE                          1722  
00001BCE                          1723  
00001BCE                          1724  
00001BCE                          1725  *-----------------------------------------------------------------------------
00001BCE                          1726  *-----------------------------------------------------------------------------
00001BCE                          1727  * NAME: OP_1111   ()
00001BCE                          1728  * DESCRIPTION:    a
00001BCE                          1729  * PRE-CONDITION:  b
00001BCE                          1730  * POST-CONDITION: c
00001BCE                          1731  * REGISTERS:      d
00001BCE                          1732  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001BCE                          1733  OP1111
00001BCE                          1734  
00001BCE  6100 05EA               1735      BSR     UNKNOWNOP
00001BD2  4E75                    1736      RTS
00001BD4                          1737  
00001BD4                          1738  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001BD4                          1739  *-----------------------------------------------------------------------------
00001BD4                          1740  
00001BD4                          1741  
00001BD4                          1742  
00001BD4                          1743  *-----------------------------------------------------------------------------
00001BD4                          1744  *-----------------------------------------------------------------------------
00001BD4                          1745  * NAME:           EAHELPER611
00001BD4                          1746  * DESCRIPTION:    a
00001BD4                          1747  * PRE-CONDITION:  D2 contains the instruction to print modes for.
00001BD4                          1748  *                 D5 contains the size of the data to be printed
00001BD4                          1749  * POST-CONDITION: Determines if mode is direct, if it's not, passes D2 to 
00001BD4                          1750  *                 EAHELPER05 to print.
00001BD4                          1751  * REGISTERS:      a
00001BD4                          1752  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001BD4                          1753  EAHELPER611
00001BD4  48A7 FFC0               1754      MOVEM  D0-D7/A0-A1,-(A7)    * Push values onto stack
00001BD8                          1755      
00001BD8  3C3C 0006               1756      MOVE.W  #6, D6              * Prep lower value for bitmask
00001BDC  3E3C 0008               1757      MOVE.W  #8, D7              * Prep upper value for bitmask
00001BE0  6100 0842               1758      BSR     BITMASK             * Finalize bitmask setup
00001BE4  CC42                    1759      AND     D2,D6               * Apply bitmask
00001BE6                          1760      
00001BE6                          1761      * to move the mode where EAHELPER50 can process it
00001BE6  7C06                    1762      MOVE.L  #6,D6       * Prep lower value of bitmask
00001BE8  7E08                    1763      MOVE.L  #8,D7       * Prep upper value of bitmask
00001BEA  6100 0838               1764      BSR     BITMASK     * Create bitmask
00001BEE  CC42                    1765      AND     D2,D6       * Apply bitmask
00001BF0                          1766      
00001BF0  4243                    1767      CLR     D3      * prep D3 to store values
00001BF2  3606                    1768      MOVE.W  D6,D3   * store bitmasked value in D3
00001BF4  E64B                    1769      LSR     #3,D3   * move bits 6-8 to 3-5
00001BF6                          1770      
00001BF6                          1771      * to move the register where EAHELPER50 can process it
00001BF6  7C09                    1772      MOVE.L  #9,D6   * Prep lower value for bitmask
00001BF8  7E0B                    1773      MOVE.L  #11,D7  * Prep upper value for bitmask
00001BFA  6100 0828               1774      BSR     BITMASK * create bitmask
00001BFE  CC42                    1775      AND     D2,D6   * apply bitmask
00001C00                          1776      
00001C00  4244                    1777      CLR     D4      * prep D3 to store values
00001C02  3806                    1778      MOVE.W  D6,D4   * store bitmasked value in D3
00001C04                          1779      
00001C04  E04C                    1780      LSR     #8,D4   * move bits 9-11 to 0-2
00001C06  E24C                    1781      LSR     #1,D4   * move bits 9-11 to 0-2
00001C08                          1782    
00001C08  8684                    1783      OR.L    D4,D3   * combind the register and mode
00001C0A  2403                    1784      MOVE.L  D3,D2   * put the result in D2 so EAHELPER05 can process it
00001C0C                          1785      
00001C0C  6100 0008               1786      BSR     EAHELPER05
00001C10                          1787      
00001C10                          1788  ENDEAHELPER611
00001C10                          1789      
00001C10  4C9F 03FF               1790      MOVEM  (A7)+,D0-D7/A0-A1    * Revert back
00001C14  4E75                    1791      RTS
00001C16                          1792  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001C16                          1793  *-----------------------------------------------------------------------------
00001C16                          1794  
00001C16                          1795  
00001C16                          1796  
00001C16                          1797  *-----------------------------------------------------------------------------
00001C16                          1798  *-----------------------------------------------------------------------------
00001C16                          1799  * NAME:           EAHELPER05
00001C16                          1800  * DESCRIPTION:    a
00001C16                          1801  * PRE-CONDITION:  D2 contains the instruction to print modes for. Only call
00001C16                          1802  *                 this sub-routine helper for operations that only have one
00001C16                          1803  *                 mode register.
00001C16                          1804  * POST-CONDITION: Determines mode, passes D2 to REGHELPER to print.
00001C16                          1805  * REGISTERS:      a
00001C16                          1806  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001C16                          1807  EAHELPER05
00001C16                          1808      * todo: add code for printing immediate values
00001C16                          1809      
00001C16  48A7 FFC0               1810      MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001C1A                          1811      
00001C1A  7C03                    1812      MOVE.L  #3,D6
00001C1C  7E05                    1813      MOVE.L  #5,D7
00001C1E                          1814      
00001C1E  6100 0804               1815      BSR     BITMASK * generate a bitmask to identify the mode
00001C22                          1816      
00001C22  CC42                    1817      AND     D2,D6   * mask off the parts of D2 we don't need
00001C24                          1818      
00001C24  2A06                    1819      MOVE.L  D6,D5   * store the 3-5 bitmask for later use
00001C26                          1820      
00001C26  0C46 0000               1821      CMPI    #%0000000000000000,D6 * is it data register direct?
00001C2A  6600 000A               1822      BNE     NOTDATAREG
00001C2E                          1823      
00001C2E  6100 013C               1824      BSR     MODE_DN
00001C32                          1825       
00001C32  6000 0132               1826      BRA     ENDEAHELPER05
00001C36                          1827      
00001C36                          1828  NOTDATAREG * address register direct
00001C36                          1829      
00001C36  0C46 0008               1830      CMPI    #%0000000000001000,D6 * is it address register direct?
00001C3A  6600 000A               1831      BNE     NOTADRDIRECT
00001C3E                          1832      
00001C3E  6100 022C               1833      BSR     MODE_AN * simply prints out the address register
00001C42                          1834       
00001C42  6000 0122               1835      BRA     ENDEAHELPER05
00001C46                          1836      
00001C46                          1837  NOTADRDIRECT * address register indirect
00001C46                          1838          
00001C46  0C46 0010               1839      CMPI    #%0000000000010000,D6 * is it address register indirect?
00001C4A  6600 0022               1840      BNE     NOTADRINDIRECT
00001C4E                          1841      
00001C4E  43F9 00002515           1842      LEA     OBRACK,A1       * Load '('
00001C54  303C 000E               1843      MOVE.W  #14,D0          * Trap #14 to display message
00001C58  4E4F                    1844      TRAP    #15             * Perform #14
00001C5A                          1845          
00001C5A                          1846  
00001C5A  6100 0210               1847      BSR     MODE_AN * print out an address register
00001C5E                          1848      
00001C5E  43F9 00002517           1849      LEA     CBRACK,A1       * Load ')'
00001C64  303C 000E               1850      MOVE.W  #14,D0          * Trap #14 to display message
00001C68  4E4F                    1851      TRAP    #15             * Perform #14
00001C6A                          1852       
00001C6A  6000 00FA               1853      BRA     ENDEAHELPER05
00001C6E                          1854      
00001C6E                          1855  NOTADRINDIRECT * address register indirect, post increment
00001C6E                          1856      
00001C6E  0C46 0018               1857      CMPI    #%0000000000011000,D6 * is it address register indirect post increment?
00001C72  6600 002E               1858      BNE     NOTADRINDIRECTPOST
00001C76                          1859      
00001C76  43F9 00002515           1860      LEA     OBRACK,A1       * Load '('
00001C7C  303C 000E               1861      MOVE.W  #14,D0          * Trap #14 to display message
00001C80  4E4F                    1862      TRAP    #15             * Perform #14
00001C82                          1863          
00001C82                          1864  
00001C82  6100 01E8               1865      BSR     MODE_AN * print out an address register
00001C86                          1866      
00001C86  43F9 00002517           1867      LEA     CBRACK,A1       * Load ')'
00001C8C  303C 000E               1868      MOVE.W  #14,D0          * Trap #14 to display message
00001C90  4E4F                    1869      TRAP    #15             * Perform #14
00001C92                          1870      
00001C92  43F9 00002519           1871      LEA     PLUS,A1       * Load '+'
00001C98  303C 000E               1872      MOVE.W  #14,D0          * Trap #14 to display message
00001C9C  4E4F                    1873      TRAP    #15             * Perform #14
00001C9E                          1874       
00001C9E  6000 00C6               1875      BRA     ENDEAHELPER05
00001CA2                          1876      
00001CA2                          1877  NOTADRINDIRECTPOST * address register indirect, pre decrement
00001CA2                          1878      
00001CA2  0C46 0020               1879      CMPI    #%0000000000100000,D6 * is it address register indirect pre decrement?
00001CA6  6600 002E               1880      BNE     NOTADRINDIRECTPRE
00001CAA                          1881      
00001CAA  43F9 0000251B           1882      LEA     MINUS,A1       * Load '-'
00001CB0  303C 000E               1883      MOVE.W  #14,D0          * Trap #14 to display message
00001CB4  4E4F                    1884      TRAP    #15             * Perform #14
00001CB6                          1885      
00001CB6  43F9 00002515           1886      LEA     OBRACK,A1       * Load '('
00001CBC  303C 000E               1887      MOVE.W  #14,D0          * Trap #14 to display message
00001CC0  4E4F                    1888      TRAP    #15             * Perform #14
00001CC2                          1889          
00001CC2                          1890  
00001CC2  6100 01A8               1891      BSR     MODE_AN * print out an address register
00001CC6                          1892      
00001CC6  43F9 00002517           1893      LEA     CBRACK,A1       * Load ')'
00001CCC  303C 000E               1894      MOVE.W  #14,D0          * Trap #14 to display message
00001CD0  4E4F                    1895      TRAP    #15             * Perform #14
00001CD2                          1896       
00001CD2  6000 0092               1897      BRA     ENDEAHELPER05
00001CD6                          1898  
00001CD6                          1899  NOTADRINDIRECTPRE * if none of the previous cases are true, it is a mode not supported by our decompiler
00001CD6                          1900  
00001CD6  0C46 0038               1901      CMPI    #%0000000000111000,D6 * is it immediate?
00001CDA  6600 0086               1902      BNE     NOTIMMEDIATE
00001CDE                          1903  
00001CDE  0C43 0001               1904      CMPI    #1,D3 * is it a byte?
00001CE2  6600 0028               1905      BNE     NOTIMMBYTE
00001CE6                          1906      
00001CE6  43F9 00002511           1907      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001CEC  103C 000E               1908      MOVE.B  #14,D0
00001CF0  4E4F                    1909      TRAP    #15
00001CF2                          1910      
00001CF2  3C3C 0000               1911      MOVE.W  #0, D6              * Prep lower value for bitmask
00001CF6  3E3C 0007               1912      MOVE.W  #7, D7              * Prep upper value for bitmask
00001CFA  6100 0728               1913      BSR     BITMASK             * Finalize bitmask setup
00001CFE                          1914          
00001CFE  321A                    1915      MOVE.W  (A2)+,D1
00001D00                          1916      
00001D00  C286                    1917      AND.L     D6,D1
00001D02                          1918          
00001D02  103C 0003               1919      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001D06  4E4F                    1920      TRAP    #15      * Perform Trap #3
00001D08                          1921      
00001D08  6000 005C               1922      BRA     ENDEAHELPER05
00001D0C                          1923  
00001D0C                          1924  NOTIMMBYTE
00001D0C                          1925      
00001D0C  0C43 0002               1926      CMPI    #2,D3 * is it a word?
00001D10  6600 0028               1927      BNE     NOTIMMWORD
00001D14                          1928      
00001D14  43F9 00002511           1929      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001D1A  103C 000E               1930      MOVE.B  #14,D0
00001D1E  4E4F                    1931      TRAP    #15
00001D20                          1932      
00001D20  3C3C 0000               1933      MOVE.W  #0, D6              * Prep lower value for bitmask
00001D24  3E3C 000F               1934      MOVE.W  #15, D7             * Prep upper value for bitmask
00001D28  6100 06FA               1935      BSR     BITMASK             * Finalize bitmask setup
00001D2C                          1936          
00001D2C  321A                    1937      MOVE.W  (A2)+,D1
00001D2E                          1938      
00001D2E  C286                    1939      AND.L     D6,D1               * Apply bitmask
00001D30                          1940          
00001D30  103C 0003               1941      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001D34  4E4F                    1942      TRAP    #15      * Perform Trap #3
00001D36                          1943      
00001D36  6000 002E               1944      BRA     ENDEAHELPER05
00001D3A                          1945      
00001D3A                          1946  NOTIMMWORD
00001D3A  0C43 0003               1947      CMPI    #3,D3 * is it a long?
00001D3E  6600 0022               1948      BNE     NOTIMMEDIATE
00001D42                          1949      
00001D42  43F9 00002511           1950      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001D48  103C 000E               1951      MOVE.B  #14,D0
00001D4C  4E4F                    1952      TRAP    #15
00001D4E                          1953          
00001D4E  221A                    1954      MOVE.L  (A2)+,D1
00001D50                          1955          
00001D50  103C 0003               1956      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001D54  4E4F                    1957      TRAP    #15      * Perform Trap #3
00001D56                          1958      
00001D56  321A                    1959      MOVE.W  (A2)+,D1
00001D58                          1960          
00001D58  103C 0003               1961      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001D5C  4E4F                    1962      TRAP    #15      * Perform Trap #3
00001D5E                          1963      
00001D5E  6000 0006               1964      BRA     ENDEAHELPER05
00001D62                          1965  
00001D62                          1966  NOTIMMEDIATE    
00001D62                          1967  
00001D62                          1968  
00001D62  6100 0456               1969      BSR     UNKNOWNOP
00001D66                          1970      
00001D66                          1971  ENDEAHELPER05
00001D66  4C9F 03FF               1972      MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001D6A  4E75                    1973      RTS
00001D6C                          1974  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001D6C                          1975  *-----------------------------------------------------------------------------
00001D6C                          1976  
00001D6C                          1977  
00001D6C                          1978  
00001D6C                          1979  *-----------------------------------------------------------------------------
00001D6C                          1980  *-----------------------------------------------------------------------------
00001D6C                          1981  * NAME:           MODE_DN
00001D6C                          1982  * DESCRIPTION:    Generalize the EA part of the project.
00001D6C                          1983  * PRE-CONDITION:  The mode must have been correctly identified. All modes
00001D6C                          1984  *                 must be called by RTS.
00001D6C                          1985  * POST-CONDITION: After the EA, the entire op will head back to the BSR that
00001D6C                          1986  *                 called it.
00001D6C                          1987  * REGISTERS:      a
00001D6C                          1988  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001D6C                          1989  * ---> Dn
00001D6C                          1990  MODE_DN
00001D6C  48A7 FFC0               1991          MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001D70                          1992  
00001D70  3C3C 0000               1993          MOVE.W  #0, D6              * Prep lower value for bitmask
00001D74  3E3C 0002               1994          MOVE.W  #2, D7              * Prep upper value for bitmask
00001D78  6100 06AA               1995          BSR     BITMASK             * Finalize bitmask setup
00001D7C  CC42                    1996          AND     D2,D6               * Apply bitmask
00001D7E                          1997          
00001D7E  0C46 0000               1998          CMPI    #%000000000000000, D6   * Data Register D0?
00001D82  6600 000A               1999          BNE     NOTD0
00001D86                          2000          
00001D86  6100 0074               2001          BSR     PRINTD0
00001D8A  6000 006A               2002          BRA     ENDMODE_DN
00001D8E                          2003  NOTD0      
00001D8E  0C46 0001               2004          CMPI    #%000000000000001, D6   * Data Register D1?
00001D92  6600 000A               2005          BNE     NOTD1
00001D96                          2006          
00001D96  6100 0072               2007          BSR     PRINTD1
00001D9A  6000 005A               2008          BRA     ENDMODE_DN
00001D9E                          2009  NOTD1
00001D9E  0C46 0002               2010          CMPI    #%000000000000010, D6   * Data Register D2?
00001DA2  6600 000A               2011          BNE     NOTD2
00001DA6                          2012          
00001DA6  6100 0070               2013          BSR     PRINTD2
00001DAA  6000 004A               2014          BRA     ENDMODE_DN
00001DAE                          2015  NOTD2
00001DAE  0C46 0003               2016          CMPI    #%000000000000011, D6   * Data Register D3?
00001DB2  6600 000A               2017          BNE     NOTD3
00001DB6                          2018          
00001DB6  6100 006E               2019          BSR     PRINTD3
00001DBA  6000 003A               2020          BRA     ENDMODE_DN
00001DBE                          2021  NOTD3
00001DBE  0C46 0004               2022          CMPI    #%000000000000100, D6   * Data Register D4?
00001DC2  6600 000A               2023          BNE     NOTD4
00001DC6                          2024          
00001DC6  6100 006C               2025          BSR     PRINTD4
00001DCA  6000 002A               2026          BRA     ENDMODE_DN
00001DCE                          2027  NOTD4
00001DCE  0C46 0005               2028          CMPI    #%000000000000101, D6   * Data Register D5?
00001DD2  6600 000A               2029          BNE     NOTD5
00001DD6                          2030          
00001DD6  6100 006A               2031          BSR     PRINTD5
00001DDA  6000 001A               2032          BRA     ENDMODE_DN
00001DDE                          2033  NOTD5
00001DDE  0C46 0006               2034          CMPI    #%000000000000110, D6   * Data Register D6?
00001DE2  6600 000A               2035          BNE     NOTD6
00001DE6                          2036          
00001DE6  6100 0068               2037          BSR     PRINTD6
00001DEA  6000 000A               2038          BRA     ENDMODE_DN
00001DEE                          2039  NOTD6
00001DEE  6100 006E               2040          BSR     PRINTD7
00001DF2  6000 0002               2041          BRA     ENDMODE_DN
00001DF6                          2042          
00001DF6                          2043  ENDMODE_DN
00001DF6  4C9F 03FF               2044          MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001DFA  4E75                    2045          RTS
00001DFC                          2046  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001DFC                          2047  *-----------------------------------------------------------------------------
00001DFC                          2048  
00001DFC                          2049  
00001DFC                          2050  
00001DFC                          2051  *-----------------------------------------------------------------------------
00001DFC                          2052  *-----------------------------------------------------------------------------
00001DFC                          2053  * NAME:           PRINTD0
00001DFC                          2054  * DESCRIPTION:    Simply prints D0, D1, ..., up to D7.
00001DFC                          2055  * PRE-CONDITION:  a
00001DFC                          2056  * POST-CONDITION: a
00001DFC                          2057  * REGISTERS:      a
00001DFC                          2058  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001DFC                          2059  PRINTD0
00001DFC  43F9 00002545           2060          LEA     __D0, A1        * Load 'D0'
00001E02  103C 000E               2061          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E06  4E4F                    2062          TRAP    #15             * Perform Trap #14
00001E08  4E75                    2063          RTS
00001E0A                          2064  PRINTD1
00001E0A  43F9 00002548           2065          LEA     __D1, A1        * Load 'D1'
00001E10  103C 000E               2066          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E14  4E4F                    2067          TRAP    #15             * Perform Trap #14
00001E16  4E75                    2068          RTS      
00001E18                          2069  PRINTD2
00001E18  43F9 0000254B           2070          LEA     __D2, A1        * Load 'D2'
00001E1E  103C 000E               2071          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E22  4E4F                    2072          TRAP    #15             * Perform Trap #14
00001E24  4E75                    2073          RTS      
00001E26                          2074  PRINTD3
00001E26  43F9 0000254E           2075          LEA     __D3, A1        * Load 'D3'
00001E2C  103C 000E               2076          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E30  4E4F                    2077          TRAP    #15             * Perform Trap #14
00001E32  4E75                    2078          RTS      
00001E34                          2079  PRINTD4
00001E34  43F9 00002551           2080          LEA     __D4, A1        * Load 'D4'
00001E3A  103C 000E               2081          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E3E  4E4F                    2082          TRAP    #15             * Perform Trap #14
00001E40  4E75                    2083          RTS       
00001E42                          2084  PRINTD5
00001E42  43F9 00002554           2085          LEA     __D5, A1        * Load 'D5'
00001E48  103C 000E               2086          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E4C  4E4F                    2087          TRAP    #15             * Perform Trap #14
00001E4E  4E75                    2088          RTS      
00001E50                          2089  PRINTD6
00001E50  43F9 00002557           2090          LEA     __D6, A1        * Load 'D6'
00001E56  103C 000E               2091          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E5A  4E4F                    2092          TRAP    #15             * Perform Trap #14
00001E5C  4E75                    2093          RTS
00001E5E                          2094  PRINTD7
00001E5E  43F9 0000255A           2095          LEA     __D7, A1        * Load 'D7'
00001E64  103C 000E               2096          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E68  4E4F                    2097          TRAP    #15             * Perform Trap #14
00001E6A  4E75                    2098          RTS
00001E6C                          2099  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001E6C                          2100  *-----------------------------------------------------------------------------
00001E6C                          2101  
00001E6C                          2102  
00001E6C                          2103  
00001E6C                          2104  *-----------------------------------------------------------------------------
00001E6C                          2105  *-----------------------------------------------------------------------------
00001E6C                          2106  * NAME:           MODE_AN
00001E6C                          2107  * DESCRIPTION:    Simply chooses to print A0-A7.
00001E6C                          2108  * PRE-CONDITION:  a
00001E6C                          2109  * POST-CONDITION: a
00001E6C                          2110  * REGISTERS:      a
00001E6C                          2111  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001E6C                          2112  MODE_AN
00001E6C  48A7 FFC0               2113          MOVEM   D0-D7/A0-A1,-(A7)   * Save information
00001E70                          2114  
00001E70  3C3C 0000               2115          MOVE.W  #0, D6              * Prep lower value for bitmask
00001E74  3E3C 0002               2116          MOVE.W  #2, D7              * Prep upper value for bitmask
00001E78  6100 05AA               2117          BSR     BITMASK             * Finalize bitmask setup
00001E7C  CC42                    2118          AND     D2,D6               * Apply bitmask
00001E7E                          2119          
00001E7E  0C46 0000               2120          CMPI    #%000000000000000, D6   * Address Register A0?
00001E82  6600 000A               2121          BNE     NOTA0
00001E86                          2122          
00001E86  6100 0074               2123          BSR     PRINTA0
00001E8A                          2124          
00001E8A  6000 006A               2125          BRA     ENDMODE_AN
00001E8E                          2126  NOTA0      
00001E8E  0C46 0001               2127          CMPI    #%000000000000001, D6   * Address Register A1?
00001E92  6600 000A               2128          BNE     NOTA1
00001E96                          2129          
00001E96  6100 0072               2130          BSR     PRINTA1
00001E9A                          2131          
00001E9A  6000 005A               2132          BRA     ENDMODE_AN
00001E9E                          2133  NOTA1
00001E9E  0C46 0002               2134          CMPI    #%000000000000010, D6   * Address Register A2?
00001EA2  6600 000A               2135          BNE     NOTA2
00001EA6                          2136          
00001EA6  6100 0070               2137          BSR     PRINTA2
00001EAA                          2138          
00001EAA  6000 004A               2139          BRA     ENDMODE_AN
00001EAE                          2140  NOTA2
00001EAE  0C46 0003               2141          CMPI    #%000000000000011, D6   * Address Register A3?
00001EB2  6600 000A               2142          BNE     NOTA3
00001EB6                          2143          
00001EB6  6100 006E               2144          BSR     PRINTA3
00001EBA                          2145          
00001EBA  6000 003A               2146          BRA     ENDMODE_AN
00001EBE                          2147  NOTA3
00001EBE  0C46 0004               2148          CMPI    #%000000000000100, D6   * Address Register A4?
00001EC2  6600 000A               2149          BNE     NOTA4
00001EC6                          2150          
00001EC6  6100 006C               2151          BSR     PRINTA4
00001ECA                          2152          
00001ECA  6000 002A               2153          BRA     ENDMODE_AN
00001ECE                          2154  NOTA4
00001ECE  0C46 0005               2155          CMPI    #%000000000000101, D6   * Address Register A5?
00001ED2  6600 000A               2156          BNE     NOTA5
00001ED6                          2157          
00001ED6  6100 006A               2158          BSR     PRINTA5
00001EDA                          2159          
00001EDA  6000 001A               2160          BRA     ENDMODE_AN
00001EDE                          2161  NOTA5
00001EDE  0C46 0006               2162          CMPI    #%000000000000110, D6   * Address Register A6?
00001EE2  6600 000A               2163          BNE     NOTA6
00001EE6                          2164          
00001EE6  6100 0068               2165          BSR     PRINTA6
00001EEA                          2166          
00001EEA  6000 000A               2167          BRA     ENDMODE_AN
00001EEE                          2168  NOTA6
00001EEE  6100 006E               2169          BSR     PRINTA7
00001EF2                          2170          
00001EF2  6000 0002               2171          BRA     ENDMODE_AN
00001EF6                          2172  ENDMODE_AN
00001EF6  4C9F 03FF               2173          MOVEM   (A7)+,D0-D7/A0-A1   * Restore registers
00001EFA  4E75                    2174          RTS
00001EFC                          2175  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001EFC                          2176  *-----------------------------------------------------------------------------
00001EFC                          2177  
00001EFC                          2178  
00001EFC                          2179  
00001EFC                          2180  *-----------------------------------------------------------------------------
00001EFC                          2181  *-----------------------------------------------------------------------------
00001EFC                          2182  * NAME:           PRINTA0
00001EFC                          2183  * DESCRIPTION:    Simply print out the address register.
00001EFC                          2184  * PRE-CONDITION:  a
00001EFC                          2185  * POST-CONDITION: a
00001EFC                          2186  * REGISTERS:      a
00001EFC                          2187  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001EFC                          2188  PRINTA0
00001EFC  43F9 0000252D           2189          LEA     __A0, A1        * Load 'A0'
00001F02  103C 000E               2190          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F06  4E4F                    2191          TRAP    #15             * Perform Trap #14
00001F08  4E75                    2192          RTS
00001F0A                          2193  
00001F0A                          2194  PRINTA1
00001F0A  43F9 00002530           2195          LEA     __A1, A1        * Load 'A1'
00001F10  103C 000E               2196          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F14  4E4F                    2197          TRAP    #15             * Perform Trap #14
00001F16  4E75                    2198          RTS
00001F18                          2199          
00001F18                          2200  PRINTA2
00001F18  43F9 00002533           2201          LEA     __A2, A1        * Load 'A2'
00001F1E  103C 000E               2202          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F22  4E4F                    2203          TRAP    #15             * Perform Trap #14
00001F24  4E75                    2204          RTS
00001F26                          2205  
00001F26                          2206  PRINTA3
00001F26  43F9 00002536           2207          LEA     __A3, A1        * Load 'A3'
00001F2C  103C 000E               2208          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F30  4E4F                    2209          TRAP    #15             * Perform Trap #14
00001F32  4E75                    2210          RTS
00001F34                          2211  
00001F34                          2212  PRINTA4
00001F34  43F9 00002539           2213          LEA     __A4, A1        * Load 'A4'
00001F3A  103C 000E               2214          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F3E  4E4F                    2215          TRAP    #15             * Perform Trap #14
00001F40  4E75                    2216          RTS
00001F42                          2217  
00001F42                          2218  PRINTA5
00001F42  43F9 0000253C           2219          LEA     __A5, A1        * Load 'A5'
00001F48  103C 000E               2220          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F4C  4E4F                    2221          TRAP    #15             * Perform Trap #14
00001F4E  4E75                    2222          RTS
00001F50                          2223  
00001F50                          2224  PRINTA6
00001F50  43F9 0000253F           2225          LEA     __A6, A1        * Load 'A6'
00001F56  103C 000E               2226          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F5A  4E4F                    2227          TRAP    #15             * Perform Trap #14
00001F5C  4E75                    2228          RTS
00001F5E                          2229  
00001F5E                          2230  PRINTA7
00001F5E  43F9 00002542           2231          LEA     __A7, A1        * Load 'A7'
00001F64  103C 000E               2232          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F68  4E4F                    2233          TRAP    #15             * Perform Trap #14
00001F6A  4E75                    2234          RTS
00001F6C                          2235  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001F6C                          2236  *-----------------------------------------------------------------------------
00001F6C                          2237  
00001F6C                          2238  
00001F6C                          2239  
00001F6C                          2240  *-----------------------------------------------------------------------------
00001F6C                          2241  *-----------------------------------------------------------------------------
00001F6C                          2242  * NAME:           SIZE67
00001F6C                          2243  * DESCRIPTION:    Called if the size is stored in bits 6 to 7.
00001F6C                          2244  * PRE-CONDITION:  a
00001F6C                          2245  * POST-CONDITION: a
00001F6C                          2246  * REGISTERS:      a
00001F6C                          2247  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001F6C                          2248  SIZE67
00001F6C  48A7 FFFE               2249          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
00001F70  3C3C 0006               2250          MOVE.W  #6, D6              * Prep lower value for bitmask
00001F74  3E3C 0007               2251          MOVE.W  #7, D7              * Prep upper value for bitmask
00001F78  6100 04AA               2252          BSR     BITMASK             * Finalize bitmask setup
00001F7C  CC42                    2253          AND     D2,D6               * Apply bitmask     
00001F7E                          2254  
00001F7E  0C46 0000               2255          CMPI    #%0000000000000000, D6   * is it a BYTE?
00001F82  6600 000A               2256          BNE     NOT67BYTE
00001F86                          2257          
00001F86  6100 0080               2258          BSR     PRINTBYTE               * Branch to handle BYTE sizes
00001F8A  6000 001E               2259          BRA     END67
00001F8E                          2260  NOT67BYTE        
00001F8E  0C46 0040               2261          CMPI    #%0000000001000000, D6   * is it a WORD?
00001F92  6600 000A               2262          BNE     NOT67WORD
00001F96                          2263          
00001F96  6100 007E               2264          BSR     PRINTWORD               * Branch to handle WORD sizes
00001F9A  6000 000E               2265          BRA     END67
00001F9E                          2266  NOT67WORD
00001F9E  0C46 0080               2267          CMPI    #%0000000010000000, D6   * is it a LONG?
00001FA2  6600 0006               2268          BNE     END67
00001FA6                          2269          
00001FA6  6100 007C               2270          BSR     PRINTLONG               * Branch to handle LONG sizes
00001FAA                          2271  END67
00001FAA  4C9F 7FFF               2272          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
00001FAE  4E75                    2273          RTS                             * Return. Size handling is finished.
00001FB0                          2274  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001FB0                          2275  *-----------------------------------------------------------------------------
00001FB0                          2276  
00001FB0                          2277  
00001FB0                          2278  
00001FB0                          2279  *-----------------------------------------------------------------------------
00001FB0                          2280  *-----------------------------------------------------------------------------
00001FB0                          2281  * NAME:           SIZE68
00001FB0                          2282  * DESCRIPTION:    Called if the size is stored in bits 6 to 8.
00001FB0                          2283  * PRE-CONDITION:  a
00001FB0                          2284  * POST-CONDITION: a
00001FB0                          2285  * REGISTERS:      a
00001FB0                          2286  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001FB0                          2287  SIZE68
00001FB0                          2288          * finish later, need to follow the same format as SIZE67
00001FB0                          2289          
00001FB0                          2290          
00001FB0  48A7 FFFE               2291          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
00001FB4  3C3C 0006               2292          MOVE.W  #6, D6              * Prep lower value for bitmask
00001FB8  3E3C 0008               2293          MOVE.W  #8, D7              * Prep upper value for bitmask
00001FBC  6100 0466               2294          BSR     BITMASK             * Finalize bitmask setup
00001FC0  CC42                    2295          AND     D2,D6               * Apply bitmask          
00001FC2                          2296          
00001FC2  0C46 0000               2297          CMPI    #%0000000000000000, D6   * is it a BYTE?
00001FC6  6100 0040               2298          BSR     PRINTBYTE               * Branch to handle BYTE sizes
00001FCA  0C46 0100               2299          CMPI    #%0000000100000000, D6   * is it a BYTE?
00001FCE  6100 0038               2300          BSR     PRINTBYTE               * Branch to handle BYTE sizes 
00001FD2                          2301        
00001FD2  0C46 0040               2302          CMPI    #%0000000001000000, D6   * is it a WORD?
00001FD6  6100 003E               2303          BSR     PRINTWORD               * Branch to handle BYTE sizes
00001FDA  0C46 0140               2304          CMPI    #%0000000101000000, D6   * is it a WORD?
00001FDE  6100 0036               2305          BSR     PRINTWORD               * Branch to handle BYTE sizes
00001FE2  0C46 00C0               2306          CMPI    #%0000000011000000, D6   * is it a WORD (ADDA)?
00001FE6  6100 002E               2307          BSR     PRINTWORD               * Branch to handle BYTE sizes
00001FEA                          2308  
00001FEA  0C46 0080               2309          CMPI    #%0000000010000000, D6   * is it a LONG?
00001FEE  6100 0034               2310          BSR     PRINTLONG               * Branch to handle BYTE sizes
00001FF2  0C46 0180               2311          CMPI    #%0000000110000000, D6   * is it a LONG?
00001FF6  6100 002C               2312          BSR     PRINTLONG               * Branch to handle BYTE sizes
00001FFA  0C46 01C0               2313          CMPI    #%0000000111000000, D6   * is it a LONG (ADDA)?
00001FFE  6100 0024               2314          BSR     PRINTLONG               * Branch to handle BYTE sizes
00002002                          2315  
00002002  4C9F 7FFF               2316          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
00002006  4E75                    2317          RTS                             * Return. Size handling is finished.
00002008                          2318  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002008                          2319  *-----------------------------------------------------------------------------
00002008                          2320  
00002008                          2321  
00002008                          2322  
00002008                          2323  *-----------------------------------------------------------------------------
00002008                          2324  *-----------------------------------------------------------------------------
00002008                          2325  * NAME:           PRINTBYTE
00002008                          2326  * DESCRIPTION:    a
00002008                          2327  * PRE-CONDITION:  a
00002008                          2328  * POST-CONDITION: a
00002008                          2329  * REGISTERS:      a
00002008                          2330  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002008                          2331  PRINTBYTE
00002008  43F9 00002521           2332          LEA     __B,A1      * Load '.B ' into A1
0000200E  103C 000E               2333          MOVE.B  #14,D0      * Trap #14 setup to print
00002012  4E4F                    2334          TRAP    #15         * Perform Trap #14
00002014  4E75                    2335          RTS                 * Return to SIZE67/SIZE68
00002016                          2336          
00002016                          2337  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002016                          2338  *-----------------------------------------------------------------------------
00002016                          2339  
00002016                          2340  
00002016                          2341  
00002016                          2342  *-----------------------------------------------------------------------------
00002016                          2343  *-----------------------------------------------------------------------------
00002016                          2344  * NAME:           PRINTWORD
00002016                          2345  * DESCRIPTION:    a
00002016                          2346  * PRE-CONDITION:  a
00002016                          2347  * POST-CONDITION: a
00002016                          2348  * REGISTERS:      a
00002016                          2349  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002016                          2350  PRINTWORD
00002016  43F9 00002525           2351          LEA     __W,A1      * Load '.W ' into A1
0000201C  103C 000E               2352          MOVE.B  #14,D0      * Trap #14 setup to print
00002020  4E4F                    2353          TRAP    #15         * Perform Trap #14
00002022  4E75                    2354          RTS                 * Return to SIZE67/SIZE68
00002024                          2355          
00002024                          2356  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002024                          2357  *-----------------------------------------------------------------------------
00002024                          2358  
00002024                          2359  
00002024                          2360  
00002024                          2361  *-----------------------------------------------------------------------------
00002024                          2362  *-----------------------------------------------------------------------------
00002024                          2363  * NAME:           PRINTLONG
00002024                          2364  * DESCRIPTION:    a
00002024                          2365  * PRE-CONDITION:  a
00002024                          2366  * POST-CONDITION: a
00002024                          2367  * REGISTERS:      a
00002024                          2368  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002024                          2369  PRINTLONG
00002024  43F9 00002529           2370          LEA     __L,A1      * Load '.L ' into A1
0000202A  103C 000E               2371          MOVE.B  #14,D0      * Trap #14 setup to print
0000202E  4E4F                    2372          TRAP    #15         * Perform Trap #14
00002030  4E75                    2373          RTS                 * Return to SIZE67/SIZE68
00002032                          2374          
00002032                          2375  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002032                          2376  *-----------------------------------------------------------------------------
00002032                          2377  
00002032                          2378  
00002032                          2379  
00002032                          2380  *-----------------------------------------------------------------------------
00002032                          2381  *-----------------------------------------------------------------------------
00002032                          2382  * NAME:           MOVEMHELPERPOST
00002032                          2383  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
00002032                          2384  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
00002032                          2385  * POST-CONDITION: The registers being saved are printed
00002032                          2386  * REGISTERS:      A2
00002032                          2387  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002032                          2388  MOVEMHELPERPOST
00002032  48A7 FFFE               2389          MOVEM  D0-D7/A0-A6,-(A7)
00002036                          2390          
00002036  4285                    2391          CLR.L   D5  * to be used as a loop counter
00002038  4284                    2392          CLR.L   D4  * == 1 if we have printed any registers (for fencepost issue)
0000203A  4283                    2393          CLR.L   D3  * == 1 if we are in a range
0000203C  4286                    2394          CLR.L   D6  * == 1 if we have already printed the slash or dash
0000203E  4287                    2395          CLR.L   D7  * == counts the number of registers in a range
00002040  1C3C 0001               2396          MOVE.B  #1,D6 * to fix fencepost issue
00002044  4282                    2397          CLR.L   D2
00002046  3412                    2398          MOVE.W  (A2),D2
00002048                          2399          
00002048                          2400  DLOOP * loop to print out the data register portion of the addresses being saved
00002048                          2401  
00002048  E25A                    2402          ROR     #1,D2
0000204A  6500 0006               2403          BCS     DVALID
0000204E                          2404          
0000204E  6000 0064               2405          BRA     DINVALID
00002052                          2406          
00002052                          2407  DVALID
00002052  0C43 0000               2408          CMPI    #0,D3
00002056  6700 0020               2409          BEQ     DFORWARDVALID * we are not in a range
0000205A                          2410          
0000205A  5247                    2411          ADDI    #1,D7 *increment number of regs in range
0000205C                          2412          
0000205C  0C46 0001               2413          CMPI    #1,D6   *have we already printed a symbol?
00002060  6700 0084               2414          BEQ     DLOOPITER
00002064                          2415          
00002064  43F9 0000251F           2416          LEA     DASH,A1    *print a dash
0000206A  103C 000E               2417          MOVE.B  #14,D0
0000206E  4E4F                    2418          TRAP    #15
00002070                          2419          
00002070  1C3C 0001               2420          MOVE.B  #1,D6 * indicates a symbol has been printed
00002074                          2421          
00002074  6000 0070               2422          BRA     DLOOPITER
00002078                          2423          
00002078                          2424  DFORWARDVALID
00002078                          2425          * not in a range yet, print
00002078                          2426          
00002078  0C44 0000               2427          CMPI    #0,D4
0000207C  6700 000E               2428          BEQ     DNOSLASH
00002080                          2429                  
00002080  43F9 0000251D           2430          LEA     SLASH,A1
00002086  103C 000E               2431          MOVE.B  #14,D0
0000208A  4E4F                    2432          TRAP    #15
0000208C                          2433          
0000208C                          2434  DNOSLASH
0000208C                          2435  
0000208C  183C 0001               2436          MOVE.B  #1,D4 * we have printed something, now slashes are fair game
00002090                          2437          
00002090  1C3C 0001               2438          MOVE.B  #1,D6   * we have printed a symbol
00002094                          2439          
00002094  43F9 00002507           2440          LEA     ASCII_D,A1
0000209A  103C 000E               2441          MOVE.B  #14,D0
0000209E  4E4F                    2442          TRAP    #15
000020A0                          2443          
000020A0  2205                    2444          MOVE.L  D5,D1
000020A2  103C 0003               2445          MOVE.B  #3,D0
000020A6  4E4F                    2446          TRAP    #15
000020A8                          2447  
000020A8  163C 0001               2448          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
000020AC  1C3C 0000               2449          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
000020B0                          2450          
000020B0  6000 0034               2451          BRA     DLOOPITER
000020B4                          2452  
000020B4                          2453  
000020B4                          2454  DINVALID
000020B4                          2455  
000020B4                          2456          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
000020B4                          2457          
000020B4  0C43 0001               2458          CMPI    #1,D3
000020B8  6600 002C               2459          BNE     DLOOPITER
000020BC                          2460          
000020BC  163C 0000               2461          MOVE.B  #0,D3
000020C0                          2462          
000020C0  0C47 0001               2463          CMPI    #1,D7
000020C4  6D00 001E               2464          BLT     DLOOPITERCLR
000020C8                          2465          
000020C8  43F9 00002507           2466          LEA     ASCII_D,A1
000020CE  103C 000E               2467          MOVE.B  #14,D0
000020D2  4E4F                    2468          TRAP    #15
000020D4                          2469          
000020D4  2205                    2470          MOVE.L  D5,D1
000020D6                          2471          
000020D6  0641 FFFF               2472          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
000020DA                          2473          
000020DA  103C 0003               2474          MOVE.B  #3,D0
000020DE  4E4F                    2475          TRAP    #15
000020E0                          2476          
000020E0  6000 0004               2477          BRA     DLOOPITER
000020E4                          2478          
000020E4                          2479  DLOOPITERCLR        
000020E4  4287                    2480          CLR.L   D7
000020E6                          2481  
000020E6                          2482  DLOOPITER
000020E6                          2483          
000020E6  0C45 0008               2484          CMPI    #8,D5
000020EA  6700 0008               2485          BEQ     DLOOPDONE
000020EE                          2486  
000020EE  5245                    2487          ADDI    #1,D5
000020F0  6000 FF56               2488          BRA     DLOOP
000020F4                          2489  
000020F4                          2490  DLOOPDONE
000020F4                          2491  
000020F4  7A09                    2492          MOVE.L  #9,D5  * to be used as a loop counter
000020F6  4283                    2493          CLR.L   D3  * == 1 if we are in a range
000020F8  4286                    2494          CLR.L   D6  * == 1 if we have already printed the slash or dash
000020FA  4287                    2495          CLR.L   D7  * count of registers in a range
000020FC  1C3C 0001               2496          MOVE.B  #1,D6 * to fix fencepost issue     
00002100                          2497  
00002100                          2498  ALOOP * loop to print out the data register portion of the addresses being saved
00002100                          2499  
00002100  E25A                    2500          ROR     #1,D2
00002102  6500 0006               2501          BCS     AVALID
00002106                          2502          
00002106  6000 0068               2503          BRA     AINVALID
0000210A                          2504          
0000210A                          2505  AVALID
0000210A  0C43 0000               2506          CMPI    #0,D3
0000210E  6700 0020               2507          BEQ     AFORWARDVALID * we are not in a range
00002112                          2508          
00002112  5247                    2509          ADDI    #1,D7 *increment number of regs in range
00002114                          2510          
00002114  0C46 0001               2511          CMPI    #1,D6   *have we already printed a symbol?
00002118  6700 008C               2512          BEQ     ALOOPITER
0000211C                          2513          
0000211C  43F9 0000251F           2514          LEA     DASH,A1    *print a dash
00002122  103C 000E               2515          MOVE.B  #14,D0
00002126  4E4F                    2516          TRAP    #15
00002128                          2517          
00002128  1C3C 0001               2518          MOVE.B  #1,D6 * indicates a symbol has been printed
0000212C                          2519          
0000212C  6000 0078               2520          BRA     ALOOPITER
00002130                          2521          
00002130                          2522  AFORWARDVALID
00002130                          2523          * not in a range yet, print
00002130                          2524          
00002130                          2525                  
00002130  0C44 0000               2526          CMPI    #0,D4
00002134  6700 000E               2527          BEQ     ANOSLASH
00002138                          2528                  
00002138  43F9 0000251D           2529          LEA     SLASH,A1
0000213E  103C 000E               2530          MOVE.B  #14,D0
00002142  4E4F                    2531          TRAP    #15
00002144                          2532          
00002144                          2533  ANOSLASH
00002144                          2534  
00002144  183C 0001               2535          MOVE.B  #1,D4   * we have printed something, now slashes are fair game
00002148                          2536          
00002148  1C3C 0001               2537          MOVE.B  #1,D6   * we have printed a symbol
0000214C                          2538          
0000214C  43F9 00002501           2539          LEA     ASCII_A,A1
00002152  103C 000E               2540          MOVE.B  #14,D0
00002156  4E4F                    2541          TRAP    #15
00002158                          2542          
00002158  2205                    2543          MOVE.L  D5,D1
0000215A                          2544          
0000215A  0641 FFF8               2545          ADDI    #-8,D1 * it's A, need to adjust by 8
0000215E                          2546          
0000215E  103C 0003               2547          MOVE.B  #3,D0
00002162  4E4F                    2548          TRAP    #15
00002164                          2549  
00002164  163C 0001               2550          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
00002168  1C3C 0000               2551          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
0000216C                          2552          
0000216C  6000 0038               2553          BRA     ALOOPITER
00002170                          2554  
00002170                          2555  
00002170                          2556  AINVALID
00002170                          2557  
00002170                          2558          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
00002170                          2559          
00002170  0C43 0001               2560          CMPI    #1,D3
00002174  6600 0030               2561          BNE     ALOOPITER
00002178                          2562          
00002178  163C 0000               2563          MOVE.B  #0,D3
0000217C                          2564          
0000217C  0C47 0001               2565          CMPI    #1,D7
00002180  6D00 0022               2566          BLT     ALOOPITERCLR
00002184                          2567          
00002184  43F9 00002501           2568          LEA     ASCII_A,A1
0000218A  103C 000E               2569          MOVE.B  #14,D0
0000218E  4E4F                    2570          TRAP    #15
00002190                          2571          
00002190  2205                    2572          MOVE.L  D5,D1
00002192                          2573          
00002192  0641 FFFF               2574          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
00002196  0641 FFF8               2575          ADDI    #-8,D1 * it's A, need to adjust by 8
0000219A                          2576          
0000219A  103C 0003               2577          MOVE.B  #3,D0
0000219E  4E4F                    2578          TRAP    #15
000021A0                          2579          
000021A0  6000 0004               2580          BRA     ALOOPITER
000021A4                          2581          
000021A4                          2582  ALOOPITERCLR
000021A4                          2583          
000021A4  4287                    2584          CLR.L   D7
000021A6                          2585  
000021A6                          2586  ALOOPITER
000021A6                          2587          
000021A6  0C45 0010               2588          CMPI     #16,D5
000021AA  6700 0008               2589          BEQ     ALOOPDONE
000021AE                          2590  
000021AE  5245                    2591          ADDI    #1,D5
000021B0  6000 FF4E               2592          BRA     ALOOP
000021B4                          2593  
000021B4                          2594  ALOOPDONE
000021B4                          2595          
000021B4  4C9F 7FFF               2596          MOVEM    (A7)+,D0-D7/A0-A6
000021B8  4E75                    2597          RTS
000021BA                          2598  
000021BA                          2599          
000021BA                          2600  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000021BA                          2601  *-----------------------------------------------------------------------------
000021BA                          2602  
000021BA                          2603  
000021BA                          2604  
000021BA                          2605  
000021BA                          2606  *-----------------------------------------------------------------------------
000021BA                          2607  *-----------------------------------------------------------------------------
000021BA                          2608  * NAME:           MOVEMHELPERPRE
000021BA                          2609  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
000021BA                          2610  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
000021BA                          2611  * POST-CONDITION: The registers being saved are printed
000021BA                          2612  * REGISTERS:      A2
000021BA                          2613  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000021BA                          2614  MOVEMHELPERPRE
000021BA                          2615  
000021BA                          2616          
000021BA                          2617  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000021BA                          2618  *-----------------------------------------------------------------------------
000021BA                          2619  
000021BA                          2620  
000021BA                          2621  
000021BA                          2622  *-----------------------------------------------------------------------------
000021BA                          2623  *-----------------------------------------------------------------------------
000021BA                          2624  * NAME:           UNKNOWNOP
000021BA                          2625  * DESCRIPTION:    a
000021BA                          2626  * PRE-CONDITION:  D2 contains the instruction to print. D2 has already been
000021BA                          2627  *                 identified as an unknown operation.
000021BA                          2628  * POST-CONDITION: D2 is no longer the opcode.
000021BA                          2629  * REGISTERS:      a
000021BA                          2630  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000021BA                          2631  UNKNOWNOP
000021BA  220A                    2632          MOVE.L  A2,D1   * Prep the add to print
000021BC  5581                    2633          SUB.L   #2,D1   * Off by two error due to post increment correct
000021BE  2602                    2634          MOVE.L  D2,D3   * Save the opcode to print
000021C0                          2635          
000021C0  7410                    2636          MOVE.L  #16,D2  * set the base to 16
000021C2  700F                    2637          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000021C4  4E4F                    2638          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000021C6                          2639          
000021C6  43F9 000024C3           2640          LEA     DATA,A1 * load " DATA $" into register A1
000021CC  700E                    2641          MOVE.L  #14,D0  * print the string stored in A1
000021CE  4E4F                    2642          TRAP    #15
000021D0                          2643          
000021D0  2203                    2644          MOVE.L  D3,D1   * move the opcode from D3 into D1 to print
000021D2  103C 000F               2645          MOVE.B  #15,D0   * Indicate we are using trap #15, 15 to in a certain #base
000021D6  4E4F                    2646          TRAP    #15      * Perform Trap #3
000021D8                          2647  
000021D8  43F9 00002468           2648          LEA     NEWLINE,A1 * load newline into register A1
000021DE  700E                    2649          MOVE.L  #14,D0  * print the string stored in A1
000021E0  4E4F                    2650          TRAP    #15
000021E2                          2651  
000021E2  4E75                    2652          RTS
000021E4                          2653  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000021E4                          2654  *-----------------------------------------------------------------------------
000021E4                          2655  
000021E4                          2656  
000021E4                          2657  
000021E4                          2658  *-----------------------------------------------------------------------------
000021E4                          2659  *-----------------------------------------------------------------------------
000021E4                          2660  * NAME: Print ASCII hex char
000021E4                          2661  * DESCRIPTION:    Prints and address register to console in hex (ASCII chars)
000021E4                          2662  * PRE-CONDITION:  A6 contains the register of memory to print.
000021E4                          2663  *                 This parameter would be pre-loaded by, for example:
000021E4                          2664  *                 "LEA FOO_BAR_ADDR,A6" or "LEA $1234FEED,A6"
000021E4                          2665  *                 D3 contains the loops to do (number of bytes).
000021E4                          2666  * POST-CONDITION: 
000021E4                          2667  * REGISTERS:      
000021E4                          2668  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000021E4                          2669  PRINT_ASCII_HEX_CHAR
000021E4  48E7 FFFC               2670      MOVEM.L     D0-D7/A0-A5,-(A7) * push data to save
000021E8  4285                    2671      CLR.L       D5
000021EA                          2672      
000021EA                          2673      * fence post check (if-statement, check if 0 > chars)
000021EA  0C03 0000               2674      CMPI.B      #0,D3
000021EE  6700 017C               2675      BEQ         INVALID_ASCII_INPUT * go to very last part if invalid
000021F2                          2676      
000021F2                          2677  *    MOVE.L      A6,D4
000021F2  2E0E                    2678      MOVE.L      A6,D7
000021F4                          2679  PRINT_ASCII_LOOP
000021F4                          2680  *    MOVE.L      A6,D7 * increase a6's pointer position ea. loop
000021F4                          2681  *    MOVE.L      D4,D7 * make a mutable copy
000021F4  E99F                    2682      ROL.L       #4,D7 * roll to next spot
000021F6  48E7 0100               2683      MOVEM.L     D7,-(A7) * save D7
000021FA                          2684  
000021FA  0287 0000000F           2685      ANDI.L      #HEX_VALUE_MASK_LONG,D7
00002200                          2686      
00002200  0C87 00000000           2687      CMPI.L      #0,D7
00002206  6D00 0164               2688      BLT         INVALID_ASCII_INPUT
0000220A                          2689  
0000220A  0C87 0000000F           2690      CMPI.L      #15,D7
00002210  6E00 015A               2691      BGT         INVALID_ASCII_INPUT
00002214                          2692  
00002214                          2693      * this might be faster... to do later, after entire assignment done
00002214                          2694       * CMPI.L      #9,D7
00002214                          2695       * BLE         PRINT_ASCII_0_TO_9
00002214                          2696  
00002214  0C87 00000000           2697      CMPI.L      #0,D7
0000221A  6700 0098               2698      BEQ         PRINT_ASCII_0
0000221E  0C87 00000001           2699      CMPI.L      #1,D7
00002224  6700 0098               2700      BEQ         PRINT_ASCII_1
00002228  0C87 00000002           2701      CMPI.L      #2,D7
0000222E  6700 0098               2702      BEQ         PRINT_ASCII_2
00002232  0C87 00000003           2703      CMPI.L      #3,D7
00002238  6700 0098               2704      BEQ         PRINT_ASCII_3
0000223C  0C87 00000004           2705      CMPI.L      #4,D7
00002242  6700 0098               2706      BEQ         PRINT_ASCII_4
00002246  0C87 00000005           2707      CMPI.L      #5,D7
0000224C  6700 0098               2708      BEQ         PRINT_ASCII_5
00002250  0C87 00000006           2709      CMPI.L      #6,D7
00002256  6700 0098               2710      BEQ         PRINT_ASCII_6
0000225A  0C87 00000007           2711      CMPI.L      #7,D7
00002260  6700 0098               2712      BEQ         PRINT_ASCII_7
00002264  0C87 00000008           2713      CMPI.L      #8,D7
0000226A  6700 0098               2714      BEQ         PRINT_ASCII_8
0000226E  0C87 00000009           2715      CMPI.L      #9,D7
00002274  6700 0098               2716      BEQ         PRINT_ASCII_9
00002278  0C87 0000000A           2717      CMPI.L      #10,D7
0000227E  6700 0098               2718      BEQ         PRINT_ASCII_A
00002282  0C87 0000000B           2719      CMPI.L      #11,D7
00002288  6700 0098               2720      BEQ         PRINT_ASCII_B
0000228C  0C87 0000000C           2721      CMPI.L      #12,D7
00002292  6700 0098               2722      BEQ         PRINT_ASCII_C
00002296  0C87 0000000D           2723      CMPI.L      #13,D7
0000229C  6700 0098               2724      BEQ         PRINT_ASCII_D
000022A0  0C87 0000000E           2725      CMPI.L      #14,D7
000022A6  6700 0098               2726      BEQ         PRINT_ASCII_E
000022AA  0C87 0000000F           2727      CMPI.L      #15,D7
000022B0  6700 0098               2728      BEQ         PRINT_ASCII_F
000022B4                          2729  PRINT_ASCII_0
000022B4  43F9 000024ED           2730      LEA         ASCII_0,A1
000022BA  6000 0098               2731      BRA         PRINT_ASCII_CHAR
000022BE                          2732  PRINT_ASCII_1
000022BE  43F9 000024EF           2733      LEA         ASCII_1,A1
000022C4  6000 008E               2734      BRA         PRINT_ASCII_CHAR
000022C8                          2735  PRINT_ASCII_2
000022C8  43F9 000024F1           2736      LEA         ASCII_2,A1
000022CE  6000 0084               2737      BRA         PRINT_ASCII_CHAR
000022D2                          2738  PRINT_ASCII_3
000022D2  43F9 000024F3           2739      LEA         ASCII_3,A1
000022D8  6000 007A               2740      BRA         PRINT_ASCII_CHAR
000022DC                          2741  PRINT_ASCII_4
000022DC  43F9 000024F5           2742      LEA         ASCII_4,A1
000022E2  6000 0070               2743      BRA         PRINT_ASCII_CHAR
000022E6                          2744  PRINT_ASCII_5
000022E6  43F9 000024F7           2745      LEA         ASCII_5,A1
000022EC  6000 0066               2746      BRA         PRINT_ASCII_CHAR
000022F0                          2747  PRINT_ASCII_6
000022F0  43F9 000024F9           2748      LEA         ASCII_6,A1
000022F6  6000 005C               2749      BRA         PRINT_ASCII_CHAR
000022FA                          2750  PRINT_ASCII_7
000022FA  43F9 000024FB           2751      LEA         ASCII_7,A1
00002300  6000 0052               2752      BRA         PRINT_ASCII_CHAR
00002304                          2753  PRINT_ASCII_8
00002304  43F9 000024FD           2754      LEA         ASCII_8,A1
0000230A  6000 0048               2755      BRA         PRINT_ASCII_CHAR
0000230E                          2756  PRINT_ASCII_9
0000230E  43F9 000024FF           2757      LEA         ASCII_9,A1
00002314  6000 003E               2758      BRA         PRINT_ASCII_CHAR
00002318                          2759  PRINT_ASCII_A
00002318  43F9 00002501           2760      LEA         ASCII_A,A1
0000231E  6000 0034               2761      BRA         PRINT_ASCII_CHAR
00002322                          2762  PRINT_ASCII_B
00002322  43F9 00002503           2763      LEA         ASCII_B,A1
00002328  6000 002A               2764      BRA         PRINT_ASCII_CHAR
0000232C                          2765  PRINT_ASCII_C
0000232C  43F9 00002505           2766      LEA         ASCII_C,A1
00002332  6000 0020               2767      BRA         PRINT_ASCII_CHAR
00002336                          2768  PRINT_ASCII_D
00002336  43F9 00002507           2769      LEA         ASCII_D,A1
0000233C  6000 0016               2770      BRA         PRINT_ASCII_CHAR
00002340                          2771  PRINT_ASCII_E
00002340  43F9 00002509           2772      LEA         ASCII_E,A1
00002346  6000 000C               2773      BRA         PRINT_ASCII_CHAR
0000234A                          2774  PRINT_ASCII_F
0000234A  43F9 0000250B           2775      LEA         ASCII_F,A1
00002350  6000 0002               2776      BRA         PRINT_ASCII_CHAR
00002354                          2777  PRINT_ASCII_CHAR
00002354  103C 000E               2778      MOVE.B      #14,D0
00002358  4E4F                    2779      TRAP        #15
0000235A                          2780      
0000235A                          2781          
0000235A  4287                    2782      CLR.L       D7
0000235C  4CDF 0080               2783      MOVEM.L     (A7)+,D7 * copy back D7 from stack, to mutate its' bits
00002360                          2784      
00002360  5205                    2785      ADD.B       #1,D5 * loop until counter stops
00002362  BA03                    2786      CMP.B       D3,D5
00002364  6C00 0006               2787      BGE         PRINT_ASCII_FINISH
00002368                          2788      
00002368  6000 FE8A               2789      BRA         PRINT_ASCII_LOOP
0000236C                          2790  INVALID_ASCII_INPUT
0000236C                          2791  PRINT_ASCII_FINISH
0000236C  4CDF 3FFF               2792      MOVEM.L     (A7)+,D0-D7/A0-A5 * pop saved memory
00002370  4E75                    2793      RTS
00002372                          2794      
00002372                          2795  PRINTDATA911
00002372  0C46 0E00               2796      CMPI    #%0000111000000000, D6   * Print 7
00002376  6700 003C               2797      BEQ     PRINT7   
0000237A  0C46 0C00               2798      CMPI    #%0000110000000000, D6   * Print 6
0000237E  6700 0042               2799      BEQ     PRINT6
00002382  0C46 0A00               2800      CMPI    #%0000101000000000, D6   * Print 5
00002386  6700 0048               2801      BEQ     PRINT5
0000238A  0C46 0800               2802      CMPI    #%0000100000000000, D6   * Print 4
0000238E  6700 004E               2803      BEQ     PRINT4 
00002392  0C46 0600               2804      CMPI    #%0000011000000000, D6   * Print 3
00002396  6700 0054               2805      BEQ     PRINT3    
0000239A  0C46 0400               2806      CMPI    #%0000010000000000, D6   * Print 2
0000239E  6700 005A               2807      BEQ     PRINT2   
000023A2  0C46 0200               2808      CMPI    #%0000001000000000, D6   * Print 1
000023A6  6700 0060               2809      BEQ     PRINT1     
000023AA  0C46 0000               2810      CMPI    #%0000000000000000, D6   * Print 0
000023AE  6700 0066               2811      BEQ     PRINT8
000023B2                          2812      
000023B2  4E75                    2813      RTS                             * Fail case  
000023B4                          2814      
000023B4                          2815  PRINT7
000023B4  43F9 000024FB           2816      LEA     ASCII_7, A1
000023BA  103C 000E               2817      MOVE.B      #14,D0
000023BE  4E4F                    2818      TRAP        #15
000023C0  4E75                    2819      RTS
000023C2                          2820      
000023C2                          2821  PRINT6
000023C2  43F9 000024F9           2822      LEA     ASCII_6, A1
000023C8  103C 000E               2823      MOVE.B      #14,D0
000023CC  4E4F                    2824      TRAP        #15
000023CE  4E75                    2825      RTS
000023D0                          2826      
000023D0                          2827  PRINT5
000023D0  43F9 000024F7           2828      LEA     ASCII_5, A1
000023D6  103C 000E               2829      MOVE.B      #14,D0
000023DA  4E4F                    2830      TRAP        #15
000023DC  4E75                    2831      RTS
000023DE                          2832      
000023DE                          2833  PRINT4
000023DE  43F9 000024F5           2834      LEA     ASCII_4, A1
000023E4  103C 000E               2835      MOVE.B      #14,D0
000023E8  4E4F                    2836      TRAP        #15
000023EA  4E75                    2837      RTS
000023EC                          2838      
000023EC                          2839  PRINT3
000023EC  43F9 000024F3           2840      LEA     ASCII_3, A1
000023F2  103C 000E               2841      MOVE.B      #14,D0
000023F6  4E4F                    2842      TRAP        #15
000023F8  4E75                    2843      RTS
000023FA                          2844      
000023FA                          2845  PRINT2
000023FA  43F9 000024F1           2846      LEA     ASCII_2, A1
00002400  103C 000E               2847      MOVE.B      #14,D0
00002404  4E4F                    2848      TRAP        #15
00002406  4E75                    2849      RTS
00002408                          2850      
00002408                          2851  PRINT1
00002408  43F9 000024EF           2852      LEA     ASCII_1, A1
0000240E  103C 000E               2853      MOVE.B      #14,D0
00002412  4E4F                    2854      TRAP        #15
00002414  4E75                    2855      RTS
00002416                          2856          
00002416                          2857  PRINT8
00002416  43F9 000024FD           2858      LEA     ASCII_8, A1
0000241C  103C 000E               2859      MOVE.B      #14,D0
00002420  4E4F                    2860      TRAP        #15
00002422  4E75                    2861      RTS
00002424                          2862  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002424                          2863  *-----------------------------------------------------------------------------
00002424                          2864  
00002424                          2865  
00002424                          2866  
00002424                          2867  *-----------------------------------------------------------------------------
00002424                          2868  *-----------------------------------------------------------------------------
00002424                          2869  * NAME: Bitmask
00002424                          2870  * DESCRIPTION:    Masks bits in a data register.
00002424                          2871  * PRE-CONDITION:  D6 contains the starting bit to be masked, and D7 contains
00002424                          2872  *                 the ending bit.  For example, a starting bit of decimal
00002424                          2873  *                 value 0 and an ending bit of decimal value 3 will mask the
00002424                          2874  *                 bits 0, 1, 2, and 3.
00002424                          2875  * POST-CONDITION: D6 contains the bitmask, ready for use.
00002424                          2876  * REGISTERS:      D5,D6,D7
00002424                          2877  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002424                          2878  BITMASK
00002424  3F05                    2879          MOVE    D5,-(A7)    * push D5 onto the stack so we can use it to
00002426  4245                    2880          CLR     D5          * clear D5 so we can use it
00002428                          2881  LOOPBIT 
00002428  0DC5                    2882          BSET    D6,D5       * set the D6th bit in D5 to 1
0000242A  5246                    2883          ADD     #1,D6       * increment D6
0000242C                          2884  
0000242C  BC47                    2885          CMP     D7,D6       * have we finished?
0000242E  6E00 0004               2886          BGT     BITMASKDONE * yes
00002432  60F4                    2887          BRA     LOOPBIT     * no, iterate again
00002434                          2888  
00002434                          2889  BITMASKDONE
00002434  2C05                    2890          MOVE.L  D5,D6
00002436  3A1F                    2891          MOVE    (A7)+,D5    * restore D5
00002438  4E75                    2892          RTS
0000243A                          2893  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000243A                          2894  *-----------------------------------------------------------------------------
0000243A                          2895  
0000243A                          2896  
0000243A                          2897  
0000243A                          2898  *-----------------------------------------------------------------------------
0000243A                          2899  *-----------------------------------------------------------------------------
0000243A                          2900  * SECTION: Constants/variables used throughout the program.
0000243A                          2901  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000243A                          2902  
0000243A                          2903  * ---> GENERAL
0000243A  =0000000D               2904  CR          EQU     $0D
0000243A  =0000000A               2905  LF          EQU     $0A
0000243A= 45 4E 54 45 52 20 ...   2906  MSGSTART    DC.B    'ENTER START ADDRESS: ',CR,LF,0
00002452= 45 4E 54 45 52 20 ...   2907  MSGEND      DC.B    'ENTER END ADDRESS: ',CR,LF,0
00002468= 0D 0A 00                2908  NEWLINE     DC.B    CR,LF,0
0000246B                          2909  
0000246B                          2910  * ---> OPS
0000246B= 44 49 56 53 00          2911  DIVSOP      DC.B    'DIVS',0
00002470= 4E 4F 50 00             2912  NOOPERATION DC.B    'NOP',0
00002474= 4E 45 47 00             2913  NEGOP       DC.B    'NEG',0
00002478= 4D 4F 56 45 00          2914  MOVEOP      DC.B    'MOVE',0
0000247D= 4D 4F 56 45 4D 00       2915  MOVEMOP     DC.B    'MOVEM',0
00002483= 4A 53 52 00             2916  JSROP       DC.B    'JSR',0
00002487= 52 54 53 00             2917  RTSOP       DC.B    'RTS',0
0000248B= 53 55 42 51 00          2918  SUBQOP      DC.B    'SUBQ',0
00002490= 4C 45 41 00             2919  LEAOP       DC.B    'LEA',0
00002494= 42 43 4C 52 20 00       2920  BCLROP      DC.B    'BCLR ',0
0000249A= 4D 55 4C 53 00          2921  MULSOP      DC.B    'MULS',0
0000249F= 4F 52 00                2922  OROP        DC.B    'OR',0
000024A2= 4F 52 49 00             2923  ORIOP       DC.B    'ORI',0
000024A6= 43 4D 50 49 00          2924  CMPIOP      DC.B    'CMPI',0
000024AB= 4C 53 4C 00             2925  LSLOP       DC.B    'LSL',0
000024AF= 4C 53 52 00             2926  LSROP       DC.B    'LSR',0
000024B3= 41 53 4C 00             2927  ASLOP       DC.B    'ASL',0
000024B7= 41 53 52 00             2928  ASROP       DC.B    'ASR',0
000024BB= 52 4F 4C 00             2929  ROLOP       DC.B    'ROL',0
000024BF= 52 4F 52 00             2930  ROROP       DC.B    'ROR',0
000024C3= 20 44 41 54 41 20 ...   2931  DATA        DC.B    ' DATA $',0
000024CB= 42 43 43 20 00          2932  OP_BCC_MSG  DC.B    'BCC ',0
000024D0= 42 43 53 20 00          2933  OP_BCS_MSG  DC.B    'BCS ',0
000024D5= 42 47 45 20 00          2934  OP_BGE_MSG  DC.B    'BGE ',0
000024DA= 42 4C 54 20 00          2935  OP_BLT_MSG  DC.B    'BLT ',0
000024DF= 42 56 43 20 00          2936  OP_BVC_MSG  DC.B    'BVC ',0
000024E4= 42 52 41 20 00          2937  OP_BRA_MSG  DC.B    'BRA ',0
000024E9= 41 44 44 00             2938  OP_ADD_MSG  DC.B    'ADD',0
000024ED                          2939  
000024ED                          2940  * ---> HEX CHARS
000024ED= 30 00                   2941  ASCII_0     DC.B    '0',0
000024EF= 31 00                   2942  ASCII_1     DC.B    '1',0
000024F1= 32 00                   2943  ASCII_2     DC.B    '2',0
000024F3= 33 00                   2944  ASCII_3     DC.B    '3',0
000024F5= 34 00                   2945  ASCII_4     DC.B    '4',0
000024F7= 35 00                   2946  ASCII_5     DC.B    '5',0
000024F9= 36 00                   2947  ASCII_6     DC.B    '6',0
000024FB= 37 00                   2948  ASCII_7     DC.B    '7',0
000024FD= 38 00                   2949  ASCII_8     DC.B    '8',0
000024FF= 39 00                   2950  ASCII_9     DC.B    '9',0
00002501= 41 00                   2951  ASCII_A     DC.B    'A',0
00002503= 42 00                   2952  ASCII_B     DC.B    'B',0
00002505= 43 00                   2953  ASCII_C     DC.B    'C',0
00002507= 44 00                   2954  ASCII_D     DC.B    'D',0
00002509= 45 00                   2955  ASCII_E     DC.B    'E',0
0000250B= 46 00                   2956  ASCII_F     DC.B    'F',0
0000250D                          2957  
0000250D                          2958  * ---> SPECIAL CHARACTERS
0000250D= 20 00                   2959  SPACE       DC.B    ' ',0
0000250F= 24 00                   2960  DOLLAR      DC.B    '$',0
00002511= 23 00                   2961  IMD         DC.B    '#',0
00002513= 2C 00                   2962  COMMA       DC.B    ',',0
00002515= 28 00                   2963  OBRACK      DC.B    '(',0
00002517= 29 00                   2964  CBRACK      DC.B    ')',0
00002519= 2B 00                   2965  PLUS        DC.B    '+',0
0000251B= 2D 00                   2966  MINUS       DC.B    '-',0
0000251D= 2F 00                   2967  SLASH       DC.B    '/',0
0000251F= 2D 00                   2968  DASH        DC.B    '-',0
00002521                          2969  
00002521                          2970  * ---> B/W/L (BYTE, WORD, LONG, RESPECTIVELY)
00002521= 2E 42 20 00             2971  __B         DC.B    '.B ',0
00002525= 2E 57 20 00             2972  __W         DC.B    '.W ',0
00002529= 2E 4C 20 00             2973  __L         DC.B    '.L ',0
0000252D                          2974  
0000252D                          2975  * ---> ADDRESS REGISTERS A0-A7
0000252D= 41 30 00                2976  __A0        DC.B   'A0',0
00002530= 41 31 00                2977  __A1        DC.B   'A1',0    
00002533= 41 32 00                2978  __A2        DC.B   'A2',0
00002536= 41 33 00                2979  __A3        DC.B   'A3',0
00002539= 41 34 00                2980  __A4        DC.B   'A4',0
0000253C= 41 35 00                2981  __A5        DC.B   'A5',0
0000253F= 41 36 00                2982  __A6        DC.B   'A6',0
00002542= 41 37 00                2983  __A7        DC.B   'A7',0
00002545                          2984  
00002545                          2985  * ---> DATA REGISTERS D0-D7
00002545= 44 30 00                2986  __D0        DC.B   'D0',0
00002548= 44 31 00                2987  __D1        DC.B   'D1',0
0000254B= 44 32 00                2988  __D2        DC.B   'D2',0
0000254E= 44 33 00                2989  __D3        DC.B   'D3',0
00002551= 44 34 00                2990  __D4        DC.B   'D4',0
00002554= 44 35 00                2991  __D5        DC.B   'D5',0
00002557= 44 36 00                2992  __D6        DC.B   'D6',0
0000255A= 44 37 00                2993  __D7        DC.B   'D7',0
0000255D                          2994  
0000255D                          2995  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000255D                          2996  *-----------------------------------------------------------------------------
0000255D                          2997  
0000255D                          2998  
0000255D                          2999  
0000255D                          3000  *-----------------------------------------------------------------------------
0000255D                          3001  *-----------------------------------------------------------------------------
0000255D                          3002  * SECTION: Sample program to run, then attempt testing disassembly on.
0000255D                          3003  * STARTING: 16384
0000255D                          3004  * ENDING:   16420
0000255D                          3005  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00004000                          3006      ORG $4000
00004000                          3007      
00004000  4E71                    3008      NOP
00004002  103C 009A               3009      MOVE.B   #%10011010, D0
00004006  123C 00A9               3010      MOVE.B   #%10101001, D1
0000400A  D200                    3011      ADD.B    D0,D1
0000400C  4C9F 3C1A               3012      MOVEM    (A7)+,A2-A5/D1/D3-D4
00004010  43F8 2483               3013      LEA      JSROP,A1
00004014  4467                    3014      NEG.W    -(A7)
00004016  4EB9 00004044           3015      JSR      END
0000401C  81FC 0001               3016      DIVS    #1, D0
00004020  0181                    3017      BCLR    D0, D1
00004022  CFFC 0003               3018      MULS.W  #3, D7
00004026  CFC0                    3019      MULS    D0, D7
00004028  C5D9                    3020      MULS    (A1)+, D2
0000402A  5146                    3021      SUBQ    #8, D6
0000402C  5F81                    3022      SUBQ.L  #7, D1
0000402E  0041 0004               3023      ORI     #4, D1
00004032  E389                    3024      LSL.L   #1,D1
00004034  E489                    3025      LSR.L   #2,D1
00004036  E781                    3026      ASL.L   #3,D1
00004038  E881                    3027      ASR.L   #4,D1
0000403A  EB99                    3028      ROL.L   #5,D1
0000403C  E099                    3029      ROR.L   #8,D1
0000403E  DAC1                    3030      ADDA.W  D1,A5
00004040  6000 0002               3031      BRA     END
00004044                          3032  
00004044                          3033  END
00004044  4E75                    3034      RTS
00004046                          3035      
00004046                          3036  RLLYEND
00004046                          3037      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_LONG_OP        19BA
ADDA_PRT            19F6
ADDA_WORD_OP        1952
ADD_ADDA_END        1A26
ADD_ADDA_PRINT      1A0E
ADD_ADDA_SPACE      19E8
ADD_EA_DN_GENERIC   19DA
AFORWARDVALID       2130
AINVALID            2170
ALOOP               2100
ALOOPDONE           21B4
ALOOPITER           21A6
ALOOPITERCLR        21A4
ANOSLASH            2144
AS                  1A9C
ASCII_0             24ED
ASCII_1             24EF
ASCII_2             24F1
ASCII_3             24F3
ASCII_4             24F5
ASCII_5             24F7
ASCII_6             24F9
ASCII_7             24FB
ASCII_8             24FD
ASCII_9             24FF
ASCII_A             2501
ASCII_B             2503
ASCII_C             2505
ASCII_D             2507
ASCII_E             2509
ASCII_F             250B
ASL                 1AB2
ASLOP               24B3
ASR                 1AC2
ASROP               24B7
AVALID              210A
BCC_BYTE_OFFSET     1760
BCC_END             177C
BCLROP              2494
BITMASK             2424
BITMASKDONE         2434
BYTE_DN_EA          1972
BYTE_EA_DN          190A
CBRACK              2517
CMPIOP              24A6
COMMA               2513
CR                  D
DASH                251F
DATA                24C3
DFORWARDVALID       2078
DINVALID            20B4
DIVSOP              246B
DLOOP               2048
DLOOPDONE           20F4
DLOOPITER           20E6
DLOOPITERCLR        20E4
DNOSLASH            208C
DOLLAR              250F
DONE0100            1642
DVALID              2052
EAHELPER05          1C16
EAHELPER611         1BD4
END                 4044
END0000             12A2
END67               1FAA
ENDEAHELPER05       1D66
ENDEAHELPER611      1C10
ENDMODE_AN          1EF6
ENDMODE_DN          1DF6
ENDOP0001           1308
ENDOP1110           1BBC
HEX_VALUE_MASK_LONG  F
IMD                 2511
INVALID_ASCII_INPUT  236C
ITERATION           1158
JSROP               2483
LEAOP               2490
LF                  A
LONG_DN_EA          19A2
LONG_EA_DN          193A
LOOP                103A
LOOPBIT             2428
LOOPUNKNOWNOP       1154
LS                  1A66
LSL                 1A7C
LSLOP               24AB
LSR                 1A8C
LSROP               24AF
MINUS               251B
MODE_AN             1E6C
MODE_DN             1D6C
MOVEMHELPERPOST     2032
MOVEMHELPERPRE      21BA
MOVEMOP             247D
MOVEMTOMEM          1452
MOVEMTOREG          13B8
MOVEOP              2478
MSGEND              2452
MSGSTART            243A
MULSOP              249A
NEGOP               2474
NEWLINE             2468
NOOPERATION         2470
NOT0000             1064
NOT0001             1074
NOT0010             1084
NOT0011             1094
NOT0100             10A4
NOT0101             10B4
NOT0110             10C4
NOT0111             10D4
NOT1000             10E4
NOT1001             10F4
NOT1010             1104
NOT1011             1114
NOT1100             1124
NOT1101             1134
NOT1110             1144
NOT67BYTE           1F8E
NOT67WORD           1F9E
NOTA0               1E8E
NOTA1               1E9E
NOTA2               1EAE
NOTA3               1EBE
NOTA4               1ECE
NOTA5               1EDE
NOTA6               1EEE
NOTADRDIRECT        1C46
NOTADRINDIRECT      1C6E
NOTADRINDIRECTPOST  1CA2
NOTADRINDIRECTPRE   1CD6
NOTBCLR             11E2
NOTD0               1D8E
NOTD1               1D9E
NOTD2               1DAE
NOTD3               1DBE
NOTD4               1DCE
NOTD5               1DDE
NOTD6               1DEE
NOTDATAREG          1C36
NOTDIVS             1806
NOTIMMBYTE          1D0C
NOTIMMEDIATE        1D62
NOTIMMWORD          1D3A
NOTJSR              153A
NOTLONGMOVEM1       1420
NOTLONGMOVEM2       14BA
NOTMOVEM            14EC
NOTNEG              1394
NOTNOP              133E
NOTORI              1296
NOTRTS              155C
OBRACK              2515
OP0000              1164
OP0001              12A8
OP0010              130E
OP0011              1314
OP0100              1322
OP0101              164C
OP0110              16BA
OP0111              1782
OP1000              1788
OP1000END           1816
OP1001              181C
OP1010              181C
OP1011              1822
OP1100              1828
OP1101              18B2
OP1110              1A38
OP1110DATAREG       1B90
OP1110GENERIC       1B08
OP1110IMMEIGHT      1B68
OP1111              1BCE
OP_0000             0
OP_0001             1000
OP_0010             2000
OP_0011             3000
OP_0100             4000
OP_0101             5000
OP_0110             6000
OP_0111             7000
OP_1000             8000
OP_1001             9000
OP_1010             A000
OP_1011             B000
OP_1100             C000
OP_1101             D000
OP_1110             E000
OP_1111             F000
OP_ADD_MSG          24E9
OP_BCC              1704
OP_BCC_MSG          24CB
OP_BCS              170E
OP_BCS_MSG          24D0
OP_BGE              1718
OP_BGE_MSG          24D5
OP_BLT              1722
OP_BLT_MSG          24DA
OP_BRA              1736
OP_BRANCHES_PRINT   1740
OP_BRA_MSG          24E4
OP_BVC              172C
OP_BVC_MSG          24DF
ORIOP               24A2
OROP                249F
PLUS                2519
PRINT1              2408
PRINT2              23FA
PRINT3              23EC
PRINT4              23DE
PRINT5              23D0
PRINT6              23C2
PRINT7              23B4
PRINT8              2416
PRINTA0             1EFC
PRINTA1             1F0A
PRINTA2             1F18
PRINTA3             1F26
PRINTA4             1F34
PRINTA5             1F42
PRINTA6             1F50
PRINTA7             1F5E
PRINTBYTE           2008
PRINTD0             1DFC
PRINTD1             1E0A
PRINTD2             1E18
PRINTD3             1E26
PRINTD4             1E34
PRINTD5             1E42
PRINTD6             1E50
PRINTD7             1E5E
PRINTDATA911        2372
PRINTLONG           2024
PRINTWORD           2016
PRINT_ASCII_0       22B4
PRINT_ASCII_1       22BE
PRINT_ASCII_2       22C8
PRINT_ASCII_3       22D2
PRINT_ASCII_4       22DC
PRINT_ASCII_5       22E6
PRINT_ASCII_6       22F0
PRINT_ASCII_7       22FA
PRINT_ASCII_8       2304
PRINT_ASCII_9       230E
PRINT_ASCII_A       2318
PRINT_ASCII_B       2322
PRINT_ASCII_C       232C
PRINT_ASCII_CHAR    2354
PRINT_ASCII_D       2336
PRINT_ASCII_E       2340
PRINT_ASCII_F       234A
PRINT_ASCII_FINISH  236C
PRINT_ASCII_HEX_CHAR  21E4
PRINT_ASCII_LOOP    21F4
RLLYEND             4046
RO                  1AD2
ROL                 1AE8
ROLOP               24BB
ROR                 1AF8
ROROP               24BF
RTSOP               2487
SIZE67              1F6C
SIZE68              1FB0
SKIPLONG            1274
SKIPNOTLONG1        142C
SKIPNOTLONG2        14C6
SLASH               251D
SPACE               250D
START               1000
SUBQOP              248B
TWOWORDLEA          15EC
UNKNOWN0000         129E
UNKNOWN0100         163E
UNKNOWN0101         16B4
UNKNOWN1100         18A8
UNKNOWNOP           21BA
UNKNOWNOP0001       1304
WORD_DN_EA          198A
WORD_EA_DN          1922
__A0                252D
__A1                2530
__A2                2533
__A3                2536
__A4                2539
__A5                253C
__A6                253F
__A7                2542
__B                 2521
__D0                2545
__D1                2548
__D2                254B
__D3                254E
__D4                2551
__D5                2554
__D6                2557
__D7                255A
__L                 2529
__W                 2525
