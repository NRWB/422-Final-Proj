00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/11/2014 6:57:35 PM

00000000                             1  *    666
00000000                             2  *   66 66
00000000                             3  *  66   66
00000000                             4  *  66   66         8888
00000000                             5  *  66   66       88   kkkk
00000000                             6  *  66  66       8   88   kk      
00000000                             7  *   66  6      8  88  kkk  kk    
00000000                             8  *    66  6    8  88     kk  k
00000000                             9  *     66 66  88 88        kk
00000000                            10  *     6 _______ 8
00000000                            11  *    6    68k    8
00000000                            12  *   6_____PRO_____8
00000000                            13  *  6               8        68k is as easy as
00000000                            14  *  6    0     0    8        6 - 8 - k !
00000000                            15  *  6   /   V   \   8 
00000000                            16  *  6   \__/ \__/   8        Welcome to our Dissasembler, Professor Nash!
00000000                            17  *    6            8         Enjoy your stay!
00000000                            18  *      6        8      
00000000                            19  *        666888
00000000                            20  *  _____                   __    ___  _    
00000000                            21  * | ____|__ _ ___ _   _   / /_  ( _ )| | __
00000000                            22  * |  _| / _` / __| | | | | '_ \ / _ \| |/ /
00000000                            23  * | |__| (_| \__ \ |_| | | (_) | (_) |   < 
00000000                            24  * |_____\__,_|___/\__, |  \___/ \___/|_|\_\
00000000                            25  *                 |___/           
00000000                            26  *-----------------------------------------------------------
00000000                            27  * Title      : 68K Decompiler
00000000                            28  * Written by : Nick Bell, Sammy Nimnuch, Caleb Larson
00000000                            29  * Date       : 11/2014
00000000                            30  * Description: This program decompiles other 68K programs
00000000                            31  *              which are loaded into the simulator simultaneously.
00000000                            32  *-----------------------------------------------------------
00000000                            33  
00000000                            34  
00000000  =00000000                 35  OP_0000     EQU     %0000000000000000
00000000  =00001000                 36  OP_0001     EQU     %0001000000000000
00000000  =00002000                 37  OP_0010     EQU     %0010000000000000
00000000  =00003000                 38  OP_0011     EQU     %0011000000000000
00000000  =00004000                 39  OP_0100     EQU     %0100000000000000
00000000  =00005000                 40  OP_0101     EQU     %0101000000000000
00000000  =00006000                 41  OP_0110     EQU     %0110000000000000
00000000  =00007000                 42  OP_0111     EQU     %0111000000000000
00000000  =00008000                 43  OP_1000     EQU     %1000000000000000
00000000  =00009000                 44  OP_1001     EQU     %1001000000000000
00000000  =0000A000                 45  OP_1010     EQU     %1010000000000000
00000000  =0000B000                 46  OP_1011     EQU     %1011000000000000
00000000  =0000C000                 47  OP_1100     EQU     %1100000000000000
00000000  =0000D000                 48  OP_1101     EQU     %1101000000000000
00000000  =0000E000                 49  OP_1110     EQU     %1110000000000000
00000000  =0000F000                 50  OP_1111     EQU     %1111000000000000
00000000  =0000000F                 51  HEX_VALUE_MASK_LONG EQU     $0000000F  * mask a hex value in 32-bits
00000000                            52  
00000000                            53  * BITMASK     EQU     $F000       * used to bitmask the first nibble
00000000                            54  
00001000                            55  START:  ORG    $1000            * first instruction of program
00001000                            56  
00001000                            57  * -----------------------------------
00001000                            58  * Starting and Ending Addresses
00001000                            59  * -----------------------------------
00001000                            60  *-----------------------------------------------------------------------------
00001000                            61  *-----------------------------------------------------------------------------
00001000                            62  * NAME: x
00001000                            63  * DESCRIPTION:    a
00001000                            64  * PRE-CONDITION:  b
00001000                            65  * POST-CONDITION: c
00001000                            66  * REGISTERS:      d
00001000                            67  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001000                            68  
00001000                            69  * THINK ABOUT ASKING FOR VALID START/END NO NEGATIVE ADDR
00001000                            70  
00001000                            71  * LOAD MSGSTART, ASK FOR INPUT
00001000  43F9 0000246C             72          LEA     MSGSTART,A1     * Load MESSAGE START
00001006  103C 000E                 73          MOVE.B  #14,D0          * Trap #14 to display message
0000100A  4E4F                      74          TRAP    #15             * Perform #14
0000100C                            75          
0000100C                            76  * GETS THE STARTING ADDRESS
0000100C  103C 0004                 77          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001010  4E4F                      78          TRAP    #15             * Perform #15
00001012                            79          
00001012                            80  * MOVE IT TO ANOTHER ADDRESS REGISTER
00001012  2441                      81          MOVEA.L D1,A2           * Move the user input into A2. This is the starting address.
00001014                            82  
00001014                            83  * LOAD MSGSTART, ASK FOR INPUT
00001014  43F9 00002484             84          LEA     MSGEND,A1       * Load MESSAGE END
0000101A  303C 000E                 85          MOVE.W  #14,D0          * Trap #14 to display message
0000101E  4E4F                      86          TRAP    #15             * Perform #14
00001020                            87          
00001020                            88  * GETS THE ENDING ADDRESS
00001020  103C 0004                 89          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001024  4E4F                      90          TRAP    #15             * Perform Trap #4
00001026  2A01                      91          MOVE.L  D1,D5           * Move the ending address into D5
00001028  43F9 0000249A             92          LEA     NEWLINE,A1      * Store newline variable for seper opcodes
0000102E                            93          
0000102E  3E3C 000F                 94          MOVE.W  #15,D7          * prep D7 for bitmask subroutine
00001032  3C3C 000C                 95          MOVE.W  #12,D6          * prep D6 for bitmask subroutine
00001036  6100 141E                 96          BSR     BITMASK         * obtain a bitmask that goes from 12-15 (inclusive)
0000103A                            97          * MOVE.W  D6,D2           * move the bitmask to D2
0000103A                            98          
0000103A                            99  LOOP    
0000103A                           100  
0000103A  2C4A                     101          MOVE.L  A2,A6
0000103C  7608                     102          MOVE.L  #8,D3
0000103E  6100 11D6                103          BSR     PRINT_ASCII_HEX_CHAR
00001042                           104          
00001042                           105          *MOVE.W  A2,D1           * print what address we are processing
00001042                           106          *MOVE.B  #3,D0
00001042                           107          *TRAP    #15
00001042                           108          
00001042  43F9 0000253F            109          LEA     SPACE,A1        * print a space to seperate the address from the data
00001048  303C 000E                110          MOVE.W  #14,D0
0000104C  4E4F                     111          TRAP    #15
0000104E                           112  
0000104E  3F06                     113          MOVE    D6,-(A7)        * save the bitmask on the stack
00001050  341A                     114          MOVE.W  (A2)+,D2        * Read an operation into D2
00001052  CC42                     115          AND.W   D2,D6           * Apply this bitmask
00001054                           116          
00001054  BC7C 0000                117          CMP     #OP_0000,D6     * Does the operation start with 0000?
00001058  6600 000A                118          BNE     NOT0000         * No, check next case
0000105C  6100 0106                119          BSR     OP0000          * Branch to subroutine 0000
00001060  6000 00F6                120          BRA     ITERATION       * Move to next iteration of the loop
00001064                           121  NOT0000        
00001064  BC7C 1000                122          CMP     #OP_0001,D6     * Does the operation start with 0001?
00001068  6600 000A                123          BNE     NOT0001         * No, check next case
0000106C  6100 023A                124          BSR     OP0001          * Branch to subroutine 0001
00001070  6000 00E6                125          BRA     ITERATION       * Move to next iteration of the loop
00001074                           126  NOT0001
00001074  BC7C 2000                127          CMP     #OP_0010,D6     * Does the operation start with 0010?
00001078  6600 000A                128          BNE     NOT0010         * No, check next case
0000107C  6100 0290                129          BSR     OP0010          * Branch to subroutine 0010
00001080  6000 00D6                130          BRA     ITERATION       * Move to next iteration of the loop
00001084                           131  NOT0010
00001084  BC7C 3000                132          CMP     #OP_0011,D6     * Does the operation start with 0011?
00001088  6600 000A                133          BNE     NOT0011         * No, check next case
0000108C  6100 0286                134          BSR     OP0011          * Branch to subroutine 0011
00001090  6000 00C6                135          BRA     ITERATION       * Move to next iteration of the loop
00001094                           136  NOT0011
00001094  BC7C 4000                137          CMP     #OP_0100,D6     * Does the operation start with 0100?
00001098  6600 000A                138          BNE     NOT0100         * No, check next case
0000109C  6100 0284                139          BSR     OP0100          * Branch to subroutine 0100
000010A0  6000 00B6                140          BRA     ITERATION       * Move to next iteration of the loop
000010A4                           141  NOT0100
000010A4  BC7C 5000                142          CMP     #OP_0101,D6     * Does the operation start with 0101?
000010A8  6600 000A                143          BNE     NOT0101         * No, check next case
000010AC  6100 059E                144          BSR     OP0101          * Branch to subroutine 0101
000010B0  6000 00A6                145          BRA     ITERATION       * Move to next iteration of the loop
000010B4                           146  NOT0101
000010B4  BC7C 6000                147          CMP     #OP_0110,D6     * Does the operation start with 0110?
000010B8  6600 000A                148          BNE     NOT0110         * No, check next case
000010BC  6100 05FC                149          BSR     OP0110          * Branch to subroutine 0110
000010C0  6000 0096                150          BRA     ITERATION       * Move to next iteration of the loop
000010C4                           151  NOT0110
000010C4  BC7C 7000                152          CMP     #OP_0111,D6     * Does the operation start with 0111?
000010C8  6600 000A                153          BNE     NOT0111         * No, check next case
000010CC  6100 06B4                154          BSR     OP0111          * Branch to subroutine 0111
000010D0  6000 0086                155          BRA     ITERATION       * Move to next iteration of the loop
000010D4                           156  NOT0111
000010D4  BC7C 8000                157          CMP     #OP_1000,D6     * Does the operation start with 1000?
000010D8  6600 000A                158          BNE     NOT1000         * No, check next case
000010DC  6100 06AA                159          BSR     OP1000          * Branch to subroutine 1000
000010E0  6000 0076                160          BRA     ITERATION       * Move to next iteration of the loop
000010E4                           161  NOT1000
000010E4  BC7C 9000                162          CMP     #OP_1001,D6     * Does the operation start with 1001?
000010E8  6600 000A                163          BNE     NOT1001         * No, check next case
000010EC  6100 072E                164          BSR     OP1001          * Branch to subroutine 1001
000010F0  6000 0066                165          BRA     ITERATION       * Move to next iteration of the loop
000010F4                           166  NOT1001
000010F4  BC7C A000                167          CMP     #OP_1010,D6     * Does the operation start with 1010?
000010F8  6600 000A                168          BNE     NOT1010         * No, check next case
000010FC  6100 071E                169          BSR     OP1010          * Branch to subroutine 1010
00001100  6000 0056                170          BRA     ITERATION       * Move to next iteration of the loop
00001104                           171  NOT1010
00001104  BC7C B000                172          CMP     #OP_1011,D6     * Does the operation start with 1011?
00001108  6600 000A                173          BNE     NOT1011         * No, check next case
0000110C  6100 0714                174          BSR     OP1011          * Branch to subroutine 1011
00001110  6000 0046                175          BRA     ITERATION       * Move to next iteration of the loop
00001114                           176  NOT1011
00001114  BC7C C000                177          CMP     #OP_1100,D6     * Does the operation start with 1100?
00001118  6600 000A                178          BNE     NOT1100         * No, check next case
0000111C  6100 070A                179          BSR     OP1100          * Branch to subroutine 1100
00001120  6000 0036                180          BRA     ITERATION       * Move to next iteration of the loop
00001124                           181  NOT1100
00001124  BC7C D000                182          CMP     #OP_1101,D6     * Does the operation start with 1101?
00001128  6600 000A                183          BNE     NOT1101         * No, check next case
0000112C  6100 0784                184          BSR     OP1101          * Branch to subroutine 1101
00001130  6000 0026                185          BRA     ITERATION       * Move to next iteration of the loop
00001134                           186  NOT1101
00001134  BC7C E000                187          CMP     #OP_1110,D6     * Does the operation start with 1110?
00001138  6600 000A                188          BNE     NOT1110         * No, check next case
0000113C  6100 08FA                189          BSR     OP1110          * Branch to subroutine 1110
00001140  6000 0016                190          BRA     ITERATION       * Move to next iteration of the loop
00001144                           191  NOT1110
00001144  BC7C F000                192          CMP     #OP_1111,D6     * Does the operation start with 1111?
00001148  6600 000A                193          BNE     LOOPUNKNOWNOP   * No, check next case
0000114C  6100 0A80                194          BSR     OP1111          * Branch to subroutine 1111
00001150  6000 0006                195          BRA     ITERATION       * Move to next iteration of the loop
00001154                           196          
00001154                           197  LOOPUNKNOWNOP
00001154  6100 1096                198          BSR     UNKNOWNOP
00001158                           199          
00001158                           200  ITERATION
00001158  3C1F                     201          MOVE    (A7)+,D6        * restore the bitmask to its previous state
0000115A                           202  
0000115A                           203          *MOVE.B  #14,D0          * Print a newline
0000115A                           204          *TRAP    #15             * Perform Trap #14
0000115A                           205  
0000115A  BA4A                     206          CMP     A2,D5           * Compare the starting address to ending address
0000115C  6700 2EEA                207          BEQ     END             * If they are equal, branch 
00001160  6000 FED8                208          BRA     LOOP            * Otherwise, branch back to LOOP
00001164                           209  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001164                           210  *-----------------------------------------------------------------------------
00001164                           211  
00001164                           212  
00001164                           213  
00001164                           214  *-----------------------------------------------------------------------------
00001164                           215  *-----------------------------------------------------------------------------
00001164                           216  * NAME: OP_0000   (BCLR, ORI, CMPI)
00001164                           217  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001164                           218  * PRE-CONDITION:  xyz
00001164                           219  * POST-CONDITION: All registers return to their previous state, and the output
00001164                           220  *                 goes to the output console for reading the raw data or the
00001164                           221  *                 actual instruction.
00001164                           222  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001164                           223  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001164                           224  OP0000
00001164  48A7 FFC0                225          MOVEM   D0-D7/A0-A1,-(A7)   * Push values to the stack to save
00001168  3C3C 0006                226          MOVE.W  #6, D6              * Prep lower value for bitmask
0000116C  3E3C 0008                227          MOVE.W  #8, D7              * Prep upper value for bitmask
00001170  6100 12E4                228          BSR     BITMASK             * Finalize bitmask setup
00001174  CC42                     229          AND     D2,D6               * Apply bitmask
00001176                           230          
00001176                           231          * TODO: Consider static  AND dynamic BCLR.
00001176                           232          * Only works for Dynamic right now
00001176  0C46 0180                233          CMPI    #%0000000110000000, D6  * Are we BCLR?
0000117A  6600 0066                234          BNE     NOTBCLR                 * If not, branch to other OP0000 functions
0000117E                           235          
0000117E  3C3C 0003                236          MOVE.W  #3, D6              * Prep lower value for bitmask
00001182  3E3C 0005                237          MOVE.W  #5, D7              * Prep upper value for bitmask
00001186  6100 12CE                238          BSR     BITMASK             * Finalize bitmask setup
0000118A  CC42                     239          AND     D2,D6               * Apply bitmask
0000118C                           240          
0000118C                           241          * Checking for unsupported mode
0000118C  0C46 0008                242          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
00001190  6700 010C                243          BEQ     UNKNOWN0000             * If so, branch to other OP0000 functions
00001194                           244          
00001194                           245          * Confirmed BCLR at this point
00001194  43F9 000024C6            246          LEA     BCLROP,A1           * We found BCLR
0000119A  103C 000E                247          MOVE.B  #14,D0              * Trap #14 prints out the data
0000119E  4E4F                     248          TRAP    #15                 * Perform Trap #14
000011A0                           249  
000011A0  43F9 0000253F            250          LEA     SPACE,A1            * Formatting
000011A6  103C 000E                251          MOVE.B  #14,D0              * Trap #14 prints out space
000011AA  4E4F                     252          TRAP    #15                 * Perform Trap #14
000011AC                           253          
000011AC                           254          * Set up for printing out the Register
000011AC  0882 0006                255          BCLR    #6,D2               * Clear bit 6
000011B0  0882 0007                256          BCLR    #7,D2               * Clear bit 7
000011B4  0882 0008                257          BCLR    #8,D2               * Clear bit 8
000011B8                           258          
000011B8  6100 0A1A                259          BSR     EAHELPER611         * Print out Register
000011BC                           260  
000011BC  43F9 00002545            261          LEA     COMMA,A1            * formatting
000011C2  103C 000E                262          MOVE.B  #14,D0              * Trap #14 prints out a comma
000011C6  4E4F                     263          TRAP    #15                 * Perform Trap #14
000011C8                           264          
000011C8  4243                     265          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
000011CA  08C3 0000                266          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
000011CE                           267      
000011CE  6100 0A46                268          BSR     EAHELPER05          * Print out data.
000011D2                           269          
000011D2  43F9 0000249A            270          LEA     NEWLINE,A1          * Formatting
000011D8  103C 000E                271          MOVE.B  #14,D0              * Trap #14 prints out the data
000011DC  4E4F                     272          TRAP    #15                 * Perform Trap #14
000011DE                           273          
000011DE  6000 00C2                274          BRA     END0000             * Found the op, move to next iteration
000011E2                           275          
000011E2                           276  NOTBCLR * Possible options left are ORI or CMPI
000011E2  3C3C 0009                277          MOVE.W  #9, D6              * Prep lower value for bitmask
000011E6  3E3C 000B                278          MOVE.W  #11, D7             * Prep upper value for bitmask
000011EA  6100 126A                279          BSR     BITMASK             * Finalize bitmask setup
000011EE  CC42                     280          AND     D2,D6               * Apply bitmask
000011F0                           281          
000011F0  0C46 0000                282          CMPI    #%0000000000000000, D6   * Are we possibly ORI?
000011F4  6600 00A0                283          BNE     NOTORI                   * If not, branch to NOTORI
000011F8                           284          
000011F8                           285          * Size check to see if unsupported ORI mode
000011F8  3C3C 0006                286          MOVE.W  #6, D6              * Prep lower value for bitmask
000011FC  3E3C 0007                287          MOVE.W  #7, D7              * Prep upper value for bitmask
00001200  6100 1254                288          BSR     BITMASK             * Finalize bitmask setup
00001204  CC42                     289          AND     D2,D6               * Apply bitmask
00001206                           290          
00001206  0C46 00C0                291          CMPI    #%0000000011000000, D6  * Are bits 6,7 == 1,1?
0000120A  6700 0092                292          BEQ     UNKNOWN0000             * If so, unknown op. 
0000120E                           293          
0000120E                           294          * Mode check to see if unsupported ORI mode
0000120E  3C3C 0003                295          MOVE.W  #3, D6              * Prep lower value for bitmask
00001212  3E3C 0005                296          MOVE.W  #5, D7              * Prep upper value for bitmask
00001216  6100 123E                297          BSR     BITMASK             * Finalize bitmask setup
0000121A  CC42                     298          AND     D2,D6               * Apply bitmask
0000121C                           299          
0000121C  0C46 0008                300          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
00001220  6700 007C                301          BEQ     UNKNOWN0000             * If so, unknown op. 
00001224                           302          
00001224                           303          * Confirmed ORI at this point
00001224  43F9 000024D4            304          LEA     ORIOP, A1           * Load 'ORI' into the output window
0000122A  103C 000E                305          MOVE.B  #14,D0              * Trap #14 prints out the data in D0
0000122E  4E4F                     306          TRAP    #15                 * Perform Trap #14
00001230                           307          
00001230  6100 0D3A                308          BSR     SIZE67              * Print the size
00001234                           309          
00001234                           310          * Mode check to see the size
00001234  3C3C 0006                311          MOVE.W  #6, D6              * Prep lower value for bitmask
00001238  3E3C 0007                312          MOVE.W  #7, D7              * Prep upper value for bitmask
0000123C  6100 1218                313          BSR     BITMASK             * Finalize bitmask setup
00001240  CC42                     314          AND     D2,D6               * Apply bitmask
00001242                           315          
00001242  2802                     316          MOVE.L  D2, D4              * Saving stuff
00001244                           317                  
00001244  43F9 00002543            318          LEA     IMD, A1             * Formatting
0000124A  103C 000E                319          MOVE.B  #14,D0              * Trap #14 prints out the data
0000124E  4E4F                     320          TRAP    #15                 * Perform Trap #14
00001250                           321          
00001250                           322          * Grab immediate data
00001250  3A1A                     323          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
00001252  E18D                     324          LSL.L   #8, D5
00001254  E18D                     325          LSL.L   #8, D5
00001256  2C45                     326          MOVE.L  D5, A6
00001258  7604                     327          MOVE.L  #4, D3
0000125A  6100 0FBA                328          BSR     PRINT_ASCII_HEX_CHAR
0000125E                           329  
0000125E                           330          
0000125E  0C46 0080                331          CMPI    #%0000000010000000, D6   * See if the size is a LONG
00001262  6600 0010                332          BNE     SKIPLONG    
00001266                           333          
00001266                           334          * Grab next word
00001266  3A1A                     335          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
00001268  E18D                     336          LSL.L   #8, D5
0000126A  E18D                     337          LSL.L   #8, D5
0000126C  2C45                     338          MOVE.L  D5, A6
0000126E  7604                     339          MOVE.L  #4, D3
00001270  6100 0FA4                340          BSR     PRINT_ASCII_HEX_CHAR
00001274                           341  
00001274                           342  SKIPLONG
00001274  43F9 00002545            343          LEA     COMMA, A1           * Formatting
0000127A  103C 000E                344          MOVE.B  #14,D0              * Trap #14 prints out the data
0000127E  4E4F                     345          TRAP    #15                 * Perform Trap #14
00001280                           346          
00001280  2404                     347          MOVE.L  D4, D2          * Return stuff
00001282                           348          
00001282  6100 0992                349          BSR     EAHELPER05          * Print out the EA
00001286                           350          
00001286  43F9 0000249A            351          LEA     NEWLINE,A1          * Formatting
0000128C  103C 000E                352          MOVE.B  #14,D0              * Trap #14 prints out the data
00001290  4E4F                     353          TRAP    #15                 * Perform Trap #14
00001292                           354          
00001292  6000 000E                355          BRA     END0000             * Done with op. Move to next iteration
00001296                           356  
00001296                           357          
00001296                           358  NOTORI  * Possible option left is CMPI
00001296  0C46 0C00                359          CMPI    #%0000110000000000, D6  * Are we CMPI?
0000129A  6600 0002                360          BNE     UNKNOWN0000             * If not, unknown op
0000129E                           361          
0000129E                           362          * TODO: Continue checking for CMPI validity
0000129E                           363          
0000129E                           364  UNKNOWN0000
0000129E  6100 0F4C                365          BSR     UNKNOWNOP       * Unknown op
000012A2                           366          
000012A2                           367  END0000          
000012A2  4C9F 03FF                368         MOVEM   (A7)+,D0-D7/A0-A1   * Push values to the stack to save
000012A6  4E75                     369         RTS
000012A8                           370  
000012A8                           371  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000012A8                           372  *-----------------------------------------------------------------------------
000012A8                           373  
000012A8                           374  
000012A8                           375  
000012A8                           376  *-----------------------------------------------------------------------------
000012A8                           377  *-----------------------------------------------------------------------------
000012A8                           378  * NAME: OP_0001   (MOVE.B)
000012A8                           379  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000012A8                           380  * PRE-CONDITION:  xyz
000012A8                           381  * POST-CONDITION: All registers return to their previous state, and the output
000012A8                           382  *                 goes to the output console for reading the raw data or the
000012A8                           383  *                 actual instruction.
000012A8                           384  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000012A8                           385  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000012A8                           386  OP0001  
000012A8  48A7 FFC0                387          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
000012AC  3C3C 0006                388          MOVE.W  #6, D6              * Prep lower value for bitmask
000012B0  3E3C 0008                389          MOVE.W  #8, D7              * Prep upper value for bitmask
000012B4  6100 11A0                390          BSR     BITMASK             * Finalize bitmask setup
000012B8  CC42                     391          AND     D2,D6               * Apply bitmask
000012BA                           392          
000012BA                           393          * I may have fucked off this part, sorry - Caleb
000012BA                           394          * CMPI    #%0000000001000000, D6  * Is the destination mode 001?
000012BA                           395          * BNE     UNKNOWNOP0001                 * If so, it's unknown.
000012BA                           396          
000012BA  43F9 000024AA            397          LEA     MOVEOP,A1   * Put 'MOVE' into the window
000012C0  103C 000E                398          MOVE.B  #14,D0      * Trap #14 to print out
000012C4  4E4F                     399          TRAP    #15         * Perform Trap #14
000012C6                           400          
000012C6                           401          *-----------------------------------------------------------
000012C6                           402          * the following code is to move the size bits into the
000012C6                           403          * 0-1 positions of D3 so that eahelper05 case use that as a "parameter"
000012C6                           404          * for eahelper05
000012C6                           405          
000012C6  3C3C 000C                406          MOVE.W  #12, D6              * Prep lower value for bitmask
000012CA  3E3C 000D                407          MOVE.W  #13, D7              * Prep upper value for bitmask
000012CE  6100 1186                408          BSR     BITMASK              * Finalize bitmask setup
000012D2  CC42                     409          AND     D2,D6                * Apply bitmask
000012D4                           410          
000012D4  E04E                     411          LSR     #8,D6
000012D6  E84E                     412          LSR     #4,D6
000012D8                           413          
000012D8  4243                     414          CLR     D3
000012DA                           415          
000012DA  1606                     416          MOVE.B  D6,D3
000012DC                           417          
000012DC                           418          *---------------------------------------------------------------
000012DC                           419          
000012DC                           420          
000012DC  6100 0C8E                421          BSR     SIZE67
000012E0  6100 0934                422          BSR     EAHELPER05
000012E4                           423          
000012E4  43F9 00002545            424          LEA     COMMA,A1
000012EA  103C 000E                425          MOVE.B  #14,D0
000012EE  4E4F                     426          TRAP    #15
000012F0                           427          
000012F0  6100 08E2                428          BSR     EAHELPER611
000012F4                           429          
000012F4  43F9 0000249A            430          LEA     NEWLINE,A1
000012FA  103C 000E                431          MOVE.B  #14,D0
000012FE  4E4F                     432          TRAP    #15
00001300                           433          
00001300  6000 0006                434          BRA     ENDOP0001
00001304                           435          *LEA     __B,A1      * Put '.B' into the window
00001304                           436          *MOVE.B  #14,D0      * Trap #14 to print out
00001304                           437          *TRAP    #15         * Perform Trap #14
00001304                           438          
00001304                           439  UNKNOWNOP0001
00001304  6100 0EE6                440          BSR     UNKNOWNOP
00001308                           441          
00001308                           442  ENDOP0001
00001308  4C9F 03FF                443          MOVEM (A7)+,D0-D7/A0-A1
0000130C  4E75                     444          RTS        
0000130E                           445          
0000130E                           446          * TODO: DETERMINE THE MODE AND REG FOR DESTINATION AND SOURCE
0000130E                           447  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000130E                           448  *-----------------------------------------------------------------------------
0000130E                           449  
0000130E                           450  
0000130E                           451  
0000130E                           452  *-----------------------------------------------------------------------------
0000130E                           453  *-----------------------------------------------------------------------------
0000130E                           454  * NAME: OP_0010   (MOVE.L, MOVEA.L)
0000130E                           455  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000130E                           456  * PRE-CONDITION:  xyz
0000130E                           457  * POST-CONDITION: All registers return to their previous state, and the output
0000130E                           458  *                 goes to the output console for reading the raw data or the
0000130E                           459  *                 actual instruction.
0000130E                           460  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000130E                           461  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000130E                           462  OP0010
0000130E                           463  
0000130E  6100 0EDC                464      BSR     UNKNOWNOP
00001312  4E75                     465      RTS
00001314                           466  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001314                           467  *-----------------------------------------------------------------------------
00001314                           468  
00001314                           469  
00001314                           470  
00001314                           471  *-----------------------------------------------------------------------------
00001314                           472  *-----------------------------------------------------------------------------
00001314                           473  * NAME: OP_0011   (MOVE.W, MOVEA.W)
00001314                           474  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001314                           475  * PRE-CONDITION:  xyz
00001314                           476  * POST-CONDITION: All registers return to their previous state, and the output
00001314                           477  *                 goes to the output console for reading the raw data or the
00001314                           478  *                 actual instruction.
00001314                           479  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001314                           480  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001314                           481  OP0011
00001314  48A7 FFFE                482      MOVEM   D0-D7/A0-A6, -(A7)
00001318                           483      
00001318                           484      *MOVE.W  #6,D6
00001318                           485      *MOVE.W  #8,D7
00001318                           486      
00001318                           487      *BSR     BITMASK
00001318                           488      
00001318                           489      *AND.W   D2,D6
00001318                           490      
00001318                           491      *CMP     #%0000000001000000,D6
00001318                           492      *BNE     NEXT15
00001318                           493      *BSR     * for MOVEA.W
00001318                           494      
00001318  4C9F 7FFF                495      MOVEM   (A7)+,D0-D7/A0-A6
0000131C                           496      
0000131C  6100 0ECE                497      BSR     UNKNOWNOP
00001320  4E75                     498      RTS
00001322                           499  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001322                           500  *-----------------------------------------------------------------------------
00001322                           501  
00001322                           502  *-----------------------------------------------------------------------------
00001322                           503  *-----------------------------------------------------------------------------
00001322                           504  * NAME: OP_0100   (NOP, MOVEM, LEA, NEG, JSR, RTS)
00001322                           505  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001322                           506  * PRE-CONDITION:  xyz
00001322                           507  * POST-CONDITION: All registers return to their previous state, and the output
00001322                           508  *                 goes to the output console for reading the raw data or the
00001322                           509  *                 actual instruction.
00001322                           510  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001322                           511  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001322                           512  OP0100  
00001322                           513          * TODO: movem
00001322                           514  
00001322  48A7 C0C0                515          MOVEM   D0-D1/A0-A1,-(A7) * Push values to the stack to save
00001326                           516          
00001326                           517          *NOP
00001326  0C42 4E71                518          CMPI    #%0100111001110001,D2
0000132A  6600 0012                519          BNE     NOTNOP
0000132E                           520          
0000132E  43F9 000024A2            521          LEA     NOOPERATION,A1
00001334  103C 000D                522          MOVE.B  #13,D0          * Print a newline
00001338  4E4F                     523          TRAP    #15
0000133A                           524          
0000133A  6000 0306                525          BRA     DONE0100 *we found it, move on to the next iteration
0000133E                           526  NOTNOP *NEG
0000133E                           527          
0000133E                           528          * prep values for BITMASK subroutine
0000133E  7C08                     529          MOVE.L  #8,D6
00001340  7E0B                     530          MOVE.L  #11,D7
00001342                           531          
00001342  6100 1112                532          BSR     BITMASK
00001346                           533          
00001346  CC42                     534          AND     D2,D6                   * apply bitmask
00001348                           535          
00001348  0C46 0400                536          CMPI    #%0000010000000000,D6   * are we NEG?
0000134C  6600 0046                537          BNE     NOTNEG                  * not neg
00001350                           538          
00001350  7C03                     539          MOVE.L  #3,D6
00001352  7E05                     540          MOVE.L  #5,D7
00001354                           541          
00001354  6100 1100                542          BSR     BITMASK * generate a bitmask to be used to check mode
00001358                           543          
00001358  0C46 0008                544          CMPI    #%0000000000001000,D6 * check to see if it is the unsupported mode
0000135C  6700 02E0                545          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
00001360                           546          
00001360  0C46 0028                547          CMPI    #%0000000000101000,D6 * check to see if it is the unsupported mode
00001364  6700 02D8                548          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
00001368                           549          
00001368  0C46 0030                550          CMPI    #%0000000000110000,D6 * check to see if it is the unsupported mode
0000136C  6700 02D0                551          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
00001370                           552        
00001370                           553          * it is NEG, print
00001370  43F9 000024A6            554          LEA     NEGOP,A1
00001376  103C 000E                555          MOVE.B  #14,D0
0000137A  4E4F                     556          TRAP    #15
0000137C                           557          
0000137C  6100 0BEE                558          BSR     SIZE67
00001380                           559          
00001380  6100 0894                560          BSR     EAHELPER05
00001384                           561          
00001384  43F9 0000249A            562          LEA     NEWLINE,A1
0000138A  103C 000E                563          MOVE.B  #14,D0
0000138E  4E4F                     564          TRAP    #15
00001390                           565          
00001390  6000 02B0                566          BRA     DONE0100 * we found the op, move to next iteration
00001394                           567          
00001394                           568  NOTNEG *MOVEM
00001394                           569  
00001394                           570          * prep values for BITMASK subroutine
00001394  7C07                     571          MOVE.L  #7,D6
00001396  7E09                     572          MOVE.L  #9,D7
00001398                           573          
00001398  6100 10BC                574          BSR     BITMASK
0000139C                           575          
0000139C  CC82                     576          AND.L   D2,D6   * apply bitmask
0000139E                           577          
0000139E  0C46 0080                578          CMPI    #%0000000010000000,D6 * is it MOVEM?
000013A2  6600 0148                579          BNE     NOTMOVEM          * it is not MOVEM
000013A6                           580          
000013A6  7C0A                     581          MOVE.L  #10,D6
000013A8  7E0A                     582          MOVE.L  #10,D7
000013AA                           583          
000013AA  6100 10AA                584          BSR     BITMASK
000013AE                           585          
000013AE  CC82                     586          AND.L   D2,D6
000013B0                           587          
000013B0  0C46 0000                588          CMPI    #%0000000000000000,D6 * is it register to memory?
000013B4  6700 009C                589          BEQ     MOVEMTOMEM 
000013B8                           590          
000013B8                           591  MOVEMTOREG *supported modes: 010 011
000013B8                           592  
000013B8  7C03                     593          MOVE.L  #3,D6
000013BA  7E05                     594          MOVE.L  #5,D7
000013BC                           595          
000013BC  6100 1098                596          BSR     BITMASK
000013C0                           597          
000013C0  CC82                     598          AND.L   D2,D6
000013C2                           599          
000013C2  0C46 0000                600          CMPI    #%0000000000000000,D6 * is it an unsupported mode?
000013C6  6700 0276                601          BEQ     UNKNOWN0100
000013CA                           602          
000013CA  0C46 0008                603          CMPI    #%0000000000001000,D6 * is it an unsupported mode?
000013CE  6700 026E                604          BEQ     UNKNOWN0100
000013D2                           605          
000013D2  0C46 0020                606          CMPI    #%0000000000100000,D6 * is it an unsupported mode?
000013D6  6700 0266                607          BEQ     UNKNOWN0100
000013DA                           608          
000013DA  0C46 0028                609          CMPI    #%0000000000101000,D6 * is it an unsupported mode?
000013DE  6700 025E                610          BEQ     UNKNOWN0100
000013E2                           611          
000013E2  0C46 0030                612          CMPI    #%0000000000110000,D6 * is it an unsupported mode?
000013E6  6700 0256                613          BEQ     UNKNOWN0100
000013EA                           614          
000013EA  0C46 0038                615          CMPI    #%0000000000111000,D6 * is it an unsupported mode?
000013EE  6700 024E                616          BEQ     UNKNOWN0100
000013F2                           617          
000013F2  43F9 000024AF            618          LEA     MOVEMOP,A1
000013F8  103C 000E                619          MOVE.B  #14,D0          * print MOVEM
000013FC  4E4F                     620          TRAP    #15
000013FE                           621          
000013FE  7C06                     622          MOVE.L  #6,D6
00001400  7E06                     623          MOVE.L  #6,D7
00001402                           624          
00001402  6100 1052                625          BSR     BITMASK
00001406                           626          
00001406  CC82                     627          AND.L   D2,D6
00001408                           628          
00001408  0C46 0040                629          CMPI    #%0000000001000000,D6 * is it a long op?
0000140C  6600 0012                630          BNE     NOTLONGMOVEM1       * no, it is a word
00001410                           631          
00001410  43F9 0000255B            632          LEA     __L,A1
00001416  103C 000E                633          MOVE.B  #14,D0          * print .L 
0000141A  4E4F                     634          TRAP    #15
0000141C                           635          
0000141C  6000 000E                636          BRA     SKIPNOTLONG1
00001420                           637          
00001420                           638  NOTLONGMOVEM1
00001420                           639  
00001420  43F9 00002557            640          LEA     __W,A1
00001426  103C 000E                641          MOVE.B  #14,D0          * print .W 
0000142A  4E4F                     642          TRAP    #15
0000142C                           643                  
0000142C                           644  SKIPNOTLONG1
0000142C                           645  
0000142C  6100 07E8                646          BSR     EAHELPER05 * print out the register we are moving from
00001430                           647          
00001430  43F9 00002545            648          LEA     COMMA,A1
00001436  103C 000E                649          MOVE.B  #14,D0          * print , 
0000143A  4E4F                     650          TRAP    #15
0000143C                           651          
0000143C  6100 0BF4                652          BSR     MOVEMHELPERPOST
00001440                           653          
00001440  341A                     654          MOVE.W  (A2)+,D2
00001442                           655          
00001442  43F9 0000249A            656          LEA     NEWLINE,A1
00001448  103C 000E                657          MOVE.B  #14,D0          * print a newline 
0000144C  4E4F                     658          TRAP    #15
0000144E                           659      
0000144E  6000 01F2                660          BRA     DONE0100          * we found and printed, move on to the next iteration
00001452                           661          
00001452                           662  MOVEMTOMEM * supported modes 010 100
00001452                           663  
00001452  7C03                     664          MOVE.L  #3,D6
00001454  7E05                     665          MOVE.L  #5,D7
00001456                           666          
00001456  6100 0FFE                667          BSR     BITMASK
0000145A                           668          
0000145A  CC82                     669          AND.L   D2,D6
0000145C                           670          
0000145C  0C46 0000                671          CMPI    #%0000000000000000,D6 * is it an unsopported mode?
00001460  6700 01DC                672          BEQ     UNKNOWN0100
00001464                           673          
00001464  0C46 0008                674          CMPI    #%0000000000001000,D6 * is it an unsopported mode?
00001468  6700 01D4                675          BEQ     UNKNOWN0100
0000146C                           676          
0000146C  0C46 0018                677          CMPI    #%0000000000011000,D6 * is it an unsopported mode?
00001470  6700 01CC                678          BEQ     UNKNOWN0100
00001474                           679          
00001474  0C46 0028                680          CMPI    #%0000000000101000,D6 * is it an unsopported mode?
00001478  6700 01C4                681          BEQ     UNKNOWN0100
0000147C                           682          
0000147C  0C46 0030                683          CMPI    #%0000000000110000,D6 * is it an unsopported mode?
00001480  6700 01BC                684          BEQ     UNKNOWN0100
00001484                           685          
00001484  0C46 0070                686          CMPI    #%0000000001110000,D6 * is it an unsopported mode?
00001488  6700 01B4                687          BEQ     UNKNOWN0100
0000148C                           688          
0000148C  43F9 000024AF            689          LEA     MOVEMOP,A1
00001492  103C 000E                690          MOVE.B  #14,D0          * print MOVEM
00001496  4E4F                     691          TRAP    #15
00001498                           692          
00001498  7C06                     693          MOVE.L  #6,D6
0000149A  7E06                     694          MOVE.L  #6,D7
0000149C                           695          
0000149C  6100 0FB8                696          BSR     BITMASK
000014A0                           697          
000014A0  CC82                     698          AND.L   D2,D6
000014A2                           699          
000014A2  0C46 0040                700          CMPI    #%0000000001000000,D6 * is it a long op?
000014A6  6600 0012                701          BNE     NOTLONGMOVEM2       * no, it is a word
000014AA                           702          
000014AA  43F9 0000255B            703          LEA     __L,A1
000014B0  103C 000E                704          MOVE.B  #14,D0          * print .L 
000014B4  4E4F                     705          TRAP    #15
000014B6                           706          
000014B6  6000 000E                707          BRA     SKIPNOTLONG2
000014BA                           708          
000014BA                           709  NOTLONGMOVEM2
000014BA                           710  
000014BA  43F9 00002557            711          LEA     __W,A1
000014C0  103C 000E                712          MOVE.B  #14,D0          * print .W 
000014C4  4E4F                     713          TRAP    #15
000014C6                           714                  
000014C6                           715  SKIPNOTLONG2
000014C6                           716  
000014C6  6100 0CF6                717          BSR     MOVEMHELPERPRE
000014CA                           718  
000014CA  43F9 00002545            719          LEA     COMMA,A1
000014D0  103C 000E                720          MOVE.B  #14,D0          * print , 
000014D4  4E4F                     721          TRAP    #15
000014D6                           722          
000014D6  6100 073E                723          BSR     EAHELPER05 * print out the register we are moving to
000014DA                           724          
000014DA  341A                     725          MOVE.W  (A2)+,D2
000014DC                           726          
000014DC  43F9 0000249A            727          LEA     NEWLINE,A1
000014E2  103C 000E                728          MOVE.B  #14,D0          * print a newline 
000014E6  4E4F                     729          TRAP    #15
000014E8                           730      
000014E8  6000 0158                731          BRA     DONE0100          * we found and printed, move on to the next iteration
000014EC                           732  
000014EC                           733  NOTMOVEM *JSR
000014EC                           734          * prep values for BITMASK subroutine
000014EC  7C06                     735          MOVE.L  #6,D6
000014EE  7E08                     736          MOVE.L  #8,D7
000014F0                           737          
000014F0  6100 0F64                738          BSR     BITMASK
000014F4                           739          
000014F4  CC42                     740          AND     D2,D6   * apply bitmask
000014F6                           741          
000014F6  0C46 0080                742          CMPI    #%0000000010000000,D6
000014FA  6600 003E                743          BNE     NOTJSR          * it's not JSR
000014FE                           744          
000014FE  43F9 000024B5            745          LEA     JSROP,A1
00001504  103C 000E                746          MOVE.B  #14,D0          * Print a newline and JSR
00001508  4E4F                     747          TRAP    #15
0000150A                           748          
0000150A  43F9 0000253F            749          LEA     SPACE,A1
00001510  103C 000E                750          MOVE.B  #14,D0          * Print a newline and JSR
00001514  4E4F                     751          TRAP    #15
00001516                           752          
00001516                           753          * print out where we are jumping to
00001516                           754          
00001516  341A                     755          MOVE.W  (A2)+,D2 * read in the next word of the instruction 
00001518                           756          
00001518  2202                     757          MOVE.L  D2,D1   * save the opcode to print
0000151A                           758          
0000151A  7410                     759          MOVE.L  #16,D2  * set the base to 16
0000151C                           760          
0000151C  700F                     761          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
0000151E  4E4F                     762          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
00001520                           763          
00001520  341A                     764          MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
00001522                           765          
00001522  2202                     766          MOVE.L  D2,D1   * save the opcode to print
00001524                           767          
00001524  7410                     768          MOVE.L  #16,D2  * set the base to 16
00001526                           769          
00001526  700F                     770          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
00001528  4E4F                     771          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
0000152A                           772          
0000152A  43F9 0000249A            773          LEA     NEWLINE,A1
00001530  103C 000E                774          MOVE.B  #14,D0          * Print a newline
00001534  4E4F                     775          TRAP    #15
00001536                           776          
00001536  6000 010A                777          BRA     DONE0100          * we already found instruction, next iteration
0000153A                           778  NOTJSR *RTS
0000153A                           779  
0000153A                           780          * prep values for BITMASK subroutine
0000153A  7C06                     781          MOVE.L  #6,D6
0000153C  7E08                     782          MOVE.L  #8,D7
0000153E                           783          
0000153E  6100 0F16                784          BSR     BITMASK
00001542                           785          
00001542  CC42                     786          AND     D2,D6   * apply bitmask
00001544                           787          
00001544  0C46 0040                788          CMPI    #%0000000001000000,D6
00001548  6600 0012                789          BNE     NOTRTS          * it's not RTS
0000154C                           790          
0000154C  43F9 000024B9            791          LEA     RTSOP,A1
00001552  103C 000D                792          MOVE.B  #13,D0          * Print a newline and RTS
00001556  4E4F                     793          TRAP    #15
00001558                           794          
00001558  6000 00E8                795          BRA     DONE0100          * we already found instruction, next iteration
0000155C                           796  NOTRTS  *LEA
0000155C                           797         
0000155C                           798          * prep values for BITMASK subroutine
0000155C  7C06                     799          MOVE.L  #6,D6
0000155E  7E08                     800          MOVE.L  #8,D7
00001560                           801          
00001560  6100 0EF4                802          BSR     BITMASK
00001564                           803          
00001564  CC42                     804          AND     D2,D6   * apply bitmask
00001566                           805          
00001566  0C46 01C0                806          CMPI    #%0000000111000000,D6
0000156A  6600 00D2                807          BNE     UNKNOWN0100          * it's not LEA, we dont know what it is
0000156E                           808          
0000156E                           809          * prep values for BITMASK subroutine
0000156E  7C03                     810          MOVE.L  #3,D6
00001570  7E05                     811          MOVE.L  #5,D7
00001572                           812          
00001572  6100 0EE2                813          BSR     BITMASK
00001576                           814          
00001576  CC42                     815          AND     D2,D6   * apply bitmask
00001578                           816          
00001578  0C46 0008                817          CMPI    #%0000000000001000,D6
0000157C  6700 00C0                818          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001580                           819          
00001580  0C46 0018                820          CMPI    #%0000000000011000,D6
00001584  6700 00B8                821          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001588                           822          
00001588  0C46 0020                823          CMPI    #%0000000000100000,D6
0000158C  6700 00B0                824          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001590                           825          
00001590  0C46 0028                826          CMPI    #%0000000000101000,D6
00001594  6700 00A8                827          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001598                           828          
00001598  0C46 0030                829          CMPI    #%0000000000110000,D6
0000159C  6700 00A0                830          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
000015A0                           831          
000015A0  0C46 0038                832          CMPI    #%0000000000111000,D6
000015A4  6700 0046                833          BEQ     TWOWORDLEA          * it's a two word LEA
000015A8                           834          
000015A8                           835          * check to make sure it is a supported mode and size
000015A8                           836          
000015A8  43F9 000024C2            837          LEA     LEAOP,A1
000015AE  103C 000E                838          MOVE.B  #14,D0          * Print LEA
000015B2  4E4F                     839          TRAP    #15
000015B4                           840          
000015B4  0882 0007                841          BCLR    #7,D2
000015B8  0882 0008                842          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
000015BC                           843          
000015BC  43F9 0000253F            844          LEA     SPACE,A1
000015C2  103C 000E                845          MOVE.B  #14,D0          * Print SPACE
000015C6  4E4F                     846          TRAP    #15
000015C8                           847          
000015C8  6100 064C                848          BSR     EAHELPER05
000015CC                           849          
000015CC  43F9 00002545            850          LEA     COMMA,A1
000015D2  103C 000E                851          MOVE.B  #14,D0          * Print COMMA
000015D6  4E4F                     852          TRAP    #15
000015D8                           853          
000015D8  6100 05FA                854          BSR     EAHELPER611
000015DC                           855          
000015DC  43F9 0000249A            856          LEA     NEWLINE,A1
000015E2  103C 000E                857          MOVE.B  #14,D0          * Start a new line
000015E6  4E4F                     858          TRAP    #15
000015E8                           859          
000015E8                           860          
000015E8                           861          * call EA helper
000015E8                           862          * MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
000015E8                           863                  
000015E8  6000 0058                864          BRA     DONE0100          * we already found instruction, next iteration
000015EC                           865          
000015EC                           866  TWOWORDLEA
000015EC                           867  
000015EC  43F9 000024C2            868          LEA     LEAOP,A1
000015F2  103C 000E                869          MOVE.B  #14,D0   * Print LEA
000015F6  4E4F                     870          TRAP    #15
000015F8                           871          
000015F8  43F9 0000253F            872          LEA     SPACE,A1
000015FE  103C 000E                873          MOVE.B  #14,D0   * Print SPACE
00001602  4E4F                     874          TRAP    #15
00001604                           875  
00001604  321A                     876          MOVE.W  (A2)+,D1
00001606                           877          
00001606  7C00                     878          MOVE.L  #0,D6
00001608  7E0F                     879          MOVE.L  #15,D7
0000160A                           880          
0000160A  6100 0E4A                881          BSR     BITMASK
0000160E                           882          
0000160E  C286                     883          AND.L   D6,D1   * shave off bad info
00001610                           884          
00001610  103C 0003                885          MOVE.B  #3,D0   * Print the address which was the source
00001614  4E4F                     886          TRAP    #15
00001616                           887          
00001616  43F9 00002545            888          LEA     COMMA,A1
0000161C  103C 000E                889          MOVE.B  #14,D0  * Print COMMA
00001620  4E4F                     890          TRAP    #15
00001622                           891          
00001622  0882 0007                892          BCLR    #7,D2
00001626  0882 0008                893          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
0000162A                           894          
0000162A  6100 05A8                895          BSR     EAHELPER611
0000162E                           896          
0000162E  43F9 0000249A            897          LEA     NEWLINE,A1
00001634  103C 000E                898          MOVE.B  #14,D0          * Start a new line
00001638  4E4F                     899          TRAP    #15
0000163A                           900          
0000163A  6000 0006                901          BRA     DONE0100
0000163E                           902          
0000163E                           903  UNKNOWN0100 *dont know what it is
0000163E  6100 0BAC                904          BSR     UNKNOWNOP
00001642                           905          
00001642                           906  DONE0100
00001642  4C9F 0303                907          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
00001646  4E75                     908          RTS
00001648                           909          
00001648  6000 FB0E                910          BRA     ITERATION
0000164C                           911  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000164C                           912  *-----------------------------------------------------------------------------
0000164C                           913        
0000164C                           914          
0000164C                           915          
0000164C                           916  
0000164C                           917  *-----------------------------------------------------------------------------
0000164C                           918  *-----------------------------------------------------------------------------
0000164C                           919  * NAME: OP_0101   (SUBQ)
0000164C                           920  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000164C                           921  * PRE-CONDITION:  xyz
0000164C                           922  * POST-CONDITION: All registers return to their previous state, and the output
0000164C                           923  *                 goes to the output console for reading the raw data or the
0000164C                           924  *                 actual instruction.
0000164C                           925  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000164C                           926  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000164C                           927  OP0101
0000164C  48A7 FFC0                928          MOVEM   D0-D7/A0-A1,-(A7)       * Push values to the stack to save
00001650                           929  
00001650  CC7C 0100                930          AND     #%0000000100000000, D6  * Baby-Bitmask for the 8th digit.
00001654  0C46 0100                931          CMPI    #%0000000100000000, D6  * Is the 8th digit a 1?
00001658  6700 005A                932          BEQ     UNKNOWN0101             * If so, unknown op
0000165C                           933        
0000165C  0C46 0100                934          CMPI    #%0000000100000000, D6  * Is the size 11, an unsupported value?
00001660  6700 0052                935          BEQ     UNKNOWN0101             * If so, unknown op
00001664                           936            
00001664                           937          * Verified SUBQ at this point
00001664  43F9 000024BD            938          LEA     SUBQOP,A1           * Print out SUBQ
0000166A  103C 000E                939          MOVE.B  #14,D0              * Trap #14 to print out
0000166E  4E4F                     940          TRAP    #15                 * Perform Trap #14
00001670                           941                          
00001670  6100 08FA                942          BSR     SIZE67              * Print out size
00001674                           943          
00001674  43F9 00002543            944          LEA     IMD,A1              * Formatting
0000167A  103C 000E                945          MOVE.B  #14,D0              * Trap #14 prints out space
0000167E  4E4F                     946          TRAP    #15                 * Perform Trap #14
00001680                           947          
00001680  3C3C 0009                948          MOVE.W  #9, D6              * Prep lower value for bitmask
00001684  3E3C 000B                949          MOVE.W  #11,D7              * Prep upper value for bitmask
00001688  6100 0DCC                950          BSR     BITMASK             * Finalize bitmask setup
0000168C  CC42                     951          AND     D2,D6               * Apply bitmask
0000168E                           952          
0000168E  6100 0D14                953          BSR     PRINTDATA911        * Special op for immediate in bits 9->11
00001692                           954            
00001692  43F9 00002545            955          LEA     COMMA,A1            * Formatting
00001698  103C 000E                956          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000169C  4E4F                     957          TRAP    #15                 * Perform Trap #14
0000169E                           958          
0000169E  6100 0576                959          BSR     EAHELPER05          * Print out the Effective Address
000016A2                           960          
000016A2  43F9 0000249A            961          LEA     NEWLINE,A1          * Formatting
000016A8  103C 000E                962          MOVE.B  #14,D0              * Trap #14 prints out a comma
000016AC  4E4F                     963          TRAP    #15                 * Perform Trap #14
000016AE                           964          
000016AE  4C9F 03FF                965          MOVEM   (A7)+,D0-D7/A0-A1   * Pop off the stack to return our registers
000016B2  4E75                     966          RTS
000016B4                           967      
000016B4                           968  UNKNOWN0101
000016B4  6100 0B36                969          BSR     UNKNOWNOP
000016B8  4E75                     970          RTS
000016BA                           971  
000016BA                           972  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000016BA                           973  *-----------------------------------------------------------------------------
000016BA                           974  
000016BA                           975  
000016BA                           976  
000016BA                           977  *-----------------------------------------------------------------------------
000016BA                           978  *-----------------------------------------------------------------------------
000016BA                           979  * NAME: OP_0110   (BCC, BCS, BGE, BLT, BVC, BRA)
000016BA                           980  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000016BA                           981  * PRE-CONDITION:  Given the possibilties for 0110, masks the next 4 bits
000016BA                           982  *                 in the instruction and determines what the bits match to a
000016BA                           983  *                 given condition code. If the 8 bit offset is $00, or $FF,
000016BA                           984  *                 this signifies a word or long offset (for $00 and $FF
000016BA                           985  *                 respectively). The 8 bit offset is in 2's comp. form, and
000016BA                           986  *                 should be un-done, then plus or minus to the current
000016BA                           987  *                 program counter (PC) to get the actual memory label to
000016BA                           988  *                 output to console. The word offset signal eats an
000016BA                           989  *                 additional 16 bits and the long offset eats an additional
000016BA                           990  *                 32 bits. The word/long offset are for memory alignment.
000016BA                           991  * POST-CONDITION: All registers return to their previous state, and the output
000016BA                           992  *                 goes to the output console for reading the raw data or the
000016BA                           993  *                 actual instruction.
000016BA                           994  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000016BA                           995  *                 A1 (output)
000016BA                           996  * CONDITIONS TABLE:
000016BA                           997  *                Condition Names  - Mnemonic - Condition Code
000016BA                           998  *                --------------------------------------------
000016BA                           999  *                True             -    T     - 0000
000016BA                          1000  *                False            -    F     - 0001
000016BA                          1001  *                Higher           -    HI    - 0010
000016BA                          1002  *                Lower or Same    -    LS    - 0011
000016BA                          1003  *                Carry Clear      -    CC    - 0100
000016BA                          1004  *                Carry Set        -    CS    - 0101
000016BA                          1005  *                Not Equal        -    NE    - 0110
000016BA                          1006  *                Equal            -    EQ    - 0111
000016BA                          1007  *                Overflow Clear   -    VC    - 1000
000016BA                          1008  *                Overflow Set     -    VS    - 1001
000016BA                          1009  *                Plus             -    PL    - 1010
000016BA                          1010  *                Minus            -    MI    - 1011
000016BA                          1011  *                Greater or Equal -    GE    - 1100
000016BA                          1012  *                Less Than        -    LT    - 1101
000016BA                          1013  *                Greater Than     -    GT    - 1110
000016BA                          1014  *                Less or Equal    -    LE    - 1111
000016BA                          1015  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000016BA  48E7 FFFE               1016  OP0110  MOVEM.L D0-D7/A0-A6,-(A7) * Save main method routine vars to stack
000016BE                          1017                          
000016BE  3C3C 0009               1018          MOVE.W  #9,D6  * Move in 9 to D6
000016C2  3E3C 000B               1019          MOVE.W  #11,D7 * Move in 11 to D7
000016C6                          1020                                        
000016C6  6100 0D8E               1021          BSR     BITMASK * Call BITMASK sub-routine, Returns a bitmask in D6
000016CA  CC42                    1022          AND     D2,D6   * apply the BITMASK
000016CC                          1023          
000016CC  0C46 0400               1024          CMPI    #%0000010000000000,D6 * CASE 1: BCC - BINARY FOR "CARRY CLEAR" FLAG
000016D0  6700 0032               1025          BEQ     OP_BCC
000016D4  0C46 0500               1026          CMPI    #%0000010100000000,D6 * CASE 2: BCS - BINARY FOR "CARRY SET" FLAG
000016D8  6700 0034               1027          BEQ     OP_BCS
000016DC  0C46 0C00               1028          CMPI    #%0000110000000000,D6 * CASE 3: BGE - BINARY FOR "GREATER OR EQUAL" FLAG
000016E0  6700 0036               1029          BEQ     OP_BGE
000016E4  0C46 0D00               1030          CMPI    #%0000110100000000,D6 * CASE 4: BLT - BINARY FOR "LESS THAN" FLAG
000016E8  6700 0038               1031          BEQ     OP_BLT
000016EC  0C46 0800               1032          CMPI    #%0000100000000000,D6 * CASE 5: BVC - BINARY FOR "OVERFLOW CLEAR" FLAG
000016F0  6700 003A               1033          BEQ     OP_BVC
000016F4  0C46 0000               1034          CMPI    #%0000000000000000,D6 * CASE 6: BRA - BINARY FOR "BRANCH ALWAYS" FLAG
000016F8  6700 003C               1035          BEQ     OP_BRA
000016FC  6100 0AEE               1036          BSR     UNKNOWNOP             * don't know what it is, print it out, skip to end
00001700  6000 007A               1037          BRA     BCC_END
00001704                          1038  
00001704  43F9 000024FD           1039  OP_BCC  LEA     OP_BCC_MSG,A1
0000170A  6000 0034               1040          BRA     OP_BRANCHES_PRINT
0000170E  43F9 00002502           1041  OP_BCS  LEA     OP_BCS_MSG,A1
00001714  6000 002A               1042          BRA     OP_BRANCHES_PRINT
00001718  43F9 00002507           1043  OP_BGE  LEA     OP_BGE_MSG,A1
0000171E  6000 0020               1044          BRA     OP_BRANCHES_PRINT
00001722  43F9 0000250C           1045  OP_BLT  LEA     OP_BLT_MSG,A1
00001728  6000 0016               1046          BRA     OP_BRANCHES_PRINT
0000172C  43F9 00002511           1047  OP_BVC  LEA     OP_BVC_MSG,A1
00001732  6000 000C               1048          BRA     OP_BRANCHES_PRINT
00001736  43F9 00002516           1049  OP_BRA  LEA     OP_BRA_MSG,A1
0000173C  6000 0002               1050          BRA     OP_BRANCHES_PRINT
00001740                          1051  OP_BRANCHES_PRINT
00001740  103C 000E               1052          MOVE.B  #14,D0 * print instruction op, chosen from cases directly above
00001744  4E4F                    1053          TRAP    #15
00001746                          1054          
00001746  43F9 00002541           1055          LEA     DOLLAR,A1
0000174C  103C 000E               1056          MOVE.B  #14,D0 * print raw data hex of the LABEL
00001750  4E4F                    1057          TRAP    #15
00001752                          1058          
00001752  3C3C 0000               1059          MOVE.W  #0,D6                 * Move in 0 to D6 - prep mask
00001756  3E3C 0007               1060          MOVE.W  #7,D7                 * Move in 7 to D7
0000175A  6100 0CFA               1061          BSR     BITMASK               * Call BITMASK sub-routine, return in D6
0000175E  CC42                    1062          AND     D2,D6                 * AND mask with op bits, get last 8 bits in D6
00001760                          1063          
00001760                          1064  *        CMPI    #%00000000,D6         * all 0's == word offset
00001760                          1065  *        BEQ     BCC_WORD_OFFSET
00001760                          1066          
00001760                          1067  *        CMPI    #%11111111,D6         * all F's == long offset
00001760                          1068  *        BEQ     BCC_LONG_OFFSET
00001760                          1069  BCC_BYTE_OFFSET
00001760  4254                    1070          CLR     (A4)
00001762  2846                    1071          MOVE.L  D6,A4
00001764  43D4                    1072          LEA     (A4),A1
00001766  103C 000E               1073          MOVE.B  #14,D0
0000176A  4E4F                    1074          TRAP    #15
0000176C  43F9 0000249A           1075          LEA     NEWLINE,A1
00001772  103C 000E               1076          MOVE.B  #14,D0
00001776  4E4F                    1077          TRAP    #15
00001778                          1078          
00001778  6000 0002               1079          BRA     BCC_END
0000177C                          1080  *BCC_WORD_OFFSET
0000177C                          1081  *        MOVEM.W (A2)+,A1
0000177C                          1082  *        MOVE.B  #13,D0
0000177C                          1083  *        TRAP    #15
0000177C                          1084  *        BRA     BCC_END
0000177C                          1085  *BCC_LONG_OFFSET
0000177C                          1086  *        MOVEM.L (A2)+,A1
0000177C                          1087  *        MOVE.B  #13,D0
0000177C                          1088  *        TRAP    #15
0000177C                          1089  *        BRA     BCC_END
0000177C                          1090  BCC_END * reload the memory, call RTS
0000177C  4C9F 7FFF               1091          MOVEM   (A7)+,D0-D7/A0-A6 * Pop off the stack to return our registers
00001780  4E75                    1092          RTS
00001782                          1093  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001782                          1094  *-----------------------------------------------------------------------------
00001782                          1095  
00001782                          1096  
00001782                          1097  
00001782                          1098  *-----------------------------------------------------------------------------
00001782                          1099  *-----------------------------------------------------------------------------
00001782                          1100  * NAME: OP_0111   ()
00001782                          1101  * DESCRIPTION:    OP code 0111 is not supported. 
00001782                          1102  * PRE-CONDITION:  
00001782                          1103  * POST-CONDITION: 
00001782                          1104  * REGISTERS:
00001782                          1105  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001782                          1106  OP0111
00001782  6100 0A68               1107      BSR     UNKNOWNOP
00001786  4E75                    1108      RTS
00001788                          1109  
00001788                          1110  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001788                          1111  *-----------------------------------------------------------------------------
00001788                          1112  
00001788                          1113  
00001788                          1114  
00001788                          1115  *-----------------------------------------------------------------------------
00001788                          1116  *-----------------------------------------------------------------------------
00001788                          1117  * NAME: OP_1000   (DIVS, OR)
00001788                          1118  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001788                          1119  * PRE-CONDITION:  xyz
00001788                          1120  * POST-CONDITION: All registers return to their previous state, and the output
00001788                          1121  *                 goes to the output console for reading the raw data or the
00001788                          1122  *                 actual instruction.
00001788                          1123  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001788                          1124  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001788                          1125  OP1000
00001788  48A7 FFC0               1126          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
0000178C                          1127  
0000178C                          1128          * Check if the EA Mode is 001 since both DIVS and OR do not support it
0000178C  3C3C 0003               1129          MOVE.W  #3, D6              * Prep lower value for bitmask
00001790  3E3C 0005               1130          MOVE.W  #5, D7              * Prep upper value for bitmask
00001794  6100 0CC0               1131          BSR     BITMASK             * Finalize bitmask setup
00001798  CC42                    1132          AND     D2,D6               * Apply bitmask
0000179A                          1133          
0000179A  0C46 0008               1134          CMPI    #%0000000000001000, D6  * Is the mode 001, an unsupported mode?
0000179E  6700 0A4C               1135          BEQ     UNKNOWNOP                 * If so, the op is not supported
000017A2                          1136          
000017A2                          1137          * Checking for DIVS
000017A2  3C3C 0006               1138          MOVE.W  #6, D6              * Prep lower value for bitmask
000017A6  3E3C 0008               1139          MOVE.W  #8, D7              * Prep upper value for bitmask
000017AA  6100 0CAA               1140          BSR     BITMASK             * Finalize bitmask setup
000017AE  CC42                    1141          AND     D2,D6               * Apply bitmask
000017B0                          1142          
000017B0  0C46 01C0               1143          CMPI    #%0000000111000000, D6  * Are we DIVS?
000017B4  6600 0050               1144          BNE     NOTDIVS                 * If not, branch to see if it's OR
000017B8                          1145          
000017B8  43F9 0000249D           1146          LEA     DIVSOP,A1           * We found DIVS
000017BE  103C 000E               1147          MOVE.B  #14,D0              * Trap #14 prints out the data
000017C2  4E4F                    1148          TRAP    #15                 * Perform Trap #14
000017C4                          1149          
000017C4  43F9 0000253F           1150          LEA     SPACE,A1            * formatting
000017CA  103C 000E               1151          MOVE.B  #14,D0              * Trap #14 prints out space
000017CE  4E4F                    1152          TRAP    #15                 * Perform Trap #14
000017D0                          1153          
000017D0  4243                    1154          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
000017D2  08C3 0000               1155          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
000017D6                          1156                                      * to indicate a potential immediate of size word
000017D6                          1157          
000017D6  6100 043E               1158          BSR     EAHELPER05          * Print out data
000017DA                          1159  
000017DA  43F9 00002545           1160          LEA     COMMA,A1            * formatting
000017E0  103C 000E               1161          MOVE.B  #14,D0              * Trap #14 prints out a comma
000017E4  4E4F                    1162          TRAP    #15                 * Perform Trap #14
000017E6                          1163          
000017E6                          1164          * bit manipulation is needed to make the outlier DIVS work
000017E6                          1165          * with the generic EAHELPER611
000017E6  0882 0006               1166          BCLR    #6,D2
000017EA  0882 0007               1167          BCLR    #7,D2
000017EE  0882 0008               1168          BCLR    #8,D2
000017F2                          1169          
000017F2                          1170          * the above bits were cleared so that eahelper05 knows the destination
000017F2                          1171          * is a data register.
000017F2                          1172          
000017F2  6100 03E0               1173          BSR     EAHELPER611 
000017F6                          1174  
000017F6  43F9 0000249A           1175          LEA     NEWLINE,A1          * We found DIVS
000017FC  103C 000E               1176          MOVE.B  #14,D0              * Trap #14 prints out the data
00001800  4E4F                    1177          TRAP    #15                 * Perform Trap #14
00001802                          1178          
00001802  6000 0012               1179          BRA     OP1000END
00001806                          1180          
00001806                          1181  NOTDIVS * It is confirmed OR at this point
00001806  43F9 000024D1           1182          LEA     OROP,A1         * We found OR
0000180C  103C 000E               1183          MOVE.B  #14,D0          * Trap #14 prints out the data
00001810  4E4F                    1184          TRAP    #15             * Perform Trap #14
00001812                          1185          *================================================================
00001812                          1186          * todo, move the size of the operation into the leading bits of D5
00001812                          1187          * before subroutine call
00001812  6100 03C0               1188          BSR     EAHELPER611
00001816                          1189  
00001816                          1190  OP1000END
00001816  4C9F 03FF               1191          MOVEM   (A7)+,D0-D7/A0-A1
0000181A  4E75                    1192          RTS
0000181C                          1193  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000181C                          1194  *-----------------------------------------------------------------------------
0000181C                          1195  
0000181C                          1196  
0000181C                          1197  
0000181C                          1198  *-----------------------------------------------------------------------------
0000181C                          1199  *-----------------------------------------------------------------------------
0000181C                          1200  * NAME: OP_1001   (SUB)
0000181C                          1201  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000181C                          1202  * PRE-CONDITION:  xyz
0000181C                          1203  * POST-CONDITION: All registers return to their previous state, and the output
0000181C                          1204  *                 goes to the output console for reading the raw data or the
0000181C                          1205  *                 actual instruction.
0000181C                          1206  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000181C                          1207  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000181C                          1208  OP1001
0000181C                          1209  
0000181C                          1210  
0000181C                          1211  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000181C                          1212  *-----------------------------------------------------------------------------
0000181C                          1213  
0000181C                          1214  
0000181C                          1215  
0000181C                          1216  *-----------------------------------------------------------------------------
0000181C                          1217  *-----------------------------------------------------------------------------
0000181C                          1218  * NAME: OP_1010   ()
0000181C                          1219  * DESCRIPTION:    a
0000181C                          1220  * PRE-CONDITION:  b
0000181C                          1221  * POST-CONDITION: c
0000181C                          1222  * REGISTERS:      d
0000181C                          1223  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000181C                          1224  OP1010
0000181C                          1225  
0000181C  6100 09CE               1226      BSR     UNKNOWNOP
00001820  4E75                    1227      RTS
00001822                          1228  
00001822                          1229  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001822                          1230  *-----------------------------------------------------------------------------
00001822                          1231  
00001822                          1232  
00001822                          1233  
00001822                          1234  *-----------------------------------------------------------------------------
00001822                          1235  *-----------------------------------------------------------------------------
00001822                          1236  * NAME: OP_1011   (EOR, CMP)
00001822                          1237  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001822                          1238  * PRE-CONDITION:  xyz
00001822                          1239  * POST-CONDITION: All registers return to their previous state, and the output
00001822                          1240  *                 goes to the output console for reading the raw data or the
00001822                          1241  *                 actual instruction.
00001822                          1242  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001822                          1243  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001822                          1244  OP1011
00001822                          1245  
00001822  6100 09C8               1246      BSR     UNKNOWNOP
00001826  4E75                    1247      RTS
00001828                          1248  
00001828                          1249  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001828                          1250  *-----------------------------------------------------------------------------
00001828                          1251  
00001828                          1252  
00001828                          1253  
00001828                          1254  *-----------------------------------------------------------------------------
00001828                          1255  *-----------------------------------------------------------------------------
00001828                          1256  * NAME: OP_1100   (MULS)
00001828                          1257  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001828                          1258  * PRE-CONDITION:  xyz
00001828                          1259  * POST-CONDITION: All registers return to their previous state, and the output
00001828                          1260  *                 goes to the output console for reading the raw data or the
00001828                          1261  *                 actual instruction.
00001828                          1262  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001828                          1263  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001828                          1264  OP1100
00001828  48A7 FFC0               1265          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
0000182C                          1266  
0000182C                          1267          * Check if the EA Mode is 001 since MULS does not support it
0000182C  3C3C 0003               1268          MOVE.W  #3, D6              * Prep lower value for bitmask
00001830  3E3C 0005               1269          MOVE.W  #5, D7              * Prep upper value for bitmask
00001834  6100 0C20               1270          BSR     BITMASK             * Finalize bitmask setup
00001838  CC42                    1271          AND     D2,D6               * Apply bitmask
0000183A                          1272          
0000183A  0C46 0008               1273          CMPI    #%0000000000001000, D6    * Is the mode 001, an unsupported mode?
0000183E  6700 0068               1274          BEQ     UNKNOWN1100               * If so, the op is not supported
00001842                          1275          
00001842  3C3C 0006               1276          MOVE.W  #6, D6              * Prep lower value for bitmask
00001846  3E3C 0008               1277          MOVE.W  #8, D7              * Prep upper value for bitmask
0000184A  6100 0C0A               1278          BSR     BITMASK             * Finalize bitmask setup
0000184E  CC42                    1279          AND     D2,D6               * Apply bitmask
00001850                          1280          
00001850  0C46 01C0               1281          CMPI    #%0000000111000000, D6  * Are we MULS?
00001854  6600 0052               1282          BNE     UNKNOWN1100             * If not, it is an unknown op
00001858                          1283          
00001858  43F9 000024CC           1284          LEA     MULSOP,A1           * We found MULS
0000185E  103C 000E               1285          MOVE.B  #14,D0              * Trap #14 prints out the data
00001862  4E4F                    1286          TRAP    #15                 * Perform Trap #14
00001864                          1287          
00001864  43F9 0000253F           1288          LEA     SPACE,A1            * formatting
0000186A  103C 000E               1289          MOVE.B  #14,D0              * Trap #14 prints out space
0000186E  4E4F                    1290          TRAP    #15                 * Perform Trap #14
00001870                          1291          
00001870  4243                    1292          CLR     D3                  * clear D3, it is a parameter
00001872  08C3 0000               1293          BSET    #0,D3               * of EAHELPER05 to indicate size
00001876                          1294          
00001876  6100 039E               1295          BSR     EAHELPER05          * Print out data
0000187A                          1296  
0000187A  43F9 00002545           1297          LEA     COMMA,A1            * formatting
00001880  103C 000E               1298          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001884  4E4F                    1299          TRAP    #15                 * Perform Trap #14
00001886                          1300          
00001886  0882 0006               1301          BCLR    #6,D2               * Bit manipulation is 
0000188A  0882 0007               1302          BCLR    #7,D2               * necessary in order to make
0000188E  0882 0008               1303          BCLR    #8,D2               * EAHELPER611 work generically
00001892                          1304          
00001892  6100 0340               1305          BSR     EAHELPER611         * Print out EA
00001896                          1306  
00001896  43F9 0000249A           1307          LEA     NEWLINE,A1          * Formatting
0000189C  103C 000E               1308          MOVE.B  #14,D0              * Trap #14 prints out the data
000018A0  4E4F                    1309          TRAP    #15                 * Perform Trap #14
000018A2                          1310          
000018A2  4C9F 03FF               1311          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
000018A6  4E75                    1312          RTS                         * Return to main
000018A8                          1313          
000018A8                          1314  UNKNOWN1100
000018A8  6100 0942               1315          BSR     UNKNOWNOP
000018AC                          1316       
000018AC  4C9F 03FF               1317          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
000018B0  4E75                    1318          RTS                         * Return to main
000018B2                          1319          
000018B2                          1320  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000018B2                          1321  *-----------------------------------------------------------------------------
000018B2                          1322  
000018B2                          1323  
000018B2                          1324  
000018B2                          1325  
000018B2                          1326  
000018B2                          1327  
000018B2                          1328  *-----------------------------------------------------------------------------
000018B2                          1329  *-----------------------------------------------------------------------------
000018B2                          1330  * NAME: OP_1101   (ADD, ADDA)
000018B2                          1331  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000018B2                          1332  * PRE-CONDITION:  xyz
000018B2                          1333  * POST-CONDITION: All registers return to their previous state, and the output
000018B2                          1334  *                 goes to the output console for reading the raw data or the
000018B2                          1335  *                 actual instruction.
000018B2                          1336  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000018B2                          1337  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000018B2                          1338  OP1101
000018B2  48E7 FFFE               1339          MOVEM.L A0-A6/D0-D7,-(A7)
000018B6                          1340          
000018B6  3C3C 0006               1341          MOVE.W  #6, D6              * Prep lower value for bitmask
000018BA  3E3C 0008               1342          MOVE.W  #8, D7              * Prep upper value for bitmask
000018BE  6100 0B96               1343          BSR     BITMASK             * Finalize bitmask setup
000018C2  CC42                    1344          AND     D2,D6               * Apply bitmask
000018C4  EC4E                    1345          LSR     #6,D6
000018C6                          1346  
000018C6  0C06 0000               1347          CMPI.B  #%0000000000000000,D6
000018CA  6700 003E               1348          BEQ     BYTE_EA_DN
000018CE                          1349  
000018CE  0C06 0001               1350          CMPI.B  #%0000000000000001,D6
000018D2  6700 004E               1351          BEQ     WORD_EA_DN
000018D6                          1352  
000018D6  0C06 0002               1353          CMPI.B  #%0000000000000010,D6
000018DA  6700 005E               1354          BEQ     LONG_EA_DN
000018DE                          1355  
000018DE  0C06 0003               1356          CMPI.B  #%0000000000000011,D6
000018E2  6700 006E               1357          BEQ     ADDA_WORD_OP
000018E6                          1358  
000018E6  0C06 0004               1359          CMPI.B  #%0000000000000100,D6
000018EA  6700 0086               1360          BEQ     BYTE_DN_EA
000018EE                          1361  
000018EE  0C06 0005               1362          CMPI.B  #%0000000000000101,D6
000018F2  6700 0096               1363          BEQ     WORD_DN_EA
000018F6                          1364  
000018F6  0C06 0006               1365          CMPI.B  #%0000000000000110,D6
000018FA  6700 00A6               1366          BEQ     LONG_DN_EA
000018FE                          1367  
000018FE  0C06 0007               1368          CMPI.B  #%0000000000000111,D6
00001902  6700 00B6               1369          BEQ     ADDA_LONG_OP
00001906                          1370  
00001906  6000 011E               1371          BRA     ADD_ADDA_END
0000190A                          1372          
0000190A                          1373  BYTE_EA_DN
0000190A  6100 00CE               1374          BSR     ADD_EA_DN_GENERIC       * print out 'ADD' base op name for ADDA too
0000190E                          1375  
0000190E  43F9 00002553           1376          LEA     __B,A1                  * print out size
00001914  103C 000E               1377          MOVE.B  #14,D0
00001918  4E4F                    1378          TRAP    #15
0000191A                          1379  
0000191A  6100 00CC               1380          BSR     ADD_ADDA_SPACE          * print out space
0000191E  6000 00EE               1381          BRA     ADD_ADDA_PRINT
00001922                          1382  
00001922                          1383  WORD_EA_DN
00001922  6100 00B6               1384          BSR     ADD_EA_DN_GENERIC
00001926                          1385  
00001926  43F9 00002557           1386          LEA     __W,A1
0000192C  103C 000E               1387          MOVE.B  #14,D0
00001930  4E4F                    1388          TRAP    #15
00001932                          1389          
00001932  6100 00B4               1390          BSR     ADD_ADDA_SPACE
00001936  6000 00D6               1391          BRA     ADD_ADDA_PRINT
0000193A                          1392          
0000193A                          1393  LONG_EA_DN
0000193A  6100 009E               1394          BSR     ADD_EA_DN_GENERIC
0000193E                          1395  
0000193E  43F9 0000255B           1396          LEA     __L,A1
00001944  103C 000E               1397          MOVE.B  #14,D0
00001948  4E4F                    1398          TRAP    #15
0000194A                          1399  
0000194A  6100 009C               1400          BSR     ADD_ADDA_SPACE
0000194E  6000 00BE               1401          BRA     ADD_ADDA_PRINT
00001952                          1402          
00001952                          1403  ADDA_WORD_OP
00001952  6100 0086               1404          BSR     ADD_EA_DN_GENERIC
00001956                          1405  
00001956  43F9 00002533           1406          LEA     ASCII_A,A1
0000195C  103C 000E               1407          MOVE.B  #14,D0
00001960  4E4F                    1408          TRAP    #15
00001962                          1409  
00001962  43F9 00002557           1410          LEA     __W,A1
00001968  103C 000E               1411          MOVE.B  #14,D0
0000196C  4E4F                    1412          TRAP    #15
0000196E                          1413          
0000196E  6000 0086               1414          BRA     ADDA_PRT
00001972                          1415          
00001972                          1416  BYTE_DN_EA
00001972  6100 0066               1417          BSR     ADD_EA_DN_GENERIC
00001976                          1418          
00001976  43F9 00002553           1419          LEA     __B,A1
0000197C  103C 000E               1420          MOVE.B  #14,D0
00001980  4E4F                    1421          TRAP    #15
00001982                          1422          
00001982  6100 0064               1423          BSR     ADD_ADDA_SPACE
00001986  6000 0086               1424          BRA     ADD_ADDA_PRINT
0000198A                          1425  
0000198A                          1426  WORD_DN_EA
0000198A  6100 004E               1427          BSR     ADD_EA_DN_GENERIC
0000198E                          1428  
0000198E  43F9 00002557           1429          LEA     __W,A1
00001994  103C 000E               1430          MOVE.B  #14,D0
00001998  4E4F                    1431          TRAP    #15 
0000199A                          1432  
0000199A  6100 004C               1433          BSR     ADD_ADDA_SPACE
0000199E  6000 006E               1434          BRA     ADD_ADDA_PRINT
000019A2                          1435  
000019A2                          1436  LONG_DN_EA
000019A2  6100 0036               1437          BSR     ADD_EA_DN_GENERIC
000019A6                          1438          
000019A6  43F9 0000255B           1439          LEA     __L,A1
000019AC  103C 000E               1440          MOVE.B  #14,D0
000019B0  4E4F                    1441          TRAP    #15     
000019B2                          1442          
000019B2  6100 0034               1443          BSR     ADD_ADDA_SPACE
000019B6  6000 0056               1444          BRA     ADD_ADDA_PRINT
000019BA                          1445  
000019BA                          1446  ADDA_LONG_OP
000019BA  6100 001E               1447          BSR     ADD_EA_DN_GENERIC
000019BE                          1448          
000019BE  43F9 00002533           1449          LEA     ASCII_A,A1
000019C4  103C 000E               1450          MOVE.B  #14,D0
000019C8  4E4F                    1451          TRAP    #15
000019CA                          1452          
000019CA  43F9 0000255B           1453          LEA     __L,A1
000019D0  103C 000E               1454          MOVE.B  #14,D0
000019D4  4E4F                    1455          TRAP    #15
000019D6                          1456          
000019D6  6000 001E               1457          BRA     ADDA_PRT
000019DA                          1458          
000019DA                          1459  ADD_EA_DN_GENERIC
000019DA  43F9 0000251B           1460          LEA     OP_ADD_MSG,A1           * print out 'ADD'
000019E0  103C 000E               1461          MOVE.B  #14,D0
000019E4  4E4F                    1462          TRAP    #15
000019E6  4E75                    1463          RTS
000019E8                          1464          
000019E8                          1465  ADD_ADDA_SPACE
000019E8  43F9 0000253F           1466          LEA     SPACE,A1
000019EE  103C 000E               1467          MOVE.B  #14,D0
000019F2  4E4F                    1468          TRAP    #15
000019F4  4E75                    1469          RTS
000019F6                          1470  
000019F6                          1471  ADDA_PRT
000019F6  6100 0374               1472          BSR     MODE_DN
000019FA  43F9 00002545           1473          LEA     COMMA,A1
00001A00  103C 000E               1474          MOVE.B  #14,D0
00001A04  4E4F                    1475          TRAP    #15
00001A06  6100 0464               1476          BSR     MODE_AN
00001A0A  6000 001A               1477          BRA     ADD_ADDA_END
00001A0E                          1478  
00001A0E                          1479  ADD_ADDA_PRINT
00001A0E                          1480  
00001A0E  6100 0206               1481          BSR     EAHELPER05          * Print out data. TODO: DOESN'T WORK.
00001A12                          1482  
00001A12  43F9 00002545           1483          LEA     COMMA,A1            * formatting
00001A18  103C 000E               1484          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001A1C  4E4F                    1485          TRAP    #15                 * Perform Trap #14
00001A1E                          1486          
00001A1E  6100 01B4               1487          BSR     EAHELPER611
00001A22  6000 0002               1488          BRA     ADD_ADDA_END
00001A26                          1489          
00001A26                          1490  ADD_ADDA_END
00001A26  43F9 0000249A           1491          LEA     NEWLINE,A1
00001A2C  103C 000E               1492          MOVE.B  #14,D0
00001A30  4E4F                    1493          TRAP    #15
00001A32                          1494          
00001A32  4CDF 7FFF               1495          MOVEM.L (A7)+,A0-A6/D0-D7
00001A36  4E75                    1496          RTS
00001A38                          1497  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001A38                          1498  *-----------------------------------------------------------------------------
00001A38                          1499  
00001A38                          1500  
00001A38                          1501  
00001A38                          1502  *-----------------------------------------------------------------------------
00001A38                          1503  *-----------------------------------------------------------------------------
00001A38                          1504  * NAME: OP_1110   (LSL, LSR, ASL, ASR, ROL, ROR)
00001A38                          1505  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001A38                          1506  * PRE-CONDITION:  xyz
00001A38                          1507  * POST-CONDITION: All registers return to their previous state, and the output
00001A38                          1508  *                 goes to the output console for reading the raw data or the
00001A38                          1509  *                 actual instruction.
00001A38                          1510  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001A38                          1511  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001A38                          1512  OP1110
00001A38                          1513  
00001A38  48A7 FFC0               1514      MOVEM   D0-D7/A0-A1,-(A7)   * Caller saved
00001A3C                          1515  
00001A3C  7C03                    1516      MOVE.L  #3,D6
00001A3E  7E04                    1517      MOVE.L  #4,D7
00001A40                          1518      
00001A40  6100 0A14               1519      BSR     BITMASK * generate a bitmask for the 3 and 4 bits
00001A44                          1520      
00001A44  CC82                    1521      AND.L   D2,D6
00001A46                          1522      
00001A46  0C46 0008               1523      CMPI    #%0000000000001000,D6 *is it a logical shift
00001A4A  6700 001A               1524      BEQ     LS
00001A4E                          1525      
00001A4E  0C46 0000               1526      CMPI    #%0000000000000000,D6 *is it an arithmatic shift
00001A52  6700 0048               1527      BEQ     AS
00001A56                          1528      
00001A56  0C46 0018               1529      CMPI    #%0000000000011000,D6 *is it a rorate?
00001A5A  6700 0076               1530      BEQ     RO
00001A5E                          1531  
00001A5E  6100 078C               1532      BSR     UNKNOWNOP *if nothing above, we don't know what it is
00001A62  6000 0158               1533      BRA     ENDOP1110
00001A66                          1534      
00001A66                          1535  LS
00001A66  7C08                    1536      MOVE.L  #8,D6
00001A68  7E08                    1537      MOVE.L  #8,D7
00001A6A                          1538      
00001A6A  6100 09EA               1539      BSR     BITMASK
00001A6E                          1540      
00001A6E  CC82                    1541      AND.L   D2,D6
00001A70                          1542      
00001A70  0C46 0000               1543      CMPI    #0,D6 * is it a left shift?
00001A74  6700 0016               1544      BEQ     LSR
00001A78                          1545      
00001A78  6000 0002               1546      BRA     LSL * if not a left shift, must be right
00001A7C                          1547  
00001A7C                          1548  LSL
00001A7C                          1549  
00001A7C  43F9 000024DD           1550      LEA     LSLOP,A1            * formatting
00001A82  103C 000E               1551      MOVE.B  #14,D0              * Trap #14 prints out LSL
00001A86  4E4F                    1552      TRAP    #15                 * Perform Trap #14
00001A88                          1553      
00001A88  6000 007E               1554      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001A8C                          1555                                  * prints the registers and imm data
00001A8C                          1556  LSR
00001A8C                          1557  
00001A8C  43F9 000024E1           1558      LEA     LSROP,A1            * formatting
00001A92  103C 000E               1559      MOVE.B  #14,D0              * Trap #14 prints out LSR
00001A96  4E4F                    1560      TRAP    #15                 * Perform Trap #14
00001A98                          1561      
00001A98  6000 006E               1562      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001A9C                          1563                                  * prints the registers and imm data
00001A9C                          1564  
00001A9C                          1565  AS
00001A9C  7C08                    1566      MOVE.L  #8,D6
00001A9E  7E08                    1567      MOVE.L  #8,D7
00001AA0                          1568      
00001AA0  6100 09B4               1569      BSR     BITMASK
00001AA4                          1570      
00001AA4  CC82                    1571      AND.L   D2,D6
00001AA6                          1572      
00001AA6  0C46 0000               1573      CMPI    #0,D6 * is it a left shift?
00001AAA  6700 0016               1574      BEQ     ASR
00001AAE                          1575      
00001AAE  6000 0002               1576      BRA     ASL * if not a left shift, must be right
00001AB2                          1577      
00001AB2                          1578  ASL
00001AB2                          1579  
00001AB2  43F9 000024E5           1580      LEA     ASLOP,A1            * formatting
00001AB8  103C 000E               1581      MOVE.B  #14,D0              * Trap #14 prints out ASL
00001ABC  4E4F                    1582      TRAP    #15                 * Perform Trap #14
00001ABE                          1583      
00001ABE  6000 0048               1584      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001AC2                          1585                                  * prints the registers and imm data
00001AC2                          1586  ASR
00001AC2                          1587  
00001AC2  43F9 000024E9           1588      LEA     ASROP,A1            * formatting
00001AC8  103C 000E               1589      MOVE.B  #14,D0              * Trap #14 prints out ASR
00001ACC  4E4F                    1590      TRAP    #15                 * Perform Trap #14
00001ACE                          1591      
00001ACE  6000 0038               1592      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001AD2                          1593                                  * prints the registers and imm data
00001AD2                          1594  RO
00001AD2  7C08                    1595      MOVE.L  #8,D6
00001AD4  7E08                    1596      MOVE.L  #8,D7
00001AD6                          1597      
00001AD6  6100 097E               1598      BSR     BITMASK
00001ADA                          1599      
00001ADA  CC82                    1600      AND.L   D2,D6
00001ADC                          1601      
00001ADC  0C46 0000               1602      CMPI    #0,D6 * is it a left shift?
00001AE0  6700 0016               1603      BEQ     ROR
00001AE4                          1604      
00001AE4  6000 0002               1605      BRA     ROL * if not a left shift, must be right
00001AE8                          1606  
00001AE8                          1607  ROL
00001AE8                          1608  
00001AE8  43F9 000024ED           1609      LEA     ROLOP,A1            * formatting
00001AEE  103C 000E               1610      MOVE.B  #14,D0              * Trap #14 prints out ROL
00001AF2  4E4F                    1611      TRAP    #15                 * Perform Trap #14
00001AF4                          1612      
00001AF4  6000 0012               1613      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001AF8                          1614                                  * prints the registers and imm data
00001AF8                          1615  ROR
00001AF8                          1616  
00001AF8  43F9 000024F1           1617      LEA     ROROP,A1            * formatting
00001AFE  103C 000E               1618      MOVE.B  #14,D0              * Trap #14 prints out ROR
00001B02  4E4F                    1619      TRAP    #15                 * Perform Trap #14
00001B04                          1620      
00001B04  6000 0002               1621      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001B08                          1622                                  * prints the registers and imm data
00001B08                          1623  
00001B08                          1624  OP1110GENERIC
00001B08                          1625  
00001B08  6100 0462               1626      BSR     SIZE67
00001B0C                          1627      
00001B0C  7C05                    1628      MOVE.L  #5,D6
00001B0E  7E05                    1629      MOVE.L  #5,D7
00001B10                          1630      
00001B10  6100 0944               1631      BSR     BITMASK
00001B14                          1632      
00001B14  CC82                    1633      AND.L   D2,D6
00001B16                          1634      
00001B16  0C46 0020               1635      CMPI    #%0000000000100000,D6   *is it a data reg?
00001B1A  6700 0074               1636      BEQ     OP1110DATAREG
00001B1E                          1637      
00001B1E  43F9 00002543           1638      LEA     IMD,A1              * formatting
00001B24  103C 000E               1639      MOVE.B  #14,D0              * Trap #14 prints out pound #
00001B28  4E4F                    1640      TRAP    #15                 * Perform Trap #14
00001B2A                          1641      
00001B2A  7C09                    1642      MOVE.L  #9,D6
00001B2C  7E0B                    1643      MOVE.L  #11,D7
00001B2E                          1644      
00001B2E  6100 0926               1645      BSR     BITMASK
00001B32                          1646      
00001B32  CC82                    1647      AND.L   D2,D6
00001B34                          1648      
00001B34  0C46 0000               1649      CMPI    #0,D6 * special case, if zero print #8 not #0
00001B38  6700 002E               1650      BEQ     OP1110IMMEIGHT
00001B3C                          1651      
00001B3C  E08E                    1652      LSR.L   #8,D6
00001B3E  E28E                    1653      LSR.L   #1,D6
00001B40                          1654      
00001B40  2206                    1655      MOVE.L  D6,D1              * formatting
00001B42  103C 0003               1656      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001B46  4E4F                    1657      TRAP    #15                * Perform Trap #14
00001B48                          1658      
00001B48  43F9 00002545           1659      LEA     COMMA,A1            * formatting
00001B4E  103C 000E               1660      MOVE.B  #14,D0              * Trap #14 prints out comma
00001B52  4E4F                    1661      TRAP    #15                 * Perform Trap #1
00001B54                          1662      
00001B54                          1663      * in order to use the eahlpers, we need to do some bit manipulation
00001B54                          1664      * clearing the bits below lets our helper know that the mode is Dn
00001B54  0882 0003               1665      BCLR    #3,D2
00001B58  0882 0004               1666      BCLR    #4,D2
00001B5C  0882 0005               1667      BCLR    #5,D2
00001B60                          1668      
00001B60  6100 00B4               1669      BSR     EAHELPER05
00001B64                          1670      
00001B64  6000 0056               1671      BRA     ENDOP1110
00001B68                          1672      
00001B68                          1673  OP1110IMMEIGHT
00001B68                          1674  
00001B68  7208                    1675      MOVE.L  #8,D1              * formatting
00001B6A  103C 0003               1676      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001B6E  4E4F                    1677      TRAP    #15                * Perform Trap #14
00001B70                          1678      
00001B70  43F9 00002545           1679      LEA     COMMA,A1            * formatting
00001B76  103C 000E               1680      MOVE.B  #14,D0              * Trap #14 prints out comma
00001B7A  4E4F                    1681      TRAP    #15                 * Perform Trap #1
00001B7C                          1682      
00001B7C                          1683      * in order to use the eahlpers, we need to do some bit manipulation
00001B7C                          1684      * clearing the bits below lets our helper know that the mode is Dn
00001B7C  0882 0003               1685      BCLR    #3,D2
00001B80  0882 0004               1686      BCLR    #4,D2
00001B84  0882 0005               1687      BCLR    #5,D2
00001B88                          1688      
00001B88  6100 008C               1689      BSR     EAHELPER05
00001B8C                          1690      
00001B8C  6000 002E               1691      BRA     ENDOP1110
00001B90                          1692  
00001B90                          1693  OP1110DATAREG
00001B90                          1694  
00001B90                          1695      * in order to use the eahlpers, we need to do some bit manipulation
00001B90                          1696      * clearing the bits below lets our helper know that the mode is Dn
00001B90  0882 0003               1697      BCLR    #3,D2
00001B94  0882 0004               1698      BCLR    #4,D2
00001B98  0882 0005               1699      BCLR    #5,D2
00001B9C  0882 0006               1700      BCLR    #6,D2
00001BA0  0882 0007               1701      BCLR    #7,D2
00001BA4  0882 0008               1702      BCLR    #8,D2
00001BA8                          1703      
00001BA8  6100 002A               1704      BSR     EAHELPER611
00001BAC                          1705      
00001BAC  43F9 00002545           1706      LEA     COMMA,A1            * formatting
00001BB2  103C 000E               1707      MOVE.B  #14,D0              * Trap #14 prints out comma
00001BB6  4E4F                    1708      TRAP    #15                 * Perform Trap #14
00001BB8                          1709      
00001BB8  6100 005C               1710      BSR     EAHELPER05
00001BBC                          1711  
00001BBC                          1712  ENDOP1110
00001BBC                          1713  
00001BBC  43F9 0000249A           1714      LEA     NEWLINE,A1          * formatting
00001BC2  103C 000E               1715      MOVE.B  #14,D0              * Trap #14 prints out a new line
00001BC6  4E4F                    1716      TRAP    #15                 * Perform Trap #14
00001BC8                          1717      
00001BC8  4C9F 03FF               1718      MOVEM   (A7)+,D0-D7/A0-A1   * Caller saved
00001BCC  4E75                    1719      RTS
00001BCE                          1720  
00001BCE                          1721  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001BCE                          1722  *-----------------------------------------------------------------------------
00001BCE                          1723  
00001BCE                          1724  
00001BCE                          1725  
00001BCE                          1726  *-----------------------------------------------------------------------------
00001BCE                          1727  *-----------------------------------------------------------------------------
00001BCE                          1728  * NAME: OP_1111   ()
00001BCE                          1729  * DESCRIPTION:    a
00001BCE                          1730  * PRE-CONDITION:  b
00001BCE                          1731  * POST-CONDITION: c
00001BCE                          1732  * REGISTERS:      d
00001BCE                          1733  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001BCE                          1734  OP1111
00001BCE                          1735  
00001BCE  6100 061C               1736      BSR     UNKNOWNOP
00001BD2  4E75                    1737      RTS
00001BD4                          1738  
00001BD4                          1739  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001BD4                          1740  *-----------------------------------------------------------------------------
00001BD4                          1741  
00001BD4                          1742  
00001BD4                          1743  
00001BD4                          1744  *-----------------------------------------------------------------------------
00001BD4                          1745  *-----------------------------------------------------------------------------
00001BD4                          1746  * NAME:           EAHELPER611
00001BD4                          1747  * DESCRIPTION:    a
00001BD4                          1748  * PRE-CONDITION:  D2 contains the instruction to print modes for.
00001BD4                          1749  *                 D5 contains the size of the data to be printed
00001BD4                          1750  * POST-CONDITION: Determines if mode is direct, if it's not, passes D2 to 
00001BD4                          1751  *                 EAHELPER05 to print.
00001BD4                          1752  * REGISTERS:      a
00001BD4                          1753  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001BD4                          1754  EAHELPER611
00001BD4  48A7 FFC0               1755      MOVEM  D0-D7/A0-A1,-(A7)    * Push values onto stack
00001BD8                          1756      
00001BD8  3C3C 0006               1757      MOVE.W  #6, D6              * Prep lower value for bitmask
00001BDC  3E3C 0008               1758      MOVE.W  #8, D7              * Prep upper value for bitmask
00001BE0  6100 0874               1759      BSR     BITMASK             * Finalize bitmask setup
00001BE4  CC42                    1760      AND     D2,D6               * Apply bitmask
00001BE6                          1761      
00001BE6                          1762      * to move the mode where EAHELPER50 can process it
00001BE6  7C06                    1763      MOVE.L  #6,D6       * Prep lower value of bitmask
00001BE8  7E08                    1764      MOVE.L  #8,D7       * Prep upper value of bitmask
00001BEA  6100 086A               1765      BSR     BITMASK     * Create bitmask
00001BEE  CC42                    1766      AND     D2,D6       * Apply bitmask
00001BF0                          1767      
00001BF0  4243                    1768      CLR     D3      * prep D3 to store values
00001BF2  3606                    1769      MOVE.W  D6,D3   * store bitmasked value in D3
00001BF4  E64B                    1770      LSR     #3,D3   * move bits 6-8 to 3-5
00001BF6                          1771      
00001BF6                          1772      * to move the register where EAHELPER50 can process it
00001BF6  7C09                    1773      MOVE.L  #9,D6   * Prep lower value for bitmask
00001BF8  7E0B                    1774      MOVE.L  #11,D7  * Prep upper value for bitmask
00001BFA  6100 085A               1775      BSR     BITMASK * create bitmask
00001BFE  CC42                    1776      AND     D2,D6   * apply bitmask
00001C00                          1777      
00001C00  4244                    1778      CLR     D4      * prep D3 to store values
00001C02  3806                    1779      MOVE.W  D6,D4   * store bitmasked value in D3
00001C04                          1780      
00001C04  E04C                    1781      LSR     #8,D4   * move bits 9-11 to 0-2
00001C06  E24C                    1782      LSR     #1,D4   * move bits 9-11 to 0-2
00001C08                          1783    
00001C08  8684                    1784      OR.L    D4,D3   * combind the register and mode
00001C0A  2403                    1785      MOVE.L  D3,D2   * put the result in D2 so EAHELPER05 can process it
00001C0C                          1786      
00001C0C  6100 0008               1787      BSR     EAHELPER05
00001C10                          1788      
00001C10                          1789  ENDEAHELPER611
00001C10                          1790      
00001C10  4C9F 03FF               1791      MOVEM  (A7)+,D0-D7/A0-A1    * Revert back
00001C14  4E75                    1792      RTS
00001C16                          1793  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001C16                          1794  *-----------------------------------------------------------------------------
00001C16                          1795  
00001C16                          1796  
00001C16                          1797  
00001C16                          1798  *-----------------------------------------------------------------------------
00001C16                          1799  *-----------------------------------------------------------------------------
00001C16                          1800  * NAME:           EAHELPER05
00001C16                          1801  * DESCRIPTION:    a
00001C16                          1802  * PRE-CONDITION:  D2 contains the instruction to print modes for. Only call
00001C16                          1803  *                 this sub-routine helper for operations that only have one
00001C16                          1804  *                 mode register.
00001C16                          1805  * POST-CONDITION: Determines mode, passes D2 to REGHELPER to print.
00001C16                          1806  * REGISTERS:      a
00001C16                          1807  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001C16                          1808  EAHELPER05
00001C16                          1809      * todo: add code for printing immediate values
00001C16                          1810      
00001C16  48A7 FFC0               1811      MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001C1A                          1812      
00001C1A  7C03                    1813      MOVE.L  #3,D6
00001C1C  7E05                    1814      MOVE.L  #5,D7
00001C1E                          1815      
00001C1E  6100 0836               1816      BSR     BITMASK * generate a bitmask to identify the mode
00001C22                          1817      
00001C22  CC42                    1818      AND     D2,D6   * mask off the parts of D2 we don't need
00001C24                          1819      
00001C24  2A06                    1820      MOVE.L  D6,D5   * store the 3-5 bitmask for later use
00001C26                          1821      
00001C26  0C46 0000               1822      CMPI    #%0000000000000000,D6 * is it data register direct?
00001C2A  6600 000A               1823      BNE     NOTDATAREG
00001C2E                          1824      
00001C2E  6100 013C               1825      BSR     MODE_DN
00001C32                          1826       
00001C32  6000 0132               1827      BRA     ENDEAHELPER05
00001C36                          1828      
00001C36                          1829  NOTDATAREG * address register direct
00001C36                          1830      
00001C36  0C46 0008               1831      CMPI    #%0000000000001000,D6 * is it address register direct?
00001C3A  6600 000A               1832      BNE     NOTADRDIRECT
00001C3E                          1833      
00001C3E  6100 022C               1834      BSR     MODE_AN * simply prints out the address register
00001C42                          1835       
00001C42  6000 0122               1836      BRA     ENDEAHELPER05
00001C46                          1837      
00001C46                          1838  NOTADRDIRECT * address register indirect
00001C46                          1839          
00001C46  0C46 0010               1840      CMPI    #%0000000000010000,D6 * is it address register indirect?
00001C4A  6600 0022               1841      BNE     NOTADRINDIRECT
00001C4E                          1842      
00001C4E  43F9 00002547           1843      LEA     OBRACK,A1       * Load '('
00001C54  303C 000E               1844      MOVE.W  #14,D0          * Trap #14 to display message
00001C58  4E4F                    1845      TRAP    #15             * Perform #14
00001C5A                          1846          
00001C5A                          1847  
00001C5A  6100 0210               1848      BSR     MODE_AN * print out an address register
00001C5E                          1849      
00001C5E  43F9 00002549           1850      LEA     CBRACK,A1       * Load ')'
00001C64  303C 000E               1851      MOVE.W  #14,D0          * Trap #14 to display message
00001C68  4E4F                    1852      TRAP    #15             * Perform #14
00001C6A                          1853       
00001C6A  6000 00FA               1854      BRA     ENDEAHELPER05
00001C6E                          1855      
00001C6E                          1856  NOTADRINDIRECT * address register indirect, post increment
00001C6E                          1857      
00001C6E  0C46 0018               1858      CMPI    #%0000000000011000,D6 * is it address register indirect post increment?
00001C72  6600 002E               1859      BNE     NOTADRINDIRECTPOST
00001C76                          1860      
00001C76  43F9 00002547           1861      LEA     OBRACK,A1       * Load '('
00001C7C  303C 000E               1862      MOVE.W  #14,D0          * Trap #14 to display message
00001C80  4E4F                    1863      TRAP    #15             * Perform #14
00001C82                          1864          
00001C82                          1865  
00001C82  6100 01E8               1866      BSR     MODE_AN * print out an address register
00001C86                          1867      
00001C86  43F9 00002549           1868      LEA     CBRACK,A1       * Load ')'
00001C8C  303C 000E               1869      MOVE.W  #14,D0          * Trap #14 to display message
00001C90  4E4F                    1870      TRAP    #15             * Perform #14
00001C92                          1871      
00001C92  43F9 0000254B           1872      LEA     PLUS,A1       * Load '+'
00001C98  303C 000E               1873      MOVE.W  #14,D0          * Trap #14 to display message
00001C9C  4E4F                    1874      TRAP    #15             * Perform #14
00001C9E                          1875       
00001C9E  6000 00C6               1876      BRA     ENDEAHELPER05
00001CA2                          1877      
00001CA2                          1878  NOTADRINDIRECTPOST * address register indirect, pre decrement
00001CA2                          1879      
00001CA2  0C46 0020               1880      CMPI    #%0000000000100000,D6 * is it address register indirect pre decrement?
00001CA6  6600 002E               1881      BNE     NOTADRINDIRECTPRE
00001CAA                          1882      
00001CAA  43F9 0000254D           1883      LEA     MINUS,A1       * Load '-'
00001CB0  303C 000E               1884      MOVE.W  #14,D0          * Trap #14 to display message
00001CB4  4E4F                    1885      TRAP    #15             * Perform #14
00001CB6                          1886      
00001CB6  43F9 00002547           1887      LEA     OBRACK,A1       * Load '('
00001CBC  303C 000E               1888      MOVE.W  #14,D0          * Trap #14 to display message
00001CC0  4E4F                    1889      TRAP    #15             * Perform #14
00001CC2                          1890          
00001CC2                          1891  
00001CC2  6100 01A8               1892      BSR     MODE_AN * print out an address register
00001CC6                          1893      
00001CC6  43F9 00002549           1894      LEA     CBRACK,A1       * Load ')'
00001CCC  303C 000E               1895      MOVE.W  #14,D0          * Trap #14 to display message
00001CD0  4E4F                    1896      TRAP    #15             * Perform #14
00001CD2                          1897       
00001CD2  6000 0092               1898      BRA     ENDEAHELPER05
00001CD6                          1899  
00001CD6                          1900  NOTADRINDIRECTPRE * if none of the previous cases are true, it is a mode not supported by our decompiler
00001CD6                          1901  
00001CD6  0C46 0038               1902      CMPI    #%0000000000111000,D6 * is it immediate?
00001CDA  6600 0086               1903      BNE     NOTIMMEDIATE
00001CDE                          1904  
00001CDE  0C43 0001               1905      CMPI    #1,D3 * is it a byte?
00001CE2  6600 0028               1906      BNE     NOTIMMBYTE
00001CE6                          1907      
00001CE6  43F9 00002543           1908      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001CEC  103C 000E               1909      MOVE.B  #14,D0
00001CF0  4E4F                    1910      TRAP    #15
00001CF2                          1911      
00001CF2  3C3C 0000               1912      MOVE.W  #0, D6              * Prep lower value for bitmask
00001CF6  3E3C 0007               1913      MOVE.W  #7, D7              * Prep upper value for bitmask
00001CFA  6100 075A               1914      BSR     BITMASK             * Finalize bitmask setup
00001CFE                          1915          
00001CFE  321A                    1916      MOVE.W  (A2)+,D1
00001D00                          1917      
00001D00  C286                    1918      AND.L     D6,D1
00001D02                          1919          
00001D02  103C 0003               1920      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001D06  4E4F                    1921      TRAP    #15      * Perform Trap #3
00001D08                          1922      
00001D08  6000 005C               1923      BRA     ENDEAHELPER05
00001D0C                          1924  
00001D0C                          1925  NOTIMMBYTE
00001D0C                          1926      
00001D0C  0C43 0002               1927      CMPI    #2,D3 * is it a word?
00001D10  6600 0028               1928      BNE     NOTIMMWORD
00001D14                          1929      
00001D14  43F9 00002543           1930      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001D1A  103C 000E               1931      MOVE.B  #14,D0
00001D1E  4E4F                    1932      TRAP    #15
00001D20                          1933      
00001D20  3C3C 0000               1934      MOVE.W  #0, D6              * Prep lower value for bitmask
00001D24  3E3C 000F               1935      MOVE.W  #15, D7             * Prep upper value for bitmask
00001D28  6100 072C               1936      BSR     BITMASK             * Finalize bitmask setup
00001D2C                          1937          
00001D2C  321A                    1938      MOVE.W  (A2)+,D1
00001D2E                          1939      
00001D2E  C286                    1940      AND.L     D6,D1               * Apply bitmask
00001D30                          1941          
00001D30  103C 0003               1942      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001D34  4E4F                    1943      TRAP    #15      * Perform Trap #3
00001D36                          1944      
00001D36  6000 002E               1945      BRA     ENDEAHELPER05
00001D3A                          1946      
00001D3A                          1947  NOTIMMWORD
00001D3A  0C43 0003               1948      CMPI    #3,D3 * is it a long?
00001D3E  6600 0022               1949      BNE     NOTIMMEDIATE
00001D42                          1950      
00001D42  43F9 00002543           1951      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001D48  103C 000E               1952      MOVE.B  #14,D0
00001D4C  4E4F                    1953      TRAP    #15
00001D4E                          1954          
00001D4E  221A                    1955      MOVE.L  (A2)+,D1
00001D50                          1956          
00001D50  103C 0003               1957      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001D54  4E4F                    1958      TRAP    #15      * Perform Trap #3
00001D56                          1959      
00001D56  321A                    1960      MOVE.W  (A2)+,D1
00001D58                          1961          
00001D58  103C 0003               1962      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001D5C  4E4F                    1963      TRAP    #15      * Perform Trap #3
00001D5E                          1964      
00001D5E  6000 0006               1965      BRA     ENDEAHELPER05
00001D62                          1966  
00001D62                          1967  NOTIMMEDIATE    
00001D62                          1968  
00001D62                          1969  
00001D62  6100 0488               1970      BSR     UNKNOWNOP
00001D66                          1971      
00001D66                          1972  ENDEAHELPER05
00001D66  4C9F 03FF               1973      MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001D6A  4E75                    1974      RTS
00001D6C                          1975  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001D6C                          1976  *-----------------------------------------------------------------------------
00001D6C                          1977  
00001D6C                          1978  
00001D6C                          1979  
00001D6C                          1980  *-----------------------------------------------------------------------------
00001D6C                          1981  *-----------------------------------------------------------------------------
00001D6C                          1982  * NAME:           MODE_DN
00001D6C                          1983  * DESCRIPTION:    Generalize the EA part of the project.
00001D6C                          1984  * PRE-CONDITION:  The mode must have been correctly identified. All modes
00001D6C                          1985  *                 must be called by RTS.
00001D6C                          1986  * POST-CONDITION: After the EA, the entire op will head back to the BSR that
00001D6C                          1987  *                 called it.
00001D6C                          1988  * REGISTERS:      a
00001D6C                          1989  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001D6C                          1990  * ---> Dn
00001D6C                          1991  MODE_DN
00001D6C  48A7 FFC0               1992          MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001D70                          1993  
00001D70  3C3C 0000               1994          MOVE.W  #0, D6              * Prep lower value for bitmask
00001D74  3E3C 0002               1995          MOVE.W  #2, D7              * Prep upper value for bitmask
00001D78  6100 06DC               1996          BSR     BITMASK             * Finalize bitmask setup
00001D7C  CC42                    1997          AND     D2,D6               * Apply bitmask
00001D7E                          1998          
00001D7E  0C46 0000               1999          CMPI    #%000000000000000, D6   * Data Register D0?
00001D82  6600 000A               2000          BNE     NOTD0
00001D86                          2001          
00001D86  6100 0074               2002          BSR     PRINTD0
00001D8A  6000 006A               2003          BRA     ENDMODE_DN
00001D8E                          2004  NOTD0      
00001D8E  0C46 0001               2005          CMPI    #%000000000000001, D6   * Data Register D1?
00001D92  6600 000A               2006          BNE     NOTD1
00001D96                          2007          
00001D96  6100 0072               2008          BSR     PRINTD1
00001D9A  6000 005A               2009          BRA     ENDMODE_DN
00001D9E                          2010  NOTD1
00001D9E  0C46 0002               2011          CMPI    #%000000000000010, D6   * Data Register D2?
00001DA2  6600 000A               2012          BNE     NOTD2
00001DA6                          2013          
00001DA6  6100 0070               2014          BSR     PRINTD2
00001DAA  6000 004A               2015          BRA     ENDMODE_DN
00001DAE                          2016  NOTD2
00001DAE  0C46 0003               2017          CMPI    #%000000000000011, D6   * Data Register D3?
00001DB2  6600 000A               2018          BNE     NOTD3
00001DB6                          2019          
00001DB6  6100 006E               2020          BSR     PRINTD3
00001DBA  6000 003A               2021          BRA     ENDMODE_DN
00001DBE                          2022  NOTD3
00001DBE  0C46 0004               2023          CMPI    #%000000000000100, D6   * Data Register D4?
00001DC2  6600 000A               2024          BNE     NOTD4
00001DC6                          2025          
00001DC6  6100 006C               2026          BSR     PRINTD4
00001DCA  6000 002A               2027          BRA     ENDMODE_DN
00001DCE                          2028  NOTD4
00001DCE  0C46 0005               2029          CMPI    #%000000000000101, D6   * Data Register D5?
00001DD2  6600 000A               2030          BNE     NOTD5
00001DD6                          2031          
00001DD6  6100 006A               2032          BSR     PRINTD5
00001DDA  6000 001A               2033          BRA     ENDMODE_DN
00001DDE                          2034  NOTD5
00001DDE  0C46 0006               2035          CMPI    #%000000000000110, D6   * Data Register D6?
00001DE2  6600 000A               2036          BNE     NOTD6
00001DE6                          2037          
00001DE6  6100 0068               2038          BSR     PRINTD6
00001DEA  6000 000A               2039          BRA     ENDMODE_DN
00001DEE                          2040  NOTD6
00001DEE  6100 006E               2041          BSR     PRINTD7
00001DF2  6000 0002               2042          BRA     ENDMODE_DN
00001DF6                          2043          
00001DF6                          2044  ENDMODE_DN
00001DF6  4C9F 03FF               2045          MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001DFA  4E75                    2046          RTS
00001DFC                          2047  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001DFC                          2048  *-----------------------------------------------------------------------------
00001DFC                          2049  
00001DFC                          2050  
00001DFC                          2051  
00001DFC                          2052  *-----------------------------------------------------------------------------
00001DFC                          2053  *-----------------------------------------------------------------------------
00001DFC                          2054  * NAME:           PRINTD0
00001DFC                          2055  * DESCRIPTION:    Simply prints D0, D1, ..., up to D7.
00001DFC                          2056  * PRE-CONDITION:  a
00001DFC                          2057  * POST-CONDITION: a
00001DFC                          2058  * REGISTERS:      a
00001DFC                          2059  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001DFC                          2060  PRINTD0
00001DFC  43F9 00002577           2061          LEA     __D0, A1        * Load 'D0'
00001E02  103C 000E               2062          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E06  4E4F                    2063          TRAP    #15             * Perform Trap #14
00001E08  4E75                    2064          RTS
00001E0A                          2065  PRINTD1
00001E0A  43F9 0000257A           2066          LEA     __D1, A1        * Load 'D1'
00001E10  103C 000E               2067          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E14  4E4F                    2068          TRAP    #15             * Perform Trap #14
00001E16  4E75                    2069          RTS      
00001E18                          2070  PRINTD2
00001E18  43F9 0000257D           2071          LEA     __D2, A1        * Load 'D2'
00001E1E  103C 000E               2072          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E22  4E4F                    2073          TRAP    #15             * Perform Trap #14
00001E24  4E75                    2074          RTS      
00001E26                          2075  PRINTD3
00001E26  43F9 00002580           2076          LEA     __D3, A1        * Load 'D3'
00001E2C  103C 000E               2077          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E30  4E4F                    2078          TRAP    #15             * Perform Trap #14
00001E32  4E75                    2079          RTS      
00001E34                          2080  PRINTD4
00001E34  43F9 00002583           2081          LEA     __D4, A1        * Load 'D4'
00001E3A  103C 000E               2082          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E3E  4E4F                    2083          TRAP    #15             * Perform Trap #14
00001E40  4E75                    2084          RTS       
00001E42                          2085  PRINTD5
00001E42  43F9 00002586           2086          LEA     __D5, A1        * Load 'D5'
00001E48  103C 000E               2087          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E4C  4E4F                    2088          TRAP    #15             * Perform Trap #14
00001E4E  4E75                    2089          RTS      
00001E50                          2090  PRINTD6
00001E50  43F9 00002589           2091          LEA     __D6, A1        * Load 'D6'
00001E56  103C 000E               2092          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E5A  4E4F                    2093          TRAP    #15             * Perform Trap #14
00001E5C  4E75                    2094          RTS
00001E5E                          2095  PRINTD7
00001E5E  43F9 0000258C           2096          LEA     __D7, A1        * Load 'D7'
00001E64  103C 000E               2097          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E68  4E4F                    2098          TRAP    #15             * Perform Trap #14
00001E6A  4E75                    2099          RTS
00001E6C                          2100  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001E6C                          2101  *-----------------------------------------------------------------------------
00001E6C                          2102  
00001E6C                          2103  
00001E6C                          2104  
00001E6C                          2105  *-----------------------------------------------------------------------------
00001E6C                          2106  *-----------------------------------------------------------------------------
00001E6C                          2107  * NAME:           MODE_AN
00001E6C                          2108  * DESCRIPTION:    Simply chooses to print A0-A7.
00001E6C                          2109  * PRE-CONDITION:  a
00001E6C                          2110  * POST-CONDITION: a
00001E6C                          2111  * REGISTERS:      a
00001E6C                          2112  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001E6C                          2113  MODE_AN
00001E6C  48A7 FFC0               2114          MOVEM   D0-D7/A0-A1,-(A7)   * Save information
00001E70                          2115  
00001E70  3C3C 0000               2116          MOVE.W  #0, D6              * Prep lower value for bitmask
00001E74  3E3C 0002               2117          MOVE.W  #2, D7              * Prep upper value for bitmask
00001E78  6100 05DC               2118          BSR     BITMASK             * Finalize bitmask setup
00001E7C  CC42                    2119          AND     D2,D6               * Apply bitmask
00001E7E                          2120          
00001E7E  0C46 0000               2121          CMPI    #%000000000000000, D6   * Address Register A0?
00001E82  6600 000A               2122          BNE     NOTA0
00001E86                          2123          
00001E86  6100 0074               2124          BSR     PRINTA0
00001E8A                          2125          
00001E8A  6000 006A               2126          BRA     ENDMODE_AN
00001E8E                          2127  NOTA0      
00001E8E  0C46 0001               2128          CMPI    #%000000000000001, D6   * Address Register A1?
00001E92  6600 000A               2129          BNE     NOTA1
00001E96                          2130          
00001E96  6100 0072               2131          BSR     PRINTA1
00001E9A                          2132          
00001E9A  6000 005A               2133          BRA     ENDMODE_AN
00001E9E                          2134  NOTA1
00001E9E  0C46 0002               2135          CMPI    #%000000000000010, D6   * Address Register A2?
00001EA2  6600 000A               2136          BNE     NOTA2
00001EA6                          2137          
00001EA6  6100 0070               2138          BSR     PRINTA2
00001EAA                          2139          
00001EAA  6000 004A               2140          BRA     ENDMODE_AN
00001EAE                          2141  NOTA2
00001EAE  0C46 0003               2142          CMPI    #%000000000000011, D6   * Address Register A3?
00001EB2  6600 000A               2143          BNE     NOTA3
00001EB6                          2144          
00001EB6  6100 006E               2145          BSR     PRINTA3
00001EBA                          2146          
00001EBA  6000 003A               2147          BRA     ENDMODE_AN
00001EBE                          2148  NOTA3
00001EBE  0C46 0004               2149          CMPI    #%000000000000100, D6   * Address Register A4?
00001EC2  6600 000A               2150          BNE     NOTA4
00001EC6                          2151          
00001EC6  6100 006C               2152          BSR     PRINTA4
00001ECA                          2153          
00001ECA  6000 002A               2154          BRA     ENDMODE_AN
00001ECE                          2155  NOTA4
00001ECE  0C46 0005               2156          CMPI    #%000000000000101, D6   * Address Register A5?
00001ED2  6600 000A               2157          BNE     NOTA5
00001ED6                          2158          
00001ED6  6100 006A               2159          BSR     PRINTA5
00001EDA                          2160          
00001EDA  6000 001A               2161          BRA     ENDMODE_AN
00001EDE                          2162  NOTA5
00001EDE  0C46 0006               2163          CMPI    #%000000000000110, D6   * Address Register A6?
00001EE2  6600 000A               2164          BNE     NOTA6
00001EE6                          2165          
00001EE6  6100 0068               2166          BSR     PRINTA6
00001EEA                          2167          
00001EEA  6000 000A               2168          BRA     ENDMODE_AN
00001EEE                          2169  NOTA6
00001EEE  6100 006E               2170          BSR     PRINTA7
00001EF2                          2171          
00001EF2  6000 0002               2172          BRA     ENDMODE_AN
00001EF6                          2173  ENDMODE_AN
00001EF6  4C9F 03FF               2174          MOVEM   (A7)+,D0-D7/A0-A1   * Restore registers
00001EFA  4E75                    2175          RTS
00001EFC                          2176  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001EFC                          2177  *-----------------------------------------------------------------------------
00001EFC                          2178  
00001EFC                          2179  
00001EFC                          2180  
00001EFC                          2181  *-----------------------------------------------------------------------------
00001EFC                          2182  *-----------------------------------------------------------------------------
00001EFC                          2183  * NAME:           PRINTA0
00001EFC                          2184  * DESCRIPTION:    Simply print out the address register.
00001EFC                          2185  * PRE-CONDITION:  a
00001EFC                          2186  * POST-CONDITION: a
00001EFC                          2187  * REGISTERS:      a
00001EFC                          2188  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001EFC                          2189  PRINTA0
00001EFC  43F9 0000255F           2190          LEA     __A0, A1        * Load 'A0'
00001F02  103C 000E               2191          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F06  4E4F                    2192          TRAP    #15             * Perform Trap #14
00001F08  4E75                    2193          RTS
00001F0A                          2194  
00001F0A                          2195  PRINTA1
00001F0A  43F9 00002562           2196          LEA     __A1, A1        * Load 'A1'
00001F10  103C 000E               2197          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F14  4E4F                    2198          TRAP    #15             * Perform Trap #14
00001F16  4E75                    2199          RTS
00001F18                          2200          
00001F18                          2201  PRINTA2
00001F18  43F9 00002565           2202          LEA     __A2, A1        * Load 'A2'
00001F1E  103C 000E               2203          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F22  4E4F                    2204          TRAP    #15             * Perform Trap #14
00001F24  4E75                    2205          RTS
00001F26                          2206  
00001F26                          2207  PRINTA3
00001F26  43F9 00002568           2208          LEA     __A3, A1        * Load 'A3'
00001F2C  103C 000E               2209          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F30  4E4F                    2210          TRAP    #15             * Perform Trap #14
00001F32  4E75                    2211          RTS
00001F34                          2212  
00001F34                          2213  PRINTA4
00001F34  43F9 0000256B           2214          LEA     __A4, A1        * Load 'A4'
00001F3A  103C 000E               2215          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F3E  4E4F                    2216          TRAP    #15             * Perform Trap #14
00001F40  4E75                    2217          RTS
00001F42                          2218  
00001F42                          2219  PRINTA5
00001F42  43F9 0000256E           2220          LEA     __A5, A1        * Load 'A5'
00001F48  103C 000E               2221          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F4C  4E4F                    2222          TRAP    #15             * Perform Trap #14
00001F4E  4E75                    2223          RTS
00001F50                          2224  
00001F50                          2225  PRINTA6
00001F50  43F9 00002571           2226          LEA     __A6, A1        * Load 'A6'
00001F56  103C 000E               2227          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F5A  4E4F                    2228          TRAP    #15             * Perform Trap #14
00001F5C  4E75                    2229          RTS
00001F5E                          2230  
00001F5E                          2231  PRINTA7
00001F5E  43F9 00002574           2232          LEA     __A7, A1        * Load 'A7'
00001F64  103C 000E               2233          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F68  4E4F                    2234          TRAP    #15             * Perform Trap #14
00001F6A  4E75                    2235          RTS
00001F6C                          2236  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001F6C                          2237  *-----------------------------------------------------------------------------
00001F6C                          2238  
00001F6C                          2239  
00001F6C                          2240  
00001F6C                          2241  *-----------------------------------------------------------------------------
00001F6C                          2242  *-----------------------------------------------------------------------------
00001F6C                          2243  * NAME:           SIZE67
00001F6C                          2244  * DESCRIPTION:    Called if the size is stored in bits 6 to 7.
00001F6C                          2245  * PRE-CONDITION:  a
00001F6C                          2246  * POST-CONDITION: a
00001F6C                          2247  * REGISTERS:      a
00001F6C                          2248  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001F6C                          2249  SIZE67
00001F6C  48A7 FFFE               2250          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
00001F70  3C3C 0006               2251          MOVE.W  #6, D6              * Prep lower value for bitmask
00001F74  3E3C 0007               2252          MOVE.W  #7, D7              * Prep upper value for bitmask
00001F78  6100 04DC               2253          BSR     BITMASK             * Finalize bitmask setup
00001F7C  CC42                    2254          AND     D2,D6               * Apply bitmask     
00001F7E                          2255  
00001F7E  0C46 0000               2256          CMPI    #%0000000000000000, D6   * is it a BYTE?
00001F82  6600 000A               2257          BNE     NOT67BYTE
00001F86                          2258          
00001F86  6100 0080               2259          BSR     PRINTBYTE               * Branch to handle BYTE sizes
00001F8A  6000 001E               2260          BRA     END67
00001F8E                          2261  NOT67BYTE        
00001F8E  0C46 0040               2262          CMPI    #%0000000001000000, D6   * is it a WORD?
00001F92  6600 000A               2263          BNE     NOT67WORD
00001F96                          2264          
00001F96  6100 007E               2265          BSR     PRINTWORD               * Branch to handle WORD sizes
00001F9A  6000 000E               2266          BRA     END67
00001F9E                          2267  NOT67WORD
00001F9E  0C46 0080               2268          CMPI    #%0000000010000000, D6   * is it a LONG?
00001FA2  6600 0006               2269          BNE     END67
00001FA6                          2270          
00001FA6  6100 007C               2271          BSR     PRINTLONG               * Branch to handle LONG sizes
00001FAA                          2272  END67
00001FAA  4C9F 7FFF               2273          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
00001FAE  4E75                    2274          RTS                             * Return. Size handling is finished.
00001FB0                          2275  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001FB0                          2276  *-----------------------------------------------------------------------------
00001FB0                          2277  
00001FB0                          2278  
00001FB0                          2279  
00001FB0                          2280  *-----------------------------------------------------------------------------
00001FB0                          2281  *-----------------------------------------------------------------------------
00001FB0                          2282  * NAME:           SIZE68
00001FB0                          2283  * DESCRIPTION:    Called if the size is stored in bits 6 to 8.
00001FB0                          2284  * PRE-CONDITION:  a
00001FB0                          2285  * POST-CONDITION: a
00001FB0                          2286  * REGISTERS:      a
00001FB0                          2287  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001FB0                          2288  SIZE68
00001FB0                          2289          * finish later, need to follow the same format as SIZE67
00001FB0                          2290          
00001FB0                          2291          
00001FB0  48A7 FFFE               2292          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
00001FB4  3C3C 0006               2293          MOVE.W  #6, D6              * Prep lower value for bitmask
00001FB8  3E3C 0008               2294          MOVE.W  #8, D7              * Prep upper value for bitmask
00001FBC  6100 0498               2295          BSR     BITMASK             * Finalize bitmask setup
00001FC0  CC42                    2296          AND     D2,D6               * Apply bitmask          
00001FC2                          2297          
00001FC2  0C46 0000               2298          CMPI    #%0000000000000000, D6   * is it a BYTE?
00001FC6  6100 0040               2299          BSR     PRINTBYTE               * Branch to handle BYTE sizes
00001FCA  0C46 0100               2300          CMPI    #%0000000100000000, D6   * is it a BYTE?
00001FCE  6100 0038               2301          BSR     PRINTBYTE               * Branch to handle BYTE sizes 
00001FD2                          2302        
00001FD2  0C46 0040               2303          CMPI    #%0000000001000000, D6   * is it a WORD?
00001FD6  6100 003E               2304          BSR     PRINTWORD               * Branch to handle BYTE sizes
00001FDA  0C46 0140               2305          CMPI    #%0000000101000000, D6   * is it a WORD?
00001FDE  6100 0036               2306          BSR     PRINTWORD               * Branch to handle BYTE sizes
00001FE2  0C46 00C0               2307          CMPI    #%0000000011000000, D6   * is it a WORD (ADDA)?
00001FE6  6100 002E               2308          BSR     PRINTWORD               * Branch to handle BYTE sizes
00001FEA                          2309  
00001FEA  0C46 0080               2310          CMPI    #%0000000010000000, D6   * is it a LONG?
00001FEE  6100 0034               2311          BSR     PRINTLONG               * Branch to handle BYTE sizes
00001FF2  0C46 0180               2312          CMPI    #%0000000110000000, D6   * is it a LONG?
00001FF6  6100 002C               2313          BSR     PRINTLONG               * Branch to handle BYTE sizes
00001FFA  0C46 01C0               2314          CMPI    #%0000000111000000, D6   * is it a LONG (ADDA)?
00001FFE  6100 0024               2315          BSR     PRINTLONG               * Branch to handle BYTE sizes
00002002                          2316  
00002002  4C9F 7FFF               2317          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
00002006  4E75                    2318          RTS                             * Return. Size handling is finished.
00002008                          2319  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002008                          2320  *-----------------------------------------------------------------------------
00002008                          2321  
00002008                          2322  
00002008                          2323  
00002008                          2324  *-----------------------------------------------------------------------------
00002008                          2325  *-----------------------------------------------------------------------------
00002008                          2326  * NAME:           PRINTBYTE
00002008                          2327  * DESCRIPTION:    a
00002008                          2328  * PRE-CONDITION:  a
00002008                          2329  * POST-CONDITION: a
00002008                          2330  * REGISTERS:      a
00002008                          2331  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002008                          2332  PRINTBYTE
00002008  43F9 00002553           2333          LEA     __B,A1      * Load '.B ' into A1
0000200E  103C 000E               2334          MOVE.B  #14,D0      * Trap #14 setup to print
00002012  4E4F                    2335          TRAP    #15         * Perform Trap #14
00002014  4E75                    2336          RTS                 * Return to SIZE67/SIZE68
00002016                          2337          
00002016                          2338  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002016                          2339  *-----------------------------------------------------------------------------
00002016                          2340  
00002016                          2341  
00002016                          2342  
00002016                          2343  *-----------------------------------------------------------------------------
00002016                          2344  *-----------------------------------------------------------------------------
00002016                          2345  * NAME:           PRINTWORD
00002016                          2346  * DESCRIPTION:    a
00002016                          2347  * PRE-CONDITION:  a
00002016                          2348  * POST-CONDITION: a
00002016                          2349  * REGISTERS:      a
00002016                          2350  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002016                          2351  PRINTWORD
00002016  43F9 00002557           2352          LEA     __W,A1      * Load '.W ' into A1
0000201C  103C 000E               2353          MOVE.B  #14,D0      * Trap #14 setup to print
00002020  4E4F                    2354          TRAP    #15         * Perform Trap #14
00002022  4E75                    2355          RTS                 * Return to SIZE67/SIZE68
00002024                          2356          
00002024                          2357  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002024                          2358  *-----------------------------------------------------------------------------
00002024                          2359  
00002024                          2360  
00002024                          2361  
00002024                          2362  *-----------------------------------------------------------------------------
00002024                          2363  *-----------------------------------------------------------------------------
00002024                          2364  * NAME:           PRINTLONG
00002024                          2365  * DESCRIPTION:    a
00002024                          2366  * PRE-CONDITION:  a
00002024                          2367  * POST-CONDITION: a
00002024                          2368  * REGISTERS:      a
00002024                          2369  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002024                          2370  PRINTLONG
00002024  43F9 0000255B           2371          LEA     __L,A1      * Load '.L ' into A1
0000202A  103C 000E               2372          MOVE.B  #14,D0      * Trap #14 setup to print
0000202E  4E4F                    2373          TRAP    #15         * Perform Trap #14
00002030  4E75                    2374          RTS                 * Return to SIZE67/SIZE68
00002032                          2375          
00002032                          2376  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002032                          2377  *-----------------------------------------------------------------------------
00002032                          2378  
00002032                          2379  
00002032                          2380  
00002032                          2381  *-----------------------------------------------------------------------------
00002032                          2382  *-----------------------------------------------------------------------------
00002032                          2383  * NAME:           MOVEMHELPERPOST
00002032                          2384  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
00002032                          2385  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
00002032                          2386  * POST-CONDITION: The registers being saved are printed
00002032                          2387  * REGISTERS:      A2
00002032                          2388  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002032                          2389  MOVEMHELPERPOST
00002032  48A7 FFFE               2390          MOVEM  D0-D7/A0-A6,-(A7)
00002036                          2391          
00002036  4285                    2392          CLR.L   D5  * to be used as a loop counter
00002038  4284                    2393          CLR.L   D4  * == 1 if we have printed any registers (for fencepost issue)
0000203A  4283                    2394          CLR.L   D3  * == 1 if we are in a range
0000203C  4286                    2395          CLR.L   D6  * == 1 if we have already printed the slash or dash
0000203E  4287                    2396          CLR.L   D7  * == counts the number of registers in a range
00002040  1C3C 0001               2397          MOVE.B  #1,D6 * to fix fencepost issue
00002044  4282                    2398          CLR.L   D2
00002046  3412                    2399          MOVE.W  (A2),D2
00002048                          2400          
00002048                          2401  DLOOP * loop to print out the data register portion of the addresses being saved
00002048                          2402  
00002048  E25A                    2403          ROR     #1,D2
0000204A  6500 0006               2404          BCS     DVALID
0000204E                          2405          
0000204E  6000 0064               2406          BRA     DINVALID
00002052                          2407          
00002052                          2408  DVALID
00002052  0C43 0000               2409          CMPI    #0,D3
00002056  6700 0020               2410          BEQ     DFORWARDVALID * we are not in a range
0000205A                          2411          
0000205A  5247                    2412          ADDI    #1,D7 *increment number of regs in range
0000205C                          2413          
0000205C  0C46 0001               2414          CMPI    #1,D6   *have we already printed a symbol?
00002060  6700 0086               2415          BEQ     DLOOPITER
00002064                          2416          
00002064  43F9 00002551           2417          LEA     DASH,A1    *print a dash
0000206A  103C 000E               2418          MOVE.B  #14,D0
0000206E  4E4F                    2419          TRAP    #15
00002070                          2420          
00002070  1C3C 0001               2421          MOVE.B  #1,D6 * indicates a symbol has been printed
00002074                          2422          
00002074  6000 0072               2423          BRA     DLOOPITER
00002078                          2424          
00002078                          2425  DFORWARDVALID
00002078                          2426          * not in a range yet, print
00002078                          2427          
00002078  0C44 0000               2428          CMPI    #0,D4
0000207C  6700 000E               2429          BEQ     DNOSLASH
00002080                          2430                  
00002080  43F9 0000254F           2431          LEA     SLASH,A1
00002086  103C 000E               2432          MOVE.B  #14,D0
0000208A  4E4F                    2433          TRAP    #15
0000208C                          2434          
0000208C                          2435  DNOSLASH
0000208C                          2436  
0000208C  183C 0001               2437          MOVE.B  #1,D4 * we have printed something, now slashes are fair game
00002090                          2438          
00002090  1C3C 0001               2439          MOVE.B  #1,D6   * we have printed a symbol
00002094                          2440          
00002094  43F9 00002539           2441          LEA     ASCII_D,A1
0000209A  103C 000E               2442          MOVE.B  #14,D0
0000209E  4E4F                    2443          TRAP    #15
000020A0                          2444          
000020A0  2205                    2445          MOVE.L  D5,D1
000020A2  103C 0003               2446          MOVE.B  #3,D0
000020A6  4E4F                    2447          TRAP    #15
000020A8                          2448  
000020A8  163C 0001               2449          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
000020AC  1C3C 0000               2450          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
000020B0                          2451          
000020B0  6000 0036               2452          BRA     DLOOPITER
000020B4                          2453  
000020B4                          2454  
000020B4                          2455  DINVALID
000020B4                          2456  
000020B4                          2457          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
000020B4                          2458          
000020B4  0C43 0001               2459          CMPI    #1,D3
000020B8  6600 002E               2460          BNE     DLOOPITER
000020BC                          2461          
000020BC  163C 0000               2462          MOVE.B  #0,D3
000020C0                          2463          
000020C0  0C47 0001               2464          CMPI    #1,D7
000020C4  6D00 0020               2465          BLT     DLOOPITERCLR
000020C8                          2466          
000020C8  43F9 00002539           2467          LEA     ASCII_D,A1
000020CE  103C 000E               2468          MOVE.B  #14,D0
000020D2  4E4F                    2469          TRAP    #15
000020D4                          2470          
000020D4  2205                    2471          MOVE.L  D5,D1
000020D6                          2472          
000020D6  0641 FFFF               2473          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
000020DA                          2474          
000020DA  103C 0003               2475          MOVE.B  #3,D0
000020DE  4E4F                    2476          TRAP    #15
000020E0                          2477          
000020E0  4287                    2478          CLR.L   D7
000020E2                          2479          
000020E2  6000 0004               2480          BRA     DLOOPITER
000020E6                          2481          
000020E6                          2482  DLOOPITERCLR        
000020E6  4287                    2483          CLR.L   D7
000020E8                          2484  
000020E8                          2485  DLOOPITER
000020E8                          2486          
000020E8  0C45 0008               2487          CMPI    #8,D5
000020EC  6700 0008               2488          BEQ     DLOOPDONE
000020F0                          2489  
000020F0  5245                    2490          ADDI    #1,D5
000020F2  6000 FF54               2491          BRA     DLOOP
000020F6                          2492  
000020F6                          2493  DLOOPDONE
000020F6                          2494  
000020F6  7A09                    2495          MOVE.L  #9,D5  * to be used as a loop counter
000020F8  4283                    2496          CLR.L   D3  * == 1 if we are in a range
000020FA  4286                    2497          CLR.L   D6  * == 1 if we have already printed the slash or dash
000020FC  4287                    2498          CLR.L   D7  * count of registers in a range
000020FE  1C3C 0001               2499          MOVE.B  #1,D6 * to fix fencepost issue     
00002102                          2500  
00002102                          2501  ALOOP * loop to print out the data register portion of the addresses being saved
00002102                          2502  
00002102  E25A                    2503          ROR     #1,D2
00002104  6500 0006               2504          BCS     AVALID
00002108                          2505          
00002108  6000 0068               2506          BRA     AINVALID
0000210C                          2507          
0000210C                          2508  AVALID
0000210C  0C43 0000               2509          CMPI    #0,D3
00002110  6700 0020               2510          BEQ     AFORWARDVALID * we are not in a range
00002114                          2511          
00002114  5247                    2512          ADDI    #1,D7 *increment number of regs in range
00002116                          2513          
00002116  0C46 0001               2514          CMPI    #1,D6   *have we already printed a symbol?
0000211A  6700 008E               2515          BEQ     ALOOPITER
0000211E                          2516          
0000211E  43F9 00002551           2517          LEA     DASH,A1    *print a dash
00002124  103C 000E               2518          MOVE.B  #14,D0
00002128  4E4F                    2519          TRAP    #15
0000212A                          2520          
0000212A  1C3C 0001               2521          MOVE.B  #1,D6 * indicates a symbol has been printed
0000212E                          2522          
0000212E  6000 007A               2523          BRA     ALOOPITER
00002132                          2524          
00002132                          2525  AFORWARDVALID
00002132                          2526          * not in a range yet, print
00002132                          2527          
00002132                          2528                  
00002132  0C44 0000               2529          CMPI    #0,D4
00002136  6700 000E               2530          BEQ     ANOSLASH
0000213A                          2531                  
0000213A  43F9 0000254F           2532          LEA     SLASH,A1
00002140  103C 000E               2533          MOVE.B  #14,D0
00002144  4E4F                    2534          TRAP    #15
00002146                          2535          
00002146                          2536  ANOSLASH
00002146                          2537  
00002146  183C 0001               2538          MOVE.B  #1,D4   * we have printed something, now slashes are fair game
0000214A                          2539          
0000214A  1C3C 0001               2540          MOVE.B  #1,D6   * we have printed a symbol
0000214E                          2541          
0000214E  43F9 00002533           2542          LEA     ASCII_A,A1
00002154  103C 000E               2543          MOVE.B  #14,D0
00002158  4E4F                    2544          TRAP    #15
0000215A                          2545          
0000215A  2205                    2546          MOVE.L  D5,D1
0000215C                          2547          
0000215C  0641 FFF8               2548          ADDI    #-8,D1 * it's A, need to adjust by 8
00002160                          2549          
00002160  103C 0003               2550          MOVE.B  #3,D0
00002164  4E4F                    2551          TRAP    #15
00002166                          2552  
00002166  163C 0001               2553          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
0000216A  1C3C 0000               2554          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
0000216E                          2555          
0000216E  6000 003A               2556          BRA     ALOOPITER
00002172                          2557  
00002172                          2558  
00002172                          2559  AINVALID
00002172                          2560  
00002172                          2561          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
00002172                          2562          
00002172  0C43 0001               2563          CMPI    #1,D3
00002176  6600 0032               2564          BNE     ALOOPITER
0000217A                          2565          
0000217A  163C 0000               2566          MOVE.B  #0,D3
0000217E                          2567          
0000217E  0C47 0001               2568          CMPI    #1,D7
00002182  6D00 0024               2569          BLT     ALOOPITERCLR
00002186                          2570          
00002186  43F9 00002533           2571          LEA     ASCII_A,A1
0000218C  103C 000E               2572          MOVE.B  #14,D0
00002190  4E4F                    2573          TRAP    #15
00002192                          2574          
00002192  2205                    2575          MOVE.L  D5,D1
00002194                          2576          
00002194  0641 FFFF               2577          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
00002198  0641 FFF8               2578          ADDI    #-8,D1 * it's A, need to adjust by 8
0000219C                          2579          
0000219C  103C 0003               2580          MOVE.B  #3,D0
000021A0  4E4F                    2581          TRAP    #15
000021A2                          2582          
000021A2  4287                    2583          CLR.L   D7
000021A4                          2584          
000021A4  6000 0004               2585          BRA     ALOOPITER
000021A8                          2586          
000021A8                          2587  ALOOPITERCLR
000021A8                          2588          
000021A8  4287                    2589          CLR.L   D7
000021AA                          2590  
000021AA                          2591  ALOOPITER
000021AA                          2592          
000021AA  0C45 0010               2593          CMPI     #16,D5
000021AE  6700 0008               2594          BEQ     ALOOPDONE
000021B2                          2595  
000021B2  5245                    2596          ADDI    #1,D5
000021B4  6000 FF4C               2597          BRA     ALOOP
000021B8                          2598  
000021B8                          2599  ALOOPDONE
000021B8                          2600          
000021B8  4C9F 7FFF               2601          MOVEM    (A7)+,D0-D7/A0-A6
000021BC  4E75                    2602          RTS
000021BE                          2603  
000021BE                          2604          
000021BE                          2605  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000021BE                          2606  *-----------------------------------------------------------------------------
000021BE                          2607  
000021BE                          2608  
000021BE                          2609  
000021BE                          2610  
000021BE                          2611  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000021BE                          2612  *-----------------------------------------------------------------------------
000021BE                          2613  *-----------------------------------------------------------------------------
000021BE                          2614  * NAME:           MOVEMHELPERPRE
000021BE                          2615  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
000021BE                          2616  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
000021BE                          2617  * POST-CONDITION: The registers being saved are printed
000021BE                          2618  * REGISTERS:      A2
000021BE                          2619  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000021BE                          2620  MOVEMHELPERPRE
000021BE                          2621  
000021BE  48A7 7F00               2622      MOVEM   D1-D7,-(A7)
000021C2                          2623  
000021C2  3412                    2624      MOVE.W  (A2),D2 * move the data we need to proccess into D2
000021C4  7800                    2625      MOVE.L  #0,D4
000021C6  4287                    2626      CLR.L    D7 * put the flipped bits here
000021C8                          2627      
000021C8                          2628      *the following block of code moves bits
000021C8                          2629      *into the same position they would be in if
000021C8                          2630      *the MOVEM was post inc, then simply uses post
000021C8                          2631      *inc to print the registers being saved
000021C8                          2632  PRELOOP
000021C8  E35A                    2633      ROL.W   #1,D2
000021CA                          2634      
000021CA  6500 0006               2635      BCS     PRESETBIT
000021CE  6000 0004               2636      BRA     PRELOOPITER
000021D2                          2637      
000021D2                          2638  PRESETBIT
000021D2  09C7                    2639      BSET    D4,D7
000021D4                          2640  
000021D4                          2641  PRELOOPITER
000021D4  0C44 000F               2642      CMPI    #15,D4
000021D8  6700 0006               2643      BEQ     PRELOOPDONE
000021DC                          2644      
000021DC  5244                    2645      ADDI    #1,D4
000021DE  60E8                    2646      BRA     PRELOOP
000021E0                          2647  
000021E0                          2648  PRELOOPDONE
000021E0                          2649  
000021E0  3487                    2650      MOVE.W  D7,(A2)    
000021E2  4C9F 00FE               2651      MOVEM   (A7)+,D1-D7
000021E6                          2652  
000021E6  6100 FE4A               2653      BSR MOVEMHELPERPOST
000021EA                          2654  
000021EA  4E75                    2655      RTS
000021EC                          2656  
000021EC                          2657  
000021EC                          2658  
000021EC                          2659          
000021EC                          2660  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000021EC                          2661  *-----------------------------------------------------------------------------
000021EC                          2662  
000021EC                          2663  
000021EC                          2664  
000021EC                          2665  *-----------------------------------------------------------------------------
000021EC                          2666  *-----------------------------------------------------------------------------
000021EC                          2667  * NAME:           UNKNOWNOP
000021EC                          2668  * DESCRIPTION:    a
000021EC                          2669  * PRE-CONDITION:  D2 contains the instruction to print. D2 has already been
000021EC                          2670  *                 identified as an unknown operation.
000021EC                          2671  * POST-CONDITION: D2 is no longer the opcode.
000021EC                          2672  * REGISTERS:      a
000021EC                          2673  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000021EC                          2674  UNKNOWNOP
000021EC  220A                    2675          MOVE.L  A2,D1   * Prep the add to print
000021EE  5581                    2676          SUB.L   #2,D1   * Off by two error due to post increment correct
000021F0  2602                    2677          MOVE.L  D2,D3   * Save the opcode to print
000021F2                          2678          
000021F2  7410                    2679          MOVE.L  #16,D2  * set the base to 16
000021F4  700F                    2680          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000021F6  4E4F                    2681          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000021F8                          2682          
000021F8  43F9 000024F5           2683          LEA     DATA,A1 * load " DATA $" into register A1
000021FE  700E                    2684          MOVE.L  #14,D0  * print the string stored in A1
00002200  4E4F                    2685          TRAP    #15
00002202                          2686          
00002202  2203                    2687          MOVE.L  D3,D1   * move the opcode from D3 into D1 to print
00002204  103C 000F               2688          MOVE.B  #15,D0   * Indicate we are using trap #15, 15 to in a certain #base
00002208  4E4F                    2689          TRAP    #15      * Perform Trap #3
0000220A                          2690  
0000220A  43F9 0000249A           2691          LEA     NEWLINE,A1 * load newline into register A1
00002210  700E                    2692          MOVE.L  #14,D0  * print the string stored in A1
00002212  4E4F                    2693          TRAP    #15
00002214                          2694  
00002214  4E75                    2695          RTS
00002216                          2696  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002216                          2697  *-----------------------------------------------------------------------------
00002216                          2698  
00002216                          2699  
00002216                          2700  
00002216                          2701  *-----------------------------------------------------------------------------
00002216                          2702  *-----------------------------------------------------------------------------
00002216                          2703  * NAME: Print ASCII hex char
00002216                          2704  * DESCRIPTION:    Prints and address register to console in hex (ASCII chars)
00002216                          2705  * PRE-CONDITION:  A6 contains the register of memory to print.
00002216                          2706  *                 This parameter would be pre-loaded by, for example:
00002216                          2707  *                 "LEA FOO_BAR_ADDR,A6" or "LEA $1234FEED,A6"
00002216                          2708  *                 D3 contains the loops to do (number of bytes).
00002216                          2709  * POST-CONDITION: 
00002216                          2710  * REGISTERS:      
00002216                          2711  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002216                          2712  PRINT_ASCII_HEX_CHAR
00002216  48E7 FFFC               2713      MOVEM.L     D0-D7/A0-A5,-(A7) * push data to save
0000221A  4285                    2714      CLR.L       D5
0000221C                          2715      
0000221C                          2716      * fence post check (if-statement, check if 0 > chars)
0000221C  0C03 0000               2717      CMPI.B      #0,D3
00002220  6700 017C               2718      BEQ         INVALID_ASCII_INPUT * go to very last part if invalid
00002224                          2719      
00002224                          2720  *    MOVE.L      A6,D4
00002224  2E0E                    2721      MOVE.L      A6,D7
00002226                          2722  PRINT_ASCII_LOOP
00002226                          2723  *    MOVE.L      A6,D7 * increase a6's pointer position ea. loop
00002226                          2724  *    MOVE.L      D4,D7 * make a mutable copy
00002226  E99F                    2725      ROL.L       #4,D7 * roll to next spot
00002228  48E7 0100               2726      MOVEM.L     D7,-(A7) * save D7
0000222C                          2727  
0000222C  0287 0000000F           2728      ANDI.L      #HEX_VALUE_MASK_LONG,D7
00002232                          2729      
00002232  0C87 00000000           2730      CMPI.L      #0,D7
00002238  6D00 0164               2731      BLT         INVALID_ASCII_INPUT
0000223C                          2732  
0000223C  0C87 0000000F           2733      CMPI.L      #15,D7
00002242  6E00 015A               2734      BGT         INVALID_ASCII_INPUT
00002246                          2735  
00002246                          2736      * this might be faster... to do later, after entire assignment done
00002246                          2737       * CMPI.L      #9,D7
00002246                          2738       * BLE         PRINT_ASCII_0_TO_9
00002246                          2739  
00002246  0C87 00000000           2740      CMPI.L      #0,D7
0000224C  6700 0098               2741      BEQ         PRINT_ASCII_0
00002250  0C87 00000001           2742      CMPI.L      #1,D7
00002256  6700 0098               2743      BEQ         PRINT_ASCII_1
0000225A  0C87 00000002           2744      CMPI.L      #2,D7
00002260  6700 0098               2745      BEQ         PRINT_ASCII_2
00002264  0C87 00000003           2746      CMPI.L      #3,D7
0000226A  6700 0098               2747      BEQ         PRINT_ASCII_3
0000226E  0C87 00000004           2748      CMPI.L      #4,D7
00002274  6700 0098               2749      BEQ         PRINT_ASCII_4
00002278  0C87 00000005           2750      CMPI.L      #5,D7
0000227E  6700 0098               2751      BEQ         PRINT_ASCII_5
00002282  0C87 00000006           2752      CMPI.L      #6,D7
00002288  6700 0098               2753      BEQ         PRINT_ASCII_6
0000228C  0C87 00000007           2754      CMPI.L      #7,D7
00002292  6700 0098               2755      BEQ         PRINT_ASCII_7
00002296  0C87 00000008           2756      CMPI.L      #8,D7
0000229C  6700 0098               2757      BEQ         PRINT_ASCII_8
000022A0  0C87 00000009           2758      CMPI.L      #9,D7
000022A6  6700 0098               2759      BEQ         PRINT_ASCII_9
000022AA  0C87 0000000A           2760      CMPI.L      #10,D7
000022B0  6700 0098               2761      BEQ         PRINT_ASCII_A
000022B4  0C87 0000000B           2762      CMPI.L      #11,D7
000022BA  6700 0098               2763      BEQ         PRINT_ASCII_B
000022BE  0C87 0000000C           2764      CMPI.L      #12,D7
000022C4  6700 0098               2765      BEQ         PRINT_ASCII_C
000022C8  0C87 0000000D           2766      CMPI.L      #13,D7
000022CE  6700 0098               2767      BEQ         PRINT_ASCII_D
000022D2  0C87 0000000E           2768      CMPI.L      #14,D7
000022D8  6700 0098               2769      BEQ         PRINT_ASCII_E
000022DC  0C87 0000000F           2770      CMPI.L      #15,D7
000022E2  6700 0098               2771      BEQ         PRINT_ASCII_F
000022E6                          2772  PRINT_ASCII_0
000022E6  43F9 0000251F           2773      LEA         ASCII_0,A1
000022EC  6000 0098               2774      BRA         PRINT_ASCII_CHAR
000022F0                          2775  PRINT_ASCII_1
000022F0  43F9 00002521           2776      LEA         ASCII_1,A1
000022F6  6000 008E               2777      BRA         PRINT_ASCII_CHAR
000022FA                          2778  PRINT_ASCII_2
000022FA  43F9 00002523           2779      LEA         ASCII_2,A1
00002300  6000 0084               2780      BRA         PRINT_ASCII_CHAR
00002304                          2781  PRINT_ASCII_3
00002304  43F9 00002525           2782      LEA         ASCII_3,A1
0000230A  6000 007A               2783      BRA         PRINT_ASCII_CHAR
0000230E                          2784  PRINT_ASCII_4
0000230E  43F9 00002527           2785      LEA         ASCII_4,A1
00002314  6000 0070               2786      BRA         PRINT_ASCII_CHAR
00002318                          2787  PRINT_ASCII_5
00002318  43F9 00002529           2788      LEA         ASCII_5,A1
0000231E  6000 0066               2789      BRA         PRINT_ASCII_CHAR
00002322                          2790  PRINT_ASCII_6
00002322  43F9 0000252B           2791      LEA         ASCII_6,A1
00002328  6000 005C               2792      BRA         PRINT_ASCII_CHAR
0000232C                          2793  PRINT_ASCII_7
0000232C  43F9 0000252D           2794      LEA         ASCII_7,A1
00002332  6000 0052               2795      BRA         PRINT_ASCII_CHAR
00002336                          2796  PRINT_ASCII_8
00002336  43F9 0000252F           2797      LEA         ASCII_8,A1
0000233C  6000 0048               2798      BRA         PRINT_ASCII_CHAR
00002340                          2799  PRINT_ASCII_9
00002340  43F9 00002531           2800      LEA         ASCII_9,A1
00002346  6000 003E               2801      BRA         PRINT_ASCII_CHAR
0000234A                          2802  PRINT_ASCII_A
0000234A  43F9 00002533           2803      LEA         ASCII_A,A1
00002350  6000 0034               2804      BRA         PRINT_ASCII_CHAR
00002354                          2805  PRINT_ASCII_B
00002354  43F9 00002535           2806      LEA         ASCII_B,A1
0000235A  6000 002A               2807      BRA         PRINT_ASCII_CHAR
0000235E                          2808  PRINT_ASCII_C
0000235E  43F9 00002537           2809      LEA         ASCII_C,A1
00002364  6000 0020               2810      BRA         PRINT_ASCII_CHAR
00002368                          2811  PRINT_ASCII_D
00002368  43F9 00002539           2812      LEA         ASCII_D,A1
0000236E  6000 0016               2813      BRA         PRINT_ASCII_CHAR
00002372                          2814  PRINT_ASCII_E
00002372  43F9 0000253B           2815      LEA         ASCII_E,A1
00002378  6000 000C               2816      BRA         PRINT_ASCII_CHAR
0000237C                          2817  PRINT_ASCII_F
0000237C  43F9 0000253D           2818      LEA         ASCII_F,A1
00002382  6000 0002               2819      BRA         PRINT_ASCII_CHAR
00002386                          2820  PRINT_ASCII_CHAR
00002386  103C 000E               2821      MOVE.B      #14,D0
0000238A  4E4F                    2822      TRAP        #15
0000238C                          2823      
0000238C                          2824          
0000238C  4287                    2825      CLR.L       D7
0000238E  4CDF 0080               2826      MOVEM.L     (A7)+,D7 * copy back D7 from stack, to mutate its' bits
00002392                          2827      
00002392  5205                    2828      ADD.B       #1,D5 * loop until counter stops
00002394  BA03                    2829      CMP.B       D3,D5
00002396  6C00 0006               2830      BGE         PRINT_ASCII_FINISH
0000239A                          2831      
0000239A  6000 FE8A               2832      BRA         PRINT_ASCII_LOOP
0000239E                          2833  INVALID_ASCII_INPUT
0000239E                          2834  PRINT_ASCII_FINISH
0000239E  4CDF 3FFF               2835      MOVEM.L     (A7)+,D0-D7/A0-A5 * pop saved memory
000023A2  4E75                    2836      RTS
000023A4                          2837      
000023A4                          2838  PRINTDATA911
000023A4  0C46 0E00               2839      CMPI    #%0000111000000000, D6   * Print 7
000023A8  6700 003C               2840      BEQ     PRINT7   
000023AC  0C46 0C00               2841      CMPI    #%0000110000000000, D6   * Print 6
000023B0  6700 0042               2842      BEQ     PRINT6
000023B4  0C46 0A00               2843      CMPI    #%0000101000000000, D6   * Print 5
000023B8  6700 0048               2844      BEQ     PRINT5
000023BC  0C46 0800               2845      CMPI    #%0000100000000000, D6   * Print 4
000023C0  6700 004E               2846      BEQ     PRINT4 
000023C4  0C46 0600               2847      CMPI    #%0000011000000000, D6   * Print 3
000023C8  6700 0054               2848      BEQ     PRINT3    
000023CC  0C46 0400               2849      CMPI    #%0000010000000000, D6   * Print 2
000023D0  6700 005A               2850      BEQ     PRINT2   
000023D4  0C46 0200               2851      CMPI    #%0000001000000000, D6   * Print 1
000023D8  6700 0060               2852      BEQ     PRINT1     
000023DC  0C46 0000               2853      CMPI    #%0000000000000000, D6   * Print 0
000023E0  6700 0066               2854      BEQ     PRINT8
000023E4                          2855      
000023E4  4E75                    2856      RTS                             * Fail case  
000023E6                          2857      
000023E6                          2858  PRINT7
000023E6  43F9 0000252D           2859      LEA     ASCII_7, A1
000023EC  103C 000E               2860      MOVE.B      #14,D0
000023F0  4E4F                    2861      TRAP        #15
000023F2  4E75                    2862      RTS
000023F4                          2863      
000023F4                          2864  PRINT6
000023F4  43F9 0000252B           2865      LEA     ASCII_6, A1
000023FA  103C 000E               2866      MOVE.B      #14,D0
000023FE  4E4F                    2867      TRAP        #15
00002400  4E75                    2868      RTS
00002402                          2869      
00002402                          2870  PRINT5
00002402  43F9 00002529           2871      LEA     ASCII_5, A1
00002408  103C 000E               2872      MOVE.B      #14,D0
0000240C  4E4F                    2873      TRAP        #15
0000240E  4E75                    2874      RTS
00002410                          2875      
00002410                          2876  PRINT4
00002410  43F9 00002527           2877      LEA     ASCII_4, A1
00002416  103C 000E               2878      MOVE.B      #14,D0
0000241A  4E4F                    2879      TRAP        #15
0000241C  4E75                    2880      RTS
0000241E                          2881      
0000241E                          2882  PRINT3
0000241E  43F9 00002525           2883      LEA     ASCII_3, A1
00002424  103C 000E               2884      MOVE.B      #14,D0
00002428  4E4F                    2885      TRAP        #15
0000242A  4E75                    2886      RTS
0000242C                          2887      
0000242C                          2888  PRINT2
0000242C  43F9 00002523           2889      LEA     ASCII_2, A1
00002432  103C 000E               2890      MOVE.B      #14,D0
00002436  4E4F                    2891      TRAP        #15
00002438  4E75                    2892      RTS
0000243A                          2893      
0000243A                          2894  PRINT1
0000243A  43F9 00002521           2895      LEA     ASCII_1, A1
00002440  103C 000E               2896      MOVE.B      #14,D0
00002444  4E4F                    2897      TRAP        #15
00002446  4E75                    2898      RTS
00002448                          2899          
00002448                          2900  PRINT8
00002448  43F9 0000252F           2901      LEA     ASCII_8, A1
0000244E  103C 000E               2902      MOVE.B      #14,D0
00002452  4E4F                    2903      TRAP        #15
00002454  4E75                    2904      RTS
00002456                          2905  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002456                          2906  *-----------------------------------------------------------------------------
00002456                          2907  
00002456                          2908  
00002456                          2909  
00002456                          2910  *-----------------------------------------------------------------------------
00002456                          2911  *-----------------------------------------------------------------------------
00002456                          2912  * NAME: Bitmask
00002456                          2913  * DESCRIPTION:    Masks bits in a data register.
00002456                          2914  * PRE-CONDITION:  D6 contains the starting bit to be masked, and D7 contains
00002456                          2915  *                 the ending bit.  For example, a starting bit of decimal
00002456                          2916  *                 value 0 and an ending bit of decimal value 3 will mask the
00002456                          2917  *                 bits 0, 1, 2, and 3.
00002456                          2918  * POST-CONDITION: D6 contains the bitmask, ready for use.
00002456                          2919  * REGISTERS:      D5,D6,D7
00002456                          2920  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002456                          2921  BITMASK
00002456  3F05                    2922          MOVE    D5,-(A7)    * push D5 onto the stack so we can use it to
00002458  4245                    2923          CLR     D5          * clear D5 so we can use it
0000245A                          2924  LOOPBIT 
0000245A  0DC5                    2925          BSET    D6,D5       * set the D6th bit in D5 to 1
0000245C  5246                    2926          ADD     #1,D6       * increment D6
0000245E                          2927  
0000245E  BC47                    2928          CMP     D7,D6       * have we finished?
00002460  6E00 0004               2929          BGT     BITMASKDONE * yes
00002464  60F4                    2930          BRA     LOOPBIT     * no, iterate again
00002466                          2931  
00002466                          2932  BITMASKDONE
00002466  2C05                    2933          MOVE.L  D5,D6
00002468  3A1F                    2934          MOVE    (A7)+,D5    * restore D5
0000246A  4E75                    2935          RTS
0000246C                          2936  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000246C                          2937  *-----------------------------------------------------------------------------
0000246C                          2938  
0000246C                          2939  
0000246C                          2940  
0000246C                          2941  *-----------------------------------------------------------------------------
0000246C                          2942  *-----------------------------------------------------------------------------
0000246C                          2943  * SECTION: Constants/variables used throughout the program.
0000246C                          2944  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000246C                          2945  
0000246C                          2946  * ---> GENERAL
0000246C  =0000000D               2947  CR          EQU     $0D
0000246C  =0000000A               2948  LF          EQU     $0A
0000246C= 45 4E 54 45 52 20 ...   2949  MSGSTART    DC.B    'ENTER START ADDRESS: ',CR,LF,0
00002484= 45 4E 54 45 52 20 ...   2950  MSGEND      DC.B    'ENTER END ADDRESS: ',CR,LF,0
0000249A= 0D 0A 00                2951  NEWLINE     DC.B    CR,LF,0
0000249D                          2952  
0000249D                          2953  * ---> OPS
0000249D= 44 49 56 53 00          2954  DIVSOP      DC.B    'DIVS',0
000024A2= 4E 4F 50 00             2955  NOOPERATION DC.B    'NOP',0
000024A6= 4E 45 47 00             2956  NEGOP       DC.B    'NEG',0
000024AA= 4D 4F 56 45 00          2957  MOVEOP      DC.B    'MOVE',0
000024AF= 4D 4F 56 45 4D 00       2958  MOVEMOP     DC.B    'MOVEM',0
000024B5= 4A 53 52 00             2959  JSROP       DC.B    'JSR',0
000024B9= 52 54 53 00             2960  RTSOP       DC.B    'RTS',0
000024BD= 53 55 42 51 00          2961  SUBQOP      DC.B    'SUBQ',0
000024C2= 4C 45 41 00             2962  LEAOP       DC.B    'LEA',0
000024C6= 42 43 4C 52 20 00       2963  BCLROP      DC.B    'BCLR ',0
000024CC= 4D 55 4C 53 00          2964  MULSOP      DC.B    'MULS',0
000024D1= 4F 52 00                2965  OROP        DC.B    'OR',0
000024D4= 4F 52 49 00             2966  ORIOP       DC.B    'ORI',0
000024D8= 43 4D 50 49 00          2967  CMPIOP      DC.B    'CMPI',0
000024DD= 4C 53 4C 00             2968  LSLOP       DC.B    'LSL',0
000024E1= 4C 53 52 00             2969  LSROP       DC.B    'LSR',0
000024E5= 41 53 4C 00             2970  ASLOP       DC.B    'ASL',0
000024E9= 41 53 52 00             2971  ASROP       DC.B    'ASR',0
000024ED= 52 4F 4C 00             2972  ROLOP       DC.B    'ROL',0
000024F1= 52 4F 52 00             2973  ROROP       DC.B    'ROR',0
000024F5= 20 44 41 54 41 20 ...   2974  DATA        DC.B    ' DATA $',0
000024FD= 42 43 43 20 00          2975  OP_BCC_MSG  DC.B    'BCC ',0
00002502= 42 43 53 20 00          2976  OP_BCS_MSG  DC.B    'BCS ',0
00002507= 42 47 45 20 00          2977  OP_BGE_MSG  DC.B    'BGE ',0
0000250C= 42 4C 54 20 00          2978  OP_BLT_MSG  DC.B    'BLT ',0
00002511= 42 56 43 20 00          2979  OP_BVC_MSG  DC.B    'BVC ',0
00002516= 42 52 41 20 00          2980  OP_BRA_MSG  DC.B    'BRA ',0
0000251B= 41 44 44 00             2981  OP_ADD_MSG  DC.B    'ADD',0
0000251F                          2982  
0000251F                          2983  * ---> HEX CHARS
0000251F= 30 00                   2984  ASCII_0     DC.B    '0',0
00002521= 31 00                   2985  ASCII_1     DC.B    '1',0
00002523= 32 00                   2986  ASCII_2     DC.B    '2',0
00002525= 33 00                   2987  ASCII_3     DC.B    '3',0
00002527= 34 00                   2988  ASCII_4     DC.B    '4',0
00002529= 35 00                   2989  ASCII_5     DC.B    '5',0
0000252B= 36 00                   2990  ASCII_6     DC.B    '6',0
0000252D= 37 00                   2991  ASCII_7     DC.B    '7',0
0000252F= 38 00                   2992  ASCII_8     DC.B    '8',0
00002531= 39 00                   2993  ASCII_9     DC.B    '9',0
00002533= 41 00                   2994  ASCII_A     DC.B    'A',0
00002535= 42 00                   2995  ASCII_B     DC.B    'B',0
00002537= 43 00                   2996  ASCII_C     DC.B    'C',0
00002539= 44 00                   2997  ASCII_D     DC.B    'D',0
0000253B= 45 00                   2998  ASCII_E     DC.B    'E',0
0000253D= 46 00                   2999  ASCII_F     DC.B    'F',0
0000253F                          3000  
0000253F                          3001  * ---> SPECIAL CHARACTERS
0000253F= 20 00                   3002  SPACE       DC.B    ' ',0
00002541= 24 00                   3003  DOLLAR      DC.B    '$',0
00002543= 23 00                   3004  IMD         DC.B    '#',0
00002545= 2C 00                   3005  COMMA       DC.B    ',',0
00002547= 28 00                   3006  OBRACK      DC.B    '(',0
00002549= 29 00                   3007  CBRACK      DC.B    ')',0
0000254B= 2B 00                   3008  PLUS        DC.B    '+',0
0000254D= 2D 00                   3009  MINUS       DC.B    '-',0
0000254F= 2F 00                   3010  SLASH       DC.B    '/',0
00002551= 2D 00                   3011  DASH        DC.B    '-',0
00002553                          3012  
00002553                          3013  * ---> B/W/L (BYTE, WORD, LONG, RESPECTIVELY)
00002553= 2E 42 20 00             3014  __B         DC.B    '.B ',0
00002557= 2E 57 20 00             3015  __W         DC.B    '.W ',0
0000255B= 2E 4C 20 00             3016  __L         DC.B    '.L ',0
0000255F                          3017  
0000255F                          3018  * ---> ADDRESS REGISTERS A0-A7
0000255F= 41 30 00                3019  __A0        DC.B   'A0',0
00002562= 41 31 00                3020  __A1        DC.B   'A1',0    
00002565= 41 32 00                3021  __A2        DC.B   'A2',0
00002568= 41 33 00                3022  __A3        DC.B   'A3',0
0000256B= 41 34 00                3023  __A4        DC.B   'A4',0
0000256E= 41 35 00                3024  __A5        DC.B   'A5',0
00002571= 41 36 00                3025  __A6        DC.B   'A6',0
00002574= 41 37 00                3026  __A7        DC.B   'A7',0
00002577                          3027  
00002577                          3028  * ---> DATA REGISTERS D0-D7
00002577= 44 30 00                3029  __D0        DC.B   'D0',0
0000257A= 44 31 00                3030  __D1        DC.B   'D1',0
0000257D= 44 32 00                3031  __D2        DC.B   'D2',0
00002580= 44 33 00                3032  __D3        DC.B   'D3',0
00002583= 44 34 00                3033  __D4        DC.B   'D4',0
00002586= 44 35 00                3034  __D5        DC.B   'D5',0
00002589= 44 36 00                3035  __D6        DC.B   'D6',0
0000258C= 44 37 00                3036  __D7        DC.B   'D7',0
0000258F                          3037  
0000258F                          3038  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000258F                          3039  *-----------------------------------------------------------------------------
0000258F                          3040  
0000258F                          3041  
0000258F                          3042  
0000258F                          3043  *-----------------------------------------------------------------------------
0000258F                          3044  *-----------------------------------------------------------------------------
0000258F                          3045  * SECTION: Sample program to run, then attempt testing disassembly on.
0000258F                          3046  * STARTING: 16384
0000258F                          3047  * ENDING:   16420
0000258F                          3048  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00004000                          3049      ORG $4000
00004000                          3050      
00004000  4E71                    3051      NOP
00004002  103C 009A               3052      MOVE.B   #%10011010, D0
00004006  123C 00A9               3053      MOVE.B   #%10101001, D1
0000400A  D200                    3054      ADD.B    D0,D1
0000400C  4C9F 3C5A               3055      MOVEM    (A7)+,A2-A5/D1/D3-D4/D6
00004010  48A7 5A3C               3056      MOVEM    A2-A5/D1/D3-D4/D6,-(A7)
00004014  43F8 24B5               3057      LEA      JSROP,A1
00004018  4467                    3058      NEG.W    -(A7)
0000401A  4EB9 00004048           3059      JSR      END
00004020  81FC 0001               3060      DIVS    #1, D0
00004024  0181                    3061      BCLR    D0, D1
00004026  CFFC 0003               3062      MULS.W  #3, D7
0000402A  CFC0                    3063      MULS    D0, D7
0000402C  C5D9                    3064      MULS    (A1)+, D2
0000402E  5146                    3065      SUBQ    #8, D6
00004030  5F81                    3066      SUBQ.L  #7, D1
00004032  0041 0004               3067      ORI     #4, D1
00004036  E389                    3068      LSL.L   #1,D1
00004038  E489                    3069      LSR.L   #2,D1
0000403A  E781                    3070      ASL.L   #3,D1
0000403C  E881                    3071      ASR.L   #4,D1
0000403E  EB99                    3072      ROL.L   #5,D1
00004040  E099                    3073      ROR.L   #8,D1
00004042  DAC1                    3074      ADDA.W  D1,A5
00004044  6000 0002               3075      BRA     END
00004048                          3076  
00004048                          3077  END
00004048  4E75                    3078      RTS
0000404A                          3079      
0000404A                          3080  RLLYEND
0000404A                          3081      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_LONG_OP        19BA
ADDA_PRT            19F6
ADDA_WORD_OP        1952
ADD_ADDA_END        1A26
ADD_ADDA_PRINT      1A0E
ADD_ADDA_SPACE      19E8
ADD_EA_DN_GENERIC   19DA
AFORWARDVALID       2132
AINVALID            2172
ALOOP               2102
ALOOPDONE           21B8
ALOOPITER           21AA
ALOOPITERCLR        21A8
ANOSLASH            2146
AS                  1A9C
ASCII_0             251F
ASCII_1             2521
ASCII_2             2523
ASCII_3             2525
ASCII_4             2527
ASCII_5             2529
ASCII_6             252B
ASCII_7             252D
ASCII_8             252F
ASCII_9             2531
ASCII_A             2533
ASCII_B             2535
ASCII_C             2537
ASCII_D             2539
ASCII_E             253B
ASCII_F             253D
ASL                 1AB2
ASLOP               24E5
ASR                 1AC2
ASROP               24E9
AVALID              210C
BCC_BYTE_OFFSET     1760
BCC_END             177C
BCLROP              24C6
BITMASK             2456
BITMASKDONE         2466
BYTE_DN_EA          1972
BYTE_EA_DN          190A
CBRACK              2549
CMPIOP              24D8
COMMA               2545
CR                  D
DASH                2551
DATA                24F5
DFORWARDVALID       2078
DINVALID            20B4
DIVSOP              249D
DLOOP               2048
DLOOPDONE           20F6
DLOOPITER           20E8
DLOOPITERCLR        20E6
DNOSLASH            208C
DOLLAR              2541
DONE0100            1642
DVALID              2052
EAHELPER05          1C16
EAHELPER611         1BD4
END                 4048
END0000             12A2
END67               1FAA
ENDEAHELPER05       1D66
ENDEAHELPER611      1C10
ENDMODE_AN          1EF6
ENDMODE_DN          1DF6
ENDOP0001           1308
ENDOP1110           1BBC
HEX_VALUE_MASK_LONG  F
IMD                 2543
INVALID_ASCII_INPUT  239E
ITERATION           1158
JSROP               24B5
LEAOP               24C2
LF                  A
LONG_DN_EA          19A2
LONG_EA_DN          193A
LOOP                103A
LOOPBIT             245A
LOOPUNKNOWNOP       1154
LS                  1A66
LSL                 1A7C
LSLOP               24DD
LSR                 1A8C
LSROP               24E1
MINUS               254D
MODE_AN             1E6C
MODE_DN             1D6C
MOVEMHELPERPOST     2032
MOVEMHELPERPRE      21BE
MOVEMOP             24AF
MOVEMTOMEM          1452
MOVEMTOREG          13B8
MOVEOP              24AA
MSGEND              2484
MSGSTART            246C
MULSOP              24CC
NEGOP               24A6
NEWLINE             249A
NOOPERATION         24A2
NOT0000             1064
NOT0001             1074
NOT0010             1084
NOT0011             1094
NOT0100             10A4
NOT0101             10B4
NOT0110             10C4
NOT0111             10D4
NOT1000             10E4
NOT1001             10F4
NOT1010             1104
NOT1011             1114
NOT1100             1124
NOT1101             1134
NOT1110             1144
NOT67BYTE           1F8E
NOT67WORD           1F9E
NOTA0               1E8E
NOTA1               1E9E
NOTA2               1EAE
NOTA3               1EBE
NOTA4               1ECE
NOTA5               1EDE
NOTA6               1EEE
NOTADRDIRECT        1C46
NOTADRINDIRECT      1C6E
NOTADRINDIRECTPOST  1CA2
NOTADRINDIRECTPRE   1CD6
NOTBCLR             11E2
NOTD0               1D8E
NOTD1               1D9E
NOTD2               1DAE
NOTD3               1DBE
NOTD4               1DCE
NOTD5               1DDE
NOTD6               1DEE
NOTDATAREG          1C36
NOTDIVS             1806
NOTIMMBYTE          1D0C
NOTIMMEDIATE        1D62
NOTIMMWORD          1D3A
NOTJSR              153A
NOTLONGMOVEM1       1420
NOTLONGMOVEM2       14BA
NOTMOVEM            14EC
NOTNEG              1394
NOTNOP              133E
NOTORI              1296
NOTRTS              155C
OBRACK              2547
OP0000              1164
OP0001              12A8
OP0010              130E
OP0011              1314
OP0100              1322
OP0101              164C
OP0110              16BA
OP0111              1782
OP1000              1788
OP1000END           1816
OP1001              181C
OP1010              181C
OP1011              1822
OP1100              1828
OP1101              18B2
OP1110              1A38
OP1110DATAREG       1B90
OP1110GENERIC       1B08
OP1110IMMEIGHT      1B68
OP1111              1BCE
OP_0000             0
OP_0001             1000
OP_0010             2000
OP_0011             3000
OP_0100             4000
OP_0101             5000
OP_0110             6000
OP_0111             7000
OP_1000             8000
OP_1001             9000
OP_1010             A000
OP_1011             B000
OP_1100             C000
OP_1101             D000
OP_1110             E000
OP_1111             F000
OP_ADD_MSG          251B
OP_BCC              1704
OP_BCC_MSG          24FD
OP_BCS              170E
OP_BCS_MSG          2502
OP_BGE              1718
OP_BGE_MSG          2507
OP_BLT              1722
OP_BLT_MSG          250C
OP_BRA              1736
OP_BRANCHES_PRINT   1740
OP_BRA_MSG          2516
OP_BVC              172C
OP_BVC_MSG          2511
ORIOP               24D4
OROP                24D1
PLUS                254B
PRELOOP             21C8
PRELOOPDONE         21E0
PRELOOPITER         21D4
PRESETBIT           21D2
PRINT1              243A
PRINT2              242C
PRINT3              241E
PRINT4              2410
PRINT5              2402
PRINT6              23F4
PRINT7              23E6
PRINT8              2448
PRINTA0             1EFC
PRINTA1             1F0A
PRINTA2             1F18
PRINTA3             1F26
PRINTA4             1F34
PRINTA5             1F42
PRINTA6             1F50
PRINTA7             1F5E
PRINTBYTE           2008
PRINTD0             1DFC
PRINTD1             1E0A
PRINTD2             1E18
PRINTD3             1E26
PRINTD4             1E34
PRINTD5             1E42
PRINTD6             1E50
PRINTD7             1E5E
PRINTDATA911        23A4
PRINTLONG           2024
PRINTWORD           2016
PRINT_ASCII_0       22E6
PRINT_ASCII_1       22F0
PRINT_ASCII_2       22FA
PRINT_ASCII_3       2304
PRINT_ASCII_4       230E
PRINT_ASCII_5       2318
PRINT_ASCII_6       2322
PRINT_ASCII_7       232C
PRINT_ASCII_8       2336
PRINT_ASCII_9       2340
PRINT_ASCII_A       234A
PRINT_ASCII_B       2354
PRINT_ASCII_C       235E
PRINT_ASCII_CHAR    2386
PRINT_ASCII_D       2368
PRINT_ASCII_E       2372
PRINT_ASCII_F       237C
PRINT_ASCII_FINISH  239E
PRINT_ASCII_HEX_CHAR  2216
PRINT_ASCII_LOOP    2226
RLLYEND             404A
RO                  1AD2
ROL                 1AE8
ROLOP               24ED
ROR                 1AF8
ROROP               24F1
RTSOP               24B9
SIZE67              1F6C
SIZE68              1FB0
SKIPLONG            1274
SKIPNOTLONG1        142C
SKIPNOTLONG2        14C6
SLASH               254F
SPACE               253F
START               1000
SUBQOP              24BD
TWOWORDLEA          15EC
UNKNOWN0000         129E
UNKNOWN0100         163E
UNKNOWN0101         16B4
UNKNOWN1100         18A8
UNKNOWNOP           21EC
UNKNOWNOP0001       1304
WORD_DN_EA          198A
WORD_EA_DN          1922
__A0                255F
__A1                2562
__A2                2565
__A3                2568
__A4                256B
__A5                256E
__A6                2571
__A7                2574
__B                 2553
__D0                2577
__D1                257A
__D2                257D
__D3                2580
__D4                2583
__D5                2586
__D6                2589
__D7                258C
__L                 255B
__W                 2557
