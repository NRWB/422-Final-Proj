00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/11/2014 12:03:21 PM

00000000                             1  *    666
00000000                             2  *   66 66
00000000                             3  *  66   66
00000000                             4  *  66   66         8888
00000000                             5  *  66   66       88   kkkk
00000000                             6  *  66  66       8   88   kk      
00000000                             7  *   66  6      8  88  kkk  kk    
00000000                             8  *    66  6    8  88     kk  k
00000000                             9  *     66 66  88 88        kk
00000000                            10  *     6 _______ 8
00000000                            11  *    6    68k    8
00000000                            12  *   6_____PRO_____8
00000000                            13  *  6               8        68k is as easy as
00000000                            14  *  6    0     0    8        6 - 8 - k !
00000000                            15  *  6   /   V   \   8 
00000000                            16  *  6   \__/ \__/   8        Welcome to our Dissasembler, Professor Nash!
00000000                            17  *    6            8         Enjoy your stay!
00000000                            18  *      6        8      
00000000                            19  *        666888
00000000                            20  *  _____                   __    ___  _    
00000000                            21  * | ____|__ _ ___ _   _   / /_  ( _ )| | __
00000000                            22  * |  _| / _` / __| | | | | '_ \ / _ \| |/ /
00000000                            23  * | |__| (_| \__ \ |_| | | (_) | (_) |   < 
00000000                            24  * |_____\__,_|___/\__, |  \___/ \___/|_|\_\
00000000                            25  *                 |___/           
00000000                            26  *-----------------------------------------------------------
00000000                            27  * Title      : 68K Decompiler
00000000                            28  * Written by : Nick Bell, Sammy Nimnuch, Caleb Larson
00000000                            29  * Date       : 11/2014
00000000                            30  * Description: This program decompiles other 68K programs
00000000                            31  *              which are loaded into the simulator simultaneously.
00000000                            32  *-----------------------------------------------------------
00000000                            33  
00000000                            34  
00000000  =00000000                 35  OP_0000     EQU     %0000000000000000
00000000  =00001000                 36  OP_0001     EQU     %0001000000000000
00000000  =00002000                 37  OP_0010     EQU     %0010000000000000
00000000  =00003000                 38  OP_0011     EQU     %0011000000000000
00000000  =00004000                 39  OP_0100     EQU     %0100000000000000
00000000  =00005000                 40  OP_0101     EQU     %0101000000000000
00000000  =00006000                 41  OP_0110     EQU     %0110000000000000
00000000  =00007000                 42  OP_0111     EQU     %0111000000000000
00000000  =00008000                 43  OP_1000     EQU     %1000000000000000
00000000  =00009000                 44  OP_1001     EQU     %1001000000000000
00000000  =0000A000                 45  OP_1010     EQU     %1010000000000000
00000000  =0000B000                 46  OP_1011     EQU     %1011000000000000
00000000  =0000C000                 47  OP_1100     EQU     %1100000000000000
00000000  =0000D000                 48  OP_1101     EQU     %1101000000000000
00000000  =0000E000                 49  OP_1110     EQU     %1110000000000000
00000000  =0000F000                 50  OP_1111     EQU     %1111000000000000
00000000  =0000000F                 51  HEX_VALUE_MASK_LONG EQU     $0000000F  * mask a hex value in 32-bits
00000000                            52  
00000000                            53  * BITMASK     EQU     $F000       * used to bitmask the first nibble
00000000                            54  
00001000                            55  START:  ORG    $1000            * first instruction of program
00001000                            56  
00001000                            57  * -----------------------------------
00001000                            58  * Starting and Ending Addresses
00001000                            59  * -----------------------------------
00001000                            60  *-----------------------------------------------------------------------------
00001000                            61  *-----------------------------------------------------------------------------
00001000                            62  * NAME: x
00001000                            63  * DESCRIPTION:    a
00001000                            64  * PRE-CONDITION:  b
00001000                            65  * POST-CONDITION: c
00001000                            66  * REGISTERS:      d
00001000                            67  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001000                            68  
00001000                            69  * THINK ABOUT ASKING FOR VALID START/END NO NEGATIVE ADDR
00001000                            70  
00001000                            71  * LOAD MSGSTART, ASK FOR INPUT
00001000  43F9 000023D4             72          LEA     MSGSTART,A1     * Load MESSAGE START
00001006  103C 000E                 73          MOVE.B  #14,D0          * Trap #14 to display message
0000100A  4E4F                      74          TRAP    #15             * Perform #14
0000100C                            75          
0000100C                            76  * GETS THE STARTING ADDRESS
0000100C  103C 0004                 77          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001010  4E4F                      78          TRAP    #15             * Perform #15
00001012                            79          
00001012                            80  * MOVE IT TO ANOTHER ADDRESS REGISTER
00001012  2441                      81          MOVEA.L D1,A2           * Move the user input into A2. This is the starting address.
00001014                            82  
00001014                            83  * LOAD MSGSTART, ASK FOR INPUT
00001014  43F9 000023EC             84          LEA     MSGEND,A1       * Load MESSAGE END
0000101A  303C 000E                 85          MOVE.W  #14,D0          * Trap #14 to display message
0000101E  4E4F                      86          TRAP    #15             * Perform #14
00001020                            87          
00001020                            88  * GETS THE ENDING ADDRESS
00001020  103C 0004                 89          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001024  4E4F                      90          TRAP    #15             * Perform Trap #4
00001026  2A01                      91          MOVE.L  D1,D5           * Move the ending address into D5
00001028  43F9 00002402             92          LEA     NEWLINE,A1      * Store newline variable for seper opcodes
0000102E                            93          
0000102E  3E3C 000F                 94          MOVE.W  #15,D7          * prep D7 for bitmask subroutine
00001032  3C3C 000C                 95          MOVE.W  #12,D6          * prep D6 for bitmask subroutine
00001036  6100 1386                 96          BSR     BITMASK         * obtain a bitmask that goes from 12-15 (inclusive)
0000103A                            97          * MOVE.W  D6,D2           * move the bitmask to D2
0000103A                            98          
0000103A                            99  LOOP    
0000103A                           100  
0000103A  2C4A                     101          MOVE.L  A2,A6
0000103C  7608                     102          MOVE.L  #8,D3
0000103E  6100 113E                103          BSR     PRINT_ASCII_HEX_CHAR
00001042                           104          
00001042                           105          *MOVE.W  A2,D1           * print what address we are processing
00001042                           106          *MOVE.B  #3,D0
00001042                           107          *TRAP    #15
00001042                           108          
00001042  43F9 000024A7            109          LEA     SPACE,A1        * print a space to seperate the address from the data
00001048  303C 000E                110          MOVE.W  #14,D0
0000104C  4E4F                     111          TRAP    #15
0000104E                           112  
0000104E  3F06                     113          MOVE    D6,-(A7)        * save the bitmask on the stack
00001050  341A                     114          MOVE.W  (A2)+,D2        * Read an operation into D2
00001052  CC42                     115          AND.W   D2,D6           * Apply this bitmask
00001054                           116          
00001054  BC7C 0000                117          CMP     #OP_0000,D6     * Does the operation start with 0000?
00001058  6600 000A                118          BNE     NOT0000         * No, check next case
0000105C  6100 0106                119          BSR     OP0000          * Branch to subroutine 0000
00001060  6000 00F6                120          BRA     ITERATION       * Move to next iteration of the loop
00001064                           121  NOT0000        
00001064  BC7C 1000                122          CMP     #OP_0001,D6     * Does the operation start with 0001?
00001068  6600 000A                123          BNE     NOT0001         * No, check next case
0000106C  6100 01EC                124          BSR     OP0001          * Branch to subroutine 0001
00001070  6000 00E6                125          BRA     ITERATION       * Move to next iteration of the loop
00001074                           126  NOT0001
00001074  BC7C 2000                127          CMP     #OP_0010,D6     * Does the operation start with 0010?
00001078  6600 000A                128          BNE     NOT0010         * No, check next case
0000107C  6100 0242                129          BSR     OP0010          * Branch to subroutine 0010
00001080  6000 00D6                130          BRA     ITERATION       * Move to next iteration of the loop
00001084                           131  NOT0010
00001084  BC7C 3000                132          CMP     #OP_0011,D6     * Does the operation start with 0011?
00001088  6600 000A                133          BNE     NOT0011         * No, check next case
0000108C  6100 0238                134          BSR     OP0011          * Branch to subroutine 0011
00001090  6000 00C6                135          BRA     ITERATION       * Move to next iteration of the loop
00001094                           136  NOT0011
00001094  BC7C 4000                137          CMP     #OP_0100,D6     * Does the operation start with 0100?
00001098  6600 000A                138          BNE     NOT0100         * No, check next case
0000109C  6100 0236                139          BSR     OP0100          * Branch to subroutine 0100
000010A0  6000 00B6                140          BRA     ITERATION       * Move to next iteration of the loop
000010A4                           141  NOT0100
000010A4  BC7C 5000                142          CMP     #OP_0101,D6     * Does the operation start with 0101?
000010A8  6600 000A                143          BNE     NOT0101         * No, check next case
000010AC  6100 0550                144          BSR     OP0101          * Branch to subroutine 0101
000010B0  6000 00A6                145          BRA     ITERATION       * Move to next iteration of the loop
000010B4                           146  NOT0101
000010B4  BC7C 6000                147          CMP     #OP_0110,D6     * Does the operation start with 0110?
000010B8  6600 000A                148          BNE     NOT0110         * No, check next case
000010BC  6100 05AE                149          BSR     OP0110          * Branch to subroutine 0110
000010C0  6000 0096                150          BRA     ITERATION       * Move to next iteration of the loop
000010C4                           151  NOT0110
000010C4  BC7C 7000                152          CMP     #OP_0111,D6     * Does the operation start with 0111?
000010C8  6600 000A                153          BNE     NOT0111         * No, check next case
000010CC  6100 065A                154          BSR     OP0111          * Branch to subroutine 0111
000010D0  6000 0086                155          BRA     ITERATION       * Move to next iteration of the loop
000010D4                           156  NOT0111
000010D4  BC7C 8000                157          CMP     #OP_1000,D6     * Does the operation start with 1000?
000010D8  6600 000A                158          BNE     NOT1000         * No, check next case
000010DC  6100 0650                159          BSR     OP1000          * Branch to subroutine 1000
000010E0  6000 0076                160          BRA     ITERATION       * Move to next iteration of the loop
000010E4                           161  NOT1000
000010E4  BC7C 9000                162          CMP     #OP_1001,D6     * Does the operation start with 1001?
000010E8  6600 000A                163          BNE     NOT1001         * No, check next case
000010EC  6100 06D4                164          BSR     OP1001          * Branch to subroutine 1001
000010F0  6000 0066                165          BRA     ITERATION       * Move to next iteration of the loop
000010F4                           166  NOT1001
000010F4  BC7C A000                167          CMP     #OP_1010,D6     * Does the operation start with 1010?
000010F8  6600 000A                168          BNE     NOT1010         * No, check next case
000010FC  6100 06C4                169          BSR     OP1010          * Branch to subroutine 1010
00001100  6000 0056                170          BRA     ITERATION       * Move to next iteration of the loop
00001104                           171  NOT1010
00001104  BC7C B000                172          CMP     #OP_1011,D6     * Does the operation start with 1011?
00001108  6600 000A                173          BNE     NOT1011         * No, check next case
0000110C  6100 06BA                174          BSR     OP1011          * Branch to subroutine 1011
00001110  6000 0046                175          BRA     ITERATION       * Move to next iteration of the loop
00001114                           176  NOT1011
00001114  BC7C C000                177          CMP     #OP_1100,D6     * Does the operation start with 1100?
00001118  6600 000A                178          BNE     NOT1100         * No, check next case
0000111C  6100 06B0                179          BSR     OP1100          * Branch to subroutine 1100
00001120  6000 0036                180          BRA     ITERATION       * Move to next iteration of the loop
00001124                           181  NOT1100
00001124  BC7C D000                182          CMP     #OP_1101,D6     * Does the operation start with 1101?
00001128  6600 000A                183          BNE     NOT1101         * No, check next case
0000112C  6100 072A                184          BSR     OP1101          * Branch to subroutine 1101
00001130  6000 0026                185          BRA     ITERATION       * Move to next iteration of the loop
00001134                           186  NOT1101
00001134  BC7C E000                187          CMP     #OP_1110,D6     * Does the operation start with 1110?
00001138  6600 000A                188          BNE     NOT1110         * No, check next case
0000113C  6100 0894                189          BSR     OP1110          * Branch to subroutine 1110
00001140  6000 0016                190          BRA     ITERATION       * Move to next iteration of the loop
00001144                           191  NOT1110
00001144  BC7C F000                192          CMP     #OP_1111,D6     * Does the operation start with 1111?
00001148  6600 000A                193          BNE     LOOPUNKNOWNOP   * No, check next case
0000114C  6100 0A1A                194          BSR     OP1111          * Branch to subroutine 1111
00001150  6000 0006                195          BRA     ITERATION       * Move to next iteration of the loop
00001154                           196          
00001154                           197  LOOPUNKNOWNOP
00001154  6100 0FFE                198          BSR     UNKNOWNOP
00001158                           199          
00001158                           200  ITERATION
00001158  3C1F                     201          MOVE    (A7)+,D6        * restore the bitmask to its previous state
0000115A                           202  
0000115A                           203          *MOVE.B  #14,D0          * Print a newline
0000115A                           204          *TRAP    #15             * Perform Trap #14
0000115A                           205  
0000115A  BA4A                     206          CMP     A2,D5           * Compare the starting address to ending address
0000115C  6700 3EA2                207          BEQ     END             * If they are equal, branch 
00001160  6000 FED8                208          BRA     LOOP            * Otherwise, branch back to LOOP
00001164                           209  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001164                           210  *-----------------------------------------------------------------------------
00001164                           211  
00001164                           212  
00001164                           213  
00001164                           214  *-----------------------------------------------------------------------------
00001164                           215  *-----------------------------------------------------------------------------
00001164                           216  * NAME: OP_0000   (BCLR, ORI, CMPI)
00001164                           217  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001164                           218  * PRE-CONDITION:  xyz
00001164                           219  * POST-CONDITION: All registers return to their previous state, and the output
00001164                           220  *                 goes to the output console for reading the raw data or the
00001164                           221  *                 actual instruction.
00001164                           222  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001164                           223  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001164                           224  OP0000
00001164  48A7 FFC0                225          MOVEM   D0-D7/A0-A1,-(A7)   * Push values to the stack to save
00001168  3C3C 0006                226          MOVE.W  #6, D6              * Prep lower value for bitmask
0000116C  3E3C 0008                227          MOVE.W  #8, D7              * Prep upper value for bitmask
00001170  6100 124C                228          BSR     BITMASK             * Finalize bitmask setup
00001174  CC42                     229          AND     D2,D6               * Apply bitmask
00001176                           230          
00001176                           231          * TODO: Consider static  AND dynamic BCLR.
00001176                           232          * Only works for Dynamic right now
00001176  0C46 0180                233          CMPI    #%0000000110000000, D6  * Are we BCLR?
0000117A  6600 0066                234          BNE     NOTBCLR                 * If not, branch to other OP0000 functions
0000117E                           235          
0000117E  3C3C 0003                236          MOVE.W  #3, D6              * Prep lower value for bitmask
00001182  3E3C 0005                237          MOVE.W  #5, D7              * Prep upper value for bitmask
00001186  6100 1236                238          BSR     BITMASK             * Finalize bitmask setup
0000118A  CC42                     239          AND     D2,D6               * Apply bitmask
0000118C                           240          
0000118C                           241          * Checking for unsupported mode
0000118C  0C46 0008                242          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
00001190  6700 00BE                243          BEQ     UNKNOWN0000             * If so, branch to other OP0000 functions
00001194                           244          
00001194                           245          * Confirmed BCLR at this point
00001194  43F9 0000242E            246          LEA     BCLROP,A1           * We found BCLR
0000119A  103C 000E                247          MOVE.B  #14,D0              * Trap #14 prints out the data
0000119E  4E4F                     248          TRAP    #15                 * Perform Trap #14
000011A0                           249  
000011A0  43F9 000024A7            250          LEA     SPACE,A1            * Formatting
000011A6  103C 000E                251          MOVE.B  #14,D0              * Trap #14 prints out space
000011AA  4E4F                     252          TRAP    #15                 * Perform Trap #14
000011AC                           253          
000011AC                           254          * Set up for printing out the Register
000011AC  0882 0006                255          BCLR    #6,D2               * Clear bit 6
000011B0  0882 0007                256          BCLR    #7,D2               * Clear bit 7
000011B4  0882 0008                257          BCLR    #8,D2               * Clear bit 8
000011B8                           258          
000011B8  6100 09B4                259          BSR     EAHELPER611         * Print out Register
000011BC                           260  
000011BC  43F9 000024AD            261          LEA     COMMA,A1            * formatting
000011C2  103C 000E                262          MOVE.B  #14,D0              * Trap #14 prints out a comma
000011C6  4E4F                     263          TRAP    #15                 * Perform Trap #14
000011C8                           264          
000011C8  4243                     265          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
000011CA  08C3 0000                266          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
000011CE                           267      
000011CE  6100 09E0                268          BSR     EAHELPER05          * Print out data.
000011D2                           269          
000011D2  43F9 00002402            270          LEA     NEWLINE,A1          * Formatting
000011D8  103C 000E                271          MOVE.B  #14,D0              * Trap #14 prints out the data
000011DC  4E4F                     272          TRAP    #15                 * Perform Trap #14
000011DE                           273          
000011DE  6000 0074                274          BRA     END0000             * Found the op, move to next iteration
000011E2                           275          
000011E2                           276  NOTBCLR * Possible options left are ORI or CMPI
000011E2  3C3C 0009                277          MOVE.W  #9, D6              * Prep lower value for bitmask
000011E6  3E3C 000B                278          MOVE.W  #11, D7             * Prep upper value for bitmask
000011EA  6100 11D2                279          BSR     BITMASK             * Finalize bitmask setup
000011EE  CC42                     280          AND     D2,D6               * Apply bitmask
000011F0                           281          
000011F0  0C46 0000                282          CMPI    #%0000000000000000, D6   * Are we possibly ORI?
000011F4  6600 0052                283          BNE     NOTORI                   * If not, branch to NOTORI
000011F8                           284          
000011F8                           285          * Size check to see if unsupported ORI mode
000011F8  3C3C 0006                286          MOVE.W  #6, D6              * Prep lower value for bitmask
000011FC  3E3C 0007                287          MOVE.W  #7, D7              * Prep upper value for bitmask
00001200  6100 11BC                288          BSR     BITMASK             * Finalize bitmask setup
00001204  CC42                     289          AND     D2,D6               * Apply bitmask
00001206                           290          
00001206  0C46 00C0                291          CMPI    #%0000000011000000, D6  * Are bits 6,7 == 1,1?
0000120A  6700 0044                292          BEQ     UNKNOWN0000             * If so, unknown op. 
0000120E                           293          
0000120E                           294          * Mode check to see if unsupported ORI mode
0000120E  3C3C 0003                295          MOVE.W  #3, D6              * Prep lower value for bitmask
00001212  3E3C 0005                296          MOVE.W  #5, D7              * Prep upper value for bitmask
00001216  6100 11A6                297          BSR     BITMASK             * Finalize bitmask setup
0000121A  CC42                     298          AND     D2,D6               * Apply bitmask
0000121C                           299          
0000121C  0C46 0008                300          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
00001220  6700 002E                301          BEQ     UNKNOWN0000             * If so, unknown op. 
00001224                           302          
00001224                           303          * Confirmed ORI at this point
00001224                           304          * TODO: Get the immediate data following the instruction and print it out
00001224  43F9 0000243C            305          LEA     ORIOP, A1           * Load 'ORI' into the output window
0000122A  103C 000E                306          MOVE.B  #14,D0              * Trap #14 prints out the data in D0
0000122E  4E4F                     307          TRAP    #15                 * Perform Trap #14
00001230                           308          
00001230  6100 0CD4                309          BSR     SIZE67              * Print the size
00001234  6100 097A                310          BSR     EAHELPER05          * Print out the EA
00001238                           311          
00001238  43F9 00002402            312          LEA     NEWLINE,A1          * Formatting
0000123E  103C 000E                313          MOVE.B  #14,D0              * Trap #14 prints out the data
00001242  4E4F                     314          TRAP    #15                 * Perform Trap #14
00001244                           315          
00001244  6000 000E                316          BRA     END0000             * Done with op. Move to next iteration
00001248                           317          
00001248                           318  NOTORI  * Possible option left is CMPI
00001248  0C46 0C00                319          CMPI    #%0000110000000000, D6  * Are we CMPI?
0000124C  6600 0002                320          BNE     UNKNOWN0000             * If not, unknown op
00001250                           321          
00001250                           322          * TODO: Continue checking for CMPI validity
00001250                           323          
00001250                           324  UNKNOWN0000
00001250  6100 0F02                325          BSR     UNKNOWNOP       * Unknown op
00001254                           326          
00001254                           327  END0000          
00001254  4C9F 03FF                328         MOVEM   (A7)+,D0-D7/A0-A1   * Push values to the stack to save
00001258  4E75                     329         RTS
0000125A                           330  
0000125A                           331  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000125A                           332  *-----------------------------------------------------------------------------
0000125A                           333  
0000125A                           334  
0000125A                           335  
0000125A                           336  *-----------------------------------------------------------------------------
0000125A                           337  *-----------------------------------------------------------------------------
0000125A                           338  * NAME: OP_0001   (MOVE.B)
0000125A                           339  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000125A                           340  * PRE-CONDITION:  xyz
0000125A                           341  * POST-CONDITION: All registers return to their previous state, and the output
0000125A                           342  *                 goes to the output console for reading the raw data or the
0000125A                           343  *                 actual instruction.
0000125A                           344  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000125A                           345  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000125A                           346  OP0001  
0000125A  48A7 FFC0                347          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
0000125E  3C3C 0006                348          MOVE.W  #6, D6              * Prep lower value for bitmask
00001262  3E3C 0008                349          MOVE.W  #8, D7              * Prep upper value for bitmask
00001266  6100 1156                350          BSR     BITMASK             * Finalize bitmask setup
0000126A  CC42                     351          AND     D2,D6               * Apply bitmask
0000126C                           352          
0000126C                           353          * I may have fucked off this part, sorry - Caleb
0000126C                           354          * CMPI    #%0000000001000000, D6  * Is the destination mode 001?
0000126C                           355          * BNE     UNKNOWNOP0001                 * If so, it's unknown.
0000126C                           356          
0000126C  43F9 00002412            357          LEA     MOVEOP,A1   * Put 'MOVE' into the window
00001272  103C 000E                358          MOVE.B  #14,D0      * Trap #14 to print out
00001276  4E4F                     359          TRAP    #15         * Perform Trap #14
00001278                           360          
00001278                           361          *-----------------------------------------------------------
00001278                           362          * the following code is to move the size bits into the
00001278                           363          * 0-1 positions of D3 so that eahelper05 case use that as a "parameter"
00001278                           364          * for eahelper05
00001278                           365          
00001278  3C3C 000C                366          MOVE.W  #12, D6              * Prep lower value for bitmask
0000127C  3E3C 000D                367          MOVE.W  #13, D7              * Prep upper value for bitmask
00001280  6100 113C                368          BSR     BITMASK              * Finalize bitmask setup
00001284  CC42                     369          AND     D2,D6                * Apply bitmask
00001286                           370          
00001286  E04E                     371          LSR     #8,D6
00001288  E84E                     372          LSR     #4,D6
0000128A                           373          
0000128A  4243                     374          CLR     D3
0000128C                           375          
0000128C  1606                     376          MOVE.B  D6,D3
0000128E                           377          
0000128E                           378          *---------------------------------------------------------------
0000128E                           379          
0000128E                           380          
0000128E  6100 0C76                381          BSR     SIZE67
00001292  6100 091C                382          BSR     EAHELPER05
00001296                           383          
00001296  43F9 000024AD            384          LEA     COMMA,A1
0000129C  103C 000E                385          MOVE.B  #14,D0
000012A0  4E4F                     386          TRAP    #15
000012A2                           387          
000012A2  6100 08CA                388          BSR     EAHELPER611
000012A6                           389          
000012A6  43F9 00002402            390          LEA     NEWLINE,A1
000012AC  103C 000E                391          MOVE.B  #14,D0
000012B0  4E4F                     392          TRAP    #15
000012B2                           393          
000012B2  6000 0006                394          BRA     ENDOP0001
000012B6                           395          *LEA     __B,A1      * Put '.B' into the window
000012B6                           396          *MOVE.B  #14,D0      * Trap #14 to print out
000012B6                           397          *TRAP    #15         * Perform Trap #14
000012B6                           398          
000012B6                           399  UNKNOWNOP0001
000012B6  6100 0E9C                400          BSR     UNKNOWNOP
000012BA                           401          
000012BA                           402  ENDOP0001
000012BA  4C9F 03FF                403          MOVEM (A7)+,D0-D7/A0-A1
000012BE  4E75                     404          RTS        
000012C0                           405          
000012C0                           406          * TODO: DETERMINE THE MODE AND REG FOR DESTINATION AND SOURCE
000012C0                           407  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000012C0                           408  *-----------------------------------------------------------------------------
000012C0                           409  
000012C0                           410  
000012C0                           411  
000012C0                           412  *-----------------------------------------------------------------------------
000012C0                           413  *-----------------------------------------------------------------------------
000012C0                           414  * NAME: OP_0010   (MOVE.L, MOVEA.L)
000012C0                           415  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000012C0                           416  * PRE-CONDITION:  xyz
000012C0                           417  * POST-CONDITION: All registers return to their previous state, and the output
000012C0                           418  *                 goes to the output console for reading the raw data or the
000012C0                           419  *                 actual instruction.
000012C0                           420  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000012C0                           421  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000012C0                           422  OP0010
000012C0                           423  
000012C0  6100 0E92                424      BSR     UNKNOWNOP
000012C4  4E75                     425      RTS
000012C6                           426  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000012C6                           427  *-----------------------------------------------------------------------------
000012C6                           428  
000012C6                           429  
000012C6                           430  
000012C6                           431  *-----------------------------------------------------------------------------
000012C6                           432  *-----------------------------------------------------------------------------
000012C6                           433  * NAME: OP_0011   (MOVE.W, MOVEA.W)
000012C6                           434  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000012C6                           435  * PRE-CONDITION:  xyz
000012C6                           436  * POST-CONDITION: All registers return to their previous state, and the output
000012C6                           437  *                 goes to the output console for reading the raw data or the
000012C6                           438  *                 actual instruction.
000012C6                           439  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000012C6                           440  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000012C6                           441  OP0011
000012C6  48A7 FFFE                442      MOVEM   D0-D7/A0-A6, -(A7)
000012CA                           443      
000012CA                           444      *MOVE.W  #6,D6
000012CA                           445      *MOVE.W  #8,D7
000012CA                           446      
000012CA                           447      *BSR     BITMASK
000012CA                           448      
000012CA                           449      *AND.W   D2,D6
000012CA                           450      
000012CA                           451      *CMP     #%0000000001000000,D6
000012CA                           452      *BNE     NEXT15
000012CA                           453      *BSR     * for MOVEA.W
000012CA                           454      
000012CA  4C9F 7FFF                455      MOVEM   (A7)+,D0-D7/A0-A6
000012CE                           456      
000012CE  6100 0E84                457      BSR     UNKNOWNOP
000012D2  4E75                     458      RTS
000012D4                           459  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000012D4                           460  *-----------------------------------------------------------------------------
000012D4                           461  
000012D4                           462  *-----------------------------------------------------------------------------
000012D4                           463  *-----------------------------------------------------------------------------
000012D4                           464  * NAME: OP_0100   (NOP, MOVEM, LEA, NEG, JSR, RTS)
000012D4                           465  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000012D4                           466  * PRE-CONDITION:  xyz
000012D4                           467  * POST-CONDITION: All registers return to their previous state, and the output
000012D4                           468  *                 goes to the output console for reading the raw data or the
000012D4                           469  *                 actual instruction.
000012D4                           470  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000012D4                           471  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000012D4                           472  OP0100  
000012D4                           473          * TODO: movem
000012D4                           474  
000012D4  48A7 C0C0                475          MOVEM   D0-D1/A0-A1,-(A7) * Push values to the stack to save
000012D8                           476          
000012D8                           477          *NOP
000012D8  0C42 4E71                478          CMPI    #%0100111001110001,D2
000012DC  6600 0012                479          BNE     NOTNOP
000012E0                           480          
000012E0  43F9 0000240A            481          LEA     NOOPERATION,A1
000012E6  103C 000D                482          MOVE.B  #13,D0          * Print a newline
000012EA  4E4F                     483          TRAP    #15
000012EC                           484          
000012EC  6000 0306                485          BRA     DONE0100 *we found it, move on to the next iteration
000012F0                           486  NOTNOP *NEG
000012F0                           487          
000012F0                           488          * prep values for BITMASK subroutine
000012F0  7C08                     489          MOVE.L  #8,D6
000012F2  7E0B                     490          MOVE.L  #11,D7
000012F4                           491          
000012F4  6100 10C8                492          BSR     BITMASK
000012F8                           493          
000012F8  CC42                     494          AND     D2,D6                   * apply bitmask
000012FA                           495          
000012FA  0C46 0400                496          CMPI    #%0000010000000000,D6   * are we NEG?
000012FE  6600 0046                497          BNE     NOTNEG                  * not neg
00001302                           498          
00001302  7C03                     499          MOVE.L  #3,D6
00001304  7E05                     500          MOVE.L  #5,D7
00001306                           501          
00001306  6100 10B6                502          BSR     BITMASK * generate a bitmask to be used to check mode
0000130A                           503          
0000130A  0C46 0008                504          CMPI    #%0000000000001000,D6 * check to see if it is the unsupported mode
0000130E  6700 02E0                505          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
00001312                           506          
00001312  0C46 0028                507          CMPI    #%0000000000101000,D6 * check to see if it is the unsupported mode
00001316  6700 02D8                508          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
0000131A                           509          
0000131A  0C46 0030                510          CMPI    #%0000000000110000,D6 * check to see if it is the unsupported mode
0000131E  6700 02D0                511          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
00001322                           512        
00001322                           513          * it is NEG, print
00001322  43F9 0000240E            514          LEA     NEGOP,A1
00001328  103C 000E                515          MOVE.B  #14,D0
0000132C  4E4F                     516          TRAP    #15
0000132E                           517          
0000132E  6100 0BD6                518          BSR     SIZE67
00001332                           519          
00001332  6100 087C                520          BSR     EAHELPER05
00001336                           521          
00001336  43F9 00002402            522          LEA     NEWLINE,A1
0000133C  103C 000E                523          MOVE.B  #14,D0
00001340  4E4F                     524          TRAP    #15
00001342                           525          
00001342  6000 02B0                526          BRA     DONE0100 * we found the op, move to next iteration
00001346                           527          
00001346                           528  NOTNEG *MOVEM
00001346                           529  
00001346                           530          * prep values for BITMASK subroutine
00001346  7C07                     531          MOVE.L  #7,D6
00001348  7E09                     532          MOVE.L  #9,D7
0000134A                           533          
0000134A  6100 1072                534          BSR     BITMASK
0000134E                           535          
0000134E  CC82                     536          AND.L   D2,D6   * apply bitmask
00001350                           537          
00001350  0C46 0080                538          CMPI    #%0000000010000000,D6 * is it MOVEM?
00001354  6600 0148                539          BNE     NOTMOVEM          * it is not MOVEM
00001358                           540          
00001358  7C08                     541          MOVE.L  #8,D6
0000135A  7E08                     542          MOVE.L  #8,D7
0000135C                           543          
0000135C  6100 1060                544          BSR     BITMASK
00001360                           545          
00001360  CC82                     546          AND.L   D2,D6
00001362                           547          
00001362  0C46 0100                548          CMPI    #%0000000100000000,D6 * is it register to memory?
00001366  6700 009C                549          BEQ     MOVEMTOMEM 
0000136A                           550          
0000136A                           551  MOVEMTOREG *supported modes: 010 011
0000136A                           552  
0000136A  7C03                     553          MOVE.L  #3,D6
0000136C  7E05                     554          MOVE.L  #5,D7
0000136E                           555          
0000136E  6100 104E                556          BSR     BITMASK
00001372                           557          
00001372  CC82                     558          AND.L   D2,D6
00001374                           559          
00001374  0C46 0000                560          CMPI    #%0000000000000000,D6 * is it an unsupported mode?
00001378  6700 0276                561          BEQ     UNKNOWN0100
0000137C                           562          
0000137C  0C46 0008                563          CMPI    #%0000000000001000,D6 * is it an unsupported mode?
00001380  6700 026E                564          BEQ     UNKNOWN0100
00001384                           565          
00001384  0C46 0020                566          CMPI    #%0000000000100000,D6 * is it an unsupported mode?
00001388  6700 0266                567          BEQ     UNKNOWN0100
0000138C                           568          
0000138C  0C46 0028                569          CMPI    #%0000000000101000,D6 * is it an unsupported mode?
00001390  6700 025E                570          BEQ     UNKNOWN0100
00001394                           571          
00001394  0C46 0030                572          CMPI    #%0000000000110000,D6 * is it an unsupported mode?
00001398  6700 0256                573          BEQ     UNKNOWN0100
0000139C                           574          
0000139C  0C46 0038                575          CMPI    #%0000000000111000,D6 * is it an unsupported mode?
000013A0  6700 024E                576          BEQ     UNKNOWN0100
000013A4                           577          
000013A4  43F9 00002417            578          LEA     MOVEMOP,A1
000013AA  103C 000E                579          MOVE.B  #14,D0          * print MOVEM
000013AE  4E4F                     580          TRAP    #15
000013B0                           581          
000013B0  7C06                     582          MOVE.L  #6,D6
000013B2  7E06                     583          MOVE.L  #6,D7
000013B4                           584          
000013B4  6100 1008                585          BSR     BITMASK
000013B8                           586          
000013B8  CC82                     587          AND.L   D2,D6
000013BA                           588          
000013BA  0C46 0040                589          CMPI    #%0000000001000000,D6 * is it a long op?
000013BE  6600 0012                590          BNE     NOTLONGMOVEM1       * no, it is a word
000013C2                           591          
000013C2  43F9 000024C3            592          LEA     __L,A1
000013C8  103C 000E                593          MOVE.B  #14,D0          * print .L 
000013CC  4E4F                     594          TRAP    #15
000013CE                           595          
000013CE  6000 000E                596          BRA     SKIPNOTLONG1
000013D2                           597          
000013D2                           598  NOTLONGMOVEM1
000013D2                           599  
000013D2  43F9 000024BF            600          LEA     __W,A1
000013D8  103C 000E                601          MOVE.B  #14,D0          * print .W 
000013DC  4E4F                     602          TRAP    #15
000013DE                           603                  
000013DE                           604  SKIPNOTLONG1
000013DE                           605  
000013DE  6100 07D0                606          BSR     EAHELPER05 * print out the register we are moving from
000013E2                           607          
000013E2  43F9 000024AD            608          LEA     COMMA,A1
000013E8  103C 000E                609          MOVE.B  #14,D0          * print , 
000013EC  4E4F                     610          TRAP    #15
000013EE                           611          
000013EE  6100 0BDC                612          BSR     MOVEMHELPERPOST
000013F2                           613          
000013F2  341A                     614          MOVE.W  (A2)+,D2
000013F4                           615          
000013F4  43F9 00002402            616          LEA     NEWLINE,A1
000013FA  103C 000E                617          MOVE.B  #14,D0          * print a newline 
000013FE  4E4F                     618          TRAP    #15
00001400                           619      
00001400  6000 01F2                620          BRA     DONE0100          * we found and printed, move on to the next iteration
00001404                           621          
00001404                           622  MOVEMTOMEM * supported modes 010 100
00001404                           623  
00001404  7C03                     624          MOVE.L  #3,D6
00001406  7E05                     625          MOVE.L  #5,D7
00001408                           626          
00001408  6100 0FB4                627          BSR     BITMASK
0000140C                           628          
0000140C  CC82                     629          AND.L   D2,D6
0000140E                           630          
0000140E  0C46 0000                631          CMPI    #%0000000000000000,D6 * is it an unsopported mode?
00001412  6700 01DC                632          BEQ     UNKNOWN0100
00001416                           633          
00001416  0C46 0008                634          CMPI    #%0000000000001000,D6 * is it an unsopported mode?
0000141A  6700 01D4                635          BEQ     UNKNOWN0100
0000141E                           636          
0000141E  0C46 0018                637          CMPI    #%0000000000011000,D6 * is it an unsopported mode?
00001422  6700 01CC                638          BEQ     UNKNOWN0100
00001426                           639          
00001426  0C46 0028                640          CMPI    #%0000000000101000,D6 * is it an unsopported mode?
0000142A  6700 01C4                641          BEQ     UNKNOWN0100
0000142E                           642          
0000142E  0C46 0030                643          CMPI    #%0000000000110000,D6 * is it an unsopported mode?
00001432  6700 01BC                644          BEQ     UNKNOWN0100
00001436                           645          
00001436  0C46 0070                646          CMPI    #%0000000001110000,D6 * is it an unsopported mode?
0000143A  6700 01B4                647          BEQ     UNKNOWN0100
0000143E                           648          
0000143E  43F9 00002417            649          LEA     MOVEMOP,A1
00001444  103C 000E                650          MOVE.B  #14,D0          * print MOVEM
00001448  4E4F                     651          TRAP    #15
0000144A                           652          
0000144A  7C06                     653          MOVE.L  #6,D6
0000144C  7E06                     654          MOVE.L  #6,D7
0000144E                           655          
0000144E  6100 0F6E                656          BSR     BITMASK
00001452                           657          
00001452  CC82                     658          AND.L   D2,D6
00001454                           659          
00001454  0C46 0040                660          CMPI    #%0000000001000000,D6 * is it a long op?
00001458  6600 0012                661          BNE     NOTLONGMOVEM2       * no, it is a word
0000145C                           662          
0000145C  43F9 000024C3            663          LEA     __L,A1
00001462  103C 000E                664          MOVE.B  #14,D0          * print .L 
00001466  4E4F                     665          TRAP    #15
00001468                           666          
00001468  6000 000E                667          BRA     SKIPNOTLONG2
0000146C                           668          
0000146C                           669  NOTLONGMOVEM2
0000146C                           670  
0000146C  43F9 000024BF            671          LEA     __W,A1
00001472  103C 000E                672          MOVE.B  #14,D0          * print .W 
00001476  4E4F                     673          TRAP    #15
00001478                           674                  
00001478                           675  SKIPNOTLONG2
00001478                           676  
00001478  6100 0CDA                677          BSR     MOVEMHELPERPRE
0000147C                           678  
0000147C  43F9 000024AD            679          LEA     COMMA,A1
00001482  103C 000E                680          MOVE.B  #14,D0          * print , 
00001486  4E4F                     681          TRAP    #15
00001488                           682          
00001488  6100 0726                683          BSR     EAHELPER05 * print out the register we are moving to
0000148C                           684          
0000148C  341A                     685          MOVE.W  (A2)+,D2
0000148E                           686          
0000148E  43F9 00002402            687          LEA     NEWLINE,A1
00001494  103C 000E                688          MOVE.B  #14,D0          * print a newline 
00001498  4E4F                     689          TRAP    #15
0000149A                           690      
0000149A  6000 0158                691          BRA     DONE0100          * we found and printed, move on to the next iteration
0000149E                           692  
0000149E                           693  NOTMOVEM *JSR
0000149E                           694          * prep values for BITMASK subroutine
0000149E  7C06                     695          MOVE.L  #6,D6
000014A0  7E08                     696          MOVE.L  #8,D7
000014A2                           697          
000014A2  6100 0F1A                698          BSR     BITMASK
000014A6                           699          
000014A6  CC42                     700          AND     D2,D6   * apply bitmask
000014A8                           701          
000014A8  0C46 0080                702          CMPI    #%0000000010000000,D6
000014AC  6600 003E                703          BNE     NOTJSR          * it's not JSR
000014B0                           704          
000014B0  43F9 0000241D            705          LEA     JSROP,A1
000014B6  103C 000E                706          MOVE.B  #14,D0          * Print a newline and JSR
000014BA  4E4F                     707          TRAP    #15
000014BC                           708          
000014BC  43F9 000024A7            709          LEA     SPACE,A1
000014C2  103C 000E                710          MOVE.B  #14,D0          * Print a newline and JSR
000014C6  4E4F                     711          TRAP    #15
000014C8                           712          
000014C8                           713          * print out where we are jumping to
000014C8                           714          
000014C8  341A                     715          MOVE.W  (A2)+,D2 * read in the next word of the instruction 
000014CA                           716          
000014CA  2202                     717          MOVE.L  D2,D1   * save the opcode to print
000014CC                           718          
000014CC  7410                     719          MOVE.L  #16,D2  * set the base to 16
000014CE                           720          
000014CE  700F                     721          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000014D0  4E4F                     722          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000014D2                           723          
000014D2  341A                     724          MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
000014D4                           725          
000014D4  2202                     726          MOVE.L  D2,D1   * save the opcode to print
000014D6                           727          
000014D6  7410                     728          MOVE.L  #16,D2  * set the base to 16
000014D8                           729          
000014D8  700F                     730          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000014DA  4E4F                     731          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000014DC                           732          
000014DC  43F9 00002402            733          LEA     NEWLINE,A1
000014E2  103C 000E                734          MOVE.B  #14,D0          * Print a newline
000014E6  4E4F                     735          TRAP    #15
000014E8                           736          
000014E8  6000 010A                737          BRA     DONE0100          * we already found instruction, next iteration
000014EC                           738  NOTJSR *RTS
000014EC                           739  
000014EC                           740          * prep values for BITMASK subroutine
000014EC  7C06                     741          MOVE.L  #6,D6
000014EE  7E08                     742          MOVE.L  #8,D7
000014F0                           743          
000014F0  6100 0ECC                744          BSR     BITMASK
000014F4                           745          
000014F4  CC42                     746          AND     D2,D6   * apply bitmask
000014F6                           747          
000014F6  0C46 0040                748          CMPI    #%0000000001000000,D6
000014FA  6600 0012                749          BNE     NOTRTS          * it's not RTS
000014FE                           750          
000014FE  43F9 00002421            751          LEA     RTSOP,A1
00001504  103C 000D                752          MOVE.B  #13,D0          * Print a newline and RTS
00001508  4E4F                     753          TRAP    #15
0000150A                           754          
0000150A  6000 00E8                755          BRA     DONE0100          * we already found instruction, next iteration
0000150E                           756  NOTRTS  *LEA
0000150E                           757         
0000150E                           758          * prep values for BITMASK subroutine
0000150E  7C06                     759          MOVE.L  #6,D6
00001510  7E08                     760          MOVE.L  #8,D7
00001512                           761          
00001512  6100 0EAA                762          BSR     BITMASK
00001516                           763          
00001516  CC42                     764          AND     D2,D6   * apply bitmask
00001518                           765          
00001518  0C46 01C0                766          CMPI    #%0000000111000000,D6
0000151C  6600 00D2                767          BNE     UNKNOWN0100          * it's not LEA, we dont know what it is
00001520                           768          
00001520                           769          * prep values for BITMASK subroutine
00001520  7C03                     770          MOVE.L  #3,D6
00001522  7E05                     771          MOVE.L  #5,D7
00001524                           772          
00001524  6100 0E98                773          BSR     BITMASK
00001528                           774          
00001528  CC42                     775          AND     D2,D6   * apply bitmask
0000152A                           776          
0000152A  0C46 0008                777          CMPI    #%0000000000001000,D6
0000152E  6700 00C0                778          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001532                           779          
00001532  0C46 0018                780          CMPI    #%0000000000011000,D6
00001536  6700 00B8                781          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
0000153A                           782          
0000153A  0C46 0020                783          CMPI    #%0000000000100000,D6
0000153E  6700 00B0                784          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001542                           785          
00001542  0C46 0028                786          CMPI    #%0000000000101000,D6
00001546  6700 00A8                787          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
0000154A                           788          
0000154A  0C46 0030                789          CMPI    #%0000000000110000,D6
0000154E  6700 00A0                790          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001552                           791          
00001552  0C46 0038                792          CMPI    #%0000000000111000,D6
00001556  6700 0046                793          BEQ     TWOWORDLEA          * it's a two word LEA
0000155A                           794          
0000155A                           795          * check to make sure it is a supported mode and size
0000155A                           796          
0000155A  43F9 0000242A            797          LEA     LEAOP,A1
00001560  103C 000E                798          MOVE.B  #14,D0          * Print LEA
00001564  4E4F                     799          TRAP    #15
00001566                           800          
00001566  0882 0007                801          BCLR    #7,D2
0000156A  0882 0008                802          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
0000156E                           803          
0000156E  43F9 000024A7            804          LEA     SPACE,A1
00001574  103C 000E                805          MOVE.B  #14,D0          * Print SPACE
00001578  4E4F                     806          TRAP    #15
0000157A                           807          
0000157A  6100 0634                808          BSR     EAHELPER05
0000157E                           809          
0000157E  43F9 000024AD            810          LEA     COMMA,A1
00001584  103C 000E                811          MOVE.B  #14,D0          * Print COMMA
00001588  4E4F                     812          TRAP    #15
0000158A                           813          
0000158A  6100 05E2                814          BSR     EAHELPER611
0000158E                           815          
0000158E  43F9 00002402            816          LEA     NEWLINE,A1
00001594  103C 000E                817          MOVE.B  #14,D0          * Start a new line
00001598  4E4F                     818          TRAP    #15
0000159A                           819          
0000159A                           820          
0000159A                           821          * call EA helper
0000159A                           822          * MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
0000159A                           823                  
0000159A  6000 0058                824          BRA     DONE0100          * we already found instruction, next iteration
0000159E                           825          
0000159E                           826  TWOWORDLEA
0000159E                           827  
0000159E  43F9 0000242A            828          LEA     LEAOP,A1
000015A4  103C 000E                829          MOVE.B  #14,D0   * Print LEA
000015A8  4E4F                     830          TRAP    #15
000015AA                           831          
000015AA  43F9 000024A7            832          LEA     SPACE,A1
000015B0  103C 000E                833          MOVE.B  #14,D0   * Print SPACE
000015B4  4E4F                     834          TRAP    #15
000015B6                           835  
000015B6  321A                     836          MOVE.W  (A2)+,D1
000015B8                           837          
000015B8  7C00                     838          MOVE.L  #0,D6
000015BA  7E0F                     839          MOVE.L  #15,D7
000015BC                           840          
000015BC  6100 0E00                841          BSR     BITMASK
000015C0                           842          
000015C0  C286                     843          AND.L   D6,D1   * shave off bad info
000015C2                           844          
000015C2  103C 0003                845          MOVE.B  #3,D0   * Print the address which was the source
000015C6  4E4F                     846          TRAP    #15
000015C8                           847          
000015C8  43F9 000024AD            848          LEA     COMMA,A1
000015CE  103C 000E                849          MOVE.B  #14,D0  * Print COMMA
000015D2  4E4F                     850          TRAP    #15
000015D4                           851          
000015D4  0882 0007                852          BCLR    #7,D2
000015D8  0882 0008                853          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
000015DC                           854          
000015DC  6100 0590                855          BSR     EAHELPER611
000015E0                           856          
000015E0  43F9 00002402            857          LEA     NEWLINE,A1
000015E6  103C 000E                858          MOVE.B  #14,D0          * Start a new line
000015EA  4E4F                     859          TRAP    #15
000015EC                           860          
000015EC  6000 0006                861          BRA     DONE0100
000015F0                           862          
000015F0                           863  UNKNOWN0100 *dont know what it is
000015F0  6100 0B62                864          BSR     UNKNOWNOP
000015F4                           865          
000015F4                           866  DONE0100
000015F4  4C9F 0303                867          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
000015F8  4E75                     868          RTS
000015FA                           869          
000015FA  6000 FB5C                870          BRA     ITERATION
000015FE                           871  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000015FE                           872  *-----------------------------------------------------------------------------        
000015FE                           873          
000015FE                           874          
000015FE                           875  
000015FE                           876  *-----------------------------------------------------------------------------
000015FE                           877  *-----------------------------------------------------------------------------
000015FE                           878  * NAME: OP_0101   (SUBQ)
000015FE                           879  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000015FE                           880  * PRE-CONDITION:  xyz
000015FE                           881  * POST-CONDITION: All registers return to their previous state, and the output
000015FE                           882  *                 goes to the output console for reading the raw data or the
000015FE                           883  *                 actual instruction.
000015FE                           884  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000015FE                           885  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000015FE                           886  OP0101
000015FE  48A7 FFC0                887          MOVEM   D0-D7/A0-A1,-(A7)       * Push values to the stack to save
00001602                           888  
00001602  CC7C 0100                889          AND     #%0000000100000000, D6  * Baby-Bitmask for the 8th digit.
00001606  0C46 0100                890          CMPI    #%0000000100000000, D6  * Is the 8th digit a 1?
0000160A  6700 005A                891          BEQ     UNKNOWN0101             * If so, unknown op
0000160E                           892        
0000160E  0C46 0100                893          CMPI    #%0000000100000000, D6  * Is the size 11, an unsupported value?
00001612  6700 0052                894          BEQ     UNKNOWN0101             * If so, unknown op
00001616                           895            
00001616                           896          * Verified SUBQ at this point
00001616  43F9 00002425            897          LEA     SUBQOP,A1           * Print out SUBQ
0000161C  103C 000E                898          MOVE.B  #14,D0              * Trap #14 to print out
00001620  4E4F                     899          TRAP    #15                 * Perform Trap #14
00001622                           900                          
00001622  6100 08E2                901          BSR     SIZE67              * Print out size
00001626                           902          
00001626  43F9 000024AB            903          LEA     IMD,A1              * Formatting
0000162C  103C 000E                904          MOVE.B  #14,D0              * Trap #14 prints out space
00001630  4E4F                     905          TRAP    #15                 * Perform Trap #14
00001632                           906          
00001632  3C3C 0009                907          MOVE.W  #9, D6              * Prep lower value for bitmask
00001636  3E3C 000B                908          MOVE.W  #11,D7              * Prep upper value for bitmask
0000163A  6100 0D82                909          BSR     BITMASK             * Finalize bitmask setup
0000163E  CC42                     910          AND     D2,D6               * Apply bitmask
00001640                           911          
00001640  6100 0CCA                912          BSR     PRINTDATA911        * Special op for immediate in bits 9->11
00001644                           913            
00001644  43F9 000024AD            914          LEA     COMMA,A1            * Formatting
0000164A  103C 000E                915          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000164E  4E4F                     916          TRAP    #15                 * Perform Trap #14
00001650                           917          
00001650  6100 055E                918          BSR     EAHELPER05          * Print out the Effective Address
00001654                           919          
00001654  43F9 00002402            920          LEA     NEWLINE,A1          * Formatting
0000165A  103C 000E                921          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000165E  4E4F                     922          TRAP    #15                 * Perform Trap #14
00001660                           923          
00001660  4C9F 03FF                924          MOVEM   (A7)+,D0-D7/A0-A1   * Pop off the stack to return our registers
00001664  4E75                     925          RTS
00001666                           926      
00001666                           927  UNKNOWN0101
00001666  6100 0AEC                928          BSR     UNKNOWNOP
0000166A  4E75                     929          RTS
0000166C                           930  
0000166C                           931  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000166C                           932  *-----------------------------------------------------------------------------
0000166C                           933  
0000166C                           934  
0000166C                           935  
0000166C                           936  *-----------------------------------------------------------------------------
0000166C                           937  *-----------------------------------------------------------------------------
0000166C                           938  * NAME: OP_0110   (BCC, BCS, BGE, BLT, BVC, BRA)
0000166C                           939  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000166C                           940  * PRE-CONDITION:  Given the possibilties for 0110, masks the next 4 bits
0000166C                           941  *                 in the instruction and determines what the bits match to a
0000166C                           942  *                 given condition code. If the 8 bit offset is $00, or $FF,
0000166C                           943  *                 this signifies a word or long offset (for $00 and $FF
0000166C                           944  *                 respectively). The 8 bit offset is in 2's comp. form, and
0000166C                           945  *                 should be un-done, then plus or minus to the current
0000166C                           946  *                 program counter (PC) to get the actual memory label to
0000166C                           947  *                 output to console. The word offset signal eats an
0000166C                           948  *                 additional 16 bits and the long offset eats an additional
0000166C                           949  *                 32 bits. The word/long offset are for memory alignment.
0000166C                           950  * POST-CONDITION: All registers return to their previous state, and the output
0000166C                           951  *                 goes to the output console for reading the raw data or the
0000166C                           952  *                 actual instruction.
0000166C                           953  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000166C                           954  *                 A1 (output)
0000166C                           955  * CONDITIONS TABLE:
0000166C                           956  *                Condition Names  - Mnemonic - Condition Code
0000166C                           957  *                --------------------------------------------
0000166C                           958  *                True             -    T     - 0000
0000166C                           959  *                False            -    F     - 0001
0000166C                           960  *                Higher           -    HI    - 0010
0000166C                           961  *                Lower or Same    -    LS    - 0011
0000166C                           962  *                Carry Clear      -    CC    - 0100
0000166C                           963  *                Carry Set        -    CS    - 0101
0000166C                           964  *                Not Equal        -    NE    - 0110
0000166C                           965  *                Equal            -    EQ    - 0111
0000166C                           966  *                Overflow Clear   -    VC    - 1000
0000166C                           967  *                Overflow Set     -    VS    - 1001
0000166C                           968  *                Plus             -    PL    - 1010
0000166C                           969  *                Minus            -    MI    - 1011
0000166C                           970  *                Greater or Equal -    GE    - 1100
0000166C                           971  *                Less Than        -    LT    - 1101
0000166C                           972  *                Greater Than     -    GT    - 1110
0000166C                           973  *                Less or Equal    -    LE    - 1111
0000166C                           974  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000166C  48E7 FFFE                975  OP0110  MOVEM.L D0-D7/A0-A6,-(A7) * Save main method routine vars to stack
00001670                           976                          
00001670  3C3C 0009                977          MOVE.W  #9,D6  * Move in 9 to D6
00001674  3E3C 000B                978          MOVE.W  #11,D7 * Move in 11 to D7
00001678                           979                                        
00001678  6100 0D44                980          BSR     BITMASK * Call BITMASK sub-routine, Returns a bitmask in D6
0000167C  CC42                     981          AND     D2,D6   * apply the BITMASK
0000167E                           982          
0000167E  0C46 0400                983          CMPI    #%0000010000000000,D6 * CASE 1: BCC - BINARY FOR "CARRY CLEAR" FLAG
00001682  6700 0032                984          BEQ     OP_BCC
00001686  0C46 0500                985          CMPI    #%0000010100000000,D6 * CASE 2: BCS - BINARY FOR "CARRY SET" FLAG
0000168A  6700 0034                986          BEQ     OP_BCS
0000168E  0C46 0C00                987          CMPI    #%0000110000000000,D6 * CASE 3: BGE - BINARY FOR "GREATER OR EQUAL" FLAG
00001692  6700 0036                988          BEQ     OP_BGE
00001696  0C46 0D00                989          CMPI    #%0000110100000000,D6 * CASE 4: BLT - BINARY FOR "LESS THAN" FLAG
0000169A  6700 0038                990          BEQ     OP_BLT
0000169E  0C46 0800                991          CMPI    #%0000100000000000,D6 * CASE 5: BVC - BINARY FOR "OVERFLOW CLEAR" FLAG
000016A2  6700 003A                992          BEQ     OP_BVC
000016A6  0C46 0000                993          CMPI    #%0000000000000000,D6 * CASE 6: BRA - BINARY FOR "BRANCH ALWAYS" FLAG
000016AA  6700 003C                994          BEQ     OP_BRA
000016AE  6100 0AA4                995          BSR     UNKNOWNOP             * don't know what it is, print it out, skip to end
000016B2  6000 006E                996          BRA     BCC_END
000016B6                           997  
000016B6  43F9 00002465            998  OP_BCC  LEA     OP_BCC_MSG,A1
000016BC  6000 0034                999          BRA     OP_BRANCHES_PRINT
000016C0  43F9 0000246A           1000  OP_BCS  LEA     OP_BCS_MSG,A1
000016C6  6000 002A               1001          BRA     OP_BRANCHES_PRINT
000016CA  43F9 0000246F           1002  OP_BGE  LEA     OP_BGE_MSG,A1
000016D0  6000 0020               1003          BRA     OP_BRANCHES_PRINT
000016D4  43F9 00002474           1004  OP_BLT  LEA     OP_BLT_MSG,A1
000016DA  6000 0016               1005          BRA     OP_BRANCHES_PRINT
000016DE  43F9 00002479           1006  OP_BVC  LEA     OP_BVC_MSG,A1
000016E4  6000 000C               1007          BRA     OP_BRANCHES_PRINT
000016E8  43F9 0000247E           1008  OP_BRA  LEA     OP_BRA_MSG,A1
000016EE  6000 0002               1009          BRA     OP_BRANCHES_PRINT
000016F2                          1010  OP_BRANCHES_PRINT
000016F2  103C 000E               1011          MOVE.B  #14,D0 * print instruction op, chosen from cases directly above
000016F6  4E4F                    1012          TRAP    #15
000016F8                          1013          
000016F8  43F9 000024A9           1014          LEA     DOLLAR,A1
000016FE  103C 000E               1015          MOVE.B  #14,D0 * print raw data hex of the LABEL
00001702  4E4F                    1016          TRAP    #15
00001704                          1017          
00001704  3C3C 0000               1018          MOVE.W  #0,D6                 * Move in 0 to D6 - prep mask
00001708  3E3C 0007               1019          MOVE.W  #7,D7                 * Move in 7 to D7
0000170C  6100 0CB0               1020          BSR     BITMASK               * Call BITMASK sub-routine, return in D6
00001710  CC42                    1021          AND     D2,D6                 * AND mask with op bits, get last 8 bits in D6
00001712                          1022          
00001712                          1023  *        CMPI    #%00000000,D6         * all 0's == word offset
00001712                          1024  *        BEQ     BCC_WORD_OFFSET
00001712                          1025          
00001712                          1026  *        CMPI    #%11111111,D6         * all F's == long offset
00001712                          1027  *        BEQ     BCC_LONG_OFFSET
00001712                          1028  BCC_BYTE_OFFSET
00001712  4254                    1029          CLR     (A4)
00001714  2846                    1030          MOVE.L  D6,A4
00001716  43D4                    1031          LEA     (A4),A1
00001718  103C 000D               1032          MOVE.B  #13,D0
0000171C  4E4F                    1033          TRAP    #15
0000171E  6000 0002               1034          BRA     BCC_END
00001722                          1035  *BCC_WORD_OFFSET
00001722                          1036  *        MOVEM.W (A2)+,A1
00001722                          1037  *        MOVE.B  #13,D0
00001722                          1038  *        TRAP    #15
00001722                          1039  *        BRA     BCC_END
00001722                          1040  *BCC_LONG_OFFSET
00001722                          1041  *        MOVEM.L (A2)+,A1
00001722                          1042  *        MOVE.B  #13,D0
00001722                          1043  *        TRAP    #15
00001722                          1044  *        BRA     BCC_END
00001722                          1045  BCC_END * reload the memory, call RTS
00001722  4C9F 7FFF               1046          MOVEM   (A7)+,D0-D7/A0-A6 * Pop off the stack to return our registers
00001726  4E75                    1047          RTS
00001728                          1048  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001728                          1049  *-----------------------------------------------------------------------------
00001728                          1050  
00001728                          1051  
00001728                          1052  
00001728                          1053  *-----------------------------------------------------------------------------
00001728                          1054  *-----------------------------------------------------------------------------
00001728                          1055  * NAME: OP_0111   ()
00001728                          1056  * DESCRIPTION:    OP code 0111 is not supported. 
00001728                          1057  * PRE-CONDITION:  
00001728                          1058  * POST-CONDITION: 
00001728                          1059  * REGISTERS:
00001728                          1060  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001728                          1061  OP0111
00001728  6100 0A2A               1062      BSR     UNKNOWNOP
0000172C  4E75                    1063      RTS
0000172E                          1064  
0000172E                          1065  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000172E                          1066  *-----------------------------------------------------------------------------
0000172E                          1067  
0000172E                          1068  
0000172E                          1069  
0000172E                          1070  *-----------------------------------------------------------------------------
0000172E                          1071  *-----------------------------------------------------------------------------
0000172E                          1072  * NAME: OP_1000   (DIVS, OR)
0000172E                          1073  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000172E                          1074  * PRE-CONDITION:  xyz
0000172E                          1075  * POST-CONDITION: All registers return to their previous state, and the output
0000172E                          1076  *                 goes to the output console for reading the raw data or the
0000172E                          1077  *                 actual instruction.
0000172E                          1078  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000172E                          1079  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000172E                          1080  OP1000
0000172E  48A7 FFC0               1081          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
00001732                          1082  
00001732                          1083          * Check if the EA Mode is 001 since both DIVS and OR do not support it
00001732  3C3C 0003               1084          MOVE.W  #3, D6              * Prep lower value for bitmask
00001736  3E3C 0005               1085          MOVE.W  #5, D7              * Prep upper value for bitmask
0000173A  6100 0C82               1086          BSR     BITMASK             * Finalize bitmask setup
0000173E  CC42                    1087          AND     D2,D6               * Apply bitmask
00001740                          1088          
00001740  0C46 0008               1089          CMPI    #%0000000000001000, D6  * Is the mode 001, an unsupported mode?
00001744  6700 0A0E               1090          BEQ     UNKNOWNOP                 * If so, the op is not supported
00001748                          1091          
00001748                          1092          * Checking for DIVS
00001748  3C3C 0006               1093          MOVE.W  #6, D6              * Prep lower value for bitmask
0000174C  3E3C 0008               1094          MOVE.W  #8, D7              * Prep upper value for bitmask
00001750  6100 0C6C               1095          BSR     BITMASK             * Finalize bitmask setup
00001754  CC42                    1096          AND     D2,D6               * Apply bitmask
00001756                          1097          
00001756  0C46 01C0               1098          CMPI    #%0000000111000000, D6  * Are we DIVS?
0000175A  6600 0050               1099          BNE     NOTDIVS                 * If not, branch to see if it's OR
0000175E                          1100          
0000175E  43F9 00002405           1101          LEA     DIVSOP,A1           * We found DIVS
00001764  103C 000E               1102          MOVE.B  #14,D0              * Trap #14 prints out the data
00001768  4E4F                    1103          TRAP    #15                 * Perform Trap #14
0000176A                          1104          
0000176A  43F9 000024A7           1105          LEA     SPACE,A1            * formatting
00001770  103C 000E               1106          MOVE.B  #14,D0              * Trap #14 prints out space
00001774  4E4F                    1107          TRAP    #15                 * Perform Trap #14
00001776                          1108          
00001776  4243                    1109          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
00001778  08C3 0000               1110          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
0000177C                          1111                                      * to indicate a potential immediate of size word
0000177C                          1112          
0000177C  6100 0432               1113          BSR     EAHELPER05          * Print out data
00001780                          1114  
00001780  43F9 000024AD           1115          LEA     COMMA,A1            * formatting
00001786  103C 000E               1116          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000178A  4E4F                    1117          TRAP    #15                 * Perform Trap #14
0000178C                          1118          
0000178C                          1119          * bit manipulation is needed to make the outlier DIVS work
0000178C                          1120          * with the generic EAHELPER611
0000178C  0882 0006               1121          BCLR    #6,D2
00001790  0882 0007               1122          BCLR    #7,D2
00001794  0882 0008               1123          BCLR    #8,D2
00001798                          1124          
00001798                          1125          * the above bits were cleared so that eahelper05 knows the destination
00001798                          1126          * is a data register.
00001798                          1127          
00001798  6100 03D4               1128          BSR     EAHELPER611 
0000179C                          1129  
0000179C  43F9 00002402           1130          LEA     NEWLINE,A1          * We found DIVS
000017A2  103C 000E               1131          MOVE.B  #14,D0              * Trap #14 prints out the data
000017A6  4E4F                    1132          TRAP    #15                 * Perform Trap #14
000017A8                          1133          
000017A8  6000 0012               1134          BRA     OP1000END
000017AC                          1135          
000017AC                          1136  NOTDIVS * It is confirmed OR at this point
000017AC  43F9 00002439           1137          LEA     OROP,A1         * We found OR
000017B2  103C 000E               1138          MOVE.B  #14,D0          * Trap #14 prints out the data
000017B6  4E4F                    1139          TRAP    #15             * Perform Trap #14
000017B8                          1140          *================================================================
000017B8                          1141          * todo, move the size of the operation into the leading bits of D5
000017B8                          1142          * before subroutine call
000017B8  6100 03B4               1143          BSR     EAHELPER611
000017BC                          1144  
000017BC                          1145  OP1000END
000017BC  4C9F 03FF               1146          MOVEM   (A7)+,D0-D7/A0-A1
000017C0  4E75                    1147          RTS
000017C2                          1148  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000017C2                          1149  *-----------------------------------------------------------------------------
000017C2                          1150  
000017C2                          1151  
000017C2                          1152  
000017C2                          1153  *-----------------------------------------------------------------------------
000017C2                          1154  *-----------------------------------------------------------------------------
000017C2                          1155  * NAME: OP_1001   (SUB)
000017C2                          1156  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000017C2                          1157  * PRE-CONDITION:  xyz
000017C2                          1158  * POST-CONDITION: All registers return to their previous state, and the output
000017C2                          1159  *                 goes to the output console for reading the raw data or the
000017C2                          1160  *                 actual instruction.
000017C2                          1161  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000017C2                          1162  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000017C2                          1163  OP1001
000017C2                          1164  
000017C2                          1165  
000017C2                          1166  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000017C2                          1167  *-----------------------------------------------------------------------------
000017C2                          1168  
000017C2                          1169  
000017C2                          1170  
000017C2                          1171  *-----------------------------------------------------------------------------
000017C2                          1172  *-----------------------------------------------------------------------------
000017C2                          1173  * NAME: OP_1010   ()
000017C2                          1174  * DESCRIPTION:    a
000017C2                          1175  * PRE-CONDITION:  b
000017C2                          1176  * POST-CONDITION: c
000017C2                          1177  * REGISTERS:      d
000017C2                          1178  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000017C2                          1179  OP1010
000017C2                          1180  
000017C2  6100 0990               1181      BSR     UNKNOWNOP
000017C6  4E75                    1182      RTS
000017C8                          1183  
000017C8                          1184  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000017C8                          1185  *-----------------------------------------------------------------------------
000017C8                          1186  
000017C8                          1187  
000017C8                          1188  
000017C8                          1189  *-----------------------------------------------------------------------------
000017C8                          1190  *-----------------------------------------------------------------------------
000017C8                          1191  * NAME: OP_1011   (EOR, CMP)
000017C8                          1192  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000017C8                          1193  * PRE-CONDITION:  xyz
000017C8                          1194  * POST-CONDITION: All registers return to their previous state, and the output
000017C8                          1195  *                 goes to the output console for reading the raw data or the
000017C8                          1196  *                 actual instruction.
000017C8                          1197  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000017C8                          1198  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000017C8                          1199  OP1011
000017C8                          1200  
000017C8  6100 098A               1201      BSR     UNKNOWNOP
000017CC  4E75                    1202      RTS
000017CE                          1203  
000017CE                          1204  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000017CE                          1205  *-----------------------------------------------------------------------------
000017CE                          1206  
000017CE                          1207  
000017CE                          1208  
000017CE                          1209  *-----------------------------------------------------------------------------
000017CE                          1210  *-----------------------------------------------------------------------------
000017CE                          1211  * NAME: OP_1100   (MULS)
000017CE                          1212  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000017CE                          1213  * PRE-CONDITION:  xyz
000017CE                          1214  * POST-CONDITION: All registers return to their previous state, and the output
000017CE                          1215  *                 goes to the output console for reading the raw data or the
000017CE                          1216  *                 actual instruction.
000017CE                          1217  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000017CE                          1218  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000017CE                          1219  OP1100
000017CE  48A7 FFC0               1220          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
000017D2                          1221  
000017D2                          1222          * Check if the EA Mode is 001 since MULS does not support it
000017D2  3C3C 0003               1223          MOVE.W  #3, D6              * Prep lower value for bitmask
000017D6  3E3C 0005               1224          MOVE.W  #5, D7              * Prep upper value for bitmask
000017DA  6100 0BE2               1225          BSR     BITMASK             * Finalize bitmask setup
000017DE  CC42                    1226          AND     D2,D6               * Apply bitmask
000017E0                          1227          
000017E0  0C46 0008               1228          CMPI    #%0000000000001000, D6    * Is the mode 001, an unsupported mode?
000017E4  6700 0068               1229          BEQ     UNKNOWN1100               * If so, the op is not supported
000017E8                          1230          
000017E8  3C3C 0006               1231          MOVE.W  #6, D6              * Prep lower value for bitmask
000017EC  3E3C 0008               1232          MOVE.W  #8, D7              * Prep upper value for bitmask
000017F0  6100 0BCC               1233          BSR     BITMASK             * Finalize bitmask setup
000017F4  CC42                    1234          AND     D2,D6               * Apply bitmask
000017F6                          1235          
000017F6  0C46 01C0               1236          CMPI    #%0000000111000000, D6  * Are we MULS?
000017FA  6600 0052               1237          BNE     UNKNOWN1100             * If not, it is an unknown op
000017FE                          1238          
000017FE  43F9 00002434           1239          LEA     MULSOP,A1           * We found MULS
00001804  103C 000E               1240          MOVE.B  #14,D0              * Trap #14 prints out the data
00001808  4E4F                    1241          TRAP    #15                 * Perform Trap #14
0000180A                          1242          
0000180A  43F9 000024A7           1243          LEA     SPACE,A1            * formatting
00001810  103C 000E               1244          MOVE.B  #14,D0              * Trap #14 prints out space
00001814  4E4F                    1245          TRAP    #15                 * Perform Trap #14
00001816                          1246          
00001816  4243                    1247          CLR     D3                  * clear D3, it is a parameter
00001818  08C3 0000               1248          BSET    #0,D3               * of EAHELPER05 to indicate size
0000181C                          1249          
0000181C  6100 0392               1250          BSR     EAHELPER05          * Print out data
00001820                          1251  
00001820  43F9 000024AD           1252          LEA     COMMA,A1            * formatting
00001826  103C 000E               1253          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000182A  4E4F                    1254          TRAP    #15                 * Perform Trap #14
0000182C                          1255          
0000182C  0882 0006               1256          BCLR    #6,D2               * Bit manipulation is 
00001830  0882 0007               1257          BCLR    #7,D2               * necessary in order to make
00001834  0882 0008               1258          BCLR    #8,D2               * EAHELPER611 work generically
00001838                          1259          
00001838  6100 0334               1260          BSR     EAHELPER611         * Print out EA
0000183C                          1261  
0000183C  43F9 00002402           1262          LEA     NEWLINE,A1          * Formatting
00001842  103C 000E               1263          MOVE.B  #14,D0              * Trap #14 prints out the data
00001846  4E4F                    1264          TRAP    #15                 * Perform Trap #14
00001848                          1265          
00001848  4C9F 03FF               1266          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
0000184C  4E75                    1267          RTS                         * Return to main
0000184E                          1268          
0000184E                          1269  UNKNOWN1100
0000184E  6100 0904               1270          BSR     UNKNOWNOP
00001852                          1271       
00001852  4C9F 03FF               1272          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
00001856  4E75                    1273          RTS                         * Return to main
00001858                          1274          
00001858                          1275  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001858                          1276  *-----------------------------------------------------------------------------
00001858                          1277  
00001858                          1278  
00001858                          1279  
00001858                          1280  *-----------------------------------------------------------------------------
00001858                          1281  *-----------------------------------------------------------------------------
00001858                          1282  * NAME: OP_1101   (ADD, ADDA)
00001858                          1283  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001858                          1284  * PRE-CONDITION:  xyz
00001858                          1285  * POST-CONDITION: All registers return to their previous state, and the output
00001858                          1286  *                 goes to the output console for reading the raw data or the
00001858                          1287  *                 actual instruction.
00001858                          1288  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001858                          1289  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001858                          1290  OP1101
00001858                          1291  
00001858  48E7 FFFE               1292          MOVEM.L A0-A6/D0-D7,-(A7)
0000185C  3602                    1293          MOVE.W  D2,D3 * make a copy to mutate
0000185E  EF0B                    1294          LSL.B   #7,D3 * isolate the 3 opmode bits
00001860  E00B                    1295          LSR.B   #8,D3 * by shifting out non-opmode bits
00001862  EA0B                    1296          LSR.B   #5,D3
00001864                          1297          
00001864  0C03 0000               1298          CMPI.B  #0,D3
00001868  6700 003E               1299          BEQ     BYTE_EA_DN
0000186C  0C03 0001               1300          CMPI.B  #1,D3
00001870  6700 004E               1301          BEQ     WORD_EA_DN
00001874  0C03 0002               1302          CMPI.B  #2,D3
00001878  6700 005E               1303          BEQ     LONG_EA_DN
0000187C  0C03 0003               1304          CMPI.B  #3,D3
00001880  6700 006E               1305          BEQ     ADDA_WORD_OP
00001884  0C03 0004               1306          CMPI.B  #4,D3
00001888  6700 008A               1307          BEQ     BYTE_DN_EA
0000188C  0C03 0005               1308          CMPI.B  #5,D3
00001890  6700 009A               1309          BEQ     WORD_DN_EA
00001894  0C03 0006               1310          CMPI.B  #6,D3
00001898  6700 00AA               1311          BEQ     LONG_DN_EA
0000189C  0C03 0007               1312          CMPI.B  #7,D3
000018A0  6700 00BA               1313          BEQ     ADDA_LONG_OP
000018A4  6000 011A               1314          BRA     ADD_ADDA_END
000018A8                          1315          
000018A8                          1316  BYTE_EA_DN
000018A8  6100 00D6               1317          BSR     ADD_EA_DN_GENERIC       * print out 'ADD' base op name for ADDA too
000018AC                          1318  
000018AC  43F9 000024BB           1319          LEA     __B,A1                  * print out size
000018B2  103C 000E               1320          MOVE.B  #14,D0
000018B6  4E4F                    1321          TRAP    #15
000018B8                          1322  
000018B8  6100 00D4               1323          BSR     ADD_ADDA_SPACE          * print out space
000018BC                          1324      *   MOVE.B  #1,-(A7)                * #1 means ea, then reg, versus #0 reg, then ea
000018BC                          1325      *   BSR     ADD_ADDA_EA_REG         * break to print out reg's
000018BC  6000 00E2               1326          BRA     ADD_ADDA_PRINT
000018C0                          1327  
000018C0                          1328  WORD_EA_DN
000018C0  6100 00BE               1329          BSR     ADD_EA_DN_GENERIC
000018C4                          1330  
000018C4  43F9 000024BF           1331          LEA     __W,A1
000018CA  103C 000E               1332          MOVE.B  #14,D0
000018CE  4E4F                    1333          TRAP    #15
000018D0                          1334          
000018D0  6100 00BC               1335          BSR     ADD_ADDA_SPACE
000018D4                          1336   *      MOVE.B  #1,-(A7)                * #1 means ea, then reg, versus #0 reg, then ea
000018D4                          1337   *      BSR     ADD_ADDA_EA_REG         * break to print out reg's
000018D4  6000 00CA               1338          BRA     ADD_ADDA_PRINT
000018D8                          1339          
000018D8                          1340  LONG_EA_DN
000018D8  6100 00A6               1341          BSR     ADD_EA_DN_GENERIC
000018DC                          1342  
000018DC  43F9 000024C3           1343          LEA     __L,A1
000018E2  103C 000E               1344          MOVE.B  #14,D0
000018E6  4E4F                    1345          TRAP    #15
000018E8                          1346  
000018E8  6100 00A4               1347          BSR     ADD_ADDA_SPACE
000018EC                          1348      *   MOVE.B  #1,-(A7)                * #1 means ea, then reg, versus #0 reg, then ea
000018EC                          1349      *   BSR     ADD_ADDA_EA_REG         * break to print out reg's
000018EC  6000 00B2               1350          BRA     ADD_ADDA_PRINT
000018F0                          1351          
000018F0                          1352  ADDA_WORD_OP
000018F0  6100 008E               1353          BSR     ADD_EA_DN_GENERIC
000018F4                          1354  
000018F4  43F9 0000249B           1355          LEA     ASCII_A,A1
000018FA  103C 000E               1356          MOVE.B  #14,D0
000018FE  4E4F                    1357          TRAP    #15
00001900                          1358  
00001900  43F9 000024BF           1359          LEA     __W,A1
00001906  103C 000E               1360          MOVE.B  #14,D0
0000190A  4E4F                    1361          TRAP    #15
0000190C                          1362          
0000190C  6100 0080               1363          BSR     ADD_ADDA_SPACE
00001910                          1364   *      MOVE.B  #1,-(A7)                * #1 means ea, then reg, versus #0 reg, then ea
00001910                          1365   *      BSR     ADD_ADDA_EA_REG         * break to print out reg's
00001910  6000 008E               1366          BRA     ADD_ADDA_PRINT
00001914                          1367          
00001914                          1368  BYTE_DN_EA
00001914  6100 006A               1369          BSR     ADD_EA_DN_GENERIC
00001918                          1370          
00001918  43F9 000024BB           1371          LEA     __B,A1
0000191E  103C 000E               1372          MOVE.B  #14,D0
00001922  4E4F                    1373          TRAP    #15
00001924                          1374          
00001924  6100 0068               1375          BSR     ADD_ADDA_SPACE
00001928                          1376   *      MOVE.B  #0,-(A7)                * #1 means ea, then reg, versus #0 reg, then ea
00001928                          1377   *      BSR     ADD_ADDA_EA_REG         * break to print out reg's
00001928  6000 0076               1378          BRA     ADD_ADDA_PRINT
0000192C                          1379  
0000192C                          1380  WORD_DN_EA
0000192C  6100 0052               1381          BSR     ADD_EA_DN_GENERIC
00001930                          1382  
00001930  43F9 000024BF           1383          LEA     __W,A1
00001936  103C 000E               1384          MOVE.B  #14,D0
0000193A  4E4F                    1385          TRAP    #15 
0000193C                          1386  
0000193C  6100 0050               1387          BSR     ADD_ADDA_SPACE
00001940                          1388   *      MOVE.B  #0,-(A7)                * #1 means ea, then reg, versus #0 reg, then ea
00001940                          1389   *      BSR     ADD_ADDA_EA_REG         * break to print out reg's
00001940  6000 005E               1390          BRA     ADD_ADDA_PRINT
00001944                          1391  
00001944                          1392  LONG_DN_EA
00001944  6100 003A               1393          BSR     ADD_EA_DN_GENERIC
00001948                          1394          
00001948  43F9 000024C3           1395          LEA     __L,A1
0000194E  103C 000E               1396          MOVE.B  #14,D0
00001952  4E4F                    1397          TRAP    #15     
00001954                          1398          
00001954  6100 0038               1399          BSR     ADD_ADDA_SPACE
00001958                          1400   *      MOVE.B  #0,-(A7)                * #1 means ea, then reg, versus #0 reg, then ea
00001958                          1401   *      BSR     ADD_ADDA_EA_REG         * break to print out reg's
00001958  6000 0046               1402          BRA     ADD_ADDA_PRINT
0000195C                          1403  
0000195C                          1404  ADDA_LONG_OP
0000195C  6100 0022               1405          BSR     ADD_EA_DN_GENERIC
00001960                          1406          
00001960  43F9 0000249B           1407          LEA     ASCII_A,A1
00001966  103C 000E               1408          MOVE.B  #14,D0
0000196A  4E4F                    1409          TRAP    #15
0000196C                          1410          
0000196C  43F9 000024C3           1411          LEA     __L,A1
00001972  103C 000E               1412          MOVE.B  #14,D0
00001976  4E4F                    1413          TRAP    #15
00001978                          1414          
00001978  6100 0014               1415          BSR     ADD_ADDA_SPACE
0000197C                          1416   *      MOVE.B  #1,-(A7)                * #1 means ea, then reg, versus #0 reg, then ea
0000197C                          1417   *      BSR     ADD_ADDA_EA_REG         * break to print out reg's
0000197C  6000 0022               1418          BRA     ADD_ADDA_PRINT
00001980                          1419  
00001980                          1420  ADD_EA_DN_GENERIC
00001980  43F9 00002483           1421          LEA     OP_ADD_MSG,A1           * print out 'ADD'
00001986  103C 000E               1422          MOVE.B  #14,D0
0000198A  4E4F                    1423          TRAP    #15
0000198C  4E75                    1424          RTS
0000198E                          1425          
0000198E                          1426  ADD_ADDA_SPACE
0000198E  43F9 000024A7           1427          LEA     SPACE,A1
00001994  103C 000E               1428          MOVE.B  #14,D0
00001998  4E4F                    1429          TRAP    #15
0000199A  4E75                    1430          RTS
0000199C                          1431          
0000199C                          1432  ADD_ADDA_EA_REG
0000199C  4244                    1433          CLR     D4
0000199E  181F                    1434          MOVE.B  (A7)+,D4                * pop off from the stack, to tell what to do next
000019A0                          1435          
000019A0                          1436   *        CMPI.B  #1,D4
000019A0                          1437   *       BEQ     EA_THEN_REG
000019A0                          1438   *       CMPI.B  #0,D4
000019A0                          1439   *       BEQ     REG_THEN_EA
000019A0                          1440          
000019A0                          1441   *       BRA     ADD_ADDA_END            * error if this gets hitup
000019A0                          1442          
000019A0                          1443  * EA_THEN_REG                             * the upper reg comes after then ea in lower 6 bits
000019A0                          1444  * REG_THEN_EA                             * vice-versa for EA_THEN_REG
000019A0                          1445  ADD_ADDA_PRINT
000019A0                          1446  
000019A0  6100 020E               1447          BSR     EAHELPER05          * Print out data. TODO: DOESN'T WORK.
000019A4                          1448  
000019A4  43F9 000024AD           1449          LEA     COMMA,A1            * formatting
000019AA  103C 000E               1450          MOVE.B  #14,D0              * Trap #14 prints out a comma
000019AE  4E4F                    1451          TRAP    #15                 * Perform Trap #14
000019B0                          1452          
000019B0                          1453          * bit manipulation is needed to make the outlier DIVS work
000019B0                          1454          * with the generic EAHELPER611
000019B0  0882 0006               1455          BCLR    #6,D2
000019B4  0882 0007               1456          BCLR    #7,D2
000019B8  0882 0008               1457          BCLR    #8,D2
000019BC                          1458          
000019BC                          1459          * the above bits were cleared so that eahelper05 knows the destination
000019BC                          1460          * is a data register.
000019BC                          1461          
000019BC  6100 01B0               1462          BSR     EAHELPER611 
000019C0                          1463          
000019C0                          1464  ADD_ADDA_END
000019C0  43F9 00002402           1465          LEA     NEWLINE,A1
000019C6  103C 000E               1466          MOVE.B  #14,D0
000019CA  4E4F                    1467          TRAP    #15
000019CC  4CDF 7FFF               1468          MOVEM.L (A7)+,A0-A6/D0-D7
000019D0  4E75                    1469          RTS
000019D2                          1470  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000019D2                          1471  *-----------------------------------------------------------------------------
000019D2                          1472  
000019D2                          1473  
000019D2                          1474  
000019D2                          1475  *-----------------------------------------------------------------------------
000019D2                          1476  *-----------------------------------------------------------------------------
000019D2                          1477  * NAME: OP_1110   (LSL, LSR, ASL, ASR, ROL, ROR)
000019D2                          1478  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000019D2                          1479  * PRE-CONDITION:  xyz
000019D2                          1480  * POST-CONDITION: All registers return to their previous state, and the output
000019D2                          1481  *                 goes to the output console for reading the raw data or the
000019D2                          1482  *                 actual instruction.
000019D2                          1483  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000019D2                          1484  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000019D2                          1485  OP1110
000019D2                          1486  
000019D2  48A7 FFC0               1487      MOVEM   D0-D7/A0-A1,-(A7)   * Caller saved
000019D6                          1488  
000019D6  7C03                    1489      MOVE.L  #3,D6
000019D8  7E04                    1490      MOVE.L  #4,D7
000019DA                          1491      
000019DA  6100 09E2               1492      BSR     BITMASK * generate a bitmask for the 3 and 4 bits
000019DE                          1493      
000019DE  CC82                    1494      AND.L   D2,D6
000019E0                          1495      
000019E0  0C46 0008               1496      CMPI    #%0000000000001000,D6 *is it a logical shift
000019E4  6700 001A               1497      BEQ     LS
000019E8                          1498      
000019E8  0C46 0000               1499      CMPI    #%0000000000000000,D6 *is it an arithmatic shift
000019EC  6700 0048               1500      BEQ     AS
000019F0                          1501      
000019F0  0C46 0018               1502      CMPI    #%0000000000011000,D6 *is it a rorate?
000019F4  6700 0076               1503      BEQ     RO
000019F8                          1504  
000019F8  6100 075A               1505      BSR     UNKNOWNOP *if nothing above, we don't know what it is
000019FC  6000 0158               1506      BRA     ENDOP1110
00001A00                          1507      
00001A00                          1508  LS
00001A00  7C08                    1509      MOVE.L  #8,D6
00001A02  7E08                    1510      MOVE.L  #8,D7
00001A04                          1511      
00001A04  6100 09B8               1512      BSR     BITMASK
00001A08                          1513      
00001A08  CC82                    1514      AND.L   D2,D6
00001A0A                          1515      
00001A0A  0C46 0000               1516      CMPI    #0,D6 * is it a left shift?
00001A0E  6700 0016               1517      BEQ     LSR
00001A12                          1518      
00001A12  6000 0002               1519      BRA     LSL * if not a left shift, must be right
00001A16                          1520  
00001A16                          1521  LSL
00001A16                          1522  
00001A16  43F9 00002445           1523      LEA     LSLOP,A1            * formatting
00001A1C  103C 000E               1524      MOVE.B  #14,D0              * Trap #14 prints out LSL
00001A20  4E4F                    1525      TRAP    #15                 * Perform Trap #14
00001A22                          1526      
00001A22  6000 007E               1527      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001A26                          1528                                  * prints the registers and imm data
00001A26                          1529  LSR
00001A26                          1530  
00001A26  43F9 00002449           1531      LEA     LSROP,A1            * formatting
00001A2C  103C 000E               1532      MOVE.B  #14,D0              * Trap #14 prints out LSR
00001A30  4E4F                    1533      TRAP    #15                 * Perform Trap #14
00001A32                          1534      
00001A32  6000 006E               1535      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001A36                          1536                                  * prints the registers and imm data
00001A36                          1537  
00001A36                          1538  AS
00001A36  7C08                    1539      MOVE.L  #8,D6
00001A38  7E08                    1540      MOVE.L  #8,D7
00001A3A                          1541      
00001A3A  6100 0982               1542      BSR     BITMASK
00001A3E                          1543      
00001A3E  CC82                    1544      AND.L   D2,D6
00001A40                          1545      
00001A40  0C46 0000               1546      CMPI    #0,D6 * is it a left shift?
00001A44  6700 0016               1547      BEQ     ASR
00001A48                          1548      
00001A48  6000 0002               1549      BRA     ASL * if not a left shift, must be right
00001A4C                          1550      
00001A4C                          1551  ASL
00001A4C                          1552  
00001A4C  43F9 0000244D           1553      LEA     ASLOP,A1            * formatting
00001A52  103C 000E               1554      MOVE.B  #14,D0              * Trap #14 prints out ASL
00001A56  4E4F                    1555      TRAP    #15                 * Perform Trap #14
00001A58                          1556      
00001A58  6000 0048               1557      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001A5C                          1558                                  * prints the registers and imm data
00001A5C                          1559  ASR
00001A5C                          1560  
00001A5C  43F9 00002451           1561      LEA     ASROP,A1            * formatting
00001A62  103C 000E               1562      MOVE.B  #14,D0              * Trap #14 prints out ASR
00001A66  4E4F                    1563      TRAP    #15                 * Perform Trap #14
00001A68                          1564      
00001A68  6000 0038               1565      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001A6C                          1566                                  * prints the registers and imm data
00001A6C                          1567  RO
00001A6C  7C08                    1568      MOVE.L  #8,D6
00001A6E  7E08                    1569      MOVE.L  #8,D7
00001A70                          1570      
00001A70  6100 094C               1571      BSR     BITMASK
00001A74                          1572      
00001A74  CC82                    1573      AND.L   D2,D6
00001A76                          1574      
00001A76  0C46 0000               1575      CMPI    #0,D6 * is it a left shift?
00001A7A  6700 0016               1576      BEQ     ROR
00001A7E                          1577      
00001A7E  6000 0002               1578      BRA     ROL * if not a left shift, must be right
00001A82                          1579  
00001A82                          1580  ROL
00001A82                          1581  
00001A82  43F9 00002455           1582      LEA     ROLOP,A1            * formatting
00001A88  103C 000E               1583      MOVE.B  #14,D0              * Trap #14 prints out ROL
00001A8C  4E4F                    1584      TRAP    #15                 * Perform Trap #14
00001A8E                          1585      
00001A8E  6000 0012               1586      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001A92                          1587                                  * prints the registers and imm data
00001A92                          1588  ROR
00001A92                          1589  
00001A92  43F9 00002459           1590      LEA     ROROP,A1            * formatting
00001A98  103C 000E               1591      MOVE.B  #14,D0              * Trap #14 prints out ROR
00001A9C  4E4F                    1592      TRAP    #15                 * Perform Trap #14
00001A9E                          1593      
00001A9E  6000 0002               1594      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001AA2                          1595                                  * prints the registers and imm data
00001AA2                          1596  
00001AA2                          1597  OP1110GENERIC
00001AA2                          1598  
00001AA2  6100 0462               1599      BSR     SIZE67
00001AA6                          1600      
00001AA6  7C05                    1601      MOVE.L  #5,D6
00001AA8  7E05                    1602      MOVE.L  #5,D7
00001AAA                          1603      
00001AAA  6100 0912               1604      BSR     BITMASK
00001AAE                          1605      
00001AAE  CC82                    1606      AND.L   D2,D6
00001AB0                          1607      
00001AB0  0C46 0020               1608      CMPI    #%0000000000100000,D6   *is it a data reg?
00001AB4  6700 0074               1609      BEQ     OP1110DATAREG
00001AB8                          1610      
00001AB8  43F9 000024AB           1611      LEA     IMD,A1              * formatting
00001ABE  103C 000E               1612      MOVE.B  #14,D0              * Trap #14 prints out pound #
00001AC2  4E4F                    1613      TRAP    #15                 * Perform Trap #14
00001AC4                          1614      
00001AC4  7C09                    1615      MOVE.L  #9,D6
00001AC6  7E0B                    1616      MOVE.L  #11,D7
00001AC8                          1617      
00001AC8  6100 08F4               1618      BSR     BITMASK
00001ACC                          1619      
00001ACC  CC82                    1620      AND.L   D2,D6
00001ACE                          1621      
00001ACE  0C46 0000               1622      CMPI    #0,D6 * special case, if zero print #8 not #0
00001AD2  6700 002E               1623      BEQ     OP1110IMMEIGHT
00001AD6                          1624      
00001AD6  E08E                    1625      LSR.L   #8,D6
00001AD8  E28E                    1626      LSR.L   #1,D6
00001ADA                          1627      
00001ADA  2206                    1628      MOVE.L  D6,D1              * formatting
00001ADC  103C 0003               1629      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001AE0  4E4F                    1630      TRAP    #15                * Perform Trap #14
00001AE2                          1631      
00001AE2  43F9 000024AD           1632      LEA     COMMA,A1            * formatting
00001AE8  103C 000E               1633      MOVE.B  #14,D0              * Trap #14 prints out comma
00001AEC  4E4F                    1634      TRAP    #15                 * Perform Trap #1
00001AEE                          1635      
00001AEE                          1636      * in order to use the eahlpers, we need to do some bit manipulation
00001AEE                          1637      * clearing the bits below lets our helper know that the mode is Dn
00001AEE  0882 0003               1638      BCLR    #3,D2
00001AF2  0882 0004               1639      BCLR    #4,D2
00001AF6  0882 0005               1640      BCLR    #5,D2
00001AFA                          1641      
00001AFA  6100 00B4               1642      BSR     EAHELPER05
00001AFE                          1643      
00001AFE  6000 0056               1644      BRA     ENDOP1110
00001B02                          1645      
00001B02                          1646  OP1110IMMEIGHT
00001B02                          1647  
00001B02  7208                    1648      MOVE.L  #8,D1              * formatting
00001B04  103C 0003               1649      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001B08  4E4F                    1650      TRAP    #15                * Perform Trap #14
00001B0A                          1651      
00001B0A  43F9 000024AD           1652      LEA     COMMA,A1            * formatting
00001B10  103C 000E               1653      MOVE.B  #14,D0              * Trap #14 prints out comma
00001B14  4E4F                    1654      TRAP    #15                 * Perform Trap #1
00001B16                          1655      
00001B16                          1656      * in order to use the eahlpers, we need to do some bit manipulation
00001B16                          1657      * clearing the bits below lets our helper know that the mode is Dn
00001B16  0882 0003               1658      BCLR    #3,D2
00001B1A  0882 0004               1659      BCLR    #4,D2
00001B1E  0882 0005               1660      BCLR    #5,D2
00001B22                          1661      
00001B22  6100 008C               1662      BSR     EAHELPER05
00001B26                          1663      
00001B26  6000 002E               1664      BRA     ENDOP1110
00001B2A                          1665  
00001B2A                          1666  OP1110DATAREG
00001B2A                          1667  
00001B2A                          1668      * in order to use the eahlpers, we need to do some bit manipulation
00001B2A                          1669      * clearing the bits below lets our helper know that the mode is Dn
00001B2A  0882 0003               1670      BCLR    #3,D2
00001B2E  0882 0004               1671      BCLR    #4,D2
00001B32  0882 0005               1672      BCLR    #5,D2
00001B36  0882 0006               1673      BCLR    #6,D2
00001B3A  0882 0007               1674      BCLR    #7,D2
00001B3E  0882 0008               1675      BCLR    #8,D2
00001B42                          1676      
00001B42  6100 002A               1677      BSR     EAHELPER611
00001B46                          1678      
00001B46  43F9 000024AD           1679      LEA     COMMA,A1            * formatting
00001B4C  103C 000E               1680      MOVE.B  #14,D0              * Trap #14 prints out comma
00001B50  4E4F                    1681      TRAP    #15                 * Perform Trap #14
00001B52                          1682      
00001B52  6100 005C               1683      BSR     EAHELPER05
00001B56                          1684  
00001B56                          1685  ENDOP1110
00001B56                          1686  
00001B56  43F9 00002402           1687      LEA     NEWLINE,A1          * formatting
00001B5C  103C 000E               1688      MOVE.B  #14,D0              * Trap #14 prints out a new line
00001B60  4E4F                    1689      TRAP    #15                 * Perform Trap #14
00001B62                          1690      
00001B62  4C9F 03FF               1691      MOVEM   (A7)+,D0-D7/A0-A1   * Caller saved
00001B66  4E75                    1692      RTS
00001B68                          1693  
00001B68                          1694  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001B68                          1695  *-----------------------------------------------------------------------------
00001B68                          1696  
00001B68                          1697  
00001B68                          1698  
00001B68                          1699  *-----------------------------------------------------------------------------
00001B68                          1700  *-----------------------------------------------------------------------------
00001B68                          1701  * NAME: OP_1111   ()
00001B68                          1702  * DESCRIPTION:    a
00001B68                          1703  * PRE-CONDITION:  b
00001B68                          1704  * POST-CONDITION: c
00001B68                          1705  * REGISTERS:      d
00001B68                          1706  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001B68                          1707  OP1111
00001B68                          1708  
00001B68  6100 05EA               1709      BSR     UNKNOWNOP
00001B6C  4E75                    1710      RTS
00001B6E                          1711  
00001B6E                          1712  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001B6E                          1713  *-----------------------------------------------------------------------------
00001B6E                          1714  
00001B6E                          1715  
00001B6E                          1716  
00001B6E                          1717  *-----------------------------------------------------------------------------
00001B6E                          1718  *-----------------------------------------------------------------------------
00001B6E                          1719  * NAME:           EAHELPER611
00001B6E                          1720  * DESCRIPTION:    a
00001B6E                          1721  * PRE-CONDITION:  D2 contains the instruction to print modes for.
00001B6E                          1722  *                 D5 contains the size of the data to be printed
00001B6E                          1723  * POST-CONDITION: Determines if mode is direct, if it's not, passes D2 to 
00001B6E                          1724  *                 EAHELPER05 to print.
00001B6E                          1725  * REGISTERS:      a
00001B6E                          1726  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001B6E                          1727  EAHELPER611
00001B6E  48A7 FFC0               1728      MOVEM  D0-D7/A0-A1,-(A7)    * Push values onto stack
00001B72                          1729      
00001B72  3C3C 0006               1730      MOVE.W  #6, D6              * Prep lower value for bitmask
00001B76  3E3C 0008               1731      MOVE.W  #8, D7              * Prep upper value for bitmask
00001B7A  6100 0842               1732      BSR     BITMASK             * Finalize bitmask setup
00001B7E  CC42                    1733      AND     D2,D6               * Apply bitmask
00001B80                          1734      
00001B80                          1735      * to move the mode where EAHELPER50 can process it
00001B80  7C06                    1736      MOVE.L  #6,D6       * Prep lower value of bitmask
00001B82  7E08                    1737      MOVE.L  #8,D7       * Prep upper value of bitmask
00001B84  6100 0838               1738      BSR     BITMASK     * Create bitmask
00001B88  CC42                    1739      AND     D2,D6       * Apply bitmask
00001B8A                          1740      
00001B8A  4243                    1741      CLR     D3      * prep D3 to store values
00001B8C  3606                    1742      MOVE.W  D6,D3   * store bitmasked value in D3
00001B8E  E64B                    1743      LSR     #3,D3   * move bits 6-8 to 3-5
00001B90                          1744      
00001B90                          1745      * to move the register where EAHELPER50 can process it
00001B90  7C09                    1746      MOVE.L  #9,D6   * Prep lower value for bitmask
00001B92  7E0B                    1747      MOVE.L  #11,D7  * Prep upper value for bitmask
00001B94  6100 0828               1748      BSR     BITMASK * create bitmask
00001B98  CC42                    1749      AND     D2,D6   * apply bitmask
00001B9A                          1750      
00001B9A  4244                    1751      CLR     D4      * prep D3 to store values
00001B9C  3806                    1752      MOVE.W  D6,D4   * store bitmasked value in D3
00001B9E                          1753      
00001B9E  E04C                    1754      LSR     #8,D4   * move bits 9-11 to 0-2
00001BA0  E24C                    1755      LSR     #1,D4   * move bits 9-11 to 0-2
00001BA2                          1756    
00001BA2  8684                    1757      OR.L    D4,D3   * combind the register and mode
00001BA4  2403                    1758      MOVE.L  D3,D2   * put the result in D2 so EAHELPER05 can process it
00001BA6                          1759      
00001BA6  6100 0008               1760      BSR     EAHELPER05
00001BAA                          1761      
00001BAA                          1762  ENDEAHELPER611
00001BAA                          1763      
00001BAA  4C9F 03FF               1764      MOVEM  (A7)+,D0-D7/A0-A1    * Revert back
00001BAE  4E75                    1765      RTS
00001BB0                          1766  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001BB0                          1767  *-----------------------------------------------------------------------------
00001BB0                          1768  
00001BB0                          1769  
00001BB0                          1770  
00001BB0                          1771  *-----------------------------------------------------------------------------
00001BB0                          1772  *-----------------------------------------------------------------------------
00001BB0                          1773  * NAME:           EAHELPER05
00001BB0                          1774  * DESCRIPTION:    a
00001BB0                          1775  * PRE-CONDITION:  D2 contains the instruction to print modes for. Only call
00001BB0                          1776  *                 this sub-routine helper for operations that only have one
00001BB0                          1777  *                 mode register.
00001BB0                          1778  * POST-CONDITION: Determines mode, passes D2 to REGHELPER to print.
00001BB0                          1779  * REGISTERS:      a
00001BB0                          1780  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001BB0                          1781  EAHELPER05
00001BB0                          1782      * todo: add code for printing immediate values
00001BB0                          1783      
00001BB0  48A7 FFC0               1784      MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001BB4                          1785      
00001BB4  7C03                    1786      MOVE.L  #3,D6
00001BB6  7E05                    1787      MOVE.L  #5,D7
00001BB8                          1788      
00001BB8  6100 0804               1789      BSR     BITMASK * generate a bitmask to identify the mode
00001BBC                          1790      
00001BBC  CC42                    1791      AND     D2,D6   * mask off the parts of D2 we don't need
00001BBE                          1792      
00001BBE  2A06                    1793      MOVE.L  D6,D5   * store the 3-5 bitmask for later use
00001BC0                          1794      
00001BC0  0C46 0000               1795      CMPI    #%0000000000000000,D6 * is it data register direct?
00001BC4  6600 000A               1796      BNE     NOTDATAREG
00001BC8                          1797      
00001BC8  6100 013C               1798      BSR     MODE_DN
00001BCC                          1799       
00001BCC  6000 0132               1800      BRA     ENDEAHELPER05
00001BD0                          1801      
00001BD0                          1802  NOTDATAREG * address register direct
00001BD0                          1803      
00001BD0  0C46 0008               1804      CMPI    #%0000000000001000,D6 * is it address register direct?
00001BD4  6600 000A               1805      BNE     NOTADRDIRECT
00001BD8                          1806      
00001BD8  6100 022C               1807      BSR     MODE_AN * simply prints out the address register
00001BDC                          1808       
00001BDC  6000 0122               1809      BRA     ENDEAHELPER05
00001BE0                          1810      
00001BE0                          1811  NOTADRDIRECT * address register indirect
00001BE0                          1812          
00001BE0  0C46 0010               1813      CMPI    #%0000000000010000,D6 * is it address register indirect?
00001BE4  6600 0022               1814      BNE     NOTADRINDIRECT
00001BE8                          1815      
00001BE8  43F9 000024AF           1816      LEA     OBRACK,A1       * Load '('
00001BEE  303C 000E               1817      MOVE.W  #14,D0          * Trap #14 to display message
00001BF2  4E4F                    1818      TRAP    #15             * Perform #14
00001BF4                          1819          
00001BF4                          1820  
00001BF4  6100 0210               1821      BSR     MODE_AN * print out an address register
00001BF8                          1822      
00001BF8  43F9 000024B1           1823      LEA     CBRACK,A1       * Load ')'
00001BFE  303C 000E               1824      MOVE.W  #14,D0          * Trap #14 to display message
00001C02  4E4F                    1825      TRAP    #15             * Perform #14
00001C04                          1826       
00001C04  6000 00FA               1827      BRA     ENDEAHELPER05
00001C08                          1828      
00001C08                          1829  NOTADRINDIRECT * address register indirect, post increment
00001C08                          1830      
00001C08  0C46 0018               1831      CMPI    #%0000000000011000,D6 * is it address register indirect post increment?
00001C0C  6600 002E               1832      BNE     NOTADRINDIRECTPOST
00001C10                          1833      
00001C10  43F9 000024AF           1834      LEA     OBRACK,A1       * Load '('
00001C16  303C 000E               1835      MOVE.W  #14,D0          * Trap #14 to display message
00001C1A  4E4F                    1836      TRAP    #15             * Perform #14
00001C1C                          1837          
00001C1C                          1838  
00001C1C  6100 01E8               1839      BSR     MODE_AN * print out an address register
00001C20                          1840      
00001C20  43F9 000024B1           1841      LEA     CBRACK,A1       * Load ')'
00001C26  303C 000E               1842      MOVE.W  #14,D0          * Trap #14 to display message
00001C2A  4E4F                    1843      TRAP    #15             * Perform #14
00001C2C                          1844      
00001C2C  43F9 000024B3           1845      LEA     PLUS,A1       * Load '+'
00001C32  303C 000E               1846      MOVE.W  #14,D0          * Trap #14 to display message
00001C36  4E4F                    1847      TRAP    #15             * Perform #14
00001C38                          1848       
00001C38  6000 00C6               1849      BRA     ENDEAHELPER05
00001C3C                          1850      
00001C3C                          1851  NOTADRINDIRECTPOST * address register indirect, pre decrement
00001C3C                          1852      
00001C3C  0C46 0020               1853      CMPI    #%0000000000100000,D6 * is it address register indirect pre decrement?
00001C40  6600 002E               1854      BNE     NOTADRINDIRECTPRE
00001C44                          1855      
00001C44  43F9 000024B5           1856      LEA     MINUS,A1       * Load '-'
00001C4A  303C 000E               1857      MOVE.W  #14,D0          * Trap #14 to display message
00001C4E  4E4F                    1858      TRAP    #15             * Perform #14
00001C50                          1859      
00001C50  43F9 000024AF           1860      LEA     OBRACK,A1       * Load '('
00001C56  303C 000E               1861      MOVE.W  #14,D0          * Trap #14 to display message
00001C5A  4E4F                    1862      TRAP    #15             * Perform #14
00001C5C                          1863          
00001C5C                          1864  
00001C5C  6100 01A8               1865      BSR     MODE_AN * print out an address register
00001C60                          1866      
00001C60  43F9 000024B1           1867      LEA     CBRACK,A1       * Load ')'
00001C66  303C 000E               1868      MOVE.W  #14,D0          * Trap #14 to display message
00001C6A  4E4F                    1869      TRAP    #15             * Perform #14
00001C6C                          1870       
00001C6C  6000 0092               1871      BRA     ENDEAHELPER05
00001C70                          1872  
00001C70                          1873  NOTADRINDIRECTPRE * if none of the previous cases are true, it is a mode not supported by our decompiler
00001C70                          1874  
00001C70  0C46 0038               1875      CMPI    #%0000000000111000,D6 * is it immediate?
00001C74  6600 0086               1876      BNE     NOTIMMEDIATE
00001C78                          1877  
00001C78  0C43 0001               1878      CMPI    #1,D3 * is it a byte?
00001C7C  6600 0028               1879      BNE     NOTIMMBYTE
00001C80                          1880      
00001C80  43F9 000024AB           1881      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001C86  103C 000E               1882      MOVE.B  #14,D0
00001C8A  4E4F                    1883      TRAP    #15
00001C8C                          1884      
00001C8C  3C3C 0000               1885      MOVE.W  #0, D6              * Prep lower value for bitmask
00001C90  3E3C 0007               1886      MOVE.W  #7, D7              * Prep upper value for bitmask
00001C94  6100 0728               1887      BSR     BITMASK             * Finalize bitmask setup
00001C98                          1888          
00001C98  321A                    1889      MOVE.W  (A2)+,D1
00001C9A                          1890      
00001C9A  C286                    1891      AND.L     D6,D1
00001C9C                          1892          
00001C9C  103C 0003               1893      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001CA0  4E4F                    1894      TRAP    #15      * Perform Trap #3
00001CA2                          1895      
00001CA2  6000 005C               1896      BRA     ENDEAHELPER05
00001CA6                          1897  
00001CA6                          1898  NOTIMMBYTE
00001CA6                          1899      
00001CA6  0C43 0002               1900      CMPI    #2,D3 * is it a word?
00001CAA  6600 0028               1901      BNE     NOTIMMWORD
00001CAE                          1902      
00001CAE  43F9 000024AB           1903      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001CB4  103C 000E               1904      MOVE.B  #14,D0
00001CB8  4E4F                    1905      TRAP    #15
00001CBA                          1906      
00001CBA  3C3C 0000               1907      MOVE.W  #0, D6              * Prep lower value for bitmask
00001CBE  3E3C 000F               1908      MOVE.W  #15, D7             * Prep upper value for bitmask
00001CC2  6100 06FA               1909      BSR     BITMASK             * Finalize bitmask setup
00001CC6                          1910          
00001CC6  321A                    1911      MOVE.W  (A2)+,D1
00001CC8                          1912      
00001CC8  C286                    1913      AND.L     D6,D1               * Apply bitmask
00001CCA                          1914          
00001CCA  103C 0003               1915      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001CCE  4E4F                    1916      TRAP    #15      * Perform Trap #3
00001CD0                          1917      
00001CD0  6000 002E               1918      BRA     ENDEAHELPER05
00001CD4                          1919      
00001CD4                          1920  NOTIMMWORD
00001CD4  0C43 0003               1921      CMPI    #3,D3 * is it a long?
00001CD8  6600 0022               1922      BNE     NOTIMMEDIATE
00001CDC                          1923      
00001CDC  43F9 000024AB           1924      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001CE2  103C 000E               1925      MOVE.B  #14,D0
00001CE6  4E4F                    1926      TRAP    #15
00001CE8                          1927          
00001CE8  221A                    1928      MOVE.L  (A2)+,D1
00001CEA                          1929          
00001CEA  103C 0003               1930      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001CEE  4E4F                    1931      TRAP    #15      * Perform Trap #3
00001CF0                          1932      
00001CF0  321A                    1933      MOVE.W  (A2)+,D1
00001CF2                          1934          
00001CF2  103C 0003               1935      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001CF6  4E4F                    1936      TRAP    #15      * Perform Trap #3
00001CF8                          1937      
00001CF8  6000 0006               1938      BRA     ENDEAHELPER05
00001CFC                          1939  
00001CFC                          1940  NOTIMMEDIATE    
00001CFC                          1941  
00001CFC                          1942  
00001CFC  6100 0456               1943      BSR     UNKNOWNOP
00001D00                          1944      
00001D00                          1945  ENDEAHELPER05
00001D00  4C9F 03FF               1946      MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001D04  4E75                    1947      RTS
00001D06                          1948  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001D06                          1949  *-----------------------------------------------------------------------------
00001D06                          1950  
00001D06                          1951  
00001D06                          1952  
00001D06                          1953  *-----------------------------------------------------------------------------
00001D06                          1954  *-----------------------------------------------------------------------------
00001D06                          1955  * NAME:           MODE_DN
00001D06                          1956  * DESCRIPTION:    Generalize the EA part of the project.
00001D06                          1957  * PRE-CONDITION:  The mode must have been correctly identified. All modes
00001D06                          1958  *                 must be called by RTS.
00001D06                          1959  * POST-CONDITION: After the EA, the entire op will head back to the BSR that
00001D06                          1960  *                 called it.
00001D06                          1961  * REGISTERS:      a
00001D06                          1962  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001D06                          1963  * ---> Dn
00001D06                          1964  MODE_DN
00001D06  48A7 FFC0               1965          MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001D0A                          1966  
00001D0A  3C3C 0000               1967          MOVE.W  #0, D6              * Prep lower value for bitmask
00001D0E  3E3C 0002               1968          MOVE.W  #2, D7              * Prep upper value for bitmask
00001D12  6100 06AA               1969          BSR     BITMASK             * Finalize bitmask setup
00001D16  CC42                    1970          AND     D2,D6               * Apply bitmask
00001D18                          1971          
00001D18  0C46 0000               1972          CMPI    #%000000000000000, D6   * Data Register D0?
00001D1C  6600 000A               1973          BNE     NOTD0
00001D20                          1974          
00001D20  6100 0074               1975          BSR     PRINTD0
00001D24  6000 006A               1976          BRA     ENDMODE_DN
00001D28                          1977  NOTD0      
00001D28  0C46 0001               1978          CMPI    #%000000000000001, D6   * Data Register D1?
00001D2C  6600 000A               1979          BNE     NOTD1
00001D30                          1980          
00001D30  6100 0072               1981          BSR     PRINTD1
00001D34  6000 005A               1982          BRA     ENDMODE_DN
00001D38                          1983  NOTD1
00001D38  0C46 0002               1984          CMPI    #%000000000000010, D6   * Data Register D2?
00001D3C  6600 000A               1985          BNE     NOTD2
00001D40                          1986          
00001D40  6100 0070               1987          BSR     PRINTD2
00001D44  6000 004A               1988          BRA     ENDMODE_DN
00001D48                          1989  NOTD2
00001D48  0C46 0003               1990          CMPI    #%000000000000011, D6   * Data Register D3?
00001D4C  6600 000A               1991          BNE     NOTD3
00001D50                          1992          
00001D50  6100 006E               1993          BSR     PRINTD3
00001D54  6000 003A               1994          BRA     ENDMODE_DN
00001D58                          1995  NOTD3
00001D58  0C46 0004               1996          CMPI    #%000000000000100, D6   * Data Register D4?
00001D5C  6600 000A               1997          BNE     NOTD4
00001D60                          1998          
00001D60  6100 006C               1999          BSR     PRINTD4
00001D64  6000 002A               2000          BRA     ENDMODE_DN
00001D68                          2001  NOTD4
00001D68  0C46 0005               2002          CMPI    #%000000000000101, D6   * Data Register D5?
00001D6C  6600 000A               2003          BNE     NOTD5
00001D70                          2004          
00001D70  6100 006A               2005          BSR     PRINTD5
00001D74  6000 001A               2006          BRA     ENDMODE_DN
00001D78                          2007  NOTD5
00001D78  0C46 0006               2008          CMPI    #%000000000000110, D6   * Data Register D6?
00001D7C  6600 000A               2009          BNE     NOTD6
00001D80                          2010          
00001D80  6100 0068               2011          BSR     PRINTD6
00001D84  6000 000A               2012          BRA     ENDMODE_DN
00001D88                          2013  NOTD6
00001D88  6100 006E               2014          BSR     PRINTD7
00001D8C  6000 0002               2015          BRA     ENDMODE_DN
00001D90                          2016          
00001D90                          2017  ENDMODE_DN
00001D90  4C9F 03FF               2018          MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001D94  4E75                    2019          RTS
00001D96                          2020  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001D96                          2021  *-----------------------------------------------------------------------------
00001D96                          2022  
00001D96                          2023  
00001D96                          2024  
00001D96                          2025  *-----------------------------------------------------------------------------
00001D96                          2026  *-----------------------------------------------------------------------------
00001D96                          2027  * NAME:           PRINTD0
00001D96                          2028  * DESCRIPTION:    Simply prints D0, D1, ..., up to D7.
00001D96                          2029  * PRE-CONDITION:  a
00001D96                          2030  * POST-CONDITION: a
00001D96                          2031  * REGISTERS:      a
00001D96                          2032  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001D96                          2033  PRINTD0
00001D96  43F9 000024DF           2034          LEA     __D0, A1        * Load 'D0'
00001D9C  103C 000E               2035          MOVE.B  #14, D0         * Load Trap #14 to print out
00001DA0  4E4F                    2036          TRAP    #15             * Perform Trap #14
00001DA2  4E75                    2037          RTS
00001DA4                          2038  PRINTD1
00001DA4  43F9 000024E2           2039          LEA     __D1, A1        * Load 'D1'
00001DAA  103C 000E               2040          MOVE.B  #14, D0         * Load Trap #14 to print out
00001DAE  4E4F                    2041          TRAP    #15             * Perform Trap #14
00001DB0  4E75                    2042          RTS      
00001DB2                          2043  PRINTD2
00001DB2  43F9 000024E5           2044          LEA     __D2, A1        * Load 'D2'
00001DB8  103C 000E               2045          MOVE.B  #14, D0         * Load Trap #14 to print out
00001DBC  4E4F                    2046          TRAP    #15             * Perform Trap #14
00001DBE  4E75                    2047          RTS      
00001DC0                          2048  PRINTD3
00001DC0  43F9 000024E8           2049          LEA     __D3, A1        * Load 'D3'
00001DC6  103C 000E               2050          MOVE.B  #14, D0         * Load Trap #14 to print out
00001DCA  4E4F                    2051          TRAP    #15             * Perform Trap #14
00001DCC  4E75                    2052          RTS      
00001DCE                          2053  PRINTD4
00001DCE  43F9 000024EB           2054          LEA     __D4, A1        * Load 'D4'
00001DD4  103C 000E               2055          MOVE.B  #14, D0         * Load Trap #14 to print out
00001DD8  4E4F                    2056          TRAP    #15             * Perform Trap #14
00001DDA  4E75                    2057          RTS       
00001DDC                          2058  PRINTD5
00001DDC  43F9 000024EE           2059          LEA     __D5, A1        * Load 'D5'
00001DE2  103C 000E               2060          MOVE.B  #14, D0         * Load Trap #14 to print out
00001DE6  4E4F                    2061          TRAP    #15             * Perform Trap #14
00001DE8  4E75                    2062          RTS      
00001DEA                          2063  PRINTD6
00001DEA  43F9 000024F1           2064          LEA     __D6, A1        * Load 'D6'
00001DF0  103C 000E               2065          MOVE.B  #14, D0         * Load Trap #14 to print out
00001DF4  4E4F                    2066          TRAP    #15             * Perform Trap #14
00001DF6  4E75                    2067          RTS
00001DF8                          2068  PRINTD7
00001DF8  43F9 000024F4           2069          LEA     __D7, A1        * Load 'D7'
00001DFE  103C 000E               2070          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E02  4E4F                    2071          TRAP    #15             * Perform Trap #14
00001E04  4E75                    2072          RTS
00001E06                          2073  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001E06                          2074  *-----------------------------------------------------------------------------
00001E06                          2075  
00001E06                          2076  
00001E06                          2077  
00001E06                          2078  *-----------------------------------------------------------------------------
00001E06                          2079  *-----------------------------------------------------------------------------
00001E06                          2080  * NAME:           MODE_AN
00001E06                          2081  * DESCRIPTION:    Simply chooses to print A0-A7.
00001E06                          2082  * PRE-CONDITION:  a
00001E06                          2083  * POST-CONDITION: a
00001E06                          2084  * REGISTERS:      a
00001E06                          2085  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001E06                          2086  MODE_AN
00001E06  48A7 FFC0               2087          MOVEM   D0-D7/A0-A1,-(A7)   * Save information
00001E0A                          2088  
00001E0A  3C3C 0000               2089          MOVE.W  #0, D6              * Prep lower value for bitmask
00001E0E  3E3C 0002               2090          MOVE.W  #2, D7              * Prep upper value for bitmask
00001E12  6100 05AA               2091          BSR     BITMASK             * Finalize bitmask setup
00001E16  CC42                    2092          AND     D2,D6               * Apply bitmask
00001E18                          2093          
00001E18  0C46 0000               2094          CMPI    #%000000000000000, D6   * Address Register A0?
00001E1C  6600 000A               2095          BNE     NOTA0
00001E20                          2096          
00001E20  6100 0074               2097          BSR     PRINTA0
00001E24                          2098          
00001E24  6000 006A               2099          BRA     ENDMODE_AN
00001E28                          2100  NOTA0      
00001E28  0C46 0001               2101          CMPI    #%000000000000001, D6   * Address Register A1?
00001E2C  6600 000A               2102          BNE     NOTA1
00001E30                          2103          
00001E30  6100 0072               2104          BSR     PRINTA1
00001E34                          2105          
00001E34  6000 005A               2106          BRA     ENDMODE_AN
00001E38                          2107  NOTA1
00001E38  0C46 0002               2108          CMPI    #%000000000000010, D6   * Address Register A2?
00001E3C  6600 000A               2109          BNE     NOTA2
00001E40                          2110          
00001E40  6100 0070               2111          BSR     PRINTA2
00001E44                          2112          
00001E44  6000 004A               2113          BRA     ENDMODE_AN
00001E48                          2114  NOTA2
00001E48  0C46 0003               2115          CMPI    #%000000000000011, D6   * Address Register A3?
00001E4C  6600 000A               2116          BNE     NOTA3
00001E50                          2117          
00001E50  6100 006E               2118          BSR     PRINTA3
00001E54                          2119          
00001E54  6000 003A               2120          BRA     ENDMODE_AN
00001E58                          2121  NOTA3
00001E58  0C46 0004               2122          CMPI    #%000000000000100, D6   * Address Register A4?
00001E5C  6600 000A               2123          BNE     NOTA4
00001E60                          2124          
00001E60  6100 006C               2125          BSR     PRINTA4
00001E64                          2126          
00001E64  6000 002A               2127          BRA     ENDMODE_AN
00001E68                          2128  NOTA4
00001E68  0C46 0005               2129          CMPI    #%000000000000101, D6   * Address Register A5?
00001E6C  6600 000A               2130          BNE     NOTA5
00001E70                          2131          
00001E70  6100 006A               2132          BSR     PRINTA5
00001E74                          2133          
00001E74  6000 001A               2134          BRA     ENDMODE_AN
00001E78                          2135  NOTA5
00001E78  0C46 0006               2136          CMPI    #%000000000000110, D6   * Address Register A6?
00001E7C  6600 000A               2137          BNE     NOTA6
00001E80                          2138          
00001E80  6100 0068               2139          BSR     PRINTA6
00001E84                          2140          
00001E84  6000 000A               2141          BRA     ENDMODE_AN
00001E88                          2142  NOTA6
00001E88  6100 006E               2143          BSR     PRINTA7
00001E8C                          2144          
00001E8C  6000 0002               2145          BRA     ENDMODE_AN
00001E90                          2146  ENDMODE_AN
00001E90  4C9F 03FF               2147          MOVEM   (A7)+,D0-D7/A0-A1   * Restore registers
00001E94  4E75                    2148          RTS
00001E96                          2149  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001E96                          2150  *-----------------------------------------------------------------------------
00001E96                          2151  
00001E96                          2152  
00001E96                          2153  
00001E96                          2154  *-----------------------------------------------------------------------------
00001E96                          2155  *-----------------------------------------------------------------------------
00001E96                          2156  * NAME:           PRINTA0
00001E96                          2157  * DESCRIPTION:    Simply print out the address register.
00001E96                          2158  * PRE-CONDITION:  a
00001E96                          2159  * POST-CONDITION: a
00001E96                          2160  * REGISTERS:      a
00001E96                          2161  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001E96                          2162  PRINTA0
00001E96  43F9 000024C7           2163          LEA     __A0, A1        * Load 'A0'
00001E9C  103C 000E               2164          MOVE.B  #14, D0         * Load Trap #14 to print out
00001EA0  4E4F                    2165          TRAP    #15             * Perform Trap #14
00001EA2  4E75                    2166          RTS
00001EA4                          2167  
00001EA4                          2168  PRINTA1
00001EA4  43F9 000024CA           2169          LEA     __A1, A1        * Load 'A1'
00001EAA  103C 000E               2170          MOVE.B  #14, D0         * Load Trap #14 to print out
00001EAE  4E4F                    2171          TRAP    #15             * Perform Trap #14
00001EB0  4E75                    2172          RTS
00001EB2                          2173          
00001EB2                          2174  PRINTA2
00001EB2  43F9 000024CD           2175          LEA     __A2, A1        * Load 'A2'
00001EB8  103C 000E               2176          MOVE.B  #14, D0         * Load Trap #14 to print out
00001EBC  4E4F                    2177          TRAP    #15             * Perform Trap #14
00001EBE  4E75                    2178          RTS
00001EC0                          2179  
00001EC0                          2180  PRINTA3
00001EC0  43F9 000024D0           2181          LEA     __A3, A1        * Load 'A3'
00001EC6  103C 000E               2182          MOVE.B  #14, D0         * Load Trap #14 to print out
00001ECA  4E4F                    2183          TRAP    #15             * Perform Trap #14
00001ECC  4E75                    2184          RTS
00001ECE                          2185  
00001ECE                          2186  PRINTA4
00001ECE  43F9 000024D3           2187          LEA     __A4, A1        * Load 'A4'
00001ED4  103C 000E               2188          MOVE.B  #14, D0         * Load Trap #14 to print out
00001ED8  4E4F                    2189          TRAP    #15             * Perform Trap #14
00001EDA  4E75                    2190          RTS
00001EDC                          2191  
00001EDC                          2192  PRINTA5
00001EDC  43F9 000024D6           2193          LEA     __A5, A1        * Load 'A5'
00001EE2  103C 000E               2194          MOVE.B  #14, D0         * Load Trap #14 to print out
00001EE6  4E4F                    2195          TRAP    #15             * Perform Trap #14
00001EE8  4E75                    2196          RTS
00001EEA                          2197  
00001EEA                          2198  PRINTA6
00001EEA  43F9 000024D9           2199          LEA     __A6, A1        * Load 'A6'
00001EF0  103C 000E               2200          MOVE.B  #14, D0         * Load Trap #14 to print out
00001EF4  4E4F                    2201          TRAP    #15             * Perform Trap #14
00001EF6  4E75                    2202          RTS
00001EF8                          2203  
00001EF8                          2204  PRINTA7
00001EF8  43F9 000024DC           2205          LEA     __A7, A1        * Load 'A7'
00001EFE  103C 000E               2206          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F02  4E4F                    2207          TRAP    #15             * Perform Trap #14
00001F04  4E75                    2208          RTS
00001F06                          2209  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001F06                          2210  *-----------------------------------------------------------------------------
00001F06                          2211  
00001F06                          2212  
00001F06                          2213  
00001F06                          2214  *-----------------------------------------------------------------------------
00001F06                          2215  *-----------------------------------------------------------------------------
00001F06                          2216  * NAME:           SIZE67
00001F06                          2217  * DESCRIPTION:    Called if the size is stored in bits 6 to 7.
00001F06                          2218  * PRE-CONDITION:  a
00001F06                          2219  * POST-CONDITION: a
00001F06                          2220  * REGISTERS:      a
00001F06                          2221  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001F06                          2222  SIZE67
00001F06  48A7 FFFE               2223          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
00001F0A  3C3C 0006               2224          MOVE.W  #6, D6              * Prep lower value for bitmask
00001F0E  3E3C 0007               2225          MOVE.W  #7, D7              * Prep upper value for bitmask
00001F12  6100 04AA               2226          BSR     BITMASK             * Finalize bitmask setup
00001F16  CC42                    2227          AND     D2,D6               * Apply bitmask     
00001F18                          2228  
00001F18  0C46 0000               2229          CMPI    #%0000000000000000, D6   * is it a BYTE?
00001F1C  6600 000A               2230          BNE     NOT67BYTE
00001F20                          2231          
00001F20  6100 0080               2232          BSR     PRINTBYTE               * Branch to handle BYTE sizes
00001F24  6000 001E               2233          BRA     END67
00001F28                          2234  NOT67BYTE        
00001F28  0C46 0040               2235          CMPI    #%0000000001000000, D6   * is it a WORD?
00001F2C  6600 000A               2236          BNE     NOT67WORD
00001F30                          2237          
00001F30  6100 007E               2238          BSR     PRINTWORD               * Branch to handle WORD sizes
00001F34  6000 000E               2239          BRA     END67
00001F38                          2240  NOT67WORD
00001F38  0C46 0080               2241          CMPI    #%0000000010000000, D6   * is it a LONG?
00001F3C  6600 0006               2242          BNE     END67
00001F40                          2243          
00001F40  6100 007C               2244          BSR     PRINTLONG               * Branch to handle LONG sizes
00001F44                          2245  END67
00001F44  4C9F 7FFF               2246          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
00001F48  4E75                    2247          RTS                             * Return. Size handling is finished.
00001F4A                          2248  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001F4A                          2249  *-----------------------------------------------------------------------------
00001F4A                          2250  
00001F4A                          2251  
00001F4A                          2252  
00001F4A                          2253  *-----------------------------------------------------------------------------
00001F4A                          2254  *-----------------------------------------------------------------------------
00001F4A                          2255  * NAME:           SIZE68
00001F4A                          2256  * DESCRIPTION:    Called if the size is stored in bits 6 to 8.
00001F4A                          2257  * PRE-CONDITION:  a
00001F4A                          2258  * POST-CONDITION: a
00001F4A                          2259  * REGISTERS:      a
00001F4A                          2260  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001F4A                          2261  SIZE68
00001F4A                          2262          * finish later, need to follow the same format as SIZE67
00001F4A                          2263          
00001F4A                          2264          
00001F4A  48A7 FFFE               2265          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
00001F4E  3C3C 0006               2266          MOVE.W  #6, D6              * Prep lower value for bitmask
00001F52  3E3C 0008               2267          MOVE.W  #8, D7              * Prep upper value for bitmask
00001F56  6100 0466               2268          BSR     BITMASK             * Finalize bitmask setup
00001F5A  CC42                    2269          AND     D2,D6               * Apply bitmask          
00001F5C                          2270          
00001F5C  0C46 0000               2271          CMPI    #%0000000000000000, D6   * is it a BYTE?
00001F60  6100 0040               2272          BSR     PRINTBYTE               * Branch to handle BYTE sizes
00001F64  0C46 0100               2273          CMPI    #%0000000100000000, D6   * is it a BYTE?
00001F68  6100 0038               2274          BSR     PRINTBYTE               * Branch to handle BYTE sizes 
00001F6C                          2275        
00001F6C  0C46 0040               2276          CMPI    #%0000000001000000, D6   * is it a WORD?
00001F70  6100 003E               2277          BSR     PRINTWORD               * Branch to handle BYTE sizes
00001F74  0C46 0140               2278          CMPI    #%0000000101000000, D6   * is it a WORD?
00001F78  6100 0036               2279          BSR     PRINTWORD               * Branch to handle BYTE sizes
00001F7C  0C46 00C0               2280          CMPI    #%0000000011000000, D6   * is it a WORD (ADDA)?
00001F80  6100 002E               2281          BSR     PRINTWORD               * Branch to handle BYTE sizes
00001F84                          2282  
00001F84  0C46 0080               2283          CMPI    #%0000000010000000, D6   * is it a LONG?
00001F88  6100 0034               2284          BSR     PRINTLONG               * Branch to handle BYTE sizes
00001F8C  0C46 0180               2285          CMPI    #%0000000110000000, D6   * is it a LONG?
00001F90  6100 002C               2286          BSR     PRINTLONG               * Branch to handle BYTE sizes
00001F94  0C46 01C0               2287          CMPI    #%0000000111000000, D6   * is it a LONG (ADDA)?
00001F98  6100 0024               2288          BSR     PRINTLONG               * Branch to handle BYTE sizes
00001F9C                          2289  
00001F9C  4C9F 7FFF               2290          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
00001FA0  4E75                    2291          RTS                             * Return. Size handling is finished.
00001FA2                          2292  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001FA2                          2293  *-----------------------------------------------------------------------------
00001FA2                          2294  
00001FA2                          2295  
00001FA2                          2296  
00001FA2                          2297  *-----------------------------------------------------------------------------
00001FA2                          2298  *-----------------------------------------------------------------------------
00001FA2                          2299  * NAME:           PRINTBYTE
00001FA2                          2300  * DESCRIPTION:    a
00001FA2                          2301  * PRE-CONDITION:  a
00001FA2                          2302  * POST-CONDITION: a
00001FA2                          2303  * REGISTERS:      a
00001FA2                          2304  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001FA2                          2305  PRINTBYTE
00001FA2  43F9 000024BB           2306          LEA     __B,A1      * Load '.B ' into A1
00001FA8  103C 000E               2307          MOVE.B  #14,D0      * Trap #14 setup to print
00001FAC  4E4F                    2308          TRAP    #15         * Perform Trap #14
00001FAE  4E75                    2309          RTS                 * Return to SIZE67/SIZE68
00001FB0                          2310          
00001FB0                          2311  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001FB0                          2312  *-----------------------------------------------------------------------------
00001FB0                          2313  
00001FB0                          2314  
00001FB0                          2315  
00001FB0                          2316  *-----------------------------------------------------------------------------
00001FB0                          2317  *-----------------------------------------------------------------------------
00001FB0                          2318  * NAME:           PRINTWORD
00001FB0                          2319  * DESCRIPTION:    a
00001FB0                          2320  * PRE-CONDITION:  a
00001FB0                          2321  * POST-CONDITION: a
00001FB0                          2322  * REGISTERS:      a
00001FB0                          2323  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001FB0                          2324  PRINTWORD
00001FB0  43F9 000024BF           2325          LEA     __W,A1      * Load '.W ' into A1
00001FB6  103C 000E               2326          MOVE.B  #14,D0      * Trap #14 setup to print
00001FBA  4E4F                    2327          TRAP    #15         * Perform Trap #14
00001FBC  4E75                    2328          RTS                 * Return to SIZE67/SIZE68
00001FBE                          2329          
00001FBE                          2330  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001FBE                          2331  *-----------------------------------------------------------------------------
00001FBE                          2332  
00001FBE                          2333  
00001FBE                          2334  
00001FBE                          2335  *-----------------------------------------------------------------------------
00001FBE                          2336  *-----------------------------------------------------------------------------
00001FBE                          2337  * NAME:           PRINTLONG
00001FBE                          2338  * DESCRIPTION:    a
00001FBE                          2339  * PRE-CONDITION:  a
00001FBE                          2340  * POST-CONDITION: a
00001FBE                          2341  * REGISTERS:      a
00001FBE                          2342  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001FBE                          2343  PRINTLONG
00001FBE  43F9 000024C3           2344          LEA     __L,A1      * Load '.L ' into A1
00001FC4  103C 000E               2345          MOVE.B  #14,D0      * Trap #14 setup to print
00001FC8  4E4F                    2346          TRAP    #15         * Perform Trap #14
00001FCA  4E75                    2347          RTS                 * Return to SIZE67/SIZE68
00001FCC                          2348          
00001FCC                          2349  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001FCC                          2350  *-----------------------------------------------------------------------------
00001FCC                          2351  
00001FCC                          2352  
00001FCC                          2353  
00001FCC                          2354  *-----------------------------------------------------------------------------
00001FCC                          2355  *-----------------------------------------------------------------------------
00001FCC                          2356  * NAME:           MOVEMHELPERPOST
00001FCC                          2357  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
00001FCC                          2358  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
00001FCC                          2359  * POST-CONDITION: The registers being saved are printed
00001FCC                          2360  * REGISTERS:      A2
00001FCC                          2361  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001FCC                          2362  MOVEMHELPERPOST
00001FCC  48A7 FFFE               2363          MOVEM  D0-D7/A0-A6,-(A7)
00001FD0                          2364          
00001FD0  4285                    2365          CLR.L   D5  * to be used as a loop counter
00001FD2  4284                    2366          CLR.L   D4  * == 1 if we have printed any registers (for fencepost issue)
00001FD4  4283                    2367          CLR.L   D3  * == 1 if we are in a range
00001FD6  4286                    2368          CLR.L   D6  * == 1 if we have already printed the slash or dash
00001FD8  4287                    2369          CLR.L   D7  * == counts the number of registers in a range
00001FDA  1C3C 0001               2370          MOVE.B  #1,D6 * to fix fencepost issue
00001FDE  4282                    2371          CLR.L   D2
00001FE0  3412                    2372          MOVE.W  (A2),D2
00001FE2                          2373          
00001FE2                          2374  DLOOP * loop to print out the data register portion of the addresses being saved
00001FE2                          2375  
00001FE2  E25A                    2376          ROR     #1,D2
00001FE4  6500 0006               2377          BCS     DVALID
00001FE8                          2378          
00001FE8  6000 0064               2379          BRA     DINVALID
00001FEC                          2380          
00001FEC                          2381  DVALID
00001FEC  0C43 0000               2382          CMPI    #0,D3
00001FF0  6700 0020               2383          BEQ     DFORWARDVALID * we are not in a range
00001FF4                          2384          
00001FF4  5247                    2385          ADDI    #1,D7 *increment number of regs in range
00001FF6                          2386          
00001FF6  0C46 0001               2387          CMPI    #1,D6   *have we already printed a symbol?
00001FFA  6700 0084               2388          BEQ     DLOOPITER
00001FFE                          2389          
00001FFE  43F9 000024B9           2390          LEA     DASH,A1    *print a dash
00002004  103C 000E               2391          MOVE.B  #14,D0
00002008  4E4F                    2392          TRAP    #15
0000200A                          2393          
0000200A  1C3C 0001               2394          MOVE.B  #1,D6 * indicates a symbol has been printed
0000200E                          2395          
0000200E  6000 0070               2396          BRA     DLOOPITER
00002012                          2397          
00002012                          2398  DFORWARDVALID
00002012                          2399          * not in a range yet, print
00002012                          2400          
00002012  0C44 0000               2401          CMPI    #0,D4
00002016  6700 000E               2402          BEQ     DNOSLASH
0000201A                          2403                  
0000201A  43F9 000024B7           2404          LEA     SLASH,A1
00002020  103C 000E               2405          MOVE.B  #14,D0
00002024  4E4F                    2406          TRAP    #15
00002026                          2407          
00002026                          2408  DNOSLASH
00002026                          2409  
00002026  183C 0001               2410          MOVE.B  #1,D4 * we have printed something, now slashes are fair game
0000202A                          2411          
0000202A  1C3C 0001               2412          MOVE.B  #1,D6   * we have printed a symbol
0000202E                          2413          
0000202E  43F9 000024A1           2414          LEA     ASCII_D,A1
00002034  103C 000E               2415          MOVE.B  #14,D0
00002038  4E4F                    2416          TRAP    #15
0000203A                          2417          
0000203A  2205                    2418          MOVE.L  D5,D1
0000203C  103C 0003               2419          MOVE.B  #3,D0
00002040  4E4F                    2420          TRAP    #15
00002042                          2421  
00002042  163C 0001               2422          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
00002046  1C3C 0000               2423          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
0000204A                          2424          
0000204A  6000 0034               2425          BRA     DLOOPITER
0000204E                          2426  
0000204E                          2427  
0000204E                          2428  DINVALID
0000204E                          2429  
0000204E                          2430          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
0000204E                          2431          
0000204E  0C43 0001               2432          CMPI    #1,D3
00002052  6600 002C               2433          BNE     DLOOPITER
00002056                          2434          
00002056  163C 0000               2435          MOVE.B  #0,D3
0000205A                          2436          
0000205A  0C47 0001               2437          CMPI    #1,D7
0000205E  6D00 001E               2438          BLT     DLOOPITERCLR
00002062                          2439          
00002062  43F9 000024A1           2440          LEA     ASCII_D,A1
00002068  103C 000E               2441          MOVE.B  #14,D0
0000206C  4E4F                    2442          TRAP    #15
0000206E                          2443          
0000206E  2205                    2444          MOVE.L  D5,D1
00002070                          2445          
00002070  0641 FFFF               2446          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
00002074                          2447          
00002074  103C 0003               2448          MOVE.B  #3,D0
00002078  4E4F                    2449          TRAP    #15
0000207A                          2450          
0000207A  6000 0004               2451          BRA     DLOOPITER
0000207E                          2452          
0000207E                          2453  DLOOPITERCLR        
0000207E  4287                    2454          CLR.L   D7
00002080                          2455  
00002080                          2456  DLOOPITER
00002080                          2457          
00002080  0C45 0008               2458          CMPI    #8,D5
00002084  6700 0008               2459          BEQ     DLOOPDONE
00002088                          2460  
00002088  5245                    2461          ADDI    #1,D5
0000208A  6000 FF56               2462          BRA     DLOOP
0000208E                          2463  
0000208E                          2464  DLOOPDONE
0000208E                          2465  
0000208E  7A09                    2466          MOVE.L  #9,D5  * to be used as a loop counter
00002090  4283                    2467          CLR.L   D3  * == 1 if we are in a range
00002092  4286                    2468          CLR.L   D6  * == 1 if we have already printed the slash or dash
00002094  4287                    2469          CLR.L   D7  * count of registers in a range
00002096  1C3C 0001               2470          MOVE.B  #1,D6 * to fix fencepost issue     
0000209A                          2471  
0000209A                          2472  ALOOP * loop to print out the data register portion of the addresses being saved
0000209A                          2473  
0000209A  E25A                    2474          ROR     #1,D2
0000209C  6500 0006               2475          BCS     AVALID
000020A0                          2476          
000020A0  6000 0068               2477          BRA     AINVALID
000020A4                          2478          
000020A4                          2479  AVALID
000020A4  0C43 0000               2480          CMPI    #0,D3
000020A8  6700 0020               2481          BEQ     AFORWARDVALID * we are not in a range
000020AC                          2482          
000020AC  5247                    2483          ADDI    #1,D7 *increment number of regs in range
000020AE                          2484          
000020AE  0C46 0001               2485          CMPI    #1,D6   *have we already printed a symbol?
000020B2  6700 008C               2486          BEQ     ALOOPITER
000020B6                          2487          
000020B6  43F9 000024B9           2488          LEA     DASH,A1    *print a dash
000020BC  103C 000E               2489          MOVE.B  #14,D0
000020C0  4E4F                    2490          TRAP    #15
000020C2                          2491          
000020C2  1C3C 0001               2492          MOVE.B  #1,D6 * indicates a symbol has been printed
000020C6                          2493          
000020C6  6000 0078               2494          BRA     ALOOPITER
000020CA                          2495          
000020CA                          2496  AFORWARDVALID
000020CA                          2497          * not in a range yet, print
000020CA                          2498          
000020CA                          2499                  
000020CA  0C44 0000               2500          CMPI    #0,D4
000020CE  6700 000E               2501          BEQ     ANOSLASH
000020D2                          2502                  
000020D2  43F9 000024B7           2503          LEA     SLASH,A1
000020D8  103C 000E               2504          MOVE.B  #14,D0
000020DC  4E4F                    2505          TRAP    #15
000020DE                          2506          
000020DE                          2507  ANOSLASH
000020DE                          2508  
000020DE  183C 0001               2509          MOVE.B  #1,D4   * we have printed something, now slashes are fair game
000020E2                          2510          
000020E2  1C3C 0001               2511          MOVE.B  #1,D6   * we have printed a symbol
000020E6                          2512          
000020E6  43F9 0000249B           2513          LEA     ASCII_A,A1
000020EC  103C 000E               2514          MOVE.B  #14,D0
000020F0  4E4F                    2515          TRAP    #15
000020F2                          2516          
000020F2  2205                    2517          MOVE.L  D5,D1
000020F4                          2518          
000020F4  0641 FFF8               2519          ADDI    #-8,D1 * it's A, need to adjust by 8
000020F8                          2520          
000020F8  103C 0003               2521          MOVE.B  #3,D0
000020FC  4E4F                    2522          TRAP    #15
000020FE                          2523  
000020FE  163C 0001               2524          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
00002102  1C3C 0000               2525          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
00002106                          2526          
00002106  6000 0038               2527          BRA     ALOOPITER
0000210A                          2528  
0000210A                          2529  
0000210A                          2530  AINVALID
0000210A                          2531  
0000210A                          2532          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
0000210A                          2533          
0000210A  0C43 0001               2534          CMPI    #1,D3
0000210E  6600 0030               2535          BNE     ALOOPITER
00002112                          2536          
00002112  163C 0000               2537          MOVE.B  #0,D3
00002116                          2538          
00002116  0C47 0001               2539          CMPI    #1,D7
0000211A  6D00 0022               2540          BLT     ALOOPITERCLR
0000211E                          2541          
0000211E  43F9 0000249B           2542          LEA     ASCII_A,A1
00002124  103C 000E               2543          MOVE.B  #14,D0
00002128  4E4F                    2544          TRAP    #15
0000212A                          2545          
0000212A  2205                    2546          MOVE.L  D5,D1
0000212C                          2547          
0000212C  0641 FFFF               2548          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
00002130  0641 FFF8               2549          ADDI    #-8,D1 * it's A, need to adjust by 8
00002134                          2550          
00002134  103C 0003               2551          MOVE.B  #3,D0
00002138  4E4F                    2552          TRAP    #15
0000213A                          2553          
0000213A  6000 0004               2554          BRA     ALOOPITER
0000213E                          2555          
0000213E                          2556  ALOOPITERCLR
0000213E                          2557          
0000213E  4287                    2558          CLR.L   D7
00002140                          2559  
00002140                          2560  ALOOPITER
00002140                          2561          
00002140  0C45 0010               2562          CMPI     #16,D5
00002144  6700 0008               2563          BEQ     ALOOPDONE
00002148                          2564  
00002148  5245                    2565          ADDI    #1,D5
0000214A  6000 FF4E               2566          BRA     ALOOP
0000214E                          2567  
0000214E                          2568  ALOOPDONE
0000214E                          2569          
0000214E  4C9F 7FFF               2570          MOVEM    (A7)+,D0-D7/A0-A6
00002152  4E75                    2571          RTS
00002154                          2572  
00002154                          2573          
00002154                          2574  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002154                          2575  *-----------------------------------------------------------------------------
00002154                          2576  
00002154                          2577  
00002154                          2578  
00002154                          2579  
00002154                          2580  *-----------------------------------------------------------------------------
00002154                          2581  *-----------------------------------------------------------------------------
00002154                          2582  * NAME:           MOVEMHELPERPRE
00002154                          2583  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
00002154                          2584  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
00002154                          2585  * POST-CONDITION: The registers being saved are printed
00002154                          2586  * REGISTERS:      A2
00002154                          2587  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002154                          2588  MOVEMHELPERPRE
00002154                          2589  
00002154                          2590          
00002154                          2591  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002154                          2592  *-----------------------------------------------------------------------------
00002154                          2593  
00002154                          2594  
00002154                          2595  
00002154                          2596  *-----------------------------------------------------------------------------
00002154                          2597  *-----------------------------------------------------------------------------
00002154                          2598  * NAME:           UNKNOWNOP
00002154                          2599  * DESCRIPTION:    a
00002154                          2600  * PRE-CONDITION:  D2 contains the instruction to print. D2 has already been
00002154                          2601  *                 identified as an unknown operation.
00002154                          2602  * POST-CONDITION: D2 is no longer the opcode.
00002154                          2603  * REGISTERS:      a
00002154                          2604  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002154                          2605  UNKNOWNOP
00002154  220A                    2606          MOVE.L  A2,D1   * Prep the add to print
00002156  5581                    2607          SUB.L   #2,D1   * Off by two error due to post increment correct
00002158  2602                    2608          MOVE.L  D2,D3   * Save the opcode to print
0000215A                          2609          
0000215A  7410                    2610          MOVE.L  #16,D2  * set the base to 16
0000215C  700F                    2611          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
0000215E  4E4F                    2612          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
00002160                          2613          
00002160  43F9 0000245D           2614          LEA     DATA,A1 * load " DATA $" into register A1
00002166  700E                    2615          MOVE.L  #14,D0  * print the string stored in A1
00002168  4E4F                    2616          TRAP    #15
0000216A                          2617          
0000216A  2203                    2618          MOVE.L  D3,D1   * move the opcode from D3 into D1 to print
0000216C  103C 000F               2619          MOVE.B  #15,D0   * Indicate we are using trap #15, 15 to in a certain #base
00002170  4E4F                    2620          TRAP    #15      * Perform Trap #3
00002172                          2621  
00002172  43F9 00002402           2622          LEA     NEWLINE,A1 * load newline into register A1
00002178  700E                    2623          MOVE.L  #14,D0  * print the string stored in A1
0000217A  4E4F                    2624          TRAP    #15
0000217C                          2625  
0000217C  4E75                    2626          RTS
0000217E                          2627  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000217E                          2628  *-----------------------------------------------------------------------------
0000217E                          2629  
0000217E                          2630  
0000217E                          2631  
0000217E                          2632  *-----------------------------------------------------------------------------
0000217E                          2633  *-----------------------------------------------------------------------------
0000217E                          2634  * NAME: Print ASCII hex char
0000217E                          2635  * DESCRIPTION:    Prints and address register to console in hex (ASCII chars)
0000217E                          2636  * PRE-CONDITION:  A6 contains the register of memory to print.
0000217E                          2637  *                 This parameter would be pre-loaded by, for example:
0000217E                          2638  *                 "LEA FOO_BAR_ADDR,A6" or "LEA $1234FEED,A6"
0000217E                          2639  *                 D3 contains the loops to do (number of bytes).
0000217E                          2640  * POST-CONDITION: 
0000217E                          2641  * REGISTERS:      
0000217E                          2642  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000217E                          2643  PRINT_ASCII_HEX_CHAR
0000217E  48E7 FFFC               2644      MOVEM.L     D0-D7/A0-A5,-(A7) * push data to save
00002182  4285                    2645      CLR.L       D5
00002184                          2646      
00002184                          2647      * fence post check (if-statement, check if 0 > chars)
00002184  0C03 0000               2648      CMPI.B      #0,D3
00002188  6700 017C               2649      BEQ         INVALID_ASCII_INPUT * go to very last part if invalid
0000218C                          2650      
0000218C                          2651  *    MOVE.L      A6,D4
0000218C  2E0E                    2652      MOVE.L      A6,D7
0000218E                          2653  PRINT_ASCII_LOOP
0000218E                          2654  *    MOVE.L      A6,D7 * increase a6's pointer position ea. loop
0000218E                          2655  *    MOVE.L      D4,D7 * make a mutable copy
0000218E  E99F                    2656      ROL.L       #4,D7 * roll to next spot
00002190  48E7 0100               2657      MOVEM.L     D7,-(A7) * save D7
00002194                          2658  
00002194  0287 0000000F           2659      ANDI.L      #HEX_VALUE_MASK_LONG,D7
0000219A                          2660      
0000219A  0C87 00000000           2661      CMPI.L      #0,D7
000021A0  6D00 0164               2662      BLT         INVALID_ASCII_INPUT
000021A4                          2663  
000021A4  0C87 0000000F           2664      CMPI.L      #15,D7
000021AA  6E00 015A               2665      BGT         INVALID_ASCII_INPUT
000021AE                          2666  
000021AE                          2667      * this might be faster... to do later, after entire assignment done
000021AE                          2668       * CMPI.L      #9,D7
000021AE                          2669       * BLE         PRINT_ASCII_0_TO_9
000021AE                          2670  
000021AE  0C87 00000000           2671      CMPI.L      #0,D7
000021B4  6700 0098               2672      BEQ         PRINT_ASCII_0
000021B8  0C87 00000001           2673      CMPI.L      #1,D7
000021BE  6700 0098               2674      BEQ         PRINT_ASCII_1
000021C2  0C87 00000002           2675      CMPI.L      #2,D7
000021C8  6700 0098               2676      BEQ         PRINT_ASCII_2
000021CC  0C87 00000003           2677      CMPI.L      #3,D7
000021D2  6700 0098               2678      BEQ         PRINT_ASCII_3
000021D6  0C87 00000004           2679      CMPI.L      #4,D7
000021DC  6700 0098               2680      BEQ         PRINT_ASCII_4
000021E0  0C87 00000005           2681      CMPI.L      #5,D7
000021E6  6700 0098               2682      BEQ         PRINT_ASCII_5
000021EA  0C87 00000006           2683      CMPI.L      #6,D7
000021F0  6700 0098               2684      BEQ         PRINT_ASCII_6
000021F4  0C87 00000007           2685      CMPI.L      #7,D7
000021FA  6700 0098               2686      BEQ         PRINT_ASCII_7
000021FE  0C87 00000008           2687      CMPI.L      #8,D7
00002204  6700 0098               2688      BEQ         PRINT_ASCII_8
00002208  0C87 00000009           2689      CMPI.L      #9,D7
0000220E  6700 0098               2690      BEQ         PRINT_ASCII_9
00002212  0C87 0000000A           2691      CMPI.L      #10,D7
00002218  6700 0098               2692      BEQ         PRINT_ASCII_A
0000221C  0C87 0000000B           2693      CMPI.L      #11,D7
00002222  6700 0098               2694      BEQ         PRINT_ASCII_B
00002226  0C87 0000000C           2695      CMPI.L      #12,D7
0000222C  6700 0098               2696      BEQ         PRINT_ASCII_C
00002230  0C87 0000000D           2697      CMPI.L      #13,D7
00002236  6700 0098               2698      BEQ         PRINT_ASCII_D
0000223A  0C87 0000000E           2699      CMPI.L      #14,D7
00002240  6700 0098               2700      BEQ         PRINT_ASCII_E
00002244  0C87 0000000F           2701      CMPI.L      #15,D7
0000224A  6700 0098               2702      BEQ         PRINT_ASCII_F
0000224E                          2703  PRINT_ASCII_0
0000224E  43F9 00002487           2704      LEA         ASCII_0,A1
00002254  6000 0098               2705      BRA         PRINT_ASCII_CHAR
00002258                          2706  PRINT_ASCII_1
00002258  43F9 00002489           2707      LEA         ASCII_1,A1
0000225E  6000 008E               2708      BRA         PRINT_ASCII_CHAR
00002262                          2709  PRINT_ASCII_2
00002262  43F9 0000248B           2710      LEA         ASCII_2,A1
00002268  6000 0084               2711      BRA         PRINT_ASCII_CHAR
0000226C                          2712  PRINT_ASCII_3
0000226C  43F9 0000248D           2713      LEA         ASCII_3,A1
00002272  6000 007A               2714      BRA         PRINT_ASCII_CHAR
00002276                          2715  PRINT_ASCII_4
00002276  43F9 0000248F           2716      LEA         ASCII_4,A1
0000227C  6000 0070               2717      BRA         PRINT_ASCII_CHAR
00002280                          2718  PRINT_ASCII_5
00002280  43F9 00002491           2719      LEA         ASCII_5,A1
00002286  6000 0066               2720      BRA         PRINT_ASCII_CHAR
0000228A                          2721  PRINT_ASCII_6
0000228A  43F9 00002493           2722      LEA         ASCII_6,A1
00002290  6000 005C               2723      BRA         PRINT_ASCII_CHAR
00002294                          2724  PRINT_ASCII_7
00002294  43F9 00002495           2725      LEA         ASCII_7,A1
0000229A  6000 0052               2726      BRA         PRINT_ASCII_CHAR
0000229E                          2727  PRINT_ASCII_8
0000229E  43F9 00002497           2728      LEA         ASCII_8,A1
000022A4  6000 0048               2729      BRA         PRINT_ASCII_CHAR
000022A8                          2730  PRINT_ASCII_9
000022A8  43F9 00002499           2731      LEA         ASCII_9,A1
000022AE  6000 003E               2732      BRA         PRINT_ASCII_CHAR
000022B2                          2733  PRINT_ASCII_A
000022B2  43F9 0000249B           2734      LEA         ASCII_A,A1
000022B8  6000 0034               2735      BRA         PRINT_ASCII_CHAR
000022BC                          2736  PRINT_ASCII_B
000022BC  43F9 0000249D           2737      LEA         ASCII_B,A1
000022C2  6000 002A               2738      BRA         PRINT_ASCII_CHAR
000022C6                          2739  PRINT_ASCII_C
000022C6  43F9 0000249F           2740      LEA         ASCII_C,A1
000022CC  6000 0020               2741      BRA         PRINT_ASCII_CHAR
000022D0                          2742  PRINT_ASCII_D
000022D0  43F9 000024A1           2743      LEA         ASCII_D,A1
000022D6  6000 0016               2744      BRA         PRINT_ASCII_CHAR
000022DA                          2745  PRINT_ASCII_E
000022DA  43F9 000024A3           2746      LEA         ASCII_E,A1
000022E0  6000 000C               2747      BRA         PRINT_ASCII_CHAR
000022E4                          2748  PRINT_ASCII_F
000022E4  43F9 000024A5           2749      LEA         ASCII_F,A1
000022EA  6000 0002               2750      BRA         PRINT_ASCII_CHAR
000022EE                          2751  PRINT_ASCII_CHAR
000022EE  103C 000E               2752      MOVE.B      #14,D0
000022F2  4E4F                    2753      TRAP        #15
000022F4                          2754      
000022F4                          2755          
000022F4  4287                    2756      CLR.L       D7
000022F6  4CDF 0080               2757      MOVEM.L     (A7)+,D7 * copy back D7 from stack, to mutate its' bits
000022FA                          2758      
000022FA  5205                    2759      ADD.B       #1,D5 * loop until counter stops
000022FC  BA03                    2760      CMP.B       D3,D5
000022FE  6C00 0006               2761      BGE         PRINT_ASCII_FINISH
00002302                          2762      
00002302  6000 FE8A               2763      BRA         PRINT_ASCII_LOOP
00002306                          2764  INVALID_ASCII_INPUT
00002306                          2765  PRINT_ASCII_FINISH
00002306  4CDF 3FFF               2766      MOVEM.L     (A7)+,D0-D7/A0-A5 * pop saved memory
0000230A  4E75                    2767      RTS
0000230C                          2768      
0000230C                          2769  PRINTDATA911
0000230C  0C46 0E00               2770      CMPI    #%0000111000000000, D6   * Print 7
00002310  6700 003C               2771      BEQ     PRINT7   
00002314  0C46 0C00               2772      CMPI    #%0000110000000000, D6   * Print 6
00002318  6700 0042               2773      BEQ     PRINT6
0000231C  0C46 0A00               2774      CMPI    #%0000101000000000, D6   * Print 5
00002320  6700 0048               2775      BEQ     PRINT5
00002324  0C46 0800               2776      CMPI    #%0000100000000000, D6   * Print 4
00002328  6700 004E               2777      BEQ     PRINT4 
0000232C  0C46 0600               2778      CMPI    #%0000011000000000, D6   * Print 3
00002330  6700 0054               2779      BEQ     PRINT3    
00002334  0C46 0400               2780      CMPI    #%0000010000000000, D6   * Print 2
00002338  6700 005A               2781      BEQ     PRINT2   
0000233C  0C46 0200               2782      CMPI    #%0000001000000000, D6   * Print 1
00002340  6700 0060               2783      BEQ     PRINT1     
00002344  0C46 0000               2784      CMPI    #%0000000000000000, D6   * Print 0
00002348  6700 0066               2785      BEQ     PRINT8
0000234C                          2786      
0000234C  4E75                    2787      RTS                             * Fail case  
0000234E                          2788      
0000234E                          2789  PRINT7
0000234E  43F9 00002495           2790      LEA     ASCII_7, A1
00002354  103C 000E               2791      MOVE.B      #14,D0
00002358  4E4F                    2792      TRAP        #15
0000235A  4E75                    2793      RTS
0000235C                          2794      
0000235C                          2795  PRINT6
0000235C  43F9 00002493           2796      LEA     ASCII_6, A1
00002362  103C 000E               2797      MOVE.B      #14,D0
00002366  4E4F                    2798      TRAP        #15
00002368  4E75                    2799      RTS
0000236A                          2800      
0000236A                          2801  PRINT5
0000236A  43F9 00002491           2802      LEA     ASCII_5, A1
00002370  103C 000E               2803      MOVE.B      #14,D0
00002374  4E4F                    2804      TRAP        #15
00002376  4E75                    2805      RTS
00002378                          2806      
00002378                          2807  PRINT4
00002378  43F9 0000248F           2808      LEA     ASCII_4, A1
0000237E  103C 000E               2809      MOVE.B      #14,D0
00002382  4E4F                    2810      TRAP        #15
00002384  4E75                    2811      RTS
00002386                          2812      
00002386                          2813  PRINT3
00002386  43F9 0000248D           2814      LEA     ASCII_3, A1
0000238C  103C 000E               2815      MOVE.B      #14,D0
00002390  4E4F                    2816      TRAP        #15
00002392  4E75                    2817      RTS
00002394                          2818      
00002394                          2819  PRINT2
00002394  43F9 0000248B           2820      LEA     ASCII_2, A1
0000239A  103C 000E               2821      MOVE.B      #14,D0
0000239E  4E4F                    2822      TRAP        #15
000023A0  4E75                    2823      RTS
000023A2                          2824      
000023A2                          2825  PRINT1
000023A2  43F9 00002489           2826      LEA     ASCII_1, A1
000023A8  103C 000E               2827      MOVE.B      #14,D0
000023AC  4E4F                    2828      TRAP        #15
000023AE  4E75                    2829      RTS
000023B0                          2830          
000023B0                          2831  PRINT8
000023B0  43F9 00002497           2832      LEA     ASCII_8, A1
000023B6  103C 000E               2833      MOVE.B      #14,D0
000023BA  4E4F                    2834      TRAP        #15
000023BC  4E75                    2835      RTS
000023BE                          2836  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000023BE                          2837  *-----------------------------------------------------------------------------
000023BE                          2838  
000023BE                          2839  
000023BE                          2840  
000023BE                          2841  *-----------------------------------------------------------------------------
000023BE                          2842  *-----------------------------------------------------------------------------
000023BE                          2843  * NAME: Bitmask
000023BE                          2844  * DESCRIPTION:    Masks bits in a data register.
000023BE                          2845  * PRE-CONDITION:  D6 contains the starting bit to be masked, and D7 contains
000023BE                          2846  *                 the ending bit.  For example, a starting bit of decimal
000023BE                          2847  *                 value 0 and an ending bit of decimal value 3 will mask the
000023BE                          2848  *                 bits 0, 1, 2, and 3.
000023BE                          2849  * POST-CONDITION: D6 contains the bitmask, ready for use.
000023BE                          2850  * REGISTERS:      D5,D6,D7
000023BE                          2851  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000023BE                          2852  BITMASK
000023BE  3F05                    2853          MOVE    D5,-(A7)    * push D5 onto the stack so we can use it to
000023C0  4245                    2854          CLR     D5          * clear D5 so we can use it
000023C2                          2855  LOOPBIT 
000023C2  0DC5                    2856          BSET    D6,D5       * set the D6th bit in D5 to 1
000023C4  5246                    2857          ADD     #1,D6       * increment D6
000023C6                          2858  
000023C6  BC47                    2859          CMP     D7,D6       * have we finished?
000023C8  6E00 0004               2860          BGT     BITMASKDONE * yes
000023CC  60F4                    2861          BRA     LOOPBIT     * no, iterate again
000023CE                          2862  
000023CE                          2863  BITMASKDONE
000023CE  2C05                    2864          MOVE.L  D5,D6
000023D0  3A1F                    2865          MOVE    (A7)+,D5    * restore D5
000023D2  4E75                    2866          RTS
000023D4                          2867  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000023D4                          2868  *-----------------------------------------------------------------------------
000023D4                          2869  
000023D4                          2870  
000023D4                          2871  
000023D4                          2872  *-----------------------------------------------------------------------------
000023D4                          2873  *-----------------------------------------------------------------------------
000023D4                          2874  * SECTION: Constants/variables used throughout the program.
000023D4                          2875  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000023D4                          2876  
000023D4                          2877  * ---> GENERAL
000023D4  =0000000D               2878  CR          EQU     $0D
000023D4  =0000000A               2879  LF          EQU     $0A
000023D4= 45 4E 54 45 52 20 ...   2880  MSGSTART    DC.B    'ENTER START ADDRESS: ',CR,LF,0
000023EC= 45 4E 54 45 52 20 ...   2881  MSGEND      DC.B    'ENTER END ADDRESS: ',CR,LF,0
00002402= 0D 0A 00                2882  NEWLINE     DC.B    CR,LF,0
00002405                          2883  
00002405                          2884  * ---> OPS
00002405= 44 49 56 53 00          2885  DIVSOP      DC.B    'DIVS',0
0000240A= 4E 4F 50 00             2886  NOOPERATION DC.B    'NOP',0
0000240E= 4E 45 47 00             2887  NEGOP       DC.B    'NEG',0
00002412= 4D 4F 56 45 00          2888  MOVEOP      DC.B    'MOVE',0
00002417= 4D 4F 56 45 4D 00       2889  MOVEMOP     DC.B    'MOVEM',0
0000241D= 4A 53 52 00             2890  JSROP       DC.B    'JSR',0
00002421= 52 54 53 00             2891  RTSOP       DC.B    'RTS',0
00002425= 53 55 42 51 00          2892  SUBQOP      DC.B    'SUBQ',0
0000242A= 4C 45 41 00             2893  LEAOP       DC.B    'LEA',0
0000242E= 42 43 4C 52 20 00       2894  BCLROP      DC.B    'BCLR ',0
00002434= 4D 55 4C 53 00          2895  MULSOP      DC.B    'MULS',0
00002439= 4F 52 00                2896  OROP        DC.B    'OR',0
0000243C= 4F 52 49 00             2897  ORIOP       DC.B    'ORI',0
00002440= 43 4D 50 49 00          2898  CMPIOP      DC.B    'CMPI',0
00002445= 4C 53 4C 00             2899  LSLOP       DC.B    'LSL',0
00002449= 4C 53 52 00             2900  LSROP       DC.B    'LSR',0
0000244D= 41 53 4C 00             2901  ASLOP       DC.B    'ASL',0
00002451= 41 53 52 00             2902  ASROP       DC.B    'ASR',0
00002455= 52 4F 4C 00             2903  ROLOP       DC.B    'ROL',0
00002459= 52 4F 52 00             2904  ROROP       DC.B    'ROR',0
0000245D= 20 44 41 54 41 20 ...   2905  DATA        DC.B    ' DATA $',0
00002465= 42 43 43 20 00          2906  OP_BCC_MSG  DC.B    'BCC ',0
0000246A= 42 43 53 20 00          2907  OP_BCS_MSG  DC.B    'BCS ',0
0000246F= 42 47 45 20 00          2908  OP_BGE_MSG  DC.B    'BGE ',0
00002474= 42 4C 54 20 00          2909  OP_BLT_MSG  DC.B    'BLT ',0
00002479= 42 56 43 20 00          2910  OP_BVC_MSG  DC.B    'BVC ',0
0000247E= 42 52 41 20 00          2911  OP_BRA_MSG  DC.B    'BRA ',0
00002483= 41 44 44 00             2912  OP_ADD_MSG  DC.B    'ADD',0
00002487                          2913  
00002487                          2914  * ---> HEX CHARS
00002487= 30 00                   2915  ASCII_0     DC.B    '0',0
00002489= 31 00                   2916  ASCII_1     DC.B    '1',0
0000248B= 32 00                   2917  ASCII_2     DC.B    '2',0
0000248D= 33 00                   2918  ASCII_3     DC.B    '3',0
0000248F= 34 00                   2919  ASCII_4     DC.B    '4',0
00002491= 35 00                   2920  ASCII_5     DC.B    '5',0
00002493= 36 00                   2921  ASCII_6     DC.B    '6',0
00002495= 37 00                   2922  ASCII_7     DC.B    '7',0
00002497= 38 00                   2923  ASCII_8     DC.B    '8',0
00002499= 39 00                   2924  ASCII_9     DC.B    '9',0
0000249B= 41 00                   2925  ASCII_A     DC.B    'A',0
0000249D= 42 00                   2926  ASCII_B     DC.B    'B',0
0000249F= 43 00                   2927  ASCII_C     DC.B    'C',0
000024A1= 44 00                   2928  ASCII_D     DC.B    'D',0
000024A3= 45 00                   2929  ASCII_E     DC.B    'E',0
000024A5= 46 00                   2930  ASCII_F     DC.B    'F',0
000024A7                          2931  
000024A7                          2932  * ---> SPECIAL CHARACTERS
000024A7= 20 00                   2933  SPACE       DC.B    ' ',0
000024A9= 24 00                   2934  DOLLAR      DC.B    '$',0
000024AB= 23 00                   2935  IMD         DC.B    '#',0
000024AD= 2C 00                   2936  COMMA       DC.B    ',',0
000024AF= 28 00                   2937  OBRACK      DC.B    '(',0
000024B1= 29 00                   2938  CBRACK      DC.B    ')',0
000024B3= 2B 00                   2939  PLUS        DC.B    '+',0
000024B5= 2D 00                   2940  MINUS       DC.B    '-',0
000024B7= 2F 00                   2941  SLASH       DC.B    '/',0
000024B9= 2D 00                   2942  DASH        DC.B    '-',0
000024BB                          2943  
000024BB                          2944  * ---> B/W/L (BYTE, WORD, LONG, RESPECTIVELY)
000024BB= 2E 42 20 00             2945  __B         DC.B    '.B ',0
000024BF= 2E 57 20 00             2946  __W         DC.B    '.W ',0
000024C3= 2E 4C 20 00             2947  __L         DC.B    '.L ',0
000024C7                          2948  
000024C7                          2949  * ---> ADDRESS REGISTERS A0-A7
000024C7= 41 30 00                2950  __A0        DC.B   'A0',0
000024CA= 41 31 00                2951  __A1        DC.B   'A1',0    
000024CD= 41 32 00                2952  __A2        DC.B   'A2',0
000024D0= 41 33 00                2953  __A3        DC.B   'A3',0
000024D3= 41 34 00                2954  __A4        DC.B   'A4',0
000024D6= 41 35 00                2955  __A5        DC.B   'A5',0
000024D9= 41 36 00                2956  __A6        DC.B   'A6',0
000024DC= 41 37 00                2957  __A7        DC.B   'A7',0
000024DF                          2958  
000024DF                          2959  * ---> DATA REGISTERS D0-D7
000024DF= 44 30 00                2960  __D0        DC.B   'D0',0
000024E2= 44 31 00                2961  __D1        DC.B   'D1',0
000024E5= 44 32 00                2962  __D2        DC.B   'D2',0
000024E8= 44 33 00                2963  __D3        DC.B   'D3',0
000024EB= 44 34 00                2964  __D4        DC.B   'D4',0
000024EE= 44 35 00                2965  __D5        DC.B   'D5',0
000024F1= 44 36 00                2966  __D6        DC.B   'D6',0
000024F4= 44 37 00                2967  __D7        DC.B   'D7',0
000024F7                          2968  
000024F7                          2969  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000024F7                          2970  *-----------------------------------------------------------------------------
000024F7                          2971  
000024F7                          2972  
000024F7                          2973  
000024F7                          2974  *-----------------------------------------------------------------------------
000024F7                          2975  *-----------------------------------------------------------------------------
000024F7                          2976  * SECTION: Sample program to run, then attempt testing disassembly on.
000024F7                          2977  * STARTING: 16384
000024F7                          2978  * ENDING:   16420
000024F7                          2979  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00004000                          2980      ORG $4000
00004000                          2981      
00004000  4E71                    2982      NOP
00004002  103C 009A               2983      MOVE.B   #%10011010, D0
00004006  123C 00A9               2984      MOVE.B   #%10101001, D1
0000400A  D200                    2985      ADD.B    D0,D1
0000400C  4C9F 3C1A               2986      MOVEM    (A7)+,A2-A5/D1/D3-D4
00004010  43F8 241D               2987      LEA      JSROP,A1
00004014  4467                    2988      NEG.W    -(A7)
00004016  4EB9 00005000           2989      JSR      END
0000401C  81FC 0001               2990      DIVS    #1, D0
00004020  0181                    2991      BCLR    D0, D1
00004022  CFFC 0003               2992      MULS.W  #3, D7
00004026  CFC0                    2993      MULS    D0, D7
00004028  C5D9                    2994      MULS    (A1)+, D2
0000402A  5146                    2995      SUBQ    #8, D6
0000402C  5F81                    2996      SUBQ.L  #7, D1
0000402E  0041 0004               2997      ORI     #4, D1
00004032  E389                    2998      LSL.L   #1,D1
00004034  E489                    2999      LSR.L   #2,D1
00004036  E781                    3000      ASL.L   #3,D1
00004038  E881                    3001      ASR.L   #4,D1
0000403A  EB99                    3002      ROL.L   #5,D1
0000403C  E099                    3003      ROR.L   #8,D1
0000403E  6000 0FC0               3004      BRA     END
00004042  6700 0FBC               3005      BEQ     END
00004046                          3006  
00005000                          3007  END:    ORG     $5000
00005000  4E75                    3008      RTS
00005002                          3009      
00005002                          3010  RLLYEND
00005002                          3011      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_LONG_OP        195C
ADDA_WORD_OP        18F0
ADD_ADDA_EA_REG     199C
ADD_ADDA_END        19C0
ADD_ADDA_PRINT      19A0
ADD_ADDA_SPACE      198E
ADD_EA_DN_GENERIC   1980
AFORWARDVALID       20CA
AINVALID            210A
ALOOP               209A
ALOOPDONE           214E
ALOOPITER           2140
ALOOPITERCLR        213E
ANOSLASH            20DE
AS                  1A36
ASCII_0             2487
ASCII_1             2489
ASCII_2             248B
ASCII_3             248D
ASCII_4             248F
ASCII_5             2491
ASCII_6             2493
ASCII_7             2495
ASCII_8             2497
ASCII_9             2499
ASCII_A             249B
ASCII_B             249D
ASCII_C             249F
ASCII_D             24A1
ASCII_E             24A3
ASCII_F             24A5
ASL                 1A4C
ASLOP               244D
ASR                 1A5C
ASROP               2451
AVALID              20A4
BCC_BYTE_OFFSET     1712
BCC_END             1722
BCLROP              242E
BITMASK             23BE
BITMASKDONE         23CE
BYTE_DN_EA          1914
BYTE_EA_DN          18A8
CBRACK              24B1
CMPIOP              2440
COMMA               24AD
CR                  D
DASH                24B9
DATA                245D
DFORWARDVALID       2012
DINVALID            204E
DIVSOP              2405
DLOOP               1FE2
DLOOPDONE           208E
DLOOPITER           2080
DLOOPITERCLR        207E
DNOSLASH            2026
DOLLAR              24A9
DONE0100            15F4
DVALID              1FEC
EAHELPER05          1BB0
EAHELPER611         1B6E
END                 5000
END0000             1254
END67               1F44
ENDEAHELPER05       1D00
ENDEAHELPER611      1BAA
ENDMODE_AN          1E90
ENDMODE_DN          1D90
ENDOP0001           12BA
ENDOP1110           1B56
HEX_VALUE_MASK_LONG  F
IMD                 24AB
INVALID_ASCII_INPUT  2306
ITERATION           1158
JSROP               241D
LEAOP               242A
LF                  A
LONG_DN_EA          1944
LONG_EA_DN          18D8
LOOP                103A
LOOPBIT             23C2
LOOPUNKNOWNOP       1154
LS                  1A00
LSL                 1A16
LSLOP               2445
LSR                 1A26
LSROP               2449
MINUS               24B5
MODE_AN             1E06
MODE_DN             1D06
MOVEMHELPERPOST     1FCC
MOVEMHELPERPRE      2154
MOVEMOP             2417
MOVEMTOMEM          1404
MOVEMTOREG          136A
MOVEOP              2412
MSGEND              23EC
MSGSTART            23D4
MULSOP              2434
NEGOP               240E
NEWLINE             2402
NOOPERATION         240A
NOT0000             1064
NOT0001             1074
NOT0010             1084
NOT0011             1094
NOT0100             10A4
NOT0101             10B4
NOT0110             10C4
NOT0111             10D4
NOT1000             10E4
NOT1001             10F4
NOT1010             1104
NOT1011             1114
NOT1100             1124
NOT1101             1134
NOT1110             1144
NOT67BYTE           1F28
NOT67WORD           1F38
NOTA0               1E28
NOTA1               1E38
NOTA2               1E48
NOTA3               1E58
NOTA4               1E68
NOTA5               1E78
NOTA6               1E88
NOTADRDIRECT        1BE0
NOTADRINDIRECT      1C08
NOTADRINDIRECTPOST  1C3C
NOTADRINDIRECTPRE   1C70
NOTBCLR             11E2
NOTD0               1D28
NOTD1               1D38
NOTD2               1D48
NOTD3               1D58
NOTD4               1D68
NOTD5               1D78
NOTD6               1D88
NOTDATAREG          1BD0
NOTDIVS             17AC
NOTIMMBYTE          1CA6
NOTIMMEDIATE        1CFC
NOTIMMWORD          1CD4
NOTJSR              14EC
NOTLONGMOVEM1       13D2
NOTLONGMOVEM2       146C
NOTMOVEM            149E
NOTNEG              1346
NOTNOP              12F0
NOTORI              1248
NOTRTS              150E
OBRACK              24AF
OP0000              1164
OP0001              125A
OP0010              12C0
OP0011              12C6
OP0100              12D4
OP0101              15FE
OP0110              166C
OP0111              1728
OP1000              172E
OP1000END           17BC
OP1001              17C2
OP1010              17C2
OP1011              17C8
OP1100              17CE
OP1101              1858
OP1110              19D2
OP1110DATAREG       1B2A
OP1110GENERIC       1AA2
OP1110IMMEIGHT      1B02
OP1111              1B68
OP_0000             0
OP_0001             1000
OP_0010             2000
OP_0011             3000
OP_0100             4000
OP_0101             5000
OP_0110             6000
OP_0111             7000
OP_1000             8000
OP_1001             9000
OP_1010             A000
OP_1011             B000
OP_1100             C000
OP_1101             D000
OP_1110             E000
OP_1111             F000
OP_ADD_MSG          2483
OP_BCC              16B6
OP_BCC_MSG          2465
OP_BCS              16C0
OP_BCS_MSG          246A
OP_BGE              16CA
OP_BGE_MSG          246F
OP_BLT              16D4
OP_BLT_MSG          2474
OP_BRA              16E8
OP_BRANCHES_PRINT   16F2
OP_BRA_MSG          247E
OP_BVC              16DE
OP_BVC_MSG          2479
ORIOP               243C
OROP                2439
PLUS                24B3
PRINT1              23A2
PRINT2              2394
PRINT3              2386
PRINT4              2378
PRINT5              236A
PRINT6              235C
PRINT7              234E
PRINT8              23B0
PRINTA0             1E96
PRINTA1             1EA4
PRINTA2             1EB2
PRINTA3             1EC0
PRINTA4             1ECE
PRINTA5             1EDC
PRINTA6             1EEA
PRINTA7             1EF8
PRINTBYTE           1FA2
PRINTD0             1D96
PRINTD1             1DA4
PRINTD2             1DB2
PRINTD3             1DC0
PRINTD4             1DCE
PRINTD5             1DDC
PRINTD6             1DEA
PRINTD7             1DF8
PRINTDATA911        230C
PRINTLONG           1FBE
PRINTWORD           1FB0
PRINT_ASCII_0       224E
PRINT_ASCII_1       2258
PRINT_ASCII_2       2262
PRINT_ASCII_3       226C
PRINT_ASCII_4       2276
PRINT_ASCII_5       2280
PRINT_ASCII_6       228A
PRINT_ASCII_7       2294
PRINT_ASCII_8       229E
PRINT_ASCII_9       22A8
PRINT_ASCII_A       22B2
PRINT_ASCII_B       22BC
PRINT_ASCII_C       22C6
PRINT_ASCII_CHAR    22EE
PRINT_ASCII_D       22D0
PRINT_ASCII_E       22DA
PRINT_ASCII_F       22E4
PRINT_ASCII_FINISH  2306
PRINT_ASCII_HEX_CHAR  217E
PRINT_ASCII_LOOP    218E
RLLYEND             5002
RO                  1A6C
ROL                 1A82
ROLOP               2455
ROR                 1A92
ROROP               2459
RTSOP               2421
SIZE67              1F06
SIZE68              1F4A
SKIPNOTLONG1        13DE
SKIPNOTLONG2        1478
SLASH               24B7
SPACE               24A7
START               1000
SUBQOP              2425
TWOWORDLEA          159E
UNKNOWN0000         1250
UNKNOWN0100         15F0
UNKNOWN0101         1666
UNKNOWN1100         184E
UNKNOWNOP           2154
UNKNOWNOP0001       12B6
WORD_DN_EA          192C
WORD_EA_DN          18C0
__A0                24C7
__A1                24CA
__A2                24CD
__A3                24D0
__A4                24D3
__A5                24D6
__A6                24D9
__A7                24DC
__B                 24BB
__D0                24DF
__D1                24E2
__D2                24E5
__D3                24E8
__D4                24EB
__D5                24EE
__D6                24F1
__D7                24F4
__L                 24C3
__W                 24BF
