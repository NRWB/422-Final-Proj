00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/11/2014 3:35:35 PM

00000000                             1  *    666
00000000                             2  *   66 66
00000000                             3  *  66   66
00000000                             4  *  66   66         8888
00000000                             5  *  66   66       88   kkkk
00000000                             6  *  66  66       8   88   kk      
00000000                             7  *   66  6      8  88  kkk  kk    
00000000                             8  *    66  6    8  88     kk  k
00000000                             9  *     66 66  88 88        kk
00000000                            10  *     6 _______ 8
00000000                            11  *    6    68k    8
00000000                            12  *   6_____PRO_____8
00000000                            13  *  6               8        68k is as easy as
00000000                            14  *  6    0     0    8        6 - 8 - k !
00000000                            15  *  6   /   V   \   8 
00000000                            16  *  6   \__/ \__/   8        Welcome to our Dissasembler, Professor Nash!
00000000                            17  *    6            8         Enjoy your stay!
00000000                            18  *      6        8      
00000000                            19  *        666888
00000000                            20  *  _____                   __    ___  _    
00000000                            21  * | ____|__ _ ___ _   _   / /_  ( _ )| | __
00000000                            22  * |  _| / _` / __| | | | | '_ \ / _ \| |/ /
00000000                            23  * | |__| (_| \__ \ |_| | | (_) | (_) |   < 
00000000                            24  * |_____\__,_|___/\__, |  \___/ \___/|_|\_\
00000000                            25  *                 |___/           
00000000                            26  *-----------------------------------------------------------
00000000                            27  * Title      : 68K Decompiler
00000000                            28  * Written by : Nick Bell, Sammy Nimnuch, Caleb Larson
00000000                            29  * Date       : 11/2014
00000000                            30  * Description: This program decompiles other 68K programs
00000000                            31  *              which are loaded into the simulator simultaneously.
00000000                            32  *-----------------------------------------------------------
00000000                            33  
00000000                            34  
00000000  =00000000                 35  OP_0000     EQU     %0000000000000000
00000000  =00001000                 36  OP_0001     EQU     %0001000000000000
00000000  =00002000                 37  OP_0010     EQU     %0010000000000000
00000000  =00003000                 38  OP_0011     EQU     %0011000000000000
00000000  =00004000                 39  OP_0100     EQU     %0100000000000000
00000000  =00005000                 40  OP_0101     EQU     %0101000000000000
00000000  =00006000                 41  OP_0110     EQU     %0110000000000000
00000000  =00007000                 42  OP_0111     EQU     %0111000000000000
00000000  =00008000                 43  OP_1000     EQU     %1000000000000000
00000000  =00009000                 44  OP_1001     EQU     %1001000000000000
00000000  =0000A000                 45  OP_1010     EQU     %1010000000000000
00000000  =0000B000                 46  OP_1011     EQU     %1011000000000000
00000000  =0000C000                 47  OP_1100     EQU     %1100000000000000
00000000  =0000D000                 48  OP_1101     EQU     %1101000000000000
00000000  =0000E000                 49  OP_1110     EQU     %1110000000000000
00000000  =0000F000                 50  OP_1111     EQU     %1111000000000000
00000000  =0000000F                 51  HEX_VALUE_MASK_LONG EQU     $0000000F  * mask a hex value in 32-bits
00000000                            52  
00000000                            53  * BITMASK     EQU     $F000       * used to bitmask the first nibble
00000000                            54  
00001000                            55  START:  ORG    $1000            * first instruction of program
00001000                            56  
00001000                            57  * -----------------------------------
00001000                            58  * Starting and Ending Addresses
00001000                            59  * -----------------------------------
00001000                            60  *-----------------------------------------------------------------------------
00001000                            61  *-----------------------------------------------------------------------------
00001000                            62  * NAME: x
00001000                            63  * DESCRIPTION:    a
00001000                            64  * PRE-CONDITION:  b
00001000                            65  * POST-CONDITION: c
00001000                            66  * REGISTERS:      d
00001000                            67  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001000                            68  
00001000                            69  * THINK ABOUT ASKING FOR VALID START/END NO NEGATIVE ADDR
00001000                            70  
00001000                            71  * LOAD MSGSTART, ASK FOR INPUT
00001000  43F9 00002522             72          LEA     MSGSTART,A1     * Load MESSAGE START
00001006  103C 000E                 73          MOVE.B  #14,D0          * Trap #14 to display message
0000100A  4E4F                      74          TRAP    #15             * Perform #14
0000100C                            75          
0000100C                            76  * GETS THE STARTING ADDRESS
0000100C  103C 0004                 77          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001010  4E4F                      78          TRAP    #15             * Perform #15
00001012                            79          
00001012                            80  * MOVE IT TO ANOTHER ADDRESS REGISTER
00001012  2441                      81          MOVEA.L D1,A2           * Move the user input into A2. This is the starting address.
00001014                            82  
00001014                            83  * LOAD MSGSTART, ASK FOR INPUT
00001014  43F9 0000253A             84          LEA     MSGEND,A1       * Load MESSAGE END
0000101A  303C 000E                 85          MOVE.W  #14,D0          * Trap #14 to display message
0000101E  4E4F                      86          TRAP    #15             * Perform #14
00001020                            87          
00001020                            88  * GETS THE ENDING ADDRESS
00001020  103C 0004                 89          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001024  4E4F                      90          TRAP    #15             * Perform Trap #4
00001026  2A01                      91          MOVE.L  D1,D5           * Move the ending address into D5
00001028  43F9 00002575             92          LEA     NEWLINE,A1      * Store newline variable for seper opcodes
0000102E                            93          
0000102E  3E3C 000F                 94          MOVE.W  #15,D7          * prep D7 for bitmask subroutine
00001032  3C3C 000C                 95          MOVE.W  #12,D6          * prep D6 for bitmask subroutine
00001036  6100 14D4                 96          BSR     BITMASK         * obtain a bitmask that goes from 12-15 (inclusive)
0000103A                            97          * MOVE.W  D6,D2           * move the bitmask to D2
0000103A                            98          
0000103A  4279 0000266A             99          CLR     (__COUNTER)              * setup the counter
00001040  33FC 0000 0000266A       100          MOVE    #0,(__COUNTER)           
00001048                           101          
00001048  6100 0164                102          BSR     CLEAR_SCREEN    * clear the prompt for start/end ADDR's
0000104C                           103  LOOP    
0000104C  2C4A                     104          MOVE.L  A2,A6
0000104E  7608                     105          MOVE.L  #8,D3
00001050  6100 127A                106          BSR     PRINT_ASCII_HEX_CHAR
00001054                           107          
00001054                           108          *MOVE.W  A2,D1           * print what address we are processing
00001054                           109          *MOVE.B  #3,D0
00001054                           110          *TRAP    #15
00001054                           111          
00001054  43F9 0000261A            112          LEA     SPACE,A1        * print a space to seperate the address from the data
0000105A  303C 000E                113          MOVE.W  #14,D0
0000105E  4E4F                     114          TRAP    #15
00001060                           115  
00001060  3F06                     116          MOVE    D6,-(A7)        * save the bitmask on the stack
00001062  341A                     117          MOVE.W  (A2)+,D2        * Read an operation into D2
00001064  CC42                     118          AND.W   D2,D6           * Apply this bitmask
00001066                           119          
00001066  BC7C 0000                120          CMP     #OP_0000,D6     * Does the operation start with 0000?
0000106A  6600 000A                121          BNE     NOT0000         * No, check next case
0000106E  6100 014A                122          BSR     OP0000          * Branch to subroutine 0000
00001072  6000 00F6                123          BRA     ITERATION       * Move to next iteration of the loop
00001076                           124  NOT0000        
00001076  BC7C 1000                125          CMP     #OP_0001,D6     * Does the operation start with 0001?
0000107A  6600 000A                126          BNE     NOT0001         * No, check next case
0000107E  6100 02E2                127          BSR     OP0001          * Branch to subroutine 0001
00001082  6000 00E6                128          BRA     ITERATION       * Move to next iteration of the loop
00001086                           129  NOT0001
00001086  BC7C 2000                130          CMP     #OP_0010,D6     * Does the operation start with 0010?
0000108A  6600 000A                131          BNE     NOT0010         * No, check next case
0000108E  6100 0338                132          BSR     OP0010          * Branch to subroutine 0010
00001092  6000 00D6                133          BRA     ITERATION       * Move to next iteration of the loop
00001096                           134  NOT0010
00001096  BC7C 3000                135          CMP     #OP_0011,D6     * Does the operation start with 0011?
0000109A  6600 000A                136          BNE     NOT0011         * No, check next case
0000109E  6100 032E                137          BSR     OP0011          * Branch to subroutine 0011
000010A2  6000 00C6                138          BRA     ITERATION       * Move to next iteration of the loop
000010A6                           139  NOT0011
000010A6  BC7C 4000                140          CMP     #OP_0100,D6     * Does the operation start with 0100?
000010AA  6600 000A                141          BNE     NOT0100         * No, check next case
000010AE  6100 032C                142          BSR     OP0100          * Branch to subroutine 0100
000010B2  6000 00B6                143          BRA     ITERATION       * Move to next iteration of the loop
000010B6                           144  NOT0100
000010B6  BC7C 5000                145          CMP     #OP_0101,D6     * Does the operation start with 0101?
000010BA  6600 000A                146          BNE     NOT0101         * No, check next case
000010BE  6100 0646                147          BSR     OP0101          * Branch to subroutine 0101
000010C2  6000 00A6                148          BRA     ITERATION       * Move to next iteration of the loop
000010C6                           149  NOT0101
000010C6  BC7C 6000                150          CMP     #OP_0110,D6     * Does the operation start with 0110?
000010CA  6600 000A                151          BNE     NOT0110         * No, check next case
000010CE  6100 06A4                152          BSR     OP0110          * Branch to subroutine 0110
000010D2  6000 0096                153          BRA     ITERATION       * Move to next iteration of the loop
000010D6                           154  NOT0110
000010D6  BC7C 7000                155          CMP     #OP_0111,D6     * Does the operation start with 0111?
000010DA  6600 000A                156          BNE     NOT0111         * No, check next case
000010DE  6100 075C                157          BSR     OP0111          * Branch to subroutine 0111
000010E2  6000 0086                158          BRA     ITERATION       * Move to next iteration of the loop
000010E6                           159  NOT0111
000010E6  BC7C 8000                160          CMP     #OP_1000,D6     * Does the operation start with 1000?
000010EA  6600 000A                161          BNE     NOT1000         * No, check next case
000010EE  6100 0752                162          BSR     OP1000          * Branch to subroutine 1000
000010F2  6000 0076                163          BRA     ITERATION       * Move to next iteration of the loop
000010F6                           164  NOT1000
000010F6  BC7C 9000                165          CMP     #OP_1001,D6     * Does the operation start with 1001?
000010FA  6600 000A                166          BNE     NOT1001         * No, check next case
000010FE  6100 07D6                167          BSR     OP1001          * Branch to subroutine 1001
00001102  6000 0066                168          BRA     ITERATION       * Move to next iteration of the loop
00001106                           169  NOT1001
00001106  BC7C A000                170          CMP     #OP_1010,D6     * Does the operation start with 1010?
0000110A  6600 000A                171          BNE     NOT1010         * No, check next case
0000110E  6100 07C6                172          BSR     OP1010          * Branch to subroutine 1010
00001112  6000 0056                173          BRA     ITERATION       * Move to next iteration of the loop
00001116                           174  NOT1010
00001116  BC7C B000                175          CMP     #OP_1011,D6     * Does the operation start with 1011?
0000111A  6600 000A                176          BNE     NOT1011         * No, check next case
0000111E  6100 07BC                177          BSR     OP1011          * Branch to subroutine 1011
00001122  6000 0046                178          BRA     ITERATION       * Move to next iteration of the loop
00001126                           179  NOT1011
00001126  BC7C C000                180          CMP     #OP_1100,D6     * Does the operation start with 1100?
0000112A  6600 000A                181          BNE     NOT1100         * No, check next case
0000112E  6100 07B2                182          BSR     OP1100          * Branch to subroutine 1100
00001132  6000 0036                183          BRA     ITERATION       * Move to next iteration of the loop
00001136                           184  NOT1100
00001136  BC7C D000                185          CMP     #OP_1101,D6     * Does the operation start with 1101?
0000113A  6600 000A                186          BNE     NOT1101         * No, check next case
0000113E  6100 082C                187          BSR     OP1101          * Branch to subroutine 1101
00001142  6000 0026                188          BRA     ITERATION       * Move to next iteration of the loop
00001146                           189  NOT1101
00001146  BC7C E000                190          CMP     #OP_1110,D6     * Does the operation start with 1110?
0000114A  6600 000A                191          BNE     NOT1110         * No, check next case
0000114E  6100 09A2                192          BSR     OP1110          * Branch to subroutine 1110
00001152  6000 0016                193          BRA     ITERATION       * Move to next iteration of the loop
00001156                           194  NOT1110
00001156  BC7C F000                195          CMP     #OP_1111,D6     * Does the operation start with 1111?
0000115A  6600 000A                196          BNE     LOOPUNKNOWNOP   * No, check next case
0000115E  6100 0B28                197          BSR     OP1111          * Branch to subroutine 1111
00001162  6000 0006                198          BRA     ITERATION       * Move to next iteration of the loop
00001166                           199          
00001166                           200  LOOPUNKNOWNOP
00001166  6100 113A                201          BSR     UNKNOWNOP
0000116A                           202          
0000116A                           203  ITERATION
0000116A  3C1F                     204          MOVE    (A7)+,D6        * restore the bitmask to its previous state
0000116C                           205      
0000116C  5279 0000266A            206          ADDI    #1,(__COUNTER)           * Track the lines on screen
00001172  0C79 001E 0000266A       207          CMPI    #30,(__COUNTER)
0000117A  6600 0006                208          BNE     END_OF_LOOP     * Not at 30, go loop more
0000117E  6100 000C                209          BSR     IDLE_STATE      * Break to idle, ask to clear screen
00001182                           210  
00001182                           211  END_OF_LOOP
00001182  BA4A                     212          CMP     A2,D5           * Compare the starting address to ending address
00001184  6700 2EDE                213          BEQ     END             * If they are equal, branch 
00001188  6000 FEC2                214          BRA     LOOP            * Otherwise, branch back to LOOP
0000118C                           215  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000118C                           216  *-----------------------------------------------------------------------------
0000118C                           217  IDLE_STATE
0000118C  43F9 00002550            218      LEA     CONT_MSG,A1 * show msg to hit enter in order to continue
00001192  103C 000E                219      MOVE.B  #14,D0
00001196  4E4F                     220      TRAP    #15
00001198                           221      
00001198  103C 0004                222      MOVE.B  #4,D0 * trap task 4 - input
0000119C  4E4F                     223      TRAP    #15
0000119E  0C41 000D                224      CMPI    #$D,D1
000011A2                           225      
000011A2  6100 000A                226      BSR     CLEAR_SCREEN * clear everything, so ready to output another 30
000011A6  42B9 0000266A            227      CLR.L   (__COUNTER)
000011AC  4E75                     228      RTS
000011AE                           229  CLEAR_SCREEN
000011AE  103C 000B                230      MOVE.B  #11,D0
000011B2  323C FF00                231      MOVE.W  #$FF00,D1
000011B6  4E4F                     232      TRAP    #15
000011B8  4E75                     233      RTS
000011BA                           234  
000011BA                           235  
000011BA                           236  *-----------------------------------------------------------------------------
000011BA                           237  *-----------------------------------------------------------------------------
000011BA                           238  * NAME: OP_0000   (BCLR, ORI, CMPI)
000011BA                           239  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000011BA                           240  * PRE-CONDITION:  xyz
000011BA                           241  * POST-CONDITION: All registers return to their previous state, and the output
000011BA                           242  *                 goes to the output console for reading the raw data or the
000011BA                           243  *                 actual instruction.
000011BA                           244  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000011BA                           245  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000011BA                           246  OP0000
000011BA  48A7 FFC0                247          MOVEM   D0-D7/A0-A1,-(A7)   * Push values to the stack to save
000011BE  3C3C 0006                248          MOVE.W  #6, D6              * Prep lower value for bitmask
000011C2  3E3C 0008                249          MOVE.W  #8, D7              * Prep upper value for bitmask
000011C6  6100 1344                250          BSR     BITMASK             * Finalize bitmask setup
000011CA  CC42                     251          AND     D2,D6               * Apply bitmask
000011CC                           252          
000011CC  0C46 0180                253          CMPI    #%0000000110000000, D6  * Are we BCLR Dynamic?
000011D0  6600 0066                254          BNE     NOTBCLRDYNA             * If not, branch to BCLR Static or other ops
000011D4                           255          
000011D4                           256          * Checking for unsupported mode
000011D4  3C3C 0003                257          MOVE.W  #3, D6              * Prep lower value for bitmask
000011D8  3E3C 0005                258          MOVE.W  #5, D7              * Prep upper value for bitmask
000011DC  6100 132E                259          BSR     BITMASK             * Finalize bitmask setup
000011E0  CC42                     260          AND     D2,D6               * Apply bitmask
000011E2                           261          
000011E2  0C46 0008                262          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
000011E6  6700 0170                263          BEQ     UNKNOWN0000             * If so, the op is unknown
000011EA                           264          
000011EA                           265          * Confirmed BCLR at this point
000011EA  43F9 000025A1            266          LEA     BCLROP,A1           * We found BCLR
000011F0  103C 000E                267          MOVE.B  #14,D0              * Trap #14 prints out the data
000011F4  4E4F                     268          TRAP    #15                 * Perform Trap #14
000011F6                           269  
000011F6  43F9 0000261A            270          LEA     SPACE,A1            * Formatting
000011FC  103C 000E                271          MOVE.B  #14,D0              * Trap #14 prints out space
00001200  4E4F                     272          TRAP    #15                 * Perform Trap #14
00001202                           273          
00001202                           274          * Set up for printing out the Register
00001202  0882 0006                275          BCLR    #6,D2               * Clear bit 6
00001206  0882 0007                276          BCLR    #7,D2               * Clear bit 7
0000120A  0882 0008                277          BCLR    #8,D2               * Clear bit 8
0000120E                           278          
0000120E  6100 0A7E                279          BSR     EAHELPER611         * Print out Register
00001212                           280  
00001212  43F9 00002620            281          LEA     COMMA,A1            * formatting
00001218  103C 000E                282          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000121C  4E4F                     283          TRAP    #15                 * Perform Trap #14
0000121E                           284          
0000121E  4243                     285          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
00001220  08C3 0000                286          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
00001224                           287      
00001224  6100 0AAA                288          BSR     EAHELPER05          * Print out data.
00001228                           289          
00001228  43F9 00002575            290          LEA     NEWLINE,A1          * Formatting
0000122E  103C 000E                291          MOVE.B  #14,D0              * Trap #14 prints out the data
00001232  4E4F                     292          TRAP    #15                 * Perform Trap #14
00001234                           293          
00001234  6000 0126                294          BRA     END0000             * Found the op, move to next iteration
00001238                           295          
00001238                           296  NOTBCLRDYNA
00001238  3C3C 0006                297          MOVE.W  #6, D6              * Prep lower value for bitmask
0000123C  3E3C 000B                298          MOVE.W  #11, D7             * Prep upper value for bitmask
00001240  6100 12CA                299          BSR     BITMASK             * Finalize bitmask setup
00001244  CC42                     300          AND     D2,D6               * Apply bitmask
00001246                           301          
00001246  0C46 0880                302          CMPI    #%0000100010000000, D6  * Are we BCLR Static?
0000124A  6600 0050                303          BNE     NOTBCLR                 * If not, branch to other functions
0000124E                           304          
0000124E                           305          * Checking for unsupported mode
0000124E  3C3C 0003                306          MOVE.W  #3, D6              * Prep lower value for bitmask
00001252  3E3C 0005                307          MOVE.W  #5, D7              * Prep upper value for bitmask
00001256  6100 12B4                308          BSR     BITMASK             * Finalize bitmask setup
0000125A  CC42                     309          AND     D2,D6               * Apply bitmask
0000125C                           310          
0000125C  0C46 0008                311          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
00001260  6700 00F6                312          BEQ     UNKNOWN0000             * If so, the op is unknown
00001264                           313          
00001264                           314          * Confirmed BCLR Static at this point
00001264  43F9 000025A1            315          LEA     BCLROP,A1           * We found BCLR
0000126A  103C 000E                316          MOVE.B  #14,D0              * Trap #14 prints out the data
0000126E  4E4F                     317          TRAP    #15                 * Perform Trap #14
00001270                           318  
00001270  43F9 0000261A            319          LEA     SPACE,A1            * Formatting
00001276  103C 000E                320          MOVE.B  #14,D0              * Trap #14 prints out space
0000127A  4E4F                     321          TRAP    #15                 * Perform Trap #14
0000127C                           322          
0000127C  2802                     323          MOVE.L  D2, D4              * Saving values
0000127E                           324                  
0000127E  43F9 0000261E            325          LEA     IMD, A1             * Formatting
00001284  103C 000E                326          MOVE.B  #14,D0              * Trap #14 prints out the data
00001288  4E4F                     327          TRAP    #15                 * Perform Trap #14
0000128A                           328          
0000128A                           329          * Grab next word
0000128A  3A1A                     330          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
0000128C  E18D                     331          LSL.L   #8, D5              * LSL for first nibble of the word
0000128E  E18D                     332          LSL.L   #8, D5              * LSL for second nibble of the word
00001290  2C45                     333          MOVE.L  D5, A6              * Store D5 into A6, to be used as parameter
00001292  7604                     334          MOVE.L  #4, D3              * Four most significant bits in D3
00001294  6100 1036                335          BSR     PRINT_ASCII_HEX_CHAR    * Perform number print out
00001298                           336  
00001298  6000 0094                337          BRA     SKIPLONG            * Formatting, returning saved values, etc.
0000129C                           338          
0000129C                           339  NOTBCLR * Possible options left are ORI or CMPI
0000129C  3C3C 0009                340          MOVE.W  #9, D6              * Prep lower value for bitmask
000012A0  3E3C 000B                341          MOVE.W  #11, D7             * Prep upper value for bitmask
000012A4  6100 1266                342          BSR     BITMASK             * Finalize bitmask setup
000012A8  CC42                     343          AND     D2,D6               * Apply bitmask
000012AA                           344          
000012AA  0C46 0000                345          CMPI    #%0000000000000000, D6   * Are we possibly ORI?
000012AE  6600 00A0                346          BNE     NOTORI                   * If not, branch to NOTORI
000012B2                           347          
000012B2                           348          * Size check to see if unsupported ORI mode
000012B2  3C3C 0006                349          MOVE.W  #6, D6              * Prep lower value for bitmask
000012B6  3E3C 0007                350          MOVE.W  #7, D7              * Prep upper value for bitmask
000012BA  6100 1250                351          BSR     BITMASK             * Finalize bitmask setup
000012BE  CC42                     352          AND     D2,D6               * Apply bitmask
000012C0                           353          
000012C0  0C46 00C0                354          CMPI    #%0000000011000000, D6  * Are bits 6,7 == 1,1?
000012C4  6700 0092                355          BEQ     UNKNOWN0000             * If so, unknown op. 
000012C8                           356          
000012C8                           357          * Mode check to see if unsupported ORI mode
000012C8  3C3C 0003                358          MOVE.W  #3, D6              * Prep lower value for bitmask
000012CC  3E3C 0005                359          MOVE.W  #5, D7              * Prep upper value for bitmask
000012D0  6100 123A                360          BSR     BITMASK             * Finalize bitmask setup
000012D4  CC42                     361          AND     D2,D6               * Apply bitmask
000012D6                           362          
000012D6  0C46 0008                363          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
000012DA  6700 007C                364          BEQ     UNKNOWN0000             * If so, unknown op. 
000012DE                           365          
000012DE                           366          * Confirmed ORI at this point
000012DE  43F9 000025AF            367          LEA     ORIOP, A1           * Load 'ORI' into the output window
000012E4  103C 000E                368          MOVE.B  #14,D0              * Trap #14 prints out the data in D0
000012E8  4E4F                     369          TRAP    #15                 * Perform Trap #14
000012EA                           370          
000012EA  6100 0D3A                371          BSR     SIZE67              * Print the size
000012EE                           372  
000012EE                           373          * Mode check to see the size
000012EE  3C3C 0006                374          MOVE.W  #6, D6              * Prep lower value for bitmask
000012F2  3E3C 0007                375          MOVE.W  #7, D7              * Prep upper value for bitmask
000012F6  6100 1214                376          BSR     BITMASK             * Finalize bitmask setup
000012FA  CC42                     377          AND     D2,D6               * Apply bitmask
000012FC                           378          
000012FC  2802                     379          MOVE.L  D2, D4              * Saving value
000012FE                           380                  
000012FE  43F9 0000261E            381          LEA     IMD, A1             * Formatting
00001304  103C 000E                382          MOVE.B  #14,D0              * Trap #14 prints out the data
00001308  4E4F                     383          TRAP    #15                 * Perform Trap #14
0000130A                           384                 
0000130A                           385          * Grab immediate data
0000130A  3A1A                     386          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
0000130C  E18D                     387          LSL.L   #8, D5               
0000130E  E18D                     388          LSL.L   #8, D5
00001310  2C45                     389          MOVE.L  D5, A6
00001312  7604                     390          MOVE.L  #4, D3
00001314  6100 0FB6                391          BSR     PRINT_ASCII_HEX_CHAR
00001318                           392  
00001318  0C46 0080                393          CMPI    #%0000000010000000, D6   * See if the size is a LONG
0000131C  6600 0010                394          BNE     SKIPLONG    
00001320                           395          
00001320                           396          * Grab next word
00001320  3A1A                     397          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
00001322  E18D                     398          LSL.L   #8, D5              * LSL to get first nibble of the word
00001324  E18D                     399          LSL.L   #8, D5              * LSL to get second nibble of the word
00001326  2C45                     400          MOVE.L  D5, A6              * Store D5 into A6 as a parameter
00001328  7604                     401          MOVE.L  #4, D3              * Move #4 into D3 to show four bits
0000132A  6100 0FA0                402          BSR     PRINT_ASCII_HEX_CHAR    * Perform number output
0000132E                           403  
0000132E                           404  SKIPLONG
0000132E  43F9 00002620            405          LEA     COMMA, A1           * Formatting
00001334  103C 000E                406          MOVE.B  #14,D0              * Trap #14 prints out the data
00001338  4E4F                     407          TRAP    #15                 * Perform Trap #14
0000133A                           408          
0000133A  2404                     409          MOVE.L  D4, D2              * Return saved value
0000133C                           410          
0000133C  6100 0992                411          BSR     EAHELPER05          * Print out the EA
00001340                           412          
00001340  43F9 00002575            413          LEA     NEWLINE,A1          * Formatting
00001346  103C 000E                414          MOVE.B  #14,D0              * Trap #14 prints out the data
0000134A  4E4F                     415          TRAP    #15                 * Perform Trap #14
0000134C                           416          
0000134C  6000 000E                417          BRA     END0000             * Done with op. Move to next iteration
00001350                           418  
00001350                           419  NOTORI  * Possible option left is CMPI
00001350                           420  
00001350  0C46 0C00                421          CMPI    #%0000110000000000, D6  * Are we CMPI?
00001354  6600 0002                422          BNE     UNKNOWN0000             * If not, unknown op
00001358                           423          
00001358                           424          * TODO: Continue checking for CMPI validity
00001358                           425          
00001358                           426  UNKNOWN0000
00001358  6100 0F48                427          BSR     UNKNOWNOP          * Unknown op
0000135C                           428          
0000135C                           429  END0000          
0000135C  4C9F 03FF                430         MOVEM   (A7)+,D0-D7/A0-A1   * Push values to the stack to save
00001360  4E75                     431         RTS
00001362                           432  
00001362                           433  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001362                           434  *-----------------------------------------------------------------------------
00001362                           435  
00001362                           436  
00001362                           437  
00001362                           438  *-----------------------------------------------------------------------------
00001362                           439  *-----------------------------------------------------------------------------
00001362                           440  * NAME: OP_0001   (MOVE.B)
00001362                           441  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001362                           442  * PRE-CONDITION:  xyz
00001362                           443  * POST-CONDITION: All registers return to their previous state, and the output
00001362                           444  *                 goes to the output console for reading the raw data or the
00001362                           445  *                 actual instruction.
00001362                           446  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001362                           447  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001362                           448  OP0001  
00001362  48A7 FFC0                449          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
00001366  3C3C 0006                450          MOVE.W  #6, D6              * Prep lower value for bitmask
0000136A  3E3C 0008                451          MOVE.W  #8, D7              * Prep upper value for bitmask
0000136E  6100 119C                452          BSR     BITMASK             * Finalize bitmask setup
00001372  CC42                     453          AND     D2,D6               * Apply bitmask
00001374                           454          
00001374                           455          * I may have fucked off this part, sorry - Caleb
00001374                           456          * CMPI    #%0000000001000000, D6  * Is the destination mode 001?
00001374                           457          * BNE     UNKNOWNOP0001                 * If so, it's unknown.
00001374                           458          
00001374  43F9 00002585            459          LEA     MOVEOP,A1   * Put 'MOVE' into the window
0000137A  103C 000E                460          MOVE.B  #14,D0      * Trap #14 to print out
0000137E  4E4F                     461          TRAP    #15         * Perform Trap #14
00001380                           462          
00001380                           463          *-----------------------------------------------------------
00001380                           464          * the following code is to move the size bits into the
00001380                           465          * 0-1 positions of D3 so that eahelper05 case use that as a "parameter"
00001380                           466          * for eahelper05
00001380                           467          
00001380  3C3C 000C                468          MOVE.W  #12, D6              * Prep lower value for bitmask
00001384  3E3C 000D                469          MOVE.W  #13, D7              * Prep upper value for bitmask
00001388  6100 1182                470          BSR     BITMASK              * Finalize bitmask setup
0000138C  CC42                     471          AND     D2,D6                * Apply bitmask
0000138E                           472          
0000138E  E04E                     473          LSR     #8,D6
00001390  E84E                     474          LSR     #4,D6
00001392                           475          
00001392  4243                     476          CLR     D3
00001394                           477          
00001394  1606                     478          MOVE.B  D6,D3
00001396                           479          
00001396                           480          *---------------------------------------------------------------
00001396                           481          
00001396                           482          
00001396  6100 0C8E                483          BSR     SIZE67
0000139A  6100 0934                484          BSR     EAHELPER05
0000139E                           485          
0000139E  43F9 00002620            486          LEA     COMMA,A1
000013A4  103C 000E                487          MOVE.B  #14,D0
000013A8  4E4F                     488          TRAP    #15
000013AA                           489          
000013AA  6100 08E2                490          BSR     EAHELPER611
000013AE                           491          
000013AE  43F9 00002575            492          LEA     NEWLINE,A1
000013B4  103C 000E                493          MOVE.B  #14,D0
000013B8  4E4F                     494          TRAP    #15
000013BA                           495          
000013BA  6000 0006                496          BRA     ENDOP0001
000013BE                           497          *LEA     __B,A1      * Put '.B' into the window
000013BE                           498          *MOVE.B  #14,D0      * Trap #14 to print out
000013BE                           499          *TRAP    #15         * Perform Trap #14
000013BE                           500          
000013BE                           501  UNKNOWNOP0001
000013BE  6100 0EE2                502          BSR     UNKNOWNOP
000013C2                           503          
000013C2                           504  ENDOP0001
000013C2  4C9F 03FF                505          MOVEM (A7)+,D0-D7/A0-A1
000013C6  4E75                     506          RTS        
000013C8                           507          
000013C8                           508          * TODO: DETERMINE THE MODE AND REG FOR DESTINATION AND SOURCE
000013C8                           509  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000013C8                           510  *-----------------------------------------------------------------------------
000013C8                           511  
000013C8                           512  
000013C8                           513  
000013C8                           514  *-----------------------------------------------------------------------------
000013C8                           515  *-----------------------------------------------------------------------------
000013C8                           516  * NAME: OP_0010   (MOVE.L, MOVEA.L)
000013C8                           517  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000013C8                           518  * PRE-CONDITION:  xyz
000013C8                           519  * POST-CONDITION: All registers return to their previous state, and the output
000013C8                           520  *                 goes to the output console for reading the raw data or the
000013C8                           521  *                 actual instruction.
000013C8                           522  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000013C8                           523  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000013C8                           524  OP0010
000013C8                           525  
000013C8  6100 0ED8                526      BSR     UNKNOWNOP
000013CC  4E75                     527      RTS
000013CE                           528  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000013CE                           529  *-----------------------------------------------------------------------------
000013CE                           530  
000013CE                           531  
000013CE                           532  
000013CE                           533  *-----------------------------------------------------------------------------
000013CE                           534  *-----------------------------------------------------------------------------
000013CE                           535  * NAME: OP_0011   (MOVE.W, MOVEA.W)
000013CE                           536  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000013CE                           537  * PRE-CONDITION:  xyz
000013CE                           538  * POST-CONDITION: All registers return to their previous state, and the output
000013CE                           539  *                 goes to the output console for reading the raw data or the
000013CE                           540  *                 actual instruction.
000013CE                           541  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000013CE                           542  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000013CE                           543  OP0011
000013CE  48A7 FFFE                544      MOVEM   D0-D7/A0-A6, -(A7)
000013D2                           545      
000013D2                           546      *MOVE.W  #6,D6
000013D2                           547      *MOVE.W  #8,D7
000013D2                           548      
000013D2                           549      *BSR     BITMASK
000013D2                           550      
000013D2                           551      *AND.W   D2,D6
000013D2                           552      
000013D2                           553      *CMP     #%0000000001000000,D6
000013D2                           554      *BNE     NEXT15
000013D2                           555      *BSR     * for MOVEA.W
000013D2                           556      
000013D2  4C9F 7FFF                557      MOVEM   (A7)+,D0-D7/A0-A6
000013D6                           558      
000013D6  6100 0ECA                559      BSR     UNKNOWNOP
000013DA  4E75                     560      RTS
000013DC                           561  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000013DC                           562  *-----------------------------------------------------------------------------
000013DC                           563  
000013DC                           564  *-----------------------------------------------------------------------------
000013DC                           565  *-----------------------------------------------------------------------------
000013DC                           566  * NAME: OP_0100   (NOP, MOVEM, LEA, NEG, JSR, RTS)
000013DC                           567  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000013DC                           568  * PRE-CONDITION:  xyz
000013DC                           569  * POST-CONDITION: All registers return to their previous state, and the output
000013DC                           570  *                 goes to the output console for reading the raw data or the
000013DC                           571  *                 actual instruction.
000013DC                           572  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000013DC                           573  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000013DC                           574  OP0100  
000013DC                           575          * TODO: movem
000013DC                           576  
000013DC  48A7 C0C0                577          MOVEM   D0-D1/A0-A1,-(A7) * Push values to the stack to save
000013E0                           578          
000013E0                           579          *NOP
000013E0  0C42 4E71                580          CMPI    #%0100111001110001,D2
000013E4  6600 0012                581          BNE     NOTNOP
000013E8                           582          
000013E8  43F9 0000257D            583          LEA     NOOPERATION,A1
000013EE  103C 000D                584          MOVE.B  #13,D0          * Print a newline
000013F2  4E4F                     585          TRAP    #15
000013F4                           586          
000013F4  6000 0306                587          BRA     DONE0100 *we found it, move on to the next iteration
000013F8                           588  NOTNOP *NEG
000013F8                           589          
000013F8                           590          * prep values for BITMASK subroutine
000013F8  7C08                     591          MOVE.L  #8,D6
000013FA  7E0B                     592          MOVE.L  #11,D7
000013FC                           593          
000013FC  6100 110E                594          BSR     BITMASK
00001400                           595          
00001400  CC42                     596          AND     D2,D6                   * apply bitmask
00001402                           597          
00001402  0C46 0400                598          CMPI    #%0000010000000000,D6   * are we NEG?
00001406  6600 0046                599          BNE     NOTNEG                  * not neg
0000140A                           600          
0000140A  7C03                     601          MOVE.L  #3,D6
0000140C  7E05                     602          MOVE.L  #5,D7
0000140E                           603          
0000140E  6100 10FC                604          BSR     BITMASK * generate a bitmask to be used to check mode
00001412                           605          
00001412  0C46 0008                606          CMPI    #%0000000000001000,D6 * check to see if it is the unsupported mode
00001416  6700 02E0                607          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
0000141A                           608          
0000141A  0C46 0028                609          CMPI    #%0000000000101000,D6 * check to see if it is the unsupported mode
0000141E  6700 02D8                610          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
00001422                           611          
00001422  0C46 0030                612          CMPI    #%0000000000110000,D6 * check to see if it is the unsupported mode
00001426  6700 02D0                613          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
0000142A                           614        
0000142A                           615          * it is NEG, print
0000142A  43F9 00002581            616          LEA     NEGOP,A1
00001430  103C 000E                617          MOVE.B  #14,D0
00001434  4E4F                     618          TRAP    #15
00001436                           619          
00001436  6100 0BEE                620          BSR     SIZE67
0000143A                           621          
0000143A  6100 0894                622          BSR     EAHELPER05
0000143E                           623          
0000143E  43F9 00002575            624          LEA     NEWLINE,A1
00001444  103C 000E                625          MOVE.B  #14,D0
00001448  4E4F                     626          TRAP    #15
0000144A                           627          
0000144A  6000 02B0                628          BRA     DONE0100 * we found the op, move to next iteration
0000144E                           629          
0000144E                           630  NOTNEG *MOVEM
0000144E                           631  
0000144E                           632          * prep values for BITMASK subroutine
0000144E  7C07                     633          MOVE.L  #7,D6
00001450  7E09                     634          MOVE.L  #9,D7
00001452                           635          
00001452  6100 10B8                636          BSR     BITMASK
00001456                           637          
00001456  CC82                     638          AND.L   D2,D6   * apply bitmask
00001458                           639          
00001458  0C46 0080                640          CMPI    #%0000000010000000,D6 * is it MOVEM?
0000145C  6600 0148                641          BNE     NOTMOVEM          * it is not MOVEM
00001460                           642          
00001460  7C0A                     643          MOVE.L  #10,D6
00001462  7E0A                     644          MOVE.L  #10,D7
00001464                           645          
00001464  6100 10A6                646          BSR     BITMASK
00001468                           647          
00001468  CC82                     648          AND.L   D2,D6
0000146A                           649          
0000146A  0C46 0000                650          CMPI    #%0000000000000000,D6 * is it register to memory?
0000146E  6700 009C                651          BEQ     MOVEMTOMEM 
00001472                           652          
00001472                           653  MOVEMTOREG *supported modes: 010 011
00001472                           654  
00001472  7C03                     655          MOVE.L  #3,D6
00001474  7E05                     656          MOVE.L  #5,D7
00001476                           657          
00001476  6100 1094                658          BSR     BITMASK
0000147A                           659          
0000147A  CC82                     660          AND.L   D2,D6
0000147C                           661          
0000147C  0C46 0000                662          CMPI    #%0000000000000000,D6 * is it an unsupported mode?
00001480  6700 0276                663          BEQ     UNKNOWN0100
00001484                           664          
00001484  0C46 0008                665          CMPI    #%0000000000001000,D6 * is it an unsupported mode?
00001488  6700 026E                666          BEQ     UNKNOWN0100
0000148C                           667          
0000148C  0C46 0020                668          CMPI    #%0000000000100000,D6 * is it an unsupported mode?
00001490  6700 0266                669          BEQ     UNKNOWN0100
00001494                           670          
00001494  0C46 0028                671          CMPI    #%0000000000101000,D6 * is it an unsupported mode?
00001498  6700 025E                672          BEQ     UNKNOWN0100
0000149C                           673          
0000149C  0C46 0030                674          CMPI    #%0000000000110000,D6 * is it an unsupported mode?
000014A0  6700 0256                675          BEQ     UNKNOWN0100
000014A4                           676          
000014A4  0C46 0038                677          CMPI    #%0000000000111000,D6 * is it an unsupported mode?
000014A8  6700 024E                678          BEQ     UNKNOWN0100
000014AC                           679          
000014AC  43F9 0000258A            680          LEA     MOVEMOP,A1
000014B2  103C 000E                681          MOVE.B  #14,D0          * print MOVEM
000014B6  4E4F                     682          TRAP    #15
000014B8                           683          
000014B8  7C06                     684          MOVE.L  #6,D6
000014BA  7E06                     685          MOVE.L  #6,D7
000014BC                           686          
000014BC  6100 104E                687          BSR     BITMASK
000014C0                           688          
000014C0  CC82                     689          AND.L   D2,D6
000014C2                           690          
000014C2  0C46 0040                691          CMPI    #%0000000001000000,D6 * is it a long op?
000014C6  6600 0012                692          BNE     NOTLONGMOVEM1       * no, it is a word
000014CA                           693          
000014CA  43F9 00002636            694          LEA     __L,A1
000014D0  103C 000E                695          MOVE.B  #14,D0          * print .L 
000014D4  4E4F                     696          TRAP    #15
000014D6                           697          
000014D6  6000 000E                698          BRA     SKIPNOTLONG1
000014DA                           699          
000014DA                           700  NOTLONGMOVEM1
000014DA                           701  
000014DA  43F9 00002632            702          LEA     __W,A1
000014E0  103C 000E                703          MOVE.B  #14,D0          * print .W 
000014E4  4E4F                     704          TRAP    #15
000014E6                           705                  
000014E6                           706  SKIPNOTLONG1
000014E6                           707  
000014E6  6100 07E8                708          BSR     EAHELPER05 * print out the register we are moving from
000014EA                           709          
000014EA  43F9 00002620            710          LEA     COMMA,A1
000014F0  103C 000E                711          MOVE.B  #14,D0          * print , 
000014F4  4E4F                     712          TRAP    #15
000014F6                           713          
000014F6  6100 0BF4                714          BSR     MOVEMHELPERPOST
000014FA                           715          
000014FA  341A                     716          MOVE.W  (A2)+,D2
000014FC                           717          
000014FC  43F9 00002575            718          LEA     NEWLINE,A1
00001502  103C 000E                719          MOVE.B  #14,D0          * print a newline 
00001506  4E4F                     720          TRAP    #15
00001508                           721      
00001508  6000 01F2                722          BRA     DONE0100          * we found and printed, move on to the next iteration
0000150C                           723          
0000150C                           724  MOVEMTOMEM * supported modes 010 100
0000150C                           725  
0000150C  7C03                     726          MOVE.L  #3,D6
0000150E  7E05                     727          MOVE.L  #5,D7
00001510                           728          
00001510  6100 0FFA                729          BSR     BITMASK
00001514                           730          
00001514  CC82                     731          AND.L   D2,D6
00001516                           732          
00001516  0C46 0000                733          CMPI    #%0000000000000000,D6 * is it an unsopported mode?
0000151A  6700 01DC                734          BEQ     UNKNOWN0100
0000151E                           735          
0000151E  0C46 0008                736          CMPI    #%0000000000001000,D6 * is it an unsopported mode?
00001522  6700 01D4                737          BEQ     UNKNOWN0100
00001526                           738          
00001526  0C46 0018                739          CMPI    #%0000000000011000,D6 * is it an unsopported mode?
0000152A  6700 01CC                740          BEQ     UNKNOWN0100
0000152E                           741          
0000152E  0C46 0028                742          CMPI    #%0000000000101000,D6 * is it an unsopported mode?
00001532  6700 01C4                743          BEQ     UNKNOWN0100
00001536                           744          
00001536  0C46 0030                745          CMPI    #%0000000000110000,D6 * is it an unsopported mode?
0000153A  6700 01BC                746          BEQ     UNKNOWN0100
0000153E                           747          
0000153E  0C46 0070                748          CMPI    #%0000000001110000,D6 * is it an unsopported mode?
00001542  6700 01B4                749          BEQ     UNKNOWN0100
00001546                           750          
00001546  43F9 0000258A            751          LEA     MOVEMOP,A1
0000154C  103C 000E                752          MOVE.B  #14,D0          * print MOVEM
00001550  4E4F                     753          TRAP    #15
00001552                           754          
00001552  7C06                     755          MOVE.L  #6,D6
00001554  7E06                     756          MOVE.L  #6,D7
00001556                           757          
00001556  6100 0FB4                758          BSR     BITMASK
0000155A                           759          
0000155A  CC82                     760          AND.L   D2,D6
0000155C                           761          
0000155C  0C46 0040                762          CMPI    #%0000000001000000,D6 * is it a long op?
00001560  6600 0012                763          BNE     NOTLONGMOVEM2       * no, it is a word
00001564                           764          
00001564  43F9 00002636            765          LEA     __L,A1
0000156A  103C 000E                766          MOVE.B  #14,D0          * print .L 
0000156E  4E4F                     767          TRAP    #15
00001570                           768          
00001570  6000 000E                769          BRA     SKIPNOTLONG2
00001574                           770          
00001574                           771  NOTLONGMOVEM2
00001574                           772  
00001574  43F9 00002632            773          LEA     __W,A1
0000157A  103C 000E                774          MOVE.B  #14,D0          * print .W 
0000157E  4E4F                     775          TRAP    #15
00001580                           776                  
00001580                           777  SKIPNOTLONG2
00001580                           778  
00001580  6100 0CF2                779          BSR     MOVEMHELPERPRE
00001584                           780  
00001584  43F9 00002620            781          LEA     COMMA,A1
0000158A  103C 000E                782          MOVE.B  #14,D0          * print , 
0000158E  4E4F                     783          TRAP    #15
00001590                           784          
00001590  6100 073E                785          BSR     EAHELPER05 * print out the register we are moving to
00001594                           786          
00001594  341A                     787          MOVE.W  (A2)+,D2
00001596                           788          
00001596  43F9 00002575            789          LEA     NEWLINE,A1
0000159C  103C 000E                790          MOVE.B  #14,D0          * print a newline 
000015A0  4E4F                     791          TRAP    #15
000015A2                           792      
000015A2  6000 0158                793          BRA     DONE0100          * we found and printed, move on to the next iteration
000015A6                           794  
000015A6                           795  NOTMOVEM *JSR
000015A6                           796          * prep values for BITMASK subroutine
000015A6  7C06                     797          MOVE.L  #6,D6
000015A8  7E08                     798          MOVE.L  #8,D7
000015AA                           799          
000015AA  6100 0F60                800          BSR     BITMASK
000015AE                           801          
000015AE  CC42                     802          AND     D2,D6   * apply bitmask
000015B0                           803          
000015B0  0C46 0080                804          CMPI    #%0000000010000000,D6
000015B4  6600 003E                805          BNE     NOTJSR          * it's not JSR
000015B8                           806          
000015B8  43F9 00002590            807          LEA     JSROP,A1
000015BE  103C 000E                808          MOVE.B  #14,D0          * Print a newline and JSR
000015C2  4E4F                     809          TRAP    #15
000015C4                           810          
000015C4  43F9 0000261A            811          LEA     SPACE,A1
000015CA  103C 000E                812          MOVE.B  #14,D0          * Print a newline and JSR
000015CE  4E4F                     813          TRAP    #15
000015D0                           814          
000015D0                           815          * print out where we are jumping to
000015D0                           816          
000015D0  341A                     817          MOVE.W  (A2)+,D2 * read in the next word of the instruction 
000015D2                           818          
000015D2  2202                     819          MOVE.L  D2,D1   * save the opcode to print
000015D4                           820          
000015D4  7410                     821          MOVE.L  #16,D2  * set the base to 16
000015D6                           822          
000015D6  700F                     823          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000015D8  4E4F                     824          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000015DA                           825          
000015DA  341A                     826          MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
000015DC                           827          
000015DC  2202                     828          MOVE.L  D2,D1   * save the opcode to print
000015DE                           829          
000015DE  7410                     830          MOVE.L  #16,D2  * set the base to 16
000015E0                           831          
000015E0  700F                     832          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000015E2  4E4F                     833          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000015E4                           834          
000015E4  43F9 00002575            835          LEA     NEWLINE,A1
000015EA  103C 000E                836          MOVE.B  #14,D0          * Print a newline
000015EE  4E4F                     837          TRAP    #15
000015F0                           838          
000015F0  6000 010A                839          BRA     DONE0100          * we already found instruction, next iteration
000015F4                           840  NOTJSR *RTS
000015F4                           841  
000015F4                           842          * prep values for BITMASK subroutine
000015F4  7C06                     843          MOVE.L  #6,D6
000015F6  7E08                     844          MOVE.L  #8,D7
000015F8                           845          
000015F8  6100 0F12                846          BSR     BITMASK
000015FC                           847          
000015FC  CC42                     848          AND     D2,D6   * apply bitmask
000015FE                           849          
000015FE  0C46 0040                850          CMPI    #%0000000001000000,D6
00001602  6600 0012                851          BNE     NOTRTS          * it's not RTS
00001606                           852          
00001606  43F9 00002594            853          LEA     RTSOP,A1
0000160C  103C 000D                854          MOVE.B  #13,D0          * Print a newline and RTS
00001610  4E4F                     855          TRAP    #15
00001612                           856          
00001612  6000 00E8                857          BRA     DONE0100          * we already found instruction, next iteration
00001616                           858  NOTRTS  *LEA
00001616                           859         
00001616                           860          * prep values for BITMASK subroutine
00001616  7C06                     861          MOVE.L  #6,D6
00001618  7E08                     862          MOVE.L  #8,D7
0000161A                           863          
0000161A  6100 0EF0                864          BSR     BITMASK
0000161E                           865          
0000161E  CC42                     866          AND     D2,D6   * apply bitmask
00001620                           867          
00001620  0C46 01C0                868          CMPI    #%0000000111000000,D6
00001624  6600 00D2                869          BNE     UNKNOWN0100          * it's not LEA, we dont know what it is
00001628                           870          
00001628                           871          * prep values for BITMASK subroutine
00001628  7C03                     872          MOVE.L  #3,D6
0000162A  7E05                     873          MOVE.L  #5,D7
0000162C                           874          
0000162C  6100 0EDE                875          BSR     BITMASK
00001630                           876          
00001630  CC42                     877          AND     D2,D6   * apply bitmask
00001632                           878          
00001632  0C46 0008                879          CMPI    #%0000000000001000,D6
00001636  6700 00C0                880          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
0000163A                           881          
0000163A  0C46 0018                882          CMPI    #%0000000000011000,D6
0000163E  6700 00B8                883          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001642                           884          
00001642  0C46 0020                885          CMPI    #%0000000000100000,D6
00001646  6700 00B0                886          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
0000164A                           887          
0000164A  0C46 0028                888          CMPI    #%0000000000101000,D6
0000164E  6700 00A8                889          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001652                           890          
00001652  0C46 0030                891          CMPI    #%0000000000110000,D6
00001656  6700 00A0                892          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
0000165A                           893          
0000165A  0C46 0038                894          CMPI    #%0000000000111000,D6
0000165E  6700 0046                895          BEQ     TWOWORDLEA          * it's a two word LEA
00001662                           896          
00001662                           897          * check to make sure it is a supported mode and size
00001662                           898          
00001662  43F9 0000259D            899          LEA     LEAOP,A1
00001668  103C 000E                900          MOVE.B  #14,D0          * Print LEA
0000166C  4E4F                     901          TRAP    #15
0000166E                           902          
0000166E  0882 0007                903          BCLR    #7,D2
00001672  0882 0008                904          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
00001676                           905          
00001676  43F9 0000261A            906          LEA     SPACE,A1
0000167C  103C 000E                907          MOVE.B  #14,D0          * Print SPACE
00001680  4E4F                     908          TRAP    #15
00001682                           909          
00001682  6100 064C                910          BSR     EAHELPER05
00001686                           911          
00001686  43F9 00002620            912          LEA     COMMA,A1
0000168C  103C 000E                913          MOVE.B  #14,D0          * Print COMMA
00001690  4E4F                     914          TRAP    #15
00001692                           915          
00001692  6100 05FA                916          BSR     EAHELPER611
00001696                           917          
00001696  43F9 00002575            918          LEA     NEWLINE,A1
0000169C  103C 000E                919          MOVE.B  #14,D0          * Start a new line
000016A0  4E4F                     920          TRAP    #15
000016A2                           921          
000016A2                           922          
000016A2                           923          * call EA helper
000016A2                           924          * MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
000016A2                           925                  
000016A2  6000 0058                926          BRA     DONE0100          * we already found instruction, next iteration
000016A6                           927          
000016A6                           928  TWOWORDLEA
000016A6                           929  
000016A6  43F9 0000259D            930          LEA     LEAOP,A1
000016AC  103C 000E                931          MOVE.B  #14,D0   * Print LEA
000016B0  4E4F                     932          TRAP    #15
000016B2                           933          
000016B2  43F9 0000261A            934          LEA     SPACE,A1
000016B8  103C 000E                935          MOVE.B  #14,D0   * Print SPACE
000016BC  4E4F                     936          TRAP    #15
000016BE                           937  
000016BE  321A                     938          MOVE.W  (A2)+,D1
000016C0                           939          
000016C0  7C00                     940          MOVE.L  #0,D6
000016C2  7E0F                     941          MOVE.L  #15,D7
000016C4                           942          
000016C4  6100 0E46                943          BSR     BITMASK
000016C8                           944          
000016C8  C286                     945          AND.L   D6,D1   * shave off bad info
000016CA                           946          
000016CA  103C 0003                947          MOVE.B  #3,D0   * Print the address which was the source
000016CE  4E4F                     948          TRAP    #15
000016D0                           949          
000016D0  43F9 00002620            950          LEA     COMMA,A1
000016D6  103C 000E                951          MOVE.B  #14,D0  * Print COMMA
000016DA  4E4F                     952          TRAP    #15
000016DC                           953          
000016DC  0882 0007                954          BCLR    #7,D2
000016E0  0882 0008                955          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
000016E4                           956          
000016E4  6100 05A8                957          BSR     EAHELPER611
000016E8                           958          
000016E8  43F9 00002575            959          LEA     NEWLINE,A1
000016EE  103C 000E                960          MOVE.B  #14,D0          * Start a new line
000016F2  4E4F                     961          TRAP    #15
000016F4                           962          
000016F4  6000 0006                963          BRA     DONE0100
000016F8                           964          
000016F8                           965  UNKNOWN0100 *dont know what it is
000016F8  6100 0BA8                966          BSR     UNKNOWNOP
000016FC                           967          
000016FC                           968  DONE0100
000016FC  4C9F 0303                969          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
00001700  4E75                     970          RTS
00001702                           971          
00001702  6000 FA66                972          BRA     ITERATION
00001706                           973  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001706                           974  *-----------------------------------------------------------------------------
00001706                           975        
00001706                           976          
00001706                           977          
00001706                           978  
00001706                           979  *-----------------------------------------------------------------------------
00001706                           980  *-----------------------------------------------------------------------------
00001706                           981  * NAME: OP_0101   (SUBQ)
00001706                           982  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001706                           983  * PRE-CONDITION:  xyz
00001706                           984  * POST-CONDITION: All registers return to their previous state, and the output
00001706                           985  *                 goes to the output console for reading the raw data or the
00001706                           986  *                 actual instruction.
00001706                           987  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001706                           988  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001706                           989  OP0101
00001706  48A7 FFC0                990          MOVEM   D0-D7/A0-A1,-(A7)       * Push values to the stack to save
0000170A                           991  
0000170A  CC7C 0100                992          AND     #%0000000100000000, D6  * Baby-Bitmask for the 8th digit.
0000170E  0C46 0100                993          CMPI    #%0000000100000000, D6  * Is the 8th digit a 1?
00001712  6700 005A                994          BEQ     UNKNOWN0101             * If so, unknown op
00001716                           995        
00001716  0C46 0100                996          CMPI    #%0000000100000000, D6  * Is the size 11, an unsupported value?
0000171A  6700 0052                997          BEQ     UNKNOWN0101             * If so, unknown op
0000171E                           998            
0000171E                           999          * Verified SUBQ at this point
0000171E  43F9 00002598           1000          LEA     SUBQOP,A1           * Print out SUBQ
00001724  103C 000E               1001          MOVE.B  #14,D0              * Trap #14 to print out
00001728  4E4F                    1002          TRAP    #15                 * Perform Trap #14
0000172A                          1003                          
0000172A  6100 08FA               1004          BSR     SIZE67              * Print out size
0000172E                          1005          
0000172E  43F9 0000261E           1006          LEA     IMD,A1              * Formatting
00001734  103C 000E               1007          MOVE.B  #14,D0              * Trap #14 prints out space
00001738  4E4F                    1008          TRAP    #15                 * Perform Trap #14
0000173A                          1009          
0000173A  3C3C 0009               1010          MOVE.W  #9, D6              * Prep lower value for bitmask
0000173E  3E3C 000B               1011          MOVE.W  #11,D7              * Prep upper value for bitmask
00001742  6100 0DC8               1012          BSR     BITMASK             * Finalize bitmask setup
00001746  CC42                    1013          AND     D2,D6               * Apply bitmask
00001748                          1014          
00001748  6100 0D10               1015          BSR     PRINTDATA911        * Special op for immediate in bits 9->11
0000174C                          1016            
0000174C  43F9 00002620           1017          LEA     COMMA,A1            * Formatting
00001752  103C 000E               1018          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001756  4E4F                    1019          TRAP    #15                 * Perform Trap #14
00001758                          1020          
00001758  6100 0576               1021          BSR     EAHELPER05          * Print out the Effective Address
0000175C                          1022          
0000175C  43F9 00002575           1023          LEA     NEWLINE,A1          * Formatting
00001762  103C 000E               1024          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001766  4E4F                    1025          TRAP    #15                 * Perform Trap #14
00001768                          1026          
00001768  4C9F 03FF               1027          MOVEM   (A7)+,D0-D7/A0-A1   * Pop off the stack to return our registers
0000176C  4E75                    1028          RTS
0000176E                          1029      
0000176E                          1030  UNKNOWN0101
0000176E  6100 0B32               1031          BSR     UNKNOWNOP
00001772  4E75                    1032          RTS
00001774                          1033  
00001774                          1034  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001774                          1035  *-----------------------------------------------------------------------------
00001774                          1036  
00001774                          1037  
00001774                          1038  
00001774                          1039  *-----------------------------------------------------------------------------
00001774                          1040  *-----------------------------------------------------------------------------
00001774                          1041  * NAME: OP_0110   (BCC, BCS, BGE, BLT, BVC, BRA)
00001774                          1042  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001774                          1043  * PRE-CONDITION:  Given the possibilties for 0110, masks the next 4 bits
00001774                          1044  *                 in the instruction and determines what the bits match to a
00001774                          1045  *                 given condition code. If the 8 bit offset is $00, or $FF,
00001774                          1046  *                 this signifies a word or long offset (for $00 and $FF
00001774                          1047  *                 respectively). The 8 bit offset is in 2's comp. form, and
00001774                          1048  *                 should be un-done, then plus or minus to the current
00001774                          1049  *                 program counter (PC) to get the actual memory label to
00001774                          1050  *                 output to console. The word offset signal eats an
00001774                          1051  *                 additional 16 bits and the long offset eats an additional
00001774                          1052  *                 32 bits. The word/long offset are for memory alignment.
00001774                          1053  * POST-CONDITION: All registers return to their previous state, and the output
00001774                          1054  *                 goes to the output console for reading the raw data or the
00001774                          1055  *                 actual instruction.
00001774                          1056  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001774                          1057  *                 A1 (output)
00001774                          1058  * CONDITIONS TABLE:
00001774                          1059  *                Condition Names  - Mnemonic - Condition Code
00001774                          1060  *                --------------------------------------------
00001774                          1061  *                True             -    T     - 0000
00001774                          1062  *                False            -    F     - 0001
00001774                          1063  *                Higher           -    HI    - 0010
00001774                          1064  *                Lower or Same    -    LS    - 0011
00001774                          1065  *                Carry Clear      -    CC    - 0100
00001774                          1066  *                Carry Set        -    CS    - 0101
00001774                          1067  *                Not Equal        -    NE    - 0110
00001774                          1068  *                Equal            -    EQ    - 0111
00001774                          1069  *                Overflow Clear   -    VC    - 1000
00001774                          1070  *                Overflow Set     -    VS    - 1001
00001774                          1071  *                Plus             -    PL    - 1010
00001774                          1072  *                Minus            -    MI    - 1011
00001774                          1073  *                Greater or Equal -    GE    - 1100
00001774                          1074  *                Less Than        -    LT    - 1101
00001774                          1075  *                Greater Than     -    GT    - 1110
00001774                          1076  *                Less or Equal    -    LE    - 1111
00001774                          1077  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001774  48E7 FFFE               1078  OP0110  MOVEM.L D0-D7/A0-A6,-(A7) * Save main method routine vars to stack
00001778                          1079                          
00001778  3C3C 0009               1080          MOVE.W  #9,D6  * Move in 9 to D6
0000177C  3E3C 000B               1081          MOVE.W  #11,D7 * Move in 11 to D7
00001780                          1082                                        
00001780  6100 0D8A               1083          BSR     BITMASK * Call BITMASK sub-routine, Returns a bitmask in D6
00001784  CC42                    1084          AND     D2,D6   * apply the BITMASK
00001786                          1085          
00001786  0C46 0400               1086          CMPI    #%0000010000000000,D6 * CASE 1: BCC - BINARY FOR "CARRY CLEAR" FLAG
0000178A  6700 0032               1087          BEQ     OP_BCC
0000178E  0C46 0500               1088          CMPI    #%0000010100000000,D6 * CASE 2: BCS - BINARY FOR "CARRY SET" FLAG
00001792  6700 0034               1089          BEQ     OP_BCS
00001796  0C46 0C00               1090          CMPI    #%0000110000000000,D6 * CASE 3: BGE - BINARY FOR "GREATER OR EQUAL" FLAG
0000179A  6700 0036               1091          BEQ     OP_BGE
0000179E  0C46 0D00               1092          CMPI    #%0000110100000000,D6 * CASE 4: BLT - BINARY FOR "LESS THAN" FLAG
000017A2  6700 0038               1093          BEQ     OP_BLT
000017A6  0C46 0800               1094          CMPI    #%0000100000000000,D6 * CASE 5: BVC - BINARY FOR "OVERFLOW CLEAR" FLAG
000017AA  6700 003A               1095          BEQ     OP_BVC
000017AE  0C46 0000               1096          CMPI    #%0000000000000000,D6 * CASE 6: BRA - BINARY FOR "BRANCH ALWAYS" FLAG
000017B2  6700 003C               1097          BEQ     OP_BRA
000017B6  6100 0AEA               1098          BSR     UNKNOWNOP             * don't know what it is, print it out, skip to end
000017BA  6000 007A               1099          BRA     BCC_END
000017BE                          1100  
000017BE  43F9 000025D8           1101  OP_BCC  LEA     OP_BCC_MSG,A1
000017C4  6000 0034               1102          BRA     OP_BRANCHES_PRINT
000017C8  43F9 000025DD           1103  OP_BCS  LEA     OP_BCS_MSG,A1
000017CE  6000 002A               1104          BRA     OP_BRANCHES_PRINT
000017D2  43F9 000025E2           1105  OP_BGE  LEA     OP_BGE_MSG,A1
000017D8  6000 0020               1106          BRA     OP_BRANCHES_PRINT
000017DC  43F9 000025E7           1107  OP_BLT  LEA     OP_BLT_MSG,A1
000017E2  6000 0016               1108          BRA     OP_BRANCHES_PRINT
000017E6  43F9 000025EC           1109  OP_BVC  LEA     OP_BVC_MSG,A1
000017EC  6000 000C               1110          BRA     OP_BRANCHES_PRINT
000017F0  43F9 000025F1           1111  OP_BRA  LEA     OP_BRA_MSG,A1
000017F6  6000 0002               1112          BRA     OP_BRANCHES_PRINT
000017FA                          1113  OP_BRANCHES_PRINT
000017FA  103C 000E               1114          MOVE.B  #14,D0 * print instruction op, chosen from cases directly above
000017FE  4E4F                    1115          TRAP    #15
00001800                          1116          
00001800  43F9 0000261C           1117          LEA     DOLLAR,A1
00001806  103C 000E               1118          MOVE.B  #14,D0 * print raw data hex of the LABEL
0000180A  4E4F                    1119          TRAP    #15
0000180C                          1120          
0000180C  3C3C 0000               1121          MOVE.W  #0,D6                 * Move in 0 to D6 - prep mask
00001810  3E3C 0007               1122          MOVE.W  #7,D7                 * Move in 7 to D7
00001814  6100 0CF6               1123          BSR     BITMASK               * Call BITMASK sub-routine, return in D6
00001818  CC42                    1124          AND     D2,D6                 * AND mask with op bits, get last 8 bits in D6
0000181A                          1125          
0000181A                          1126  *        CMPI    #%00000000,D6         * all 0's == word offset
0000181A                          1127  *        BEQ     BCC_WORD_OFFSET
0000181A                          1128          
0000181A                          1129  *        CMPI    #%11111111,D6         * all F's == long offset
0000181A                          1130  *        BEQ     BCC_LONG_OFFSET
0000181A                          1131  BCC_BYTE_OFFSET
0000181A  4254                    1132          CLR     (A4)
0000181C  2846                    1133          MOVE.L  D6,A4
0000181E  43D4                    1134          LEA     (A4),A1
00001820  103C 000E               1135          MOVE.B  #14,D0
00001824  4E4F                    1136          TRAP    #15
00001826  43F9 00002575           1137          LEA     NEWLINE,A1
0000182C  103C 000E               1138          MOVE.B  #14,D0
00001830  4E4F                    1139          TRAP    #15
00001832                          1140          
00001832  6000 0002               1141          BRA     BCC_END
00001836                          1142  *BCC_WORD_OFFSET
00001836                          1143  *        MOVEM.W (A2)+,A1
00001836                          1144  *        MOVE.B  #13,D0
00001836                          1145  *        TRAP    #15
00001836                          1146  *        BRA     BCC_END
00001836                          1147  *BCC_LONG_OFFSET
00001836                          1148  *        MOVEM.L (A2)+,A1
00001836                          1149  *        MOVE.B  #13,D0
00001836                          1150  *        TRAP    #15
00001836                          1151  *        BRA     BCC_END
00001836                          1152  BCC_END * reload the memory, call RTS
00001836  4C9F 7FFF               1153          MOVEM   (A7)+,D0-D7/A0-A6 * Pop off the stack to return our registers
0000183A  4E75                    1154          RTS
0000183C                          1155  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000183C                          1156  *-----------------------------------------------------------------------------
0000183C                          1157  
0000183C                          1158  
0000183C                          1159  
0000183C                          1160  *-----------------------------------------------------------------------------
0000183C                          1161  *-----------------------------------------------------------------------------
0000183C                          1162  * NAME: OP_0111   ()
0000183C                          1163  * DESCRIPTION:    OP code 0111 is not supported. 
0000183C                          1164  * PRE-CONDITION:  
0000183C                          1165  * POST-CONDITION: 
0000183C                          1166  * REGISTERS:
0000183C                          1167  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000183C                          1168  OP0111
0000183C  6100 0A64               1169      BSR     UNKNOWNOP
00001840  4E75                    1170      RTS
00001842                          1171  
00001842                          1172  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001842                          1173  *-----------------------------------------------------------------------------
00001842                          1174  
00001842                          1175  
00001842                          1176  
00001842                          1177  *-----------------------------------------------------------------------------
00001842                          1178  *-----------------------------------------------------------------------------
00001842                          1179  * NAME: OP_1000   (DIVS, OR)
00001842                          1180  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001842                          1181  * PRE-CONDITION:  xyz
00001842                          1182  * POST-CONDITION: All registers return to their previous state, and the output
00001842                          1183  *                 goes to the output console for reading the raw data or the
00001842                          1184  *                 actual instruction.
00001842                          1185  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001842                          1186  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001842                          1187  OP1000
00001842  48A7 FFC0               1188          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
00001846                          1189  
00001846                          1190          * Check if the EA Mode is 001 since both DIVS and OR do not support it
00001846  3C3C 0003               1191          MOVE.W  #3, D6              * Prep lower value for bitmask
0000184A  3E3C 0005               1192          MOVE.W  #5, D7              * Prep upper value for bitmask
0000184E  6100 0CBC               1193          BSR     BITMASK             * Finalize bitmask setup
00001852  CC42                    1194          AND     D2,D6               * Apply bitmask
00001854                          1195          
00001854  0C46 0008               1196          CMPI    #%0000000000001000, D6  * Is the mode 001, an unsupported mode?
00001858  6700 0A48               1197          BEQ     UNKNOWNOP                 * If so, the op is not supported
0000185C                          1198          
0000185C                          1199          * Checking for DIVS
0000185C  3C3C 0006               1200          MOVE.W  #6, D6              * Prep lower value for bitmask
00001860  3E3C 0008               1201          MOVE.W  #8, D7              * Prep upper value for bitmask
00001864  6100 0CA6               1202          BSR     BITMASK             * Finalize bitmask setup
00001868  CC42                    1203          AND     D2,D6               * Apply bitmask
0000186A                          1204          
0000186A  0C46 01C0               1205          CMPI    #%0000000111000000, D6  * Are we DIVS?
0000186E  6600 0050               1206          BNE     NOTDIVS                 * If not, branch to see if it's OR
00001872                          1207          
00001872  43F9 00002578           1208          LEA     DIVSOP,A1           * We found DIVS
00001878  103C 000E               1209          MOVE.B  #14,D0              * Trap #14 prints out the data
0000187C  4E4F                    1210          TRAP    #15                 * Perform Trap #14
0000187E                          1211          
0000187E  43F9 0000261A           1212          LEA     SPACE,A1            * formatting
00001884  103C 000E               1213          MOVE.B  #14,D0              * Trap #14 prints out space
00001888  4E4F                    1214          TRAP    #15                 * Perform Trap #14
0000188A                          1215          
0000188A  4243                    1216          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
0000188C  08C3 0000               1217          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
00001890                          1218                                      * to indicate a potential immediate of size word
00001890                          1219          
00001890  6100 043E               1220          BSR     EAHELPER05          * Print out data
00001894                          1221  
00001894  43F9 00002620           1222          LEA     COMMA,A1            * formatting
0000189A  103C 000E               1223          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000189E  4E4F                    1224          TRAP    #15                 * Perform Trap #14
000018A0                          1225          
000018A0                          1226          * bit manipulation is needed to make the outlier DIVS work
000018A0                          1227          * with the generic EAHELPER611
000018A0  0882 0006               1228          BCLR    #6,D2
000018A4  0882 0007               1229          BCLR    #7,D2
000018A8  0882 0008               1230          BCLR    #8,D2
000018AC                          1231          
000018AC                          1232          * the above bits were cleared so that eahelper05 knows the destination
000018AC                          1233          * is a data register.
000018AC                          1234          
000018AC  6100 03E0               1235          BSR     EAHELPER611 
000018B0                          1236  
000018B0  43F9 00002575           1237          LEA     NEWLINE,A1          * We found DIVS
000018B6  103C 000E               1238          MOVE.B  #14,D0              * Trap #14 prints out the data
000018BA  4E4F                    1239          TRAP    #15                 * Perform Trap #14
000018BC                          1240          
000018BC  6000 0012               1241          BRA     OP1000END
000018C0                          1242          
000018C0                          1243  NOTDIVS * It is confirmed OR at this point
000018C0  43F9 000025AC           1244          LEA     OROP,A1         * We found OR
000018C6  103C 000E               1245          MOVE.B  #14,D0          * Trap #14 prints out the data
000018CA  4E4F                    1246          TRAP    #15             * Perform Trap #14
000018CC                          1247          *================================================================
000018CC                          1248          * todo, move the size of the operation into the leading bits of D5
000018CC                          1249          * before subroutine call
000018CC  6100 03C0               1250          BSR     EAHELPER611
000018D0                          1251  
000018D0                          1252  OP1000END
000018D0  4C9F 03FF               1253          MOVEM   (A7)+,D0-D7/A0-A1
000018D4  4E75                    1254          RTS
000018D6                          1255  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000018D6                          1256  *-----------------------------------------------------------------------------
000018D6                          1257  
000018D6                          1258  
000018D6                          1259  
000018D6                          1260  *-----------------------------------------------------------------------------
000018D6                          1261  *-----------------------------------------------------------------------------
000018D6                          1262  * NAME: OP_1001   (SUB)
000018D6                          1263  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000018D6                          1264  * PRE-CONDITION:  xyz
000018D6                          1265  * POST-CONDITION: All registers return to their previous state, and the output
000018D6                          1266  *                 goes to the output console for reading the raw data or the
000018D6                          1267  *                 actual instruction.
000018D6                          1268  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000018D6                          1269  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000018D6                          1270  OP1001
000018D6                          1271  
000018D6                          1272  
000018D6                          1273  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000018D6                          1274  *-----------------------------------------------------------------------------
000018D6                          1275  
000018D6                          1276  
000018D6                          1277  
000018D6                          1278  *-----------------------------------------------------------------------------
000018D6                          1279  *-----------------------------------------------------------------------------
000018D6                          1280  * NAME: OP_1010   ()
000018D6                          1281  * DESCRIPTION:    a
000018D6                          1282  * PRE-CONDITION:  b
000018D6                          1283  * POST-CONDITION: c
000018D6                          1284  * REGISTERS:      d
000018D6                          1285  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000018D6                          1286  OP1010
000018D6                          1287  
000018D6  6100 09CA               1288      BSR     UNKNOWNOP
000018DA  4E75                    1289      RTS
000018DC                          1290  
000018DC                          1291  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000018DC                          1292  *-----------------------------------------------------------------------------
000018DC                          1293  
000018DC                          1294  
000018DC                          1295  
000018DC                          1296  *-----------------------------------------------------------------------------
000018DC                          1297  *-----------------------------------------------------------------------------
000018DC                          1298  * NAME: OP_1011   (EOR, CMP)
000018DC                          1299  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000018DC                          1300  * PRE-CONDITION:  xyz
000018DC                          1301  * POST-CONDITION: All registers return to their previous state, and the output
000018DC                          1302  *                 goes to the output console for reading the raw data or the
000018DC                          1303  *                 actual instruction.
000018DC                          1304  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000018DC                          1305  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000018DC                          1306  OP1011
000018DC                          1307  
000018DC  6100 09C4               1308      BSR     UNKNOWNOP
000018E0  4E75                    1309      RTS
000018E2                          1310  
000018E2                          1311  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000018E2                          1312  *-----------------------------------------------------------------------------
000018E2                          1313  
000018E2                          1314  
000018E2                          1315  
000018E2                          1316  *-----------------------------------------------------------------------------
000018E2                          1317  *-----------------------------------------------------------------------------
000018E2                          1318  * NAME: OP_1100   (MULS)
000018E2                          1319  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000018E2                          1320  * PRE-CONDITION:  xyz
000018E2                          1321  * POST-CONDITION: All registers return to their previous state, and the output
000018E2                          1322  *                 goes to the output console for reading the raw data or the
000018E2                          1323  *                 actual instruction.
000018E2                          1324  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000018E2                          1325  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000018E2                          1326  OP1100
000018E2  48A7 FFC0               1327          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
000018E6                          1328  
000018E6                          1329          * Check if the EA Mode is 001 since MULS does not support it
000018E6  3C3C 0003               1330          MOVE.W  #3, D6              * Prep lower value for bitmask
000018EA  3E3C 0005               1331          MOVE.W  #5, D7              * Prep upper value for bitmask
000018EE  6100 0C1C               1332          BSR     BITMASK             * Finalize bitmask setup
000018F2  CC42                    1333          AND     D2,D6               * Apply bitmask
000018F4                          1334          
000018F4  0C46 0008               1335          CMPI    #%0000000000001000, D6    * Is the mode 001, an unsupported mode?
000018F8  6700 0068               1336          BEQ     UNKNOWN1100               * If so, the op is not supported
000018FC                          1337          
000018FC  3C3C 0006               1338          MOVE.W  #6, D6              * Prep lower value for bitmask
00001900  3E3C 0008               1339          MOVE.W  #8, D7              * Prep upper value for bitmask
00001904  6100 0C06               1340          BSR     BITMASK             * Finalize bitmask setup
00001908  CC42                    1341          AND     D2,D6               * Apply bitmask
0000190A                          1342          
0000190A  0C46 01C0               1343          CMPI    #%0000000111000000, D6  * Are we MULS?
0000190E  6600 0052               1344          BNE     UNKNOWN1100             * If not, it is an unknown op
00001912                          1345          
00001912  43F9 000025A7           1346          LEA     MULSOP,A1           * We found MULS
00001918  103C 000E               1347          MOVE.B  #14,D0              * Trap #14 prints out the data
0000191C  4E4F                    1348          TRAP    #15                 * Perform Trap #14
0000191E                          1349          
0000191E  43F9 0000261A           1350          LEA     SPACE,A1            * formatting
00001924  103C 000E               1351          MOVE.B  #14,D0              * Trap #14 prints out space
00001928  4E4F                    1352          TRAP    #15                 * Perform Trap #14
0000192A                          1353          
0000192A  4243                    1354          CLR     D3                  * clear D3, it is a parameter
0000192C  08C3 0000               1355          BSET    #0,D3               * of EAHELPER05 to indicate size
00001930                          1356          
00001930  6100 039E               1357          BSR     EAHELPER05          * Print out data
00001934                          1358  
00001934  43F9 00002620           1359          LEA     COMMA,A1            * formatting
0000193A  103C 000E               1360          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000193E  4E4F                    1361          TRAP    #15                 * Perform Trap #14
00001940                          1362          
00001940  0882 0006               1363          BCLR    #6,D2               * Bit manipulation is 
00001944  0882 0007               1364          BCLR    #7,D2               * necessary in order to make
00001948  0882 0008               1365          BCLR    #8,D2               * EAHELPER611 work generically
0000194C                          1366          
0000194C  6100 0340               1367          BSR     EAHELPER611         * Print out EA
00001950                          1368  
00001950  43F9 00002575           1369          LEA     NEWLINE,A1          * Formatting
00001956  103C 000E               1370          MOVE.B  #14,D0              * Trap #14 prints out the data
0000195A  4E4F                    1371          TRAP    #15                 * Perform Trap #14
0000195C                          1372          
0000195C  4C9F 03FF               1373          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
00001960  4E75                    1374          RTS                         * Return to main
00001962                          1375          
00001962                          1376  UNKNOWN1100
00001962  6100 093E               1377          BSR     UNKNOWNOP
00001966                          1378       
00001966  4C9F 03FF               1379          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
0000196A  4E75                    1380          RTS                         * Return to main
0000196C                          1381          
0000196C                          1382  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000196C                          1383  *-----------------------------------------------------------------------------
0000196C                          1384  
0000196C                          1385  
0000196C                          1386  
0000196C                          1387  
0000196C                          1388  
0000196C                          1389  
0000196C                          1390  *-----------------------------------------------------------------------------
0000196C                          1391  *-----------------------------------------------------------------------------
0000196C                          1392  * NAME: OP_1101   (ADD, ADDA)
0000196C                          1393  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000196C                          1394  * PRE-CONDITION:  xyz
0000196C                          1395  * POST-CONDITION: All registers return to their previous state, and the output
0000196C                          1396  *                 goes to the output console for reading the raw data or the
0000196C                          1397  *                 actual instruction.
0000196C                          1398  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000196C                          1399  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000196C                          1400  OP1101
0000196C  48E7 FFFE               1401          MOVEM.L A0-A6/D0-D7,-(A7)
00001970                          1402          
00001970  3C3C 0006               1403          MOVE.W  #6, D6              * Prep lower value for bitmask
00001974  3E3C 0008               1404          MOVE.W  #8, D7              * Prep upper value for bitmask
00001978  6100 0B92               1405          BSR     BITMASK             * Finalize bitmask setup
0000197C  CC42                    1406          AND     D2,D6               * Apply bitmask
0000197E  EC4E                    1407          LSR     #6,D6
00001980                          1408  
00001980  0C06 0000               1409          CMPI.B  #%0000000000000000,D6
00001984  6700 003E               1410          BEQ     BYTE_EA_DN
00001988                          1411  
00001988  0C06 0001               1412          CMPI.B  #%0000000000000001,D6
0000198C  6700 004E               1413          BEQ     WORD_EA_DN
00001990                          1414  
00001990  0C06 0002               1415          CMPI.B  #%0000000000000010,D6
00001994  6700 005E               1416          BEQ     LONG_EA_DN
00001998                          1417  
00001998  0C06 0003               1418          CMPI.B  #%0000000000000011,D6
0000199C  6700 006E               1419          BEQ     ADDA_WORD_OP
000019A0                          1420  
000019A0  0C06 0004               1421          CMPI.B  #%0000000000000100,D6
000019A4  6700 0086               1422          BEQ     BYTE_DN_EA
000019A8                          1423  
000019A8  0C06 0005               1424          CMPI.B  #%0000000000000101,D6
000019AC  6700 0096               1425          BEQ     WORD_DN_EA
000019B0                          1426  
000019B0  0C06 0006               1427          CMPI.B  #%0000000000000110,D6
000019B4  6700 00A6               1428          BEQ     LONG_DN_EA
000019B8                          1429  
000019B8  0C06 0007               1430          CMPI.B  #%0000000000000111,D6
000019BC  6700 00B6               1431          BEQ     ADDA_LONG_OP
000019C0                          1432  
000019C0  6000 011E               1433          BRA     ADD_ADDA_END
000019C4                          1434          
000019C4                          1435  BYTE_EA_DN
000019C4  6100 00CE               1436          BSR     ADD_EA_DN_GENERIC       * print out 'ADD' base op name for ADDA too
000019C8                          1437  
000019C8  43F9 0000262E           1438          LEA     __B,A1                  * print out size
000019CE  103C 000E               1439          MOVE.B  #14,D0
000019D2  4E4F                    1440          TRAP    #15
000019D4                          1441  
000019D4  6100 00CC               1442          BSR     ADD_ADDA_SPACE          * print out space
000019D8  6000 00EE               1443          BRA     ADD_ADDA_PRINT
000019DC                          1444  
000019DC                          1445  WORD_EA_DN
000019DC  6100 00B6               1446          BSR     ADD_EA_DN_GENERIC
000019E0                          1447  
000019E0  43F9 00002632           1448          LEA     __W,A1
000019E6  103C 000E               1449          MOVE.B  #14,D0
000019EA  4E4F                    1450          TRAP    #15
000019EC                          1451          
000019EC  6100 00B4               1452          BSR     ADD_ADDA_SPACE
000019F0  6000 00D6               1453          BRA     ADD_ADDA_PRINT
000019F4                          1454          
000019F4                          1455  LONG_EA_DN
000019F4  6100 009E               1456          BSR     ADD_EA_DN_GENERIC
000019F8                          1457  
000019F8  43F9 00002636           1458          LEA     __L,A1
000019FE  103C 000E               1459          MOVE.B  #14,D0
00001A02  4E4F                    1460          TRAP    #15
00001A04                          1461  
00001A04  6100 009C               1462          BSR     ADD_ADDA_SPACE
00001A08  6000 00BE               1463          BRA     ADD_ADDA_PRINT
00001A0C                          1464          
00001A0C                          1465  ADDA_WORD_OP
00001A0C  6100 0086               1466          BSR     ADD_EA_DN_GENERIC
00001A10                          1467  
00001A10  43F9 0000260E           1468          LEA     ASCII_A,A1
00001A16  103C 000E               1469          MOVE.B  #14,D0
00001A1A  4E4F                    1470          TRAP    #15
00001A1C                          1471  
00001A1C  43F9 00002632           1472          LEA     __W,A1
00001A22  103C 000E               1473          MOVE.B  #14,D0
00001A26  4E4F                    1474          TRAP    #15
00001A28                          1475          
00001A28  6000 0086               1476          BRA     ADDA_PRT
00001A2C                          1477          
00001A2C                          1478  BYTE_DN_EA
00001A2C  6100 0066               1479          BSR     ADD_EA_DN_GENERIC
00001A30                          1480          
00001A30  43F9 0000262E           1481          LEA     __B,A1
00001A36  103C 000E               1482          MOVE.B  #14,D0
00001A3A  4E4F                    1483          TRAP    #15
00001A3C                          1484          
00001A3C  6100 0064               1485          BSR     ADD_ADDA_SPACE
00001A40  6000 0086               1486          BRA     ADD_ADDA_PRINT
00001A44                          1487  
00001A44                          1488  WORD_DN_EA
00001A44  6100 004E               1489          BSR     ADD_EA_DN_GENERIC
00001A48                          1490  
00001A48  43F9 00002632           1491          LEA     __W,A1
00001A4E  103C 000E               1492          MOVE.B  #14,D0
00001A52  4E4F                    1493          TRAP    #15 
00001A54                          1494  
00001A54  6100 004C               1495          BSR     ADD_ADDA_SPACE
00001A58  6000 006E               1496          BRA     ADD_ADDA_PRINT
00001A5C                          1497  
00001A5C                          1498  LONG_DN_EA
00001A5C  6100 0036               1499          BSR     ADD_EA_DN_GENERIC
00001A60                          1500          
00001A60  43F9 00002636           1501          LEA     __L,A1
00001A66  103C 000E               1502          MOVE.B  #14,D0
00001A6A  4E4F                    1503          TRAP    #15     
00001A6C                          1504          
00001A6C  6100 0034               1505          BSR     ADD_ADDA_SPACE
00001A70  6000 0056               1506          BRA     ADD_ADDA_PRINT
00001A74                          1507  
00001A74                          1508  ADDA_LONG_OP
00001A74  6100 001E               1509          BSR     ADD_EA_DN_GENERIC
00001A78                          1510          
00001A78  43F9 0000260E           1511          LEA     ASCII_A,A1
00001A7E  103C 000E               1512          MOVE.B  #14,D0
00001A82  4E4F                    1513          TRAP    #15
00001A84                          1514          
00001A84  43F9 00002636           1515          LEA     __L,A1
00001A8A  103C 000E               1516          MOVE.B  #14,D0
00001A8E  4E4F                    1517          TRAP    #15
00001A90                          1518          
00001A90  6000 001E               1519          BRA     ADDA_PRT
00001A94                          1520          
00001A94                          1521  ADD_EA_DN_GENERIC
00001A94  43F9 000025F6           1522          LEA     OP_ADD_MSG,A1           * print out 'ADD'
00001A9A  103C 000E               1523          MOVE.B  #14,D0
00001A9E  4E4F                    1524          TRAP    #15
00001AA0  4E75                    1525          RTS
00001AA2                          1526          
00001AA2                          1527  ADD_ADDA_SPACE
00001AA2  43F9 0000261A           1528          LEA     SPACE,A1
00001AA8  103C 000E               1529          MOVE.B  #14,D0
00001AAC  4E4F                    1530          TRAP    #15
00001AAE  4E75                    1531          RTS
00001AB0                          1532  
00001AB0                          1533  ADDA_PRT
00001AB0  6100 0374               1534          BSR     MODE_DN
00001AB4  43F9 00002620           1535          LEA     COMMA,A1
00001ABA  103C 000E               1536          MOVE.B  #14,D0
00001ABE  4E4F                    1537          TRAP    #15
00001AC0  6100 0464               1538          BSR     MODE_AN
00001AC4  6000 001A               1539          BRA     ADD_ADDA_END
00001AC8                          1540  
00001AC8                          1541  ADD_ADDA_PRINT
00001AC8                          1542  
00001AC8  6100 0206               1543          BSR     EAHELPER05          * Print out data. TODO: DOESN'T WORK.
00001ACC                          1544  
00001ACC  43F9 00002620           1545          LEA     COMMA,A1            * formatting
00001AD2  103C 000E               1546          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001AD6  4E4F                    1547          TRAP    #15                 * Perform Trap #14
00001AD8                          1548          
00001AD8  6100 01B4               1549          BSR     EAHELPER611
00001ADC  6000 0002               1550          BRA     ADD_ADDA_END
00001AE0                          1551          
00001AE0                          1552  ADD_ADDA_END
00001AE0  43F9 00002575           1553          LEA     NEWLINE,A1
00001AE6  103C 000E               1554          MOVE.B  #14,D0
00001AEA  4E4F                    1555          TRAP    #15
00001AEC                          1556          
00001AEC  4CDF 7FFF               1557          MOVEM.L (A7)+,A0-A6/D0-D7
00001AF0  4E75                    1558          RTS
00001AF2                          1559  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001AF2                          1560  *-----------------------------------------------------------------------------
00001AF2                          1561  
00001AF2                          1562  
00001AF2                          1563  
00001AF2                          1564  *-----------------------------------------------------------------------------
00001AF2                          1565  *-----------------------------------------------------------------------------
00001AF2                          1566  * NAME: OP_1110   (LSL, LSR, ASL, ASR, ROL, ROR)
00001AF2                          1567  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001AF2                          1568  * PRE-CONDITION:  xyz
00001AF2                          1569  * POST-CONDITION: All registers return to their previous state, and the output
00001AF2                          1570  *                 goes to the output console for reading the raw data or the
00001AF2                          1571  *                 actual instruction.
00001AF2                          1572  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001AF2                          1573  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001AF2                          1574  OP1110
00001AF2                          1575  
00001AF2  48A7 FFC0               1576      MOVEM   D0-D7/A0-A1,-(A7)   * Caller saved
00001AF6                          1577  
00001AF6  7C03                    1578      MOVE.L  #3,D6
00001AF8  7E04                    1579      MOVE.L  #4,D7
00001AFA                          1580      
00001AFA  6100 0A10               1581      BSR     BITMASK * generate a bitmask for the 3 and 4 bits
00001AFE                          1582      
00001AFE  CC82                    1583      AND.L   D2,D6
00001B00                          1584      
00001B00  0C46 0008               1585      CMPI    #%0000000000001000,D6 *is it a logical shift
00001B04  6700 001A               1586      BEQ     LS
00001B08                          1587      
00001B08  0C46 0000               1588      CMPI    #%0000000000000000,D6 *is it an arithmatic shift
00001B0C  6700 0048               1589      BEQ     AS
00001B10                          1590      
00001B10  0C46 0018               1591      CMPI    #%0000000000011000,D6 *is it a rorate?
00001B14  6700 0076               1592      BEQ     RO
00001B18                          1593  
00001B18  6100 0788               1594      BSR     UNKNOWNOP *if nothing above, we don't know what it is
00001B1C  6000 0158               1595      BRA     ENDOP1110
00001B20                          1596      
00001B20                          1597  LS
00001B20  7C08                    1598      MOVE.L  #8,D6
00001B22  7E08                    1599      MOVE.L  #8,D7
00001B24                          1600      
00001B24  6100 09E6               1601      BSR     BITMASK
00001B28                          1602      
00001B28  CC82                    1603      AND.L   D2,D6
00001B2A                          1604      
00001B2A  0C46 0000               1605      CMPI    #0,D6 * is it a left shift?
00001B2E  6700 0016               1606      BEQ     LSR
00001B32                          1607      
00001B32  6000 0002               1608      BRA     LSL * if not a left shift, must be right
00001B36                          1609  
00001B36                          1610  LSL
00001B36                          1611  
00001B36  43F9 000025B8           1612      LEA     LSLOP,A1            * formatting
00001B3C  103C 000E               1613      MOVE.B  #14,D0              * Trap #14 prints out LSL
00001B40  4E4F                    1614      TRAP    #15                 * Perform Trap #14
00001B42                          1615      
00001B42  6000 007E               1616      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001B46                          1617                                  * prints the registers and imm data
00001B46                          1618  LSR
00001B46                          1619  
00001B46  43F9 000025BC           1620      LEA     LSROP,A1            * formatting
00001B4C  103C 000E               1621      MOVE.B  #14,D0              * Trap #14 prints out LSR
00001B50  4E4F                    1622      TRAP    #15                 * Perform Trap #14
00001B52                          1623      
00001B52  6000 006E               1624      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001B56                          1625                                  * prints the registers and imm data
00001B56                          1626  
00001B56                          1627  AS
00001B56  7C08                    1628      MOVE.L  #8,D6
00001B58  7E08                    1629      MOVE.L  #8,D7
00001B5A                          1630      
00001B5A  6100 09B0               1631      BSR     BITMASK
00001B5E                          1632      
00001B5E  CC82                    1633      AND.L   D2,D6
00001B60                          1634      
00001B60  0C46 0000               1635      CMPI    #0,D6 * is it a left shift?
00001B64  6700 0016               1636      BEQ     ASR
00001B68                          1637      
00001B68  6000 0002               1638      BRA     ASL * if not a left shift, must be right
00001B6C                          1639      
00001B6C                          1640  ASL
00001B6C                          1641  
00001B6C  43F9 000025C0           1642      LEA     ASLOP,A1            * formatting
00001B72  103C 000E               1643      MOVE.B  #14,D0              * Trap #14 prints out ASL
00001B76  4E4F                    1644      TRAP    #15                 * Perform Trap #14
00001B78                          1645      
00001B78  6000 0048               1646      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001B7C                          1647                                  * prints the registers and imm data
00001B7C                          1648  ASR
00001B7C                          1649  
00001B7C  43F9 000025C4           1650      LEA     ASROP,A1            * formatting
00001B82  103C 000E               1651      MOVE.B  #14,D0              * Trap #14 prints out ASR
00001B86  4E4F                    1652      TRAP    #15                 * Perform Trap #14
00001B88                          1653      
00001B88  6000 0038               1654      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001B8C                          1655                                  * prints the registers and imm data
00001B8C                          1656  RO
00001B8C  7C08                    1657      MOVE.L  #8,D6
00001B8E  7E08                    1658      MOVE.L  #8,D7
00001B90                          1659      
00001B90  6100 097A               1660      BSR     BITMASK
00001B94                          1661      
00001B94  CC82                    1662      AND.L   D2,D6
00001B96                          1663      
00001B96  0C46 0000               1664      CMPI    #0,D6 * is it a left shift?
00001B9A  6700 0016               1665      BEQ     ROR
00001B9E                          1666      
00001B9E  6000 0002               1667      BRA     ROL * if not a left shift, must be right
00001BA2                          1668  
00001BA2                          1669  ROL
00001BA2                          1670  
00001BA2  43F9 000025C8           1671      LEA     ROLOP,A1            * formatting
00001BA8  103C 000E               1672      MOVE.B  #14,D0              * Trap #14 prints out ROL
00001BAC  4E4F                    1673      TRAP    #15                 * Perform Trap #14
00001BAE                          1674      
00001BAE  6000 0012               1675      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001BB2                          1676                                  * prints the registers and imm data
00001BB2                          1677  ROR
00001BB2                          1678  
00001BB2  43F9 000025CC           1679      LEA     ROROP,A1            * formatting
00001BB8  103C 000E               1680      MOVE.B  #14,D0              * Trap #14 prints out ROR
00001BBC  4E4F                    1681      TRAP    #15                 * Perform Trap #14
00001BBE                          1682      
00001BBE  6000 0002               1683      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001BC2                          1684                                  * prints the registers and imm data
00001BC2                          1685  
00001BC2                          1686  OP1110GENERIC
00001BC2                          1687  
00001BC2  6100 0462               1688      BSR     SIZE67
00001BC6                          1689      
00001BC6  7C05                    1690      MOVE.L  #5,D6
00001BC8  7E05                    1691      MOVE.L  #5,D7
00001BCA                          1692      
00001BCA  6100 0940               1693      BSR     BITMASK
00001BCE                          1694      
00001BCE  CC82                    1695      AND.L   D2,D6
00001BD0                          1696      
00001BD0  0C46 0020               1697      CMPI    #%0000000000100000,D6   *is it a data reg?
00001BD4  6700 0074               1698      BEQ     OP1110DATAREG
00001BD8                          1699      
00001BD8  43F9 0000261E           1700      LEA     IMD,A1              * formatting
00001BDE  103C 000E               1701      MOVE.B  #14,D0              * Trap #14 prints out pound #
00001BE2  4E4F                    1702      TRAP    #15                 * Perform Trap #14
00001BE4                          1703      
00001BE4  7C09                    1704      MOVE.L  #9,D6
00001BE6  7E0B                    1705      MOVE.L  #11,D7
00001BE8                          1706      
00001BE8  6100 0922               1707      BSR     BITMASK
00001BEC                          1708      
00001BEC  CC82                    1709      AND.L   D2,D6
00001BEE                          1710      
00001BEE  0C46 0000               1711      CMPI    #0,D6 * special case, if zero print #8 not #0
00001BF2  6700 002E               1712      BEQ     OP1110IMMEIGHT
00001BF6                          1713      
00001BF6  E08E                    1714      LSR.L   #8,D6
00001BF8  E28E                    1715      LSR.L   #1,D6
00001BFA                          1716      
00001BFA  2206                    1717      MOVE.L  D6,D1              * formatting
00001BFC  103C 0003               1718      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001C00  4E4F                    1719      TRAP    #15                * Perform Trap #14
00001C02                          1720      
00001C02  43F9 00002620           1721      LEA     COMMA,A1            * formatting
00001C08  103C 000E               1722      MOVE.B  #14,D0              * Trap #14 prints out comma
00001C0C  4E4F                    1723      TRAP    #15                 * Perform Trap #1
00001C0E                          1724      
00001C0E                          1725      * in order to use the eahlpers, we need to do some bit manipulation
00001C0E                          1726      * clearing the bits below lets our helper know that the mode is Dn
00001C0E  0882 0003               1727      BCLR    #3,D2
00001C12  0882 0004               1728      BCLR    #4,D2
00001C16  0882 0005               1729      BCLR    #5,D2
00001C1A                          1730      
00001C1A  6100 00B4               1731      BSR     EAHELPER05
00001C1E                          1732      
00001C1E  6000 0056               1733      BRA     ENDOP1110
00001C22                          1734      
00001C22                          1735  OP1110IMMEIGHT
00001C22                          1736  
00001C22  7208                    1737      MOVE.L  #8,D1              * formatting
00001C24  103C 0003               1738      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001C28  4E4F                    1739      TRAP    #15                * Perform Trap #14
00001C2A                          1740      
00001C2A  43F9 00002620           1741      LEA     COMMA,A1            * formatting
00001C30  103C 000E               1742      MOVE.B  #14,D0              * Trap #14 prints out comma
00001C34  4E4F                    1743      TRAP    #15                 * Perform Trap #1
00001C36                          1744      
00001C36                          1745      * in order to use the eahlpers, we need to do some bit manipulation
00001C36                          1746      * clearing the bits below lets our helper know that the mode is Dn
00001C36  0882 0003               1747      BCLR    #3,D2
00001C3A  0882 0004               1748      BCLR    #4,D2
00001C3E  0882 0005               1749      BCLR    #5,D2
00001C42                          1750      
00001C42  6100 008C               1751      BSR     EAHELPER05
00001C46                          1752      
00001C46  6000 002E               1753      BRA     ENDOP1110
00001C4A                          1754  
00001C4A                          1755  OP1110DATAREG
00001C4A                          1756  
00001C4A                          1757      * in order to use the eahlpers, we need to do some bit manipulation
00001C4A                          1758      * clearing the bits below lets our helper know that the mode is Dn
00001C4A  0882 0003               1759      BCLR    #3,D2
00001C4E  0882 0004               1760      BCLR    #4,D2
00001C52  0882 0005               1761      BCLR    #5,D2
00001C56  0882 0006               1762      BCLR    #6,D2
00001C5A  0882 0007               1763      BCLR    #7,D2
00001C5E  0882 0008               1764      BCLR    #8,D2
00001C62                          1765      
00001C62  6100 002A               1766      BSR     EAHELPER611
00001C66                          1767      
00001C66  43F9 00002620           1768      LEA     COMMA,A1            * formatting
00001C6C  103C 000E               1769      MOVE.B  #14,D0              * Trap #14 prints out comma
00001C70  4E4F                    1770      TRAP    #15                 * Perform Trap #14
00001C72                          1771      
00001C72  6100 005C               1772      BSR     EAHELPER05
00001C76                          1773  
00001C76                          1774  ENDOP1110
00001C76                          1775  
00001C76  43F9 00002575           1776      LEA     NEWLINE,A1          * formatting
00001C7C  103C 000E               1777      MOVE.B  #14,D0              * Trap #14 prints out a new line
00001C80  4E4F                    1778      TRAP    #15                 * Perform Trap #14
00001C82                          1779      
00001C82  4C9F 03FF               1780      MOVEM   (A7)+,D0-D7/A0-A1   * Caller saved
00001C86  4E75                    1781      RTS
00001C88                          1782  
00001C88                          1783  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001C88                          1784  *-----------------------------------------------------------------------------
00001C88                          1785  
00001C88                          1786  
00001C88                          1787  
00001C88                          1788  *-----------------------------------------------------------------------------
00001C88                          1789  *-----------------------------------------------------------------------------
00001C88                          1790  * NAME: OP_1111   ()
00001C88                          1791  * DESCRIPTION:    a
00001C88                          1792  * PRE-CONDITION:  b
00001C88                          1793  * POST-CONDITION: c
00001C88                          1794  * REGISTERS:      d
00001C88                          1795  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001C88                          1796  OP1111
00001C88                          1797  
00001C88  6100 0618               1798      BSR     UNKNOWNOP
00001C8C  4E75                    1799      RTS
00001C8E                          1800  
00001C8E                          1801  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001C8E                          1802  *-----------------------------------------------------------------------------
00001C8E                          1803  
00001C8E                          1804  
00001C8E                          1805  
00001C8E                          1806  *-----------------------------------------------------------------------------
00001C8E                          1807  *-----------------------------------------------------------------------------
00001C8E                          1808  * NAME:           EAHELPER611
00001C8E                          1809  * DESCRIPTION:    a
00001C8E                          1810  * PRE-CONDITION:  D2 contains the instruction to print modes for.
00001C8E                          1811  *                 D5 contains the size of the data to be printed
00001C8E                          1812  * POST-CONDITION: Determines if mode is direct, if it's not, passes D2 to 
00001C8E                          1813  *                 EAHELPER05 to print.
00001C8E                          1814  * REGISTERS:      a
00001C8E                          1815  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001C8E                          1816  EAHELPER611
00001C8E  48A7 FFC0               1817      MOVEM  D0-D7/A0-A1,-(A7)    * Push values onto stack
00001C92                          1818      
00001C92  3C3C 0006               1819      MOVE.W  #6, D6              * Prep lower value for bitmask
00001C96  3E3C 0008               1820      MOVE.W  #8, D7              * Prep upper value for bitmask
00001C9A  6100 0870               1821      BSR     BITMASK             * Finalize bitmask setup
00001C9E  CC42                    1822      AND     D2,D6               * Apply bitmask
00001CA0                          1823      
00001CA0                          1824      * to move the mode where EAHELPER50 can process it
00001CA0  7C06                    1825      MOVE.L  #6,D6       * Prep lower value of bitmask
00001CA2  7E08                    1826      MOVE.L  #8,D7       * Prep upper value of bitmask
00001CA4  6100 0866               1827      BSR     BITMASK     * Create bitmask
00001CA8  CC42                    1828      AND     D2,D6       * Apply bitmask
00001CAA                          1829      
00001CAA  4243                    1830      CLR     D3      * prep D3 to store values
00001CAC  3606                    1831      MOVE.W  D6,D3   * store bitmasked value in D3
00001CAE  E64B                    1832      LSR     #3,D3   * move bits 6-8 to 3-5
00001CB0                          1833      
00001CB0                          1834      * to move the register where EAHELPER50 can process it
00001CB0  7C09                    1835      MOVE.L  #9,D6   * Prep lower value for bitmask
00001CB2  7E0B                    1836      MOVE.L  #11,D7  * Prep upper value for bitmask
00001CB4  6100 0856               1837      BSR     BITMASK * create bitmask
00001CB8  CC42                    1838      AND     D2,D6   * apply bitmask
00001CBA                          1839      
00001CBA  4244                    1840      CLR     D4      * prep D3 to store values
00001CBC  3806                    1841      MOVE.W  D6,D4   * store bitmasked value in D3
00001CBE                          1842      
00001CBE  E04C                    1843      LSR     #8,D4   * move bits 9-11 to 0-2
00001CC0  E24C                    1844      LSR     #1,D4   * move bits 9-11 to 0-2
00001CC2                          1845    
00001CC2  8684                    1846      OR.L    D4,D3   * combind the register and mode
00001CC4  2403                    1847      MOVE.L  D3,D2   * put the result in D2 so EAHELPER05 can process it
00001CC6                          1848      
00001CC6  6100 0008               1849      BSR     EAHELPER05
00001CCA                          1850      
00001CCA                          1851  ENDEAHELPER611
00001CCA                          1852      
00001CCA  4C9F 03FF               1853      MOVEM  (A7)+,D0-D7/A0-A1    * Revert back
00001CCE  4E75                    1854      RTS
00001CD0                          1855  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001CD0                          1856  *-----------------------------------------------------------------------------
00001CD0                          1857  
00001CD0                          1858  
00001CD0                          1859  
00001CD0                          1860  *-----------------------------------------------------------------------------
00001CD0                          1861  *-----------------------------------------------------------------------------
00001CD0                          1862  * NAME:           EAHELPER05
00001CD0                          1863  * DESCRIPTION:    a
00001CD0                          1864  * PRE-CONDITION:  D2 contains the instruction to print modes for. Only call
00001CD0                          1865  *                 this sub-routine helper for operations that only have one
00001CD0                          1866  *                 mode register.
00001CD0                          1867  * POST-CONDITION: Determines mode, passes D2 to REGHELPER to print.
00001CD0                          1868  * REGISTERS:      a
00001CD0                          1869  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001CD0                          1870  EAHELPER05
00001CD0                          1871      * todo: add code for printing immediate values
00001CD0                          1872      
00001CD0  48A7 FFC0               1873      MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001CD4                          1874      
00001CD4  7C03                    1875      MOVE.L  #3,D6
00001CD6  7E05                    1876      MOVE.L  #5,D7
00001CD8                          1877      
00001CD8  6100 0832               1878      BSR     BITMASK * generate a bitmask to identify the mode
00001CDC                          1879      
00001CDC  CC42                    1880      AND     D2,D6   * mask off the parts of D2 we don't need
00001CDE                          1881      
00001CDE  2A06                    1882      MOVE.L  D6,D5   * store the 3-5 bitmask for later use
00001CE0                          1883      
00001CE0  0C46 0000               1884      CMPI    #%0000000000000000,D6 * is it data register direct?
00001CE4  6600 000A               1885      BNE     NOTDATAREG
00001CE8                          1886      
00001CE8  6100 013C               1887      BSR     MODE_DN
00001CEC                          1888       
00001CEC  6000 0132               1889      BRA     ENDEAHELPER05
00001CF0                          1890      
00001CF0                          1891  NOTDATAREG * address register direct
00001CF0                          1892      
00001CF0  0C46 0008               1893      CMPI    #%0000000000001000,D6 * is it address register direct?
00001CF4  6600 000A               1894      BNE     NOTADRDIRECT
00001CF8                          1895      
00001CF8  6100 022C               1896      BSR     MODE_AN * simply prints out the address register
00001CFC                          1897       
00001CFC  6000 0122               1898      BRA     ENDEAHELPER05
00001D00                          1899      
00001D00                          1900  NOTADRDIRECT * address register indirect
00001D00                          1901          
00001D00  0C46 0010               1902      CMPI    #%0000000000010000,D6 * is it address register indirect?
00001D04  6600 0022               1903      BNE     NOTADRINDIRECT
00001D08                          1904      
00001D08  43F9 00002622           1905      LEA     OBRACK,A1       * Load '('
00001D0E  303C 000E               1906      MOVE.W  #14,D0          * Trap #14 to display message
00001D12  4E4F                    1907      TRAP    #15             * Perform #14
00001D14                          1908          
00001D14                          1909  
00001D14  6100 0210               1910      BSR     MODE_AN * print out an address register
00001D18                          1911      
00001D18  43F9 00002624           1912      LEA     CBRACK,A1       * Load ')'
00001D1E  303C 000E               1913      MOVE.W  #14,D0          * Trap #14 to display message
00001D22  4E4F                    1914      TRAP    #15             * Perform #14
00001D24                          1915       
00001D24  6000 00FA               1916      BRA     ENDEAHELPER05
00001D28                          1917      
00001D28                          1918  NOTADRINDIRECT * address register indirect, post increment
00001D28                          1919      
00001D28  0C46 0018               1920      CMPI    #%0000000000011000,D6 * is it address register indirect post increment?
00001D2C  6600 002E               1921      BNE     NOTADRINDIRECTPOST
00001D30                          1922      
00001D30  43F9 00002622           1923      LEA     OBRACK,A1       * Load '('
00001D36  303C 000E               1924      MOVE.W  #14,D0          * Trap #14 to display message
00001D3A  4E4F                    1925      TRAP    #15             * Perform #14
00001D3C                          1926          
00001D3C                          1927  
00001D3C  6100 01E8               1928      BSR     MODE_AN * print out an address register
00001D40                          1929      
00001D40  43F9 00002624           1930      LEA     CBRACK,A1       * Load ')'
00001D46  303C 000E               1931      MOVE.W  #14,D0          * Trap #14 to display message
00001D4A  4E4F                    1932      TRAP    #15             * Perform #14
00001D4C                          1933      
00001D4C  43F9 00002626           1934      LEA     PLUS,A1       * Load '+'
00001D52  303C 000E               1935      MOVE.W  #14,D0          * Trap #14 to display message
00001D56  4E4F                    1936      TRAP    #15             * Perform #14
00001D58                          1937       
00001D58  6000 00C6               1938      BRA     ENDEAHELPER05
00001D5C                          1939      
00001D5C                          1940  NOTADRINDIRECTPOST * address register indirect, pre decrement
00001D5C                          1941      
00001D5C  0C46 0020               1942      CMPI    #%0000000000100000,D6 * is it address register indirect pre decrement?
00001D60  6600 002E               1943      BNE     NOTADRINDIRECTPRE
00001D64                          1944      
00001D64  43F9 00002628           1945      LEA     MINUS,A1       * Load '-'
00001D6A  303C 000E               1946      MOVE.W  #14,D0          * Trap #14 to display message
00001D6E  4E4F                    1947      TRAP    #15             * Perform #14
00001D70                          1948      
00001D70  43F9 00002622           1949      LEA     OBRACK,A1       * Load '('
00001D76  303C 000E               1950      MOVE.W  #14,D0          * Trap #14 to display message
00001D7A  4E4F                    1951      TRAP    #15             * Perform #14
00001D7C                          1952          
00001D7C                          1953  
00001D7C  6100 01A8               1954      BSR     MODE_AN * print out an address register
00001D80                          1955      
00001D80  43F9 00002624           1956      LEA     CBRACK,A1       * Load ')'
00001D86  303C 000E               1957      MOVE.W  #14,D0          * Trap #14 to display message
00001D8A  4E4F                    1958      TRAP    #15             * Perform #14
00001D8C                          1959       
00001D8C  6000 0092               1960      BRA     ENDEAHELPER05
00001D90                          1961  
00001D90                          1962  NOTADRINDIRECTPRE * if none of the previous cases are true, it is a mode not supported by our decompiler
00001D90                          1963  
00001D90  0C46 0038               1964      CMPI    #%0000000000111000,D6 * is it immediate?
00001D94  6600 0086               1965      BNE     NOTIMMEDIATE
00001D98                          1966  
00001D98  0C43 0001               1967      CMPI    #1,D3 * is it a byte?
00001D9C  6600 0028               1968      BNE     NOTIMMBYTE
00001DA0                          1969      
00001DA0  43F9 0000261E           1970      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001DA6  103C 000E               1971      MOVE.B  #14,D0
00001DAA  4E4F                    1972      TRAP    #15
00001DAC                          1973      
00001DAC  3C3C 0000               1974      MOVE.W  #0, D6              * Prep lower value for bitmask
00001DB0  3E3C 0007               1975      MOVE.W  #7, D7              * Prep upper value for bitmask
00001DB4  6100 0756               1976      BSR     BITMASK             * Finalize bitmask setup
00001DB8                          1977          
00001DB8  321A                    1978      MOVE.W  (A2)+,D1
00001DBA                          1979      
00001DBA  C286                    1980      AND.L     D6,D1
00001DBC                          1981          
00001DBC  103C 0003               1982      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001DC0  4E4F                    1983      TRAP    #15      * Perform Trap #3
00001DC2                          1984      
00001DC2  6000 005C               1985      BRA     ENDEAHELPER05
00001DC6                          1986  
00001DC6                          1987  NOTIMMBYTE
00001DC6                          1988      
00001DC6  0C43 0002               1989      CMPI    #2,D3 * is it a word?
00001DCA  6600 0028               1990      BNE     NOTIMMWORD
00001DCE                          1991      
00001DCE  43F9 0000261E           1992      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001DD4  103C 000E               1993      MOVE.B  #14,D0
00001DD8  4E4F                    1994      TRAP    #15
00001DDA                          1995      
00001DDA  3C3C 0000               1996      MOVE.W  #0, D6              * Prep lower value for bitmask
00001DDE  3E3C 000F               1997      MOVE.W  #15, D7             * Prep upper value for bitmask
00001DE2  6100 0728               1998      BSR     BITMASK             * Finalize bitmask setup
00001DE6                          1999          
00001DE6  321A                    2000      MOVE.W  (A2)+,D1
00001DE8                          2001      
00001DE8  C286                    2002      AND.L     D6,D1               * Apply bitmask
00001DEA                          2003          
00001DEA  103C 0003               2004      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001DEE  4E4F                    2005      TRAP    #15      * Perform Trap #3
00001DF0                          2006      
00001DF0  6000 002E               2007      BRA     ENDEAHELPER05
00001DF4                          2008      
00001DF4                          2009  NOTIMMWORD
00001DF4  0C43 0003               2010      CMPI    #3,D3 * is it a long?
00001DF8  6600 0022               2011      BNE     NOTIMMEDIATE
00001DFC                          2012      
00001DFC  43F9 0000261E           2013      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001E02  103C 000E               2014      MOVE.B  #14,D0
00001E06  4E4F                    2015      TRAP    #15
00001E08                          2016          
00001E08  221A                    2017      MOVE.L  (A2)+,D1
00001E0A                          2018          
00001E0A  103C 0003               2019      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001E0E  4E4F                    2020      TRAP    #15      * Perform Trap #3
00001E10                          2021      
00001E10  321A                    2022      MOVE.W  (A2)+,D1
00001E12                          2023          
00001E12  103C 0003               2024      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001E16  4E4F                    2025      TRAP    #15      * Perform Trap #3
00001E18                          2026      
00001E18  6000 0006               2027      BRA     ENDEAHELPER05
00001E1C                          2028  
00001E1C                          2029  NOTIMMEDIATE    
00001E1C                          2030  
00001E1C                          2031  
00001E1C  6100 0484               2032      BSR     UNKNOWNOP
00001E20                          2033      
00001E20                          2034  ENDEAHELPER05
00001E20  4C9F 03FF               2035      MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001E24  4E75                    2036      RTS
00001E26                          2037  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001E26                          2038  *-----------------------------------------------------------------------------
00001E26                          2039  
00001E26                          2040  
00001E26                          2041  
00001E26                          2042  *-----------------------------------------------------------------------------
00001E26                          2043  *-----------------------------------------------------------------------------
00001E26                          2044  * NAME:           MODE_DN
00001E26                          2045  * DESCRIPTION:    Generalize the EA part of the project.
00001E26                          2046  * PRE-CONDITION:  The mode must have been correctly identified. All modes
00001E26                          2047  *                 must be called by RTS.
00001E26                          2048  * POST-CONDITION: After the EA, the entire op will head back to the BSR that
00001E26                          2049  *                 called it.
00001E26                          2050  * REGISTERS:      a
00001E26                          2051  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001E26                          2052  * ---> Dn
00001E26                          2053  MODE_DN
00001E26  48A7 FFC0               2054          MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001E2A                          2055  
00001E2A  3C3C 0000               2056          MOVE.W  #0, D6              * Prep lower value for bitmask
00001E2E  3E3C 0002               2057          MOVE.W  #2, D7              * Prep upper value for bitmask
00001E32  6100 06D8               2058          BSR     BITMASK             * Finalize bitmask setup
00001E36  CC42                    2059          AND     D2,D6               * Apply bitmask
00001E38                          2060          
00001E38  0C46 0000               2061          CMPI    #%000000000000000, D6   * Data Register D0?
00001E3C  6600 000A               2062          BNE     NOTD0
00001E40                          2063          
00001E40  6100 0074               2064          BSR     PRINTD0
00001E44  6000 006A               2065          BRA     ENDMODE_DN
00001E48                          2066  NOTD0      
00001E48  0C46 0001               2067          CMPI    #%000000000000001, D6   * Data Register D1?
00001E4C  6600 000A               2068          BNE     NOTD1
00001E50                          2069          
00001E50  6100 0072               2070          BSR     PRINTD1
00001E54  6000 005A               2071          BRA     ENDMODE_DN
00001E58                          2072  NOTD1
00001E58  0C46 0002               2073          CMPI    #%000000000000010, D6   * Data Register D2?
00001E5C  6600 000A               2074          BNE     NOTD2
00001E60                          2075          
00001E60  6100 0070               2076          BSR     PRINTD2
00001E64  6000 004A               2077          BRA     ENDMODE_DN
00001E68                          2078  NOTD2
00001E68  0C46 0003               2079          CMPI    #%000000000000011, D6   * Data Register D3?
00001E6C  6600 000A               2080          BNE     NOTD3
00001E70                          2081          
00001E70  6100 006E               2082          BSR     PRINTD3
00001E74  6000 003A               2083          BRA     ENDMODE_DN
00001E78                          2084  NOTD3
00001E78  0C46 0004               2085          CMPI    #%000000000000100, D6   * Data Register D4?
00001E7C  6600 000A               2086          BNE     NOTD4
00001E80                          2087          
00001E80  6100 006C               2088          BSR     PRINTD4
00001E84  6000 002A               2089          BRA     ENDMODE_DN
00001E88                          2090  NOTD4
00001E88  0C46 0005               2091          CMPI    #%000000000000101, D6   * Data Register D5?
00001E8C  6600 000A               2092          BNE     NOTD5
00001E90                          2093          
00001E90  6100 006A               2094          BSR     PRINTD5
00001E94  6000 001A               2095          BRA     ENDMODE_DN
00001E98                          2096  NOTD5
00001E98  0C46 0006               2097          CMPI    #%000000000000110, D6   * Data Register D6?
00001E9C  6600 000A               2098          BNE     NOTD6
00001EA0                          2099          
00001EA0  6100 0068               2100          BSR     PRINTD6
00001EA4  6000 000A               2101          BRA     ENDMODE_DN
00001EA8                          2102  NOTD6
00001EA8  6100 006E               2103          BSR     PRINTD7
00001EAC  6000 0002               2104          BRA     ENDMODE_DN
00001EB0                          2105          
00001EB0                          2106  ENDMODE_DN
00001EB0  4C9F 03FF               2107          MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001EB4  4E75                    2108          RTS
00001EB6                          2109  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001EB6                          2110  *-----------------------------------------------------------------------------
00001EB6                          2111  
00001EB6                          2112  
00001EB6                          2113  
00001EB6                          2114  *-----------------------------------------------------------------------------
00001EB6                          2115  *-----------------------------------------------------------------------------
00001EB6                          2116  * NAME:           PRINTD0
00001EB6                          2117  * DESCRIPTION:    Simply prints D0, D1, ..., up to D7.
00001EB6                          2118  * PRE-CONDITION:  a
00001EB6                          2119  * POST-CONDITION: a
00001EB6                          2120  * REGISTERS:      a
00001EB6                          2121  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001EB6                          2122  PRINTD0
00001EB6  43F9 00002652           2123          LEA     __D0, A1        * Load 'D0'
00001EBC  103C 000E               2124          MOVE.B  #14, D0         * Load Trap #14 to print out
00001EC0  4E4F                    2125          TRAP    #15             * Perform Trap #14
00001EC2  4E75                    2126          RTS
00001EC4                          2127  PRINTD1
00001EC4  43F9 00002655           2128          LEA     __D1, A1        * Load 'D1'
00001ECA  103C 000E               2129          MOVE.B  #14, D0         * Load Trap #14 to print out
00001ECE  4E4F                    2130          TRAP    #15             * Perform Trap #14
00001ED0  4E75                    2131          RTS      
00001ED2                          2132  PRINTD2
00001ED2  43F9 00002658           2133          LEA     __D2, A1        * Load 'D2'
00001ED8  103C 000E               2134          MOVE.B  #14, D0         * Load Trap #14 to print out
00001EDC  4E4F                    2135          TRAP    #15             * Perform Trap #14
00001EDE  4E75                    2136          RTS      
00001EE0                          2137  PRINTD3
00001EE0  43F9 0000265B           2138          LEA     __D3, A1        * Load 'D3'
00001EE6  103C 000E               2139          MOVE.B  #14, D0         * Load Trap #14 to print out
00001EEA  4E4F                    2140          TRAP    #15             * Perform Trap #14
00001EEC  4E75                    2141          RTS      
00001EEE                          2142  PRINTD4
00001EEE  43F9 0000265E           2143          LEA     __D4, A1        * Load 'D4'
00001EF4  103C 000E               2144          MOVE.B  #14, D0         * Load Trap #14 to print out
00001EF8  4E4F                    2145          TRAP    #15             * Perform Trap #14
00001EFA  4E75                    2146          RTS       
00001EFC                          2147  PRINTD5
00001EFC  43F9 00002661           2148          LEA     __D5, A1        * Load 'D5'
00001F02  103C 000E               2149          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F06  4E4F                    2150          TRAP    #15             * Perform Trap #14
00001F08  4E75                    2151          RTS      
00001F0A                          2152  PRINTD6
00001F0A  43F9 00002664           2153          LEA     __D6, A1        * Load 'D6'
00001F10  103C 000E               2154          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F14  4E4F                    2155          TRAP    #15             * Perform Trap #14
00001F16  4E75                    2156          RTS
00001F18                          2157  PRINTD7
00001F18  43F9 00002667           2158          LEA     __D7, A1        * Load 'D7'
00001F1E  103C 000E               2159          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F22  4E4F                    2160          TRAP    #15             * Perform Trap #14
00001F24  4E75                    2161          RTS
00001F26                          2162  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001F26                          2163  *-----------------------------------------------------------------------------
00001F26                          2164  
00001F26                          2165  
00001F26                          2166  
00001F26                          2167  *-----------------------------------------------------------------------------
00001F26                          2168  *-----------------------------------------------------------------------------
00001F26                          2169  * NAME:           MODE_AN
00001F26                          2170  * DESCRIPTION:    Simply chooses to print A0-A7.
00001F26                          2171  * PRE-CONDITION:  a
00001F26                          2172  * POST-CONDITION: a
00001F26                          2173  * REGISTERS:      a
00001F26                          2174  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001F26                          2175  MODE_AN
00001F26  48A7 FFC0               2176          MOVEM   D0-D7/A0-A1,-(A7)   * Save information
00001F2A                          2177  
00001F2A  3C3C 0000               2178          MOVE.W  #0, D6              * Prep lower value for bitmask
00001F2E  3E3C 0002               2179          MOVE.W  #2, D7              * Prep upper value for bitmask
00001F32  6100 05D8               2180          BSR     BITMASK             * Finalize bitmask setup
00001F36  CC42                    2181          AND     D2,D6               * Apply bitmask
00001F38                          2182          
00001F38  0C46 0000               2183          CMPI    #%000000000000000, D6   * Address Register A0?
00001F3C  6600 000A               2184          BNE     NOTA0
00001F40                          2185          
00001F40  6100 0074               2186          BSR     PRINTA0
00001F44                          2187          
00001F44  6000 006A               2188          BRA     ENDMODE_AN
00001F48                          2189  NOTA0      
00001F48  0C46 0001               2190          CMPI    #%000000000000001, D6   * Address Register A1?
00001F4C  6600 000A               2191          BNE     NOTA1
00001F50                          2192          
00001F50  6100 0072               2193          BSR     PRINTA1
00001F54                          2194          
00001F54  6000 005A               2195          BRA     ENDMODE_AN
00001F58                          2196  NOTA1
00001F58  0C46 0002               2197          CMPI    #%000000000000010, D6   * Address Register A2?
00001F5C  6600 000A               2198          BNE     NOTA2
00001F60                          2199          
00001F60  6100 0070               2200          BSR     PRINTA2
00001F64                          2201          
00001F64  6000 004A               2202          BRA     ENDMODE_AN
00001F68                          2203  NOTA2
00001F68  0C46 0003               2204          CMPI    #%000000000000011, D6   * Address Register A3?
00001F6C  6600 000A               2205          BNE     NOTA3
00001F70                          2206          
00001F70  6100 006E               2207          BSR     PRINTA3
00001F74                          2208          
00001F74  6000 003A               2209          BRA     ENDMODE_AN
00001F78                          2210  NOTA3
00001F78  0C46 0004               2211          CMPI    #%000000000000100, D6   * Address Register A4?
00001F7C  6600 000A               2212          BNE     NOTA4
00001F80                          2213          
00001F80  6100 006C               2214          BSR     PRINTA4
00001F84                          2215          
00001F84  6000 002A               2216          BRA     ENDMODE_AN
00001F88                          2217  NOTA4
00001F88  0C46 0005               2218          CMPI    #%000000000000101, D6   * Address Register A5?
00001F8C  6600 000A               2219          BNE     NOTA5
00001F90                          2220          
00001F90  6100 006A               2221          BSR     PRINTA5
00001F94                          2222          
00001F94  6000 001A               2223          BRA     ENDMODE_AN
00001F98                          2224  NOTA5
00001F98  0C46 0006               2225          CMPI    #%000000000000110, D6   * Address Register A6?
00001F9C  6600 000A               2226          BNE     NOTA6
00001FA0                          2227          
00001FA0  6100 0068               2228          BSR     PRINTA6
00001FA4                          2229          
00001FA4  6000 000A               2230          BRA     ENDMODE_AN
00001FA8                          2231  NOTA6
00001FA8  6100 006E               2232          BSR     PRINTA7
00001FAC                          2233          
00001FAC  6000 0002               2234          BRA     ENDMODE_AN
00001FB0                          2235  ENDMODE_AN
00001FB0  4C9F 03FF               2236          MOVEM   (A7)+,D0-D7/A0-A1   * Restore registers
00001FB4  4E75                    2237          RTS
00001FB6                          2238  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001FB6                          2239  *-----------------------------------------------------------------------------
00001FB6                          2240  
00001FB6                          2241  
00001FB6                          2242  
00001FB6                          2243  *-----------------------------------------------------------------------------
00001FB6                          2244  *-----------------------------------------------------------------------------
00001FB6                          2245  * NAME:           PRINTA0
00001FB6                          2246  * DESCRIPTION:    Simply print out the address register.
00001FB6                          2247  * PRE-CONDITION:  a
00001FB6                          2248  * POST-CONDITION: a
00001FB6                          2249  * REGISTERS:      a
00001FB6                          2250  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001FB6                          2251  PRINTA0
00001FB6  43F9 0000263A           2252          LEA     __A0, A1        * Load 'A0'
00001FBC  103C 000E               2253          MOVE.B  #14, D0         * Load Trap #14 to print out
00001FC0  4E4F                    2254          TRAP    #15             * Perform Trap #14
00001FC2  4E75                    2255          RTS
00001FC4                          2256  
00001FC4                          2257  PRINTA1
00001FC4  43F9 0000263D           2258          LEA     __A1, A1        * Load 'A1'
00001FCA  103C 000E               2259          MOVE.B  #14, D0         * Load Trap #14 to print out
00001FCE  4E4F                    2260          TRAP    #15             * Perform Trap #14
00001FD0  4E75                    2261          RTS
00001FD2                          2262          
00001FD2                          2263  PRINTA2
00001FD2  43F9 00002640           2264          LEA     __A2, A1        * Load 'A2'
00001FD8  103C 000E               2265          MOVE.B  #14, D0         * Load Trap #14 to print out
00001FDC  4E4F                    2266          TRAP    #15             * Perform Trap #14
00001FDE  4E75                    2267          RTS
00001FE0                          2268  
00001FE0                          2269  PRINTA3
00001FE0  43F9 00002643           2270          LEA     __A3, A1        * Load 'A3'
00001FE6  103C 000E               2271          MOVE.B  #14, D0         * Load Trap #14 to print out
00001FEA  4E4F                    2272          TRAP    #15             * Perform Trap #14
00001FEC  4E75                    2273          RTS
00001FEE                          2274  
00001FEE                          2275  PRINTA4
00001FEE  43F9 00002646           2276          LEA     __A4, A1        * Load 'A4'
00001FF4  103C 000E               2277          MOVE.B  #14, D0         * Load Trap #14 to print out
00001FF8  4E4F                    2278          TRAP    #15             * Perform Trap #14
00001FFA  4E75                    2279          RTS
00001FFC                          2280  
00001FFC                          2281  PRINTA5
00001FFC  43F9 00002649           2282          LEA     __A5, A1        * Load 'A5'
00002002  103C 000E               2283          MOVE.B  #14, D0         * Load Trap #14 to print out
00002006  4E4F                    2284          TRAP    #15             * Perform Trap #14
00002008  4E75                    2285          RTS
0000200A                          2286  
0000200A                          2287  PRINTA6
0000200A  43F9 0000264C           2288          LEA     __A6, A1        * Load 'A6'
00002010  103C 000E               2289          MOVE.B  #14, D0         * Load Trap #14 to print out
00002014  4E4F                    2290          TRAP    #15             * Perform Trap #14
00002016  4E75                    2291          RTS
00002018                          2292  
00002018                          2293  PRINTA7
00002018  43F9 0000264F           2294          LEA     __A7, A1        * Load 'A7'
0000201E  103C 000E               2295          MOVE.B  #14, D0         * Load Trap #14 to print out
00002022  4E4F                    2296          TRAP    #15             * Perform Trap #14
00002024  4E75                    2297          RTS
00002026                          2298  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002026                          2299  *-----------------------------------------------------------------------------
00002026                          2300  
00002026                          2301  
00002026                          2302  
00002026                          2303  *-----------------------------------------------------------------------------
00002026                          2304  *-----------------------------------------------------------------------------
00002026                          2305  * NAME:           SIZE67
00002026                          2306  * DESCRIPTION:    Called if the size is stored in bits 6 to 7.
00002026                          2307  * PRE-CONDITION:  a
00002026                          2308  * POST-CONDITION: a
00002026                          2309  * REGISTERS:      a
00002026                          2310  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002026                          2311  SIZE67
00002026  48A7 FFFE               2312          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
0000202A  3C3C 0006               2313          MOVE.W  #6, D6              * Prep lower value for bitmask
0000202E  3E3C 0007               2314          MOVE.W  #7, D7              * Prep upper value for bitmask
00002032  6100 04D8               2315          BSR     BITMASK             * Finalize bitmask setup
00002036  CC42                    2316          AND     D2,D6               * Apply bitmask     
00002038                          2317  
00002038  0C46 0000               2318          CMPI    #%0000000000000000, D6   * is it a BYTE?
0000203C  6600 000A               2319          BNE     NOT67BYTE
00002040                          2320          
00002040  6100 0080               2321          BSR     PRINTBYTE               * Branch to handle BYTE sizes
00002044  6000 001E               2322          BRA     END67
00002048                          2323  NOT67BYTE        
00002048  0C46 0040               2324          CMPI    #%0000000001000000, D6   * is it a WORD?
0000204C  6600 000A               2325          BNE     NOT67WORD
00002050                          2326          
00002050  6100 007E               2327          BSR     PRINTWORD               * Branch to handle WORD sizes
00002054  6000 000E               2328          BRA     END67
00002058                          2329  NOT67WORD
00002058  0C46 0080               2330          CMPI    #%0000000010000000, D6   * is it a LONG?
0000205C  6600 0006               2331          BNE     END67
00002060                          2332          
00002060  6100 007C               2333          BSR     PRINTLONG               * Branch to handle LONG sizes
00002064                          2334  END67
00002064  4C9F 7FFF               2335          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
00002068  4E75                    2336          RTS                             * Return. Size handling is finished.
0000206A                          2337  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000206A                          2338  *-----------------------------------------------------------------------------
0000206A                          2339  
0000206A                          2340  
0000206A                          2341  
0000206A                          2342  *-----------------------------------------------------------------------------
0000206A                          2343  *-----------------------------------------------------------------------------
0000206A                          2344  * NAME:           SIZE68
0000206A                          2345  * DESCRIPTION:    Called if the size is stored in bits 6 to 8.
0000206A                          2346  * PRE-CONDITION:  a
0000206A                          2347  * POST-CONDITION: a
0000206A                          2348  * REGISTERS:      a
0000206A                          2349  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000206A                          2350  SIZE68
0000206A                          2351          * finish later, need to follow the same format as SIZE67
0000206A                          2352          
0000206A                          2353          
0000206A  48A7 FFFE               2354          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
0000206E  3C3C 0006               2355          MOVE.W  #6, D6              * Prep lower value for bitmask
00002072  3E3C 0008               2356          MOVE.W  #8, D7              * Prep upper value for bitmask
00002076  6100 0494               2357          BSR     BITMASK             * Finalize bitmask setup
0000207A  CC42                    2358          AND     D2,D6               * Apply bitmask          
0000207C                          2359          
0000207C  0C46 0000               2360          CMPI    #%0000000000000000, D6   * is it a BYTE?
00002080  6100 0040               2361          BSR     PRINTBYTE               * Branch to handle BYTE sizes
00002084  0C46 0100               2362          CMPI    #%0000000100000000, D6   * is it a BYTE?
00002088  6100 0038               2363          BSR     PRINTBYTE               * Branch to handle BYTE sizes 
0000208C                          2364        
0000208C  0C46 0040               2365          CMPI    #%0000000001000000, D6   * is it a WORD?
00002090  6100 003E               2366          BSR     PRINTWORD               * Branch to handle BYTE sizes
00002094  0C46 0140               2367          CMPI    #%0000000101000000, D6   * is it a WORD?
00002098  6100 0036               2368          BSR     PRINTWORD               * Branch to handle BYTE sizes
0000209C  0C46 00C0               2369          CMPI    #%0000000011000000, D6   * is it a WORD (ADDA)?
000020A0  6100 002E               2370          BSR     PRINTWORD               * Branch to handle BYTE sizes
000020A4                          2371  
000020A4  0C46 0080               2372          CMPI    #%0000000010000000, D6   * is it a LONG?
000020A8  6100 0034               2373          BSR     PRINTLONG               * Branch to handle BYTE sizes
000020AC  0C46 0180               2374          CMPI    #%0000000110000000, D6   * is it a LONG?
000020B0  6100 002C               2375          BSR     PRINTLONG               * Branch to handle BYTE sizes
000020B4  0C46 01C0               2376          CMPI    #%0000000111000000, D6   * is it a LONG (ADDA)?
000020B8  6100 0024               2377          BSR     PRINTLONG               * Branch to handle BYTE sizes
000020BC                          2378  
000020BC  4C9F 7FFF               2379          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
000020C0  4E75                    2380          RTS                             * Return. Size handling is finished.
000020C2                          2381  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000020C2                          2382  *-----------------------------------------------------------------------------
000020C2                          2383  
000020C2                          2384  
000020C2                          2385  
000020C2                          2386  *-----------------------------------------------------------------------------
000020C2                          2387  *-----------------------------------------------------------------------------
000020C2                          2388  * NAME:           PRINTBYTE
000020C2                          2389  * DESCRIPTION:    a
000020C2                          2390  * PRE-CONDITION:  a
000020C2                          2391  * POST-CONDITION: a
000020C2                          2392  * REGISTERS:      a
000020C2                          2393  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000020C2                          2394  PRINTBYTE
000020C2  43F9 0000262E           2395          LEA     __B,A1      * Load '.B ' into A1
000020C8  103C 000E               2396          MOVE.B  #14,D0      * Trap #14 setup to print
000020CC  4E4F                    2397          TRAP    #15         * Perform Trap #14
000020CE  4E75                    2398          RTS                 * Return to SIZE67/SIZE68
000020D0                          2399          
000020D0                          2400  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000020D0                          2401  *-----------------------------------------------------------------------------
000020D0                          2402  
000020D0                          2403  
000020D0                          2404  
000020D0                          2405  *-----------------------------------------------------------------------------
000020D0                          2406  *-----------------------------------------------------------------------------
000020D0                          2407  * NAME:           PRINTWORD
000020D0                          2408  * DESCRIPTION:    a
000020D0                          2409  * PRE-CONDITION:  a
000020D0                          2410  * POST-CONDITION: a
000020D0                          2411  * REGISTERS:      a
000020D0                          2412  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000020D0                          2413  PRINTWORD
000020D0  43F9 00002632           2414          LEA     __W,A1      * Load '.W ' into A1
000020D6  103C 000E               2415          MOVE.B  #14,D0      * Trap #14 setup to print
000020DA  4E4F                    2416          TRAP    #15         * Perform Trap #14
000020DC  4E75                    2417          RTS                 * Return to SIZE67/SIZE68
000020DE                          2418          
000020DE                          2419  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000020DE                          2420  *-----------------------------------------------------------------------------
000020DE                          2421  
000020DE                          2422  
000020DE                          2423  
000020DE                          2424  *-----------------------------------------------------------------------------
000020DE                          2425  *-----------------------------------------------------------------------------
000020DE                          2426  * NAME:           PRINTLONG
000020DE                          2427  * DESCRIPTION:    a
000020DE                          2428  * PRE-CONDITION:  a
000020DE                          2429  * POST-CONDITION: a
000020DE                          2430  * REGISTERS:      a
000020DE                          2431  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000020DE                          2432  PRINTLONG
000020DE  43F9 00002636           2433          LEA     __L,A1      * Load '.L ' into A1
000020E4  103C 000E               2434          MOVE.B  #14,D0      * Trap #14 setup to print
000020E8  4E4F                    2435          TRAP    #15         * Perform Trap #14
000020EA  4E75                    2436          RTS                 * Return to SIZE67/SIZE68
000020EC                          2437          
000020EC                          2438  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000020EC                          2439  *-----------------------------------------------------------------------------
000020EC                          2440  
000020EC                          2441  
000020EC                          2442  
000020EC                          2443  *-----------------------------------------------------------------------------
000020EC                          2444  *-----------------------------------------------------------------------------
000020EC                          2445  * NAME:           MOVEMHELPERPOST
000020EC                          2446  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
000020EC                          2447  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
000020EC                          2448  * POST-CONDITION: The registers being saved are printed
000020EC                          2449  * REGISTERS:      A2
000020EC                          2450  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000020EC                          2451  MOVEMHELPERPOST
000020EC  48A7 FFFE               2452          MOVEM  D0-D7/A0-A6,-(A7)
000020F0                          2453          
000020F0  4285                    2454          CLR.L   D5  * to be used as a loop counter
000020F2  4284                    2455          CLR.L   D4  * == 1 if we have printed any registers (for fencepost issue)
000020F4  4283                    2456          CLR.L   D3  * == 1 if we are in a range
000020F6  4286                    2457          CLR.L   D6  * == 1 if we have already printed the slash or dash
000020F8  4287                    2458          CLR.L   D7  * == counts the number of registers in a range
000020FA  1C3C 0001               2459          MOVE.B  #1,D6 * to fix fencepost issue
000020FE  4282                    2460          CLR.L   D2
00002100  3412                    2461          MOVE.W  (A2),D2
00002102                          2462          
00002102                          2463  DLOOP * loop to print out the data register portion of the addresses being saved
00002102                          2464  
00002102  E25A                    2465          ROR     #1,D2
00002104  6500 0006               2466          BCS     DVALID
00002108                          2467          
00002108  6000 0064               2468          BRA     DINVALID
0000210C                          2469          
0000210C                          2470  DVALID
0000210C  0C43 0000               2471          CMPI    #0,D3
00002110  6700 0020               2472          BEQ     DFORWARDVALID * we are not in a range
00002114                          2473          
00002114  5247                    2474          ADDI    #1,D7 *increment number of regs in range
00002116                          2475          
00002116  0C46 0001               2476          CMPI    #1,D6   *have we already printed a symbol?
0000211A  6700 0084               2477          BEQ     DLOOPITER
0000211E                          2478          
0000211E  43F9 0000262C           2479          LEA     DASH,A1    *print a dash
00002124  103C 000E               2480          MOVE.B  #14,D0
00002128  4E4F                    2481          TRAP    #15
0000212A                          2482          
0000212A  1C3C 0001               2483          MOVE.B  #1,D6 * indicates a symbol has been printed
0000212E                          2484          
0000212E  6000 0070               2485          BRA     DLOOPITER
00002132                          2486          
00002132                          2487  DFORWARDVALID
00002132                          2488          * not in a range yet, print
00002132                          2489          
00002132  0C44 0000               2490          CMPI    #0,D4
00002136  6700 000E               2491          BEQ     DNOSLASH
0000213A                          2492                  
0000213A  43F9 0000262A           2493          LEA     SLASH,A1
00002140  103C 000E               2494          MOVE.B  #14,D0
00002144  4E4F                    2495          TRAP    #15
00002146                          2496          
00002146                          2497  DNOSLASH
00002146                          2498  
00002146  183C 0001               2499          MOVE.B  #1,D4 * we have printed something, now slashes are fair game
0000214A                          2500          
0000214A  1C3C 0001               2501          MOVE.B  #1,D6   * we have printed a symbol
0000214E                          2502          
0000214E  43F9 00002614           2503          LEA     ASCII_D,A1
00002154  103C 000E               2504          MOVE.B  #14,D0
00002158  4E4F                    2505          TRAP    #15
0000215A                          2506          
0000215A  2205                    2507          MOVE.L  D5,D1
0000215C  103C 0003               2508          MOVE.B  #3,D0
00002160  4E4F                    2509          TRAP    #15
00002162                          2510  
00002162  163C 0001               2511          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
00002166  1C3C 0000               2512          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
0000216A                          2513          
0000216A  6000 0034               2514          BRA     DLOOPITER
0000216E                          2515  
0000216E                          2516  
0000216E                          2517  DINVALID
0000216E                          2518  
0000216E                          2519          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
0000216E                          2520          
0000216E  0C43 0001               2521          CMPI    #1,D3
00002172  6600 002C               2522          BNE     DLOOPITER
00002176                          2523          
00002176  163C 0000               2524          MOVE.B  #0,D3
0000217A                          2525          
0000217A  0C47 0001               2526          CMPI    #1,D7
0000217E  6D00 001E               2527          BLT     DLOOPITERCLR
00002182                          2528          
00002182  43F9 00002614           2529          LEA     ASCII_D,A1
00002188  103C 000E               2530          MOVE.B  #14,D0
0000218C  4E4F                    2531          TRAP    #15
0000218E                          2532          
0000218E  2205                    2533          MOVE.L  D5,D1
00002190                          2534          
00002190  0641 FFFF               2535          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
00002194                          2536          
00002194  103C 0003               2537          MOVE.B  #3,D0
00002198  4E4F                    2538          TRAP    #15
0000219A                          2539          
0000219A  6000 0004               2540          BRA     DLOOPITER
0000219E                          2541          
0000219E                          2542  DLOOPITERCLR        
0000219E  4287                    2543          CLR.L   D7
000021A0                          2544  
000021A0                          2545  DLOOPITER
000021A0                          2546          
000021A0  0C45 0008               2547          CMPI    #8,D5
000021A4  6700 0008               2548          BEQ     DLOOPDONE
000021A8                          2549  
000021A8  5245                    2550          ADDI    #1,D5
000021AA  6000 FF56               2551          BRA     DLOOP
000021AE                          2552  
000021AE                          2553  DLOOPDONE
000021AE                          2554  
000021AE  7A09                    2555          MOVE.L  #9,D5  * to be used as a loop counter
000021B0  4283                    2556          CLR.L   D3  * == 1 if we are in a range
000021B2  4286                    2557          CLR.L   D6  * == 1 if we have already printed the slash or dash
000021B4  4287                    2558          CLR.L   D7  * count of registers in a range
000021B6  1C3C 0001               2559          MOVE.B  #1,D6 * to fix fencepost issue     
000021BA                          2560  
000021BA                          2561  ALOOP * loop to print out the data register portion of the addresses being saved
000021BA                          2562  
000021BA  E25A                    2563          ROR     #1,D2
000021BC  6500 0006               2564          BCS     AVALID
000021C0                          2565          
000021C0  6000 0068               2566          BRA     AINVALID
000021C4                          2567          
000021C4                          2568  AVALID
000021C4  0C43 0000               2569          CMPI    #0,D3
000021C8  6700 0020               2570          BEQ     AFORWARDVALID * we are not in a range
000021CC                          2571          
000021CC  5247                    2572          ADDI    #1,D7 *increment number of regs in range
000021CE                          2573          
000021CE  0C46 0001               2574          CMPI    #1,D6   *have we already printed a symbol?
000021D2  6700 008C               2575          BEQ     ALOOPITER
000021D6                          2576          
000021D6  43F9 0000262C           2577          LEA     DASH,A1    *print a dash
000021DC  103C 000E               2578          MOVE.B  #14,D0
000021E0  4E4F                    2579          TRAP    #15
000021E2                          2580          
000021E2  1C3C 0001               2581          MOVE.B  #1,D6 * indicates a symbol has been printed
000021E6                          2582          
000021E6  6000 0078               2583          BRA     ALOOPITER
000021EA                          2584          
000021EA                          2585  AFORWARDVALID
000021EA                          2586          * not in a range yet, print
000021EA                          2587          
000021EA                          2588                  
000021EA  0C44 0000               2589          CMPI    #0,D4
000021EE  6700 000E               2590          BEQ     ANOSLASH
000021F2                          2591                  
000021F2  43F9 0000262A           2592          LEA     SLASH,A1
000021F8  103C 000E               2593          MOVE.B  #14,D0
000021FC  4E4F                    2594          TRAP    #15
000021FE                          2595          
000021FE                          2596  ANOSLASH
000021FE                          2597  
000021FE  183C 0001               2598          MOVE.B  #1,D4   * we have printed something, now slashes are fair game
00002202                          2599          
00002202  1C3C 0001               2600          MOVE.B  #1,D6   * we have printed a symbol
00002206                          2601          
00002206  43F9 0000260E           2602          LEA     ASCII_A,A1
0000220C  103C 000E               2603          MOVE.B  #14,D0
00002210  4E4F                    2604          TRAP    #15
00002212                          2605          
00002212  2205                    2606          MOVE.L  D5,D1
00002214                          2607          
00002214  0641 FFF8               2608          ADDI    #-8,D1 * it's A, need to adjust by 8
00002218                          2609          
00002218  103C 0003               2610          MOVE.B  #3,D0
0000221C  4E4F                    2611          TRAP    #15
0000221E                          2612  
0000221E  163C 0001               2613          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
00002222  1C3C 0000               2614          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
00002226                          2615          
00002226  6000 0038               2616          BRA     ALOOPITER
0000222A                          2617  
0000222A                          2618  
0000222A                          2619  AINVALID
0000222A                          2620  
0000222A                          2621          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
0000222A                          2622          
0000222A  0C43 0001               2623          CMPI    #1,D3
0000222E  6600 0030               2624          BNE     ALOOPITER
00002232                          2625          
00002232  163C 0000               2626          MOVE.B  #0,D3
00002236                          2627          
00002236  0C47 0001               2628          CMPI    #1,D7
0000223A  6D00 0022               2629          BLT     ALOOPITERCLR
0000223E                          2630          
0000223E  43F9 0000260E           2631          LEA     ASCII_A,A1
00002244  103C 000E               2632          MOVE.B  #14,D0
00002248  4E4F                    2633          TRAP    #15
0000224A                          2634          
0000224A  2205                    2635          MOVE.L  D5,D1
0000224C                          2636          
0000224C  0641 FFFF               2637          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
00002250  0641 FFF8               2638          ADDI    #-8,D1 * it's A, need to adjust by 8
00002254                          2639          
00002254  103C 0003               2640          MOVE.B  #3,D0
00002258  4E4F                    2641          TRAP    #15
0000225A                          2642          
0000225A  6000 0004               2643          BRA     ALOOPITER
0000225E                          2644          
0000225E                          2645  ALOOPITERCLR
0000225E                          2646          
0000225E  4287                    2647          CLR.L   D7
00002260                          2648  
00002260                          2649  ALOOPITER
00002260                          2650          
00002260  0C45 0010               2651          CMPI     #16,D5
00002264  6700 0008               2652          BEQ     ALOOPDONE
00002268                          2653  
00002268  5245                    2654          ADDI    #1,D5
0000226A  6000 FF4E               2655          BRA     ALOOP
0000226E                          2656  
0000226E                          2657  ALOOPDONE
0000226E                          2658          
0000226E  4C9F 7FFF               2659          MOVEM    (A7)+,D0-D7/A0-A6
00002272  4E75                    2660          RTS
00002274                          2661  
00002274                          2662          
00002274                          2663  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002274                          2664  *-----------------------------------------------------------------------------
00002274                          2665  
00002274                          2666  
00002274                          2667  
00002274                          2668  
00002274                          2669  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002274                          2670  *-----------------------------------------------------------------------------
00002274                          2671  *-----------------------------------------------------------------------------
00002274                          2672  * NAME:           MOVEMHELPERPRE
00002274                          2673  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
00002274                          2674  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
00002274                          2675  * POST-CONDITION: The registers being saved are printed
00002274                          2676  * REGISTERS:      A2
00002274                          2677  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002274                          2678  MOVEMHELPERPRE
00002274                          2679  
00002274  48A7 7F00               2680      MOVEM   D1-D7,-(A7)
00002278                          2681  
00002278  3412                    2682      MOVE.W  (A2),D2 * move the data we need to proccess into D2
0000227A  7800                    2683      MOVE.L  #0,D4
0000227C  4287                    2684      CLR.L    D7 * put the flipped bits here
0000227E                          2685      
0000227E                          2686      *the following block of code moves bits
0000227E                          2687      *into the same position they would be in if
0000227E                          2688      *the MOVEM was post inc, then simply uses post
0000227E                          2689      *inc to print the registers being saved
0000227E                          2690  PRELOOP
0000227E  E35A                    2691      ROL.W   #1,D2
00002280                          2692      
00002280  6500 0006               2693      BCS     PRESETBIT
00002284  6000 0004               2694      BRA     PRELOOPITER
00002288                          2695      
00002288                          2696  PRESETBIT
00002288  09C7                    2697      BSET    D4,D7
0000228A                          2698  
0000228A                          2699  PRELOOPITER
0000228A  0C44 000F               2700      CMPI    #15,D4
0000228E  6700 0006               2701      BEQ     PRELOOPDONE
00002292                          2702      
00002292  5244                    2703      ADDI    #1,D4
00002294  60E8                    2704      BRA     PRELOOP
00002296                          2705  
00002296                          2706  PRELOOPDONE
00002296                          2707  
00002296  3487                    2708      MOVE.W  D7,(A2)    
00002298  4C9F 00FE               2709      MOVEM   (A7)+,D1-D7
0000229C                          2710  
0000229C  6100 FE4E               2711      BSR MOVEMHELPERPOST
000022A0                          2712  
000022A0  4E75                    2713      RTS
000022A2                          2714  
000022A2                          2715  
000022A2                          2716  
000022A2                          2717          
000022A2                          2718  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000022A2                          2719  *-----------------------------------------------------------------------------
000022A2                          2720  
000022A2                          2721  
000022A2                          2722  
000022A2                          2723  *-----------------------------------------------------------------------------
000022A2                          2724  *-----------------------------------------------------------------------------
000022A2                          2725  * NAME:           UNKNOWNOP
000022A2                          2726  * DESCRIPTION:    a
000022A2                          2727  * PRE-CONDITION:  D2 contains the instruction to print. D2 has already been
000022A2                          2728  *                 identified as an unknown operation.
000022A2                          2729  * POST-CONDITION: D2 is no longer the opcode.
000022A2                          2730  * REGISTERS:      a
000022A2                          2731  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000022A2                          2732  UNKNOWNOP
000022A2  220A                    2733          MOVE.L  A2,D1   * Prep the add to print
000022A4  5581                    2734          SUB.L   #2,D1   * Off by two error due to post increment correct
000022A6  2602                    2735          MOVE.L  D2,D3   * Save the opcode to print
000022A8                          2736          
000022A8  7410                    2737          MOVE.L  #16,D2  * set the base to 16
000022AA  700F                    2738          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000022AC  4E4F                    2739          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000022AE                          2740          
000022AE  43F9 000025D0           2741          LEA     DATA,A1 * load " DATA $" into register A1
000022B4  700E                    2742          MOVE.L  #14,D0  * print the string stored in A1
000022B6  4E4F                    2743          TRAP    #15
000022B8                          2744          
000022B8  2203                    2745          MOVE.L  D3,D1   * move the opcode from D3 into D1 to print
000022BA  103C 000F               2746          MOVE.B  #15,D0   * Indicate we are using trap #15, 15 to in a certain #base
000022BE  4E4F                    2747          TRAP    #15      * Perform Trap #3
000022C0                          2748  
000022C0  43F9 00002575           2749          LEA     NEWLINE,A1 * load newline into register A1
000022C6  700E                    2750          MOVE.L  #14,D0  * print the string stored in A1
000022C8  4E4F                    2751          TRAP    #15
000022CA                          2752  
000022CA  4E75                    2753          RTS
000022CC                          2754  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000022CC                          2755  *-----------------------------------------------------------------------------
000022CC                          2756  
000022CC                          2757  
000022CC                          2758  
000022CC                          2759  *-----------------------------------------------------------------------------
000022CC                          2760  *-----------------------------------------------------------------------------
000022CC                          2761  * NAME: Print ASCII hex char
000022CC                          2762  * DESCRIPTION:    Prints and address register to console in hex (ASCII chars)
000022CC                          2763  * PRE-CONDITION:  A6 contains the register of memory to print.
000022CC                          2764  *                 This parameter would be pre-loaded by, for example:
000022CC                          2765  *                 "LEA FOO_BAR_ADDR,A6" or "LEA $1234FEED,A6"
000022CC                          2766  *                 D3 contains the loops to do (number of bytes).
000022CC                          2767  * POST-CONDITION: 
000022CC                          2768  * REGISTERS:      
000022CC                          2769  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000022CC                          2770  PRINT_ASCII_HEX_CHAR
000022CC  48E7 FFFC               2771      MOVEM.L     D0-D7/A0-A5,-(A7) * push data to save
000022D0  4285                    2772      CLR.L       D5
000022D2                          2773      
000022D2                          2774      * fence post check (if-statement, check if 0 > chars)
000022D2  0C03 0000               2775      CMPI.B      #0,D3
000022D6  6700 017C               2776      BEQ         INVALID_ASCII_INPUT * go to very last part if invalid
000022DA                          2777      
000022DA                          2778  *    MOVE.L      A6,D4
000022DA  2E0E                    2779      MOVE.L      A6,D7
000022DC                          2780  PRINT_ASCII_LOOP
000022DC                          2781  *    MOVE.L      A6,D7 * increase a6's pointer position ea. loop
000022DC                          2782  *    MOVE.L      D4,D7 * make a mutable copy
000022DC  E99F                    2783      ROL.L       #4,D7 * roll to next spot
000022DE  48E7 0100               2784      MOVEM.L     D7,-(A7) * save D7
000022E2                          2785  
000022E2  0287 0000000F           2786      ANDI.L      #HEX_VALUE_MASK_LONG,D7
000022E8                          2787      
000022E8  0C87 00000000           2788      CMPI.L      #0,D7
000022EE  6D00 0164               2789      BLT         INVALID_ASCII_INPUT
000022F2                          2790  
000022F2  0C87 0000000F           2791      CMPI.L      #15,D7
000022F8  6E00 015A               2792      BGT         INVALID_ASCII_INPUT
000022FC                          2793  
000022FC                          2794      * this might be faster... to do later, after entire assignment done
000022FC                          2795       * CMPI.L      #9,D7
000022FC                          2796       * BLE         PRINT_ASCII_0_TO_9
000022FC                          2797  
000022FC  0C87 00000000           2798      CMPI.L      #0,D7
00002302  6700 0098               2799      BEQ         PRINT_ASCII_0
00002306  0C87 00000001           2800      CMPI.L      #1,D7
0000230C  6700 0098               2801      BEQ         PRINT_ASCII_1
00002310  0C87 00000002           2802      CMPI.L      #2,D7
00002316  6700 0098               2803      BEQ         PRINT_ASCII_2
0000231A  0C87 00000003           2804      CMPI.L      #3,D7
00002320  6700 0098               2805      BEQ         PRINT_ASCII_3
00002324  0C87 00000004           2806      CMPI.L      #4,D7
0000232A  6700 0098               2807      BEQ         PRINT_ASCII_4
0000232E  0C87 00000005           2808      CMPI.L      #5,D7
00002334  6700 0098               2809      BEQ         PRINT_ASCII_5
00002338  0C87 00000006           2810      CMPI.L      #6,D7
0000233E  6700 0098               2811      BEQ         PRINT_ASCII_6
00002342  0C87 00000007           2812      CMPI.L      #7,D7
00002348  6700 0098               2813      BEQ         PRINT_ASCII_7
0000234C  0C87 00000008           2814      CMPI.L      #8,D7
00002352  6700 0098               2815      BEQ         PRINT_ASCII_8
00002356  0C87 00000009           2816      CMPI.L      #9,D7
0000235C  6700 0098               2817      BEQ         PRINT_ASCII_9
00002360  0C87 0000000A           2818      CMPI.L      #10,D7
00002366  6700 0098               2819      BEQ         PRINT_ASCII_A
0000236A  0C87 0000000B           2820      CMPI.L      #11,D7
00002370  6700 0098               2821      BEQ         PRINT_ASCII_B
00002374  0C87 0000000C           2822      CMPI.L      #12,D7
0000237A  6700 0098               2823      BEQ         PRINT_ASCII_C
0000237E  0C87 0000000D           2824      CMPI.L      #13,D7
00002384  6700 0098               2825      BEQ         PRINT_ASCII_D
00002388  0C87 0000000E           2826      CMPI.L      #14,D7
0000238E  6700 0098               2827      BEQ         PRINT_ASCII_E
00002392  0C87 0000000F           2828      CMPI.L      #15,D7
00002398  6700 0098               2829      BEQ         PRINT_ASCII_F
0000239C                          2830  PRINT_ASCII_0
0000239C  43F9 000025FA           2831      LEA         ASCII_0,A1
000023A2  6000 0098               2832      BRA         PRINT_ASCII_CHAR
000023A6                          2833  PRINT_ASCII_1
000023A6  43F9 000025FC           2834      LEA         ASCII_1,A1
000023AC  6000 008E               2835      BRA         PRINT_ASCII_CHAR
000023B0                          2836  PRINT_ASCII_2
000023B0  43F9 000025FE           2837      LEA         ASCII_2,A1
000023B6  6000 0084               2838      BRA         PRINT_ASCII_CHAR
000023BA                          2839  PRINT_ASCII_3
000023BA  43F9 00002600           2840      LEA         ASCII_3,A1
000023C0  6000 007A               2841      BRA         PRINT_ASCII_CHAR
000023C4                          2842  PRINT_ASCII_4
000023C4  43F9 00002602           2843      LEA         ASCII_4,A1
000023CA  6000 0070               2844      BRA         PRINT_ASCII_CHAR
000023CE                          2845  PRINT_ASCII_5
000023CE  43F9 00002604           2846      LEA         ASCII_5,A1
000023D4  6000 0066               2847      BRA         PRINT_ASCII_CHAR
000023D8                          2848  PRINT_ASCII_6
000023D8  43F9 00002606           2849      LEA         ASCII_6,A1
000023DE  6000 005C               2850      BRA         PRINT_ASCII_CHAR
000023E2                          2851  PRINT_ASCII_7
000023E2  43F9 00002608           2852      LEA         ASCII_7,A1
000023E8  6000 0052               2853      BRA         PRINT_ASCII_CHAR
000023EC                          2854  PRINT_ASCII_8
000023EC  43F9 0000260A           2855      LEA         ASCII_8,A1
000023F2  6000 0048               2856      BRA         PRINT_ASCII_CHAR
000023F6                          2857  PRINT_ASCII_9
000023F6  43F9 0000260C           2858      LEA         ASCII_9,A1
000023FC  6000 003E               2859      BRA         PRINT_ASCII_CHAR
00002400                          2860  PRINT_ASCII_A
00002400  43F9 0000260E           2861      LEA         ASCII_A,A1
00002406  6000 0034               2862      BRA         PRINT_ASCII_CHAR
0000240A                          2863  PRINT_ASCII_B
0000240A  43F9 00002610           2864      LEA         ASCII_B,A1
00002410  6000 002A               2865      BRA         PRINT_ASCII_CHAR
00002414                          2866  PRINT_ASCII_C
00002414  43F9 00002612           2867      LEA         ASCII_C,A1
0000241A  6000 0020               2868      BRA         PRINT_ASCII_CHAR
0000241E                          2869  PRINT_ASCII_D
0000241E  43F9 00002614           2870      LEA         ASCII_D,A1
00002424  6000 0016               2871      BRA         PRINT_ASCII_CHAR
00002428                          2872  PRINT_ASCII_E
00002428  43F9 00002616           2873      LEA         ASCII_E,A1
0000242E  6000 000C               2874      BRA         PRINT_ASCII_CHAR
00002432                          2875  PRINT_ASCII_F
00002432  43F9 00002618           2876      LEA         ASCII_F,A1
00002438  6000 0002               2877      BRA         PRINT_ASCII_CHAR
0000243C                          2878  PRINT_ASCII_CHAR
0000243C  103C 000E               2879      MOVE.B      #14,D0
00002440  4E4F                    2880      TRAP        #15
00002442                          2881      
00002442                          2882          
00002442  4287                    2883      CLR.L       D7
00002444  4CDF 0080               2884      MOVEM.L     (A7)+,D7 * copy back D7 from stack, to mutate its' bits
00002448                          2885      
00002448  5205                    2886      ADD.B       #1,D5 * loop until counter stops
0000244A  BA03                    2887      CMP.B       D3,D5
0000244C  6C00 0006               2888      BGE         PRINT_ASCII_FINISH
00002450                          2889      
00002450  6000 FE8A               2890      BRA         PRINT_ASCII_LOOP
00002454                          2891  INVALID_ASCII_INPUT
00002454                          2892  PRINT_ASCII_FINISH
00002454  4CDF 3FFF               2893      MOVEM.L     (A7)+,D0-D7/A0-A5 * pop saved memory
00002458  4E75                    2894      RTS
0000245A                          2895      
0000245A                          2896  PRINTDATA911
0000245A  0C46 0E00               2897      CMPI    #%0000111000000000, D6   * Print 7
0000245E  6700 003C               2898      BEQ     PRINT7   
00002462  0C46 0C00               2899      CMPI    #%0000110000000000, D6   * Print 6
00002466  6700 0042               2900      BEQ     PRINT6
0000246A  0C46 0A00               2901      CMPI    #%0000101000000000, D6   * Print 5
0000246E  6700 0048               2902      BEQ     PRINT5
00002472  0C46 0800               2903      CMPI    #%0000100000000000, D6   * Print 4
00002476  6700 004E               2904      BEQ     PRINT4 
0000247A  0C46 0600               2905      CMPI    #%0000011000000000, D6   * Print 3
0000247E  6700 0054               2906      BEQ     PRINT3    
00002482  0C46 0400               2907      CMPI    #%0000010000000000, D6   * Print 2
00002486  6700 005A               2908      BEQ     PRINT2   
0000248A  0C46 0200               2909      CMPI    #%0000001000000000, D6   * Print 1
0000248E  6700 0060               2910      BEQ     PRINT1     
00002492  0C46 0000               2911      CMPI    #%0000000000000000, D6   * Print 0
00002496  6700 0066               2912      BEQ     PRINT8
0000249A                          2913      
0000249A  4E75                    2914      RTS                             * Fail case  
0000249C                          2915      
0000249C                          2916  PRINT7
0000249C  43F9 00002608           2917      LEA     ASCII_7, A1
000024A2  103C 000E               2918      MOVE.B      #14,D0
000024A6  4E4F                    2919      TRAP        #15
000024A8  4E75                    2920      RTS
000024AA                          2921      
000024AA                          2922  PRINT6
000024AA  43F9 00002606           2923      LEA     ASCII_6, A1
000024B0  103C 000E               2924      MOVE.B      #14,D0
000024B4  4E4F                    2925      TRAP        #15
000024B6  4E75                    2926      RTS
000024B8                          2927      
000024B8                          2928  PRINT5
000024B8  43F9 00002604           2929      LEA     ASCII_5, A1
000024BE  103C 000E               2930      MOVE.B      #14,D0
000024C2  4E4F                    2931      TRAP        #15
000024C4  4E75                    2932      RTS
000024C6                          2933      
000024C6                          2934  PRINT4
000024C6  43F9 00002602           2935      LEA     ASCII_4, A1
000024CC  103C 000E               2936      MOVE.B      #14,D0
000024D0  4E4F                    2937      TRAP        #15
000024D2  4E75                    2938      RTS
000024D4                          2939      
000024D4                          2940  PRINT3
000024D4  43F9 00002600           2941      LEA     ASCII_3, A1
000024DA  103C 000E               2942      MOVE.B      #14,D0
000024DE  4E4F                    2943      TRAP        #15
000024E0  4E75                    2944      RTS
000024E2                          2945      
000024E2                          2946  PRINT2
000024E2  43F9 000025FE           2947      LEA     ASCII_2, A1
000024E8  103C 000E               2948      MOVE.B      #14,D0
000024EC  4E4F                    2949      TRAP        #15
000024EE  4E75                    2950      RTS
000024F0                          2951      
000024F0                          2952  PRINT1
000024F0  43F9 000025FC           2953      LEA     ASCII_1, A1
000024F6  103C 000E               2954      MOVE.B      #14,D0
000024FA  4E4F                    2955      TRAP        #15
000024FC  4E75                    2956      RTS
000024FE                          2957          
000024FE                          2958  PRINT8
000024FE  43F9 0000260A           2959      LEA     ASCII_8, A1
00002504  103C 000E               2960      MOVE.B      #14,D0
00002508  4E4F                    2961      TRAP        #15
0000250A  4E75                    2962      RTS
0000250C                          2963  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000250C                          2964  *-----------------------------------------------------------------------------
0000250C                          2965  
0000250C                          2966  
0000250C                          2967  
0000250C                          2968  *-----------------------------------------------------------------------------
0000250C                          2969  *-----------------------------------------------------------------------------
0000250C                          2970  * NAME: Bitmask
0000250C                          2971  * DESCRIPTION:    Masks bits in a data register.
0000250C                          2972  * PRE-CONDITION:  D6 contains the starting bit to be masked, and D7 contains
0000250C                          2973  *                 the ending bit.  For example, a starting bit of decimal
0000250C                          2974  *                 value 0 and an ending bit of decimal value 3 will mask the
0000250C                          2975  *                 bits 0, 1, 2, and 3.
0000250C                          2976  * POST-CONDITION: D6 contains the bitmask, ready for use.
0000250C                          2977  * REGISTERS:      D5,D6,D7
0000250C                          2978  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000250C                          2979  BITMASK
0000250C  3F05                    2980          MOVE    D5,-(A7)    * push D5 onto the stack so we can use it to
0000250E  4245                    2981          CLR     D5          * clear D5 so we can use it
00002510                          2982  LOOPBIT 
00002510  0DC5                    2983          BSET    D6,D5       * set the D6th bit in D5 to 1
00002512  5246                    2984          ADD     #1,D6       * increment D6
00002514                          2985  
00002514  BC47                    2986          CMP     D7,D6       * have we finished?
00002516  6E00 0004               2987          BGT     BITMASKDONE * yes
0000251A  60F4                    2988          BRA     LOOPBIT     * no, iterate again
0000251C                          2989  
0000251C                          2990  BITMASKDONE
0000251C  2C05                    2991          MOVE.L  D5,D6
0000251E  3A1F                    2992          MOVE    (A7)+,D5    * restore D5
00002520  4E75                    2993          RTS
00002522                          2994  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002522                          2995  *-----------------------------------------------------------------------------
00002522                          2996  
00002522                          2997  
00002522                          2998  
00002522                          2999  *-----------------------------------------------------------------------------
00002522                          3000  *-----------------------------------------------------------------------------
00002522                          3001  * SECTION: Constants/variables used throughout the program.
00002522                          3002  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002522                          3003  
00002522                          3004  * ---> GENERAL
00002522  =0000000D               3005  CR          EQU     $0D
00002522  =0000000A               3006  LF          EQU     $0A
00002522= 45 4E 54 45 52 20 ...   3007  MSGSTART    DC.B    'ENTER START ADDRESS: ',CR,LF,0
0000253A= 45 4E 54 45 52 20 ...   3008  MSGEND      DC.B    'ENTER END ADDRESS: ',CR,LF,0
00002550= 48 69 74 20 74 68 ...   3009  CONT_MSG    DC.B    'Hit the [ENTER] key to continue...',CR,LF,0
00002575= 0D 0A 00                3010  NEWLINE     DC.B    CR,LF,0
00002578                          3011  
00002578                          3012  * ---> OPS
00002578= 44 49 56 53 00          3013  DIVSOP      DC.B    'DIVS',0
0000257D= 4E 4F 50 00             3014  NOOPERATION DC.B    'NOP',0
00002581= 4E 45 47 00             3015  NEGOP       DC.B    'NEG',0
00002585= 4D 4F 56 45 00          3016  MOVEOP      DC.B    'MOVE',0
0000258A= 4D 4F 56 45 4D 00       3017  MOVEMOP     DC.B    'MOVEM',0
00002590= 4A 53 52 00             3018  JSROP       DC.B    'JSR',0
00002594= 52 54 53 00             3019  RTSOP       DC.B    'RTS',0
00002598= 53 55 42 51 00          3020  SUBQOP      DC.B    'SUBQ',0
0000259D= 4C 45 41 00             3021  LEAOP       DC.B    'LEA',0
000025A1= 42 43 4C 52 20 00       3022  BCLROP      DC.B    'BCLR ',0
000025A7= 4D 55 4C 53 00          3023  MULSOP      DC.B    'MULS',0
000025AC= 4F 52 00                3024  OROP        DC.B    'OR',0
000025AF= 4F 52 49 00             3025  ORIOP       DC.B    'ORI',0
000025B3= 43 4D 50 49 00          3026  CMPIOP      DC.B    'CMPI',0
000025B8= 4C 53 4C 00             3027  LSLOP       DC.B    'LSL',0
000025BC= 4C 53 52 00             3028  LSROP       DC.B    'LSR',0
000025C0= 41 53 4C 00             3029  ASLOP       DC.B    'ASL',0
000025C4= 41 53 52 00             3030  ASROP       DC.B    'ASR',0
000025C8= 52 4F 4C 00             3031  ROLOP       DC.B    'ROL',0
000025CC= 52 4F 52 00             3032  ROROP       DC.B    'ROR',0
000025D0= 20 44 41 54 41 20 ...   3033  DATA        DC.B    ' DATA $',0
000025D8= 42 43 43 20 00          3034  OP_BCC_MSG  DC.B    'BCC ',0
000025DD= 42 43 53 20 00          3035  OP_BCS_MSG  DC.B    'BCS ',0
000025E2= 42 47 45 20 00          3036  OP_BGE_MSG  DC.B    'BGE ',0
000025E7= 42 4C 54 20 00          3037  OP_BLT_MSG  DC.B    'BLT ',0
000025EC= 42 56 43 20 00          3038  OP_BVC_MSG  DC.B    'BVC ',0
000025F1= 42 52 41 20 00          3039  OP_BRA_MSG  DC.B    'BRA ',0
000025F6= 41 44 44 00             3040  OP_ADD_MSG  DC.B    'ADD',0
000025FA                          3041  
000025FA                          3042  * ---> HEX CHARS
000025FA= 30 00                   3043  ASCII_0     DC.B    '0',0
000025FC= 31 00                   3044  ASCII_1     DC.B    '1',0
000025FE= 32 00                   3045  ASCII_2     DC.B    '2',0
00002600= 33 00                   3046  ASCII_3     DC.B    '3',0
00002602= 34 00                   3047  ASCII_4     DC.B    '4',0
00002604= 35 00                   3048  ASCII_5     DC.B    '5',0
00002606= 36 00                   3049  ASCII_6     DC.B    '6',0
00002608= 37 00                   3050  ASCII_7     DC.B    '7',0
0000260A= 38 00                   3051  ASCII_8     DC.B    '8',0
0000260C= 39 00                   3052  ASCII_9     DC.B    '9',0
0000260E= 41 00                   3053  ASCII_A     DC.B    'A',0
00002610= 42 00                   3054  ASCII_B     DC.B    'B',0
00002612= 43 00                   3055  ASCII_C     DC.B    'C',0
00002614= 44 00                   3056  ASCII_D     DC.B    'D',0
00002616= 45 00                   3057  ASCII_E     DC.B    'E',0
00002618= 46 00                   3058  ASCII_F     DC.B    'F',0
0000261A                          3059  
0000261A                          3060  * ---> SPECIAL CHARACTERS
0000261A= 20 00                   3061  SPACE       DC.B    ' ',0
0000261C= 24 00                   3062  DOLLAR      DC.B    '$',0
0000261E= 23 00                   3063  IMD         DC.B    '#',0
00002620= 2C 00                   3064  COMMA       DC.B    ',',0
00002622= 28 00                   3065  OBRACK      DC.B    '(',0
00002624= 29 00                   3066  CBRACK      DC.B    ')',0
00002626= 2B 00                   3067  PLUS        DC.B    '+',0
00002628= 2D 00                   3068  MINUS       DC.B    '-',0
0000262A= 2F 00                   3069  SLASH       DC.B    '/',0
0000262C= 2D 00                   3070  DASH        DC.B    '-',0
0000262E                          3071  
0000262E                          3072  * ---> B/W/L (BYTE, WORD, LONG, RESPECTIVELY)
0000262E= 2E 42 20 00             3073  __B         DC.B    '.B ',0
00002632= 2E 57 20 00             3074  __W         DC.B    '.W ',0
00002636= 2E 4C 20 00             3075  __L         DC.B    '.L ',0
0000263A                          3076  
0000263A                          3077  * ---> ADDRESS REGISTERS A0-A7
0000263A= 41 30 00                3078  __A0        DC.B   'A0',0
0000263D= 41 31 00                3079  __A1        DC.B   'A1',0    
00002640= 41 32 00                3080  __A2        DC.B   'A2',0
00002643= 41 33 00                3081  __A3        DC.B   'A3',0
00002646= 41 34 00                3082  __A4        DC.B   'A4',0
00002649= 41 35 00                3083  __A5        DC.B   'A5',0
0000264C= 41 36 00                3084  __A6        DC.B   'A6',0
0000264F= 41 37 00                3085  __A7        DC.B   'A7',0
00002652                          3086  
00002652                          3087  * ---> DATA REGISTERS D0-D7
00002652= 44 30 00                3088  __D0        DC.B   'D0',0
00002655= 44 31 00                3089  __D1        DC.B   'D1',0
00002658= 44 32 00                3090  __D2        DC.B   'D2',0
0000265B= 44 33 00                3091  __D3        DC.B   'D3',0
0000265E= 44 34 00                3092  __D4        DC.B   'D4',0
00002661= 44 35 00                3093  __D5        DC.B   'D5',0
00002664= 44 36 00                3094  __D6        DC.B   'D6',0
00002667= 44 37 00                3095  __D7        DC.B   'D7',0
0000266A                          3096  
0000266A                          3097  __COUNTER   DS.B    1       * main loop counter
0000266B                          3098  
0000266B                          3099  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000266B                          3100  *-----------------------------------------------------------------------------
0000266B                          3101  
0000266B                          3102  
0000266B                          3103  
0000266B                          3104  *-----------------------------------------------------------------------------
0000266B                          3105  *-----------------------------------------------------------------------------
0000266B                          3106  * SECTION: Sample program to run, then attempt testing disassembly on.
0000266B                          3107  * STARTING: 16384
0000266B                          3108  * ENDING:   16420
0000266B                          3109  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00004000                          3110      ORG $4000
00004000                          3111      
00004000  4E71                    3112      NOP
00004002  103C 009A               3113      MOVE.B   #%10011010, D0
00004006  123C 00A9               3114      MOVE.B   #%10101001, D1
0000400A  D200                    3115      ADD.B    D0,D1
0000400C  4C9F 3C1A               3116      MOVEM    (A7)+,A2-A5/D1/D3-D4
00004010  43F8 2590               3117      LEA      JSROP,A1
00004014  4467                    3118      NEG.W    -(A7)
00004016  4EB9 00004064           3119      JSR      END
0000401C  81FC 0001               3120      DIVS    #1, D0
00004020  0181                    3121      BCLR    D0, D1
00004022  CFFC 0003               3122      MULS.W  #3, D7
00004026  CFC0                    3123      MULS    D0, D7
00004028  C5D9                    3124      MULS    (A1)+, D2
0000402A  4E71                    3125      NOP
0000402C  5146                    3126      SUBQ    #8, D6
0000402E  4E71                    3127      NOP
00004030  5F81                    3128      SUBQ.L  #7, D1
00004032  4E71                    3129      NOP
00004034  0041 0004               3130      ORI     #4, D1
00004038  4E71                    3131      NOP
0000403A  E389                    3132      LSL.L   #1,D1
0000403C  4E71                    3133      NOP
0000403E  E489                    3134      LSR.L   #2,D1
00004040  4E71                    3135      NOP
00004042  E781                    3136      ASL.L   #3,D1
00004044  4E71                    3137      NOP
00004046  E881                    3138      ASR.L   #4,D1
00004048  4E71                    3139      NOP
0000404A  EB99                    3140      ROL.L   #5,D1
0000404C  4E71                    3141      NOP
0000404E  E099                    3142      ROR.L   #8,D1
00004050  4E71                    3143      NOP
00004052  0881 0002               3144      BCLR    #2,D1
00004056  4E71                    3145      NOP
00004058  DAC1                    3146      ADDA.W  D1,A5
0000405A  4E71                    3147      NOP
0000405C  D803                    3148      ADD.B   D3,D4
0000405E  4E71                    3149      NOP
00004060  6000 0004               3150      BRA     RLLYEND
00004064                          3151  
00004064                          3152  END
00004064  4E75                    3153      RTS
00004066                          3154      
00004066                          3155  RLLYEND
00004066                          3156      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_LONG_OP        1A74
ADDA_PRT            1AB0
ADDA_WORD_OP        1A0C
ADD_ADDA_END        1AE0
ADD_ADDA_PRINT      1AC8
ADD_ADDA_SPACE      1AA2
ADD_EA_DN_GENERIC   1A94
AFORWARDVALID       21EA
AINVALID            222A
ALOOP               21BA
ALOOPDONE           226E
ALOOPITER           2260
ALOOPITERCLR        225E
ANOSLASH            21FE
AS                  1B56
ASCII_0             25FA
ASCII_1             25FC
ASCII_2             25FE
ASCII_3             2600
ASCII_4             2602
ASCII_5             2604
ASCII_6             2606
ASCII_7             2608
ASCII_8             260A
ASCII_9             260C
ASCII_A             260E
ASCII_B             2610
ASCII_C             2612
ASCII_D             2614
ASCII_E             2616
ASCII_F             2618
ASL                 1B6C
ASLOP               25C0
ASR                 1B7C
ASROP               25C4
AVALID              21C4
BCC_BYTE_OFFSET     181A
BCC_END             1836
BCLROP              25A1
BITMASK             250C
BITMASKDONE         251C
BYTE_DN_EA          1A2C
BYTE_EA_DN          19C4
CBRACK              2624
CLEAR_SCREEN        11AE
CMPIOP              25B3
COMMA               2620
CONT_MSG            2550
CR                  D
DASH                262C
DATA                25D0
DFORWARDVALID       2132
DINVALID            216E
DIVSOP              2578
DLOOP               2102
DLOOPDONE           21AE
DLOOPITER           21A0
DLOOPITERCLR        219E
DNOSLASH            2146
DOLLAR              261C
DONE0100            16FC
DVALID              210C
EAHELPER05          1CD0
EAHELPER611         1C8E
END                 4064
END0000             135C
END67               2064
ENDEAHELPER05       1E20
ENDEAHELPER611      1CCA
ENDMODE_AN          1FB0
ENDMODE_DN          1EB0
ENDOP0001           13C2
ENDOP1110           1C76
END_OF_LOOP         1182
HEX_VALUE_MASK_LONG  F
IDLE_STATE          118C
IMD                 261E
INVALID_ASCII_INPUT  2454
ITERATION           116A
JSROP               2590
LEAOP               259D
LF                  A
LONG_DN_EA          1A5C
LONG_EA_DN          19F4
LOOP                104C
LOOPBIT             2510
LOOPUNKNOWNOP       1166
LS                  1B20
LSL                 1B36
LSLOP               25B8
LSR                 1B46
LSROP               25BC
MINUS               2628
MODE_AN             1F26
MODE_DN             1E26
MOVEMHELPERPOST     20EC
MOVEMHELPERPRE      2274
MOVEMOP             258A
MOVEMTOMEM          150C
MOVEMTOREG          1472
MOVEOP              2585
MSGEND              253A
MSGSTART            2522
MULSOP              25A7
NEGOP               2581
NEWLINE             2575
NOOPERATION         257D
NOT0000             1076
NOT0001             1086
NOT0010             1096
NOT0011             10A6
NOT0100             10B6
NOT0101             10C6
NOT0110             10D6
NOT0111             10E6
NOT1000             10F6
NOT1001             1106
NOT1010             1116
NOT1011             1126
NOT1100             1136
NOT1101             1146
NOT1110             1156
NOT67BYTE           2048
NOT67WORD           2058
NOTA0               1F48
NOTA1               1F58
NOTA2               1F68
NOTA3               1F78
NOTA4               1F88
NOTA5               1F98
NOTA6               1FA8
NOTADRDIRECT        1D00
NOTADRINDIRECT      1D28
NOTADRINDIRECTPOST  1D5C
NOTADRINDIRECTPRE   1D90
NOTBCLR             129C
NOTBCLRDYNA         1238
NOTD0               1E48
NOTD1               1E58
NOTD2               1E68
NOTD3               1E78
NOTD4               1E88
NOTD5               1E98
NOTD6               1EA8
NOTDATAREG          1CF0
NOTDIVS             18C0
NOTIMMBYTE          1DC6
NOTIMMEDIATE        1E1C
NOTIMMWORD          1DF4
NOTJSR              15F4
NOTLONGMOVEM1       14DA
NOTLONGMOVEM2       1574
NOTMOVEM            15A6
NOTNEG              144E
NOTNOP              13F8
NOTORI              1350
NOTRTS              1616
OBRACK              2622
OP0000              11BA
OP0001              1362
OP0010              13C8
OP0011              13CE
OP0100              13DC
OP0101              1706
OP0110              1774
OP0111              183C
OP1000              1842
OP1000END           18D0
OP1001              18D6
OP1010              18D6
OP1011              18DC
OP1100              18E2
OP1101              196C
OP1110              1AF2
OP1110DATAREG       1C4A
OP1110GENERIC       1BC2
OP1110IMMEIGHT      1C22
OP1111              1C88
OP_0000             0
OP_0001             1000
OP_0010             2000
OP_0011             3000
OP_0100             4000
OP_0101             5000
OP_0110             6000
OP_0111             7000
OP_1000             8000
OP_1001             9000
OP_1010             A000
OP_1011             B000
OP_1100             C000
OP_1101             D000
OP_1110             E000
OP_1111             F000
OP_ADD_MSG          25F6
OP_BCC              17BE
OP_BCC_MSG          25D8
OP_BCS              17C8
OP_BCS_MSG          25DD
OP_BGE              17D2
OP_BGE_MSG          25E2
OP_BLT              17DC
OP_BLT_MSG          25E7
OP_BRA              17F0
OP_BRANCHES_PRINT   17FA
OP_BRA_MSG          25F1
OP_BVC              17E6
OP_BVC_MSG          25EC
ORIOP               25AF
OROP                25AC
PLUS                2626
PRELOOP             227E
PRELOOPDONE         2296
PRELOOPITER         228A
PRESETBIT           2288
PRINT1              24F0
PRINT2              24E2
PRINT3              24D4
PRINT4              24C6
PRINT5              24B8
PRINT6              24AA
PRINT7              249C
PRINT8              24FE
PRINTA0             1FB6
PRINTA1             1FC4
PRINTA2             1FD2
PRINTA3             1FE0
PRINTA4             1FEE
PRINTA5             1FFC
PRINTA6             200A
PRINTA7             2018
PRINTBYTE           20C2
PRINTD0             1EB6
PRINTD1             1EC4
PRINTD2             1ED2
PRINTD3             1EE0
PRINTD4             1EEE
PRINTD5             1EFC
PRINTD6             1F0A
PRINTD7             1F18
PRINTDATA911        245A
PRINTLONG           20DE
PRINTWORD           20D0
PRINT_ASCII_0       239C
PRINT_ASCII_1       23A6
PRINT_ASCII_2       23B0
PRINT_ASCII_3       23BA
PRINT_ASCII_4       23C4
PRINT_ASCII_5       23CE
PRINT_ASCII_6       23D8
PRINT_ASCII_7       23E2
PRINT_ASCII_8       23EC
PRINT_ASCII_9       23F6
PRINT_ASCII_A       2400
PRINT_ASCII_B       240A
PRINT_ASCII_C       2414
PRINT_ASCII_CHAR    243C
PRINT_ASCII_D       241E
PRINT_ASCII_E       2428
PRINT_ASCII_F       2432
PRINT_ASCII_FINISH  2454
PRINT_ASCII_HEX_CHAR  22CC
PRINT_ASCII_LOOP    22DC
RLLYEND             4066
RO                  1B8C
ROL                 1BA2
ROLOP               25C8
ROR                 1BB2
ROROP               25CC
RTSOP               2594
SIZE67              2026
SIZE68              206A
SKIPLONG            132E
SKIPNOTLONG1        14E6
SKIPNOTLONG2        1580
SLASH               262A
SPACE               261A
START               1000
SUBQOP              2598
TWOWORDLEA          16A6
UNKNOWN0000         1358
UNKNOWN0100         16F8
UNKNOWN0101         176E
UNKNOWN1100         1962
UNKNOWNOP           22A2
UNKNOWNOP0001       13BE
WORD_DN_EA          1A44
WORD_EA_DN          19DC
__A0                263A
__A1                263D
__A2                2640
__A3                2643
__A4                2646
__A5                2649
__A6                264C
__A7                264F
__B                 262E
__COUNTER           266A
__D0                2652
__D1                2655
__D2                2658
__D3                265B
__D4                265E
__D5                2661
__D6                2664
__D7                2667
__L                 2636
__W                 2632
