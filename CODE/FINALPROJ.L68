00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/11/2014 7:47:57 PM

00000000                             1  *    666
00000000                             2  *   66 66
00000000                             3  *  66   66
00000000                             4  *  66   66         8888
00000000                             5  *  66   66       88   kkkk
00000000                             6  *  66  66       8   88   kk      
00000000                             7  *   66  6      8  88  kkk  kk    
00000000                             8  *    66  6    8  88     kk  k
00000000                             9  *     66 66  88 88        kk
00000000                            10  *     6 _______ 8
00000000                            11  *    6    68k    8
00000000                            12  *   6_____PRO_____8
00000000                            13  *  6               8        68k is as easy as
00000000                            14  *  6    0     0    8        6 - 8 - k !
00000000                            15  *  6   /   V   \   8 
00000000                            16  *  6   \__/ \__/   8        Welcome to our Dissasembler, Professor Nash!
00000000                            17  *    6            8         Enjoy your stay!
00000000                            18  *      6        8      
00000000                            19  *        666888
00000000                            20  *  _____                   __    ___  _    
00000000                            21  * | ____|__ _ ___ _   _   / /_  ( _ )| | __
00000000                            22  * |  _| / _` / __| | | | | '_ \ / _ \| |/ /
00000000                            23  * | |__| (_| \__ \ |_| | | (_) | (_) |   < 
00000000                            24  * |_____\__,_|___/\__, |  \___/ \___/|_|\_\
00000000                            25  *                 |___/           
00000000                            26  *-----------------------------------------------------------
00000000                            27  * Title      : 68K Decompiler
00000000                            28  * Written by : Nick Bell, Sammy Nimnuch, Caleb Larson
00000000                            29  * Date       : 11/2014
00000000                            30  * Description: This program decompiles other 68K programs
00000000                            31  *              which are loaded into the simulator simultaneously.
00000000                            32  *-----------------------------------------------------------
00000000                            33  
00000000                            34  
00000000  =00000000                 35  OP_0000     EQU     %0000000000000000
00000000  =00001000                 36  OP_0001     EQU     %0001000000000000
00000000  =00002000                 37  OP_0010     EQU     %0010000000000000
00000000  =00003000                 38  OP_0011     EQU     %0011000000000000
00000000  =00004000                 39  OP_0100     EQU     %0100000000000000
00000000  =00005000                 40  OP_0101     EQU     %0101000000000000
00000000  =00006000                 41  OP_0110     EQU     %0110000000000000
00000000  =00007000                 42  OP_0111     EQU     %0111000000000000
00000000  =00008000                 43  OP_1000     EQU     %1000000000000000
00000000  =00009000                 44  OP_1001     EQU     %1001000000000000
00000000  =0000A000                 45  OP_1010     EQU     %1010000000000000
00000000  =0000B000                 46  OP_1011     EQU     %1011000000000000
00000000  =0000C000                 47  OP_1100     EQU     %1100000000000000
00000000  =0000D000                 48  OP_1101     EQU     %1101000000000000
00000000  =0000E000                 49  OP_1110     EQU     %1110000000000000
00000000  =0000F000                 50  OP_1111     EQU     %1111000000000000
00000000  =0000000F                 51  HEX_VALUE_MASK_LONG EQU     $0000000F  * mask a hex value in 32-bits
00000000                            52  
00000000                            53  * BITMASK     EQU     $F000       * used to bitmask the first nibble
00000000                            54  
00001000                            55  START:  ORG    $1000            * first instruction of program
00001000                            56  
00001000                            57  * -----------------------------------
00001000                            58  * Starting and Ending Addresses
00001000                            59  * -----------------------------------
00001000                            60  *-----------------------------------------------------------------------------
00001000                            61  *-----------------------------------------------------------------------------
00001000                            62  * NAME: x
00001000                            63  * DESCRIPTION:    a
00001000                            64  * PRE-CONDITION:  b
00001000                            65  * POST-CONDITION: c
00001000                            66  * REGISTERS:      d
00001000                            67  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001000                            68  
00001000                            69  * THINK ABOUT ASKING FOR VALID START/END NO NEGATIVE ADDR
00001000                            70  
00001000                            71  * LOAD MSGSTART, ASK FOR INPUT
00001000  43F9 000025C0             72          LEA     MSGSTART,A1     * Load MESSAGE START
00001006  103C 000E                 73          MOVE.B  #14,D0          * Trap #14 to display message
0000100A  4E4F                      74          TRAP    #15             * Perform #14
0000100C                            75          
0000100C                            76  * GETS THE STARTING ADDRESS
0000100C  103C 0004                 77          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001010  4E4F                      78          TRAP    #15             * Perform #15
00001012                            79          
00001012                            80  * MOVE IT TO ANOTHER ADDRESS REGISTER
00001012  2441                      81          MOVEA.L D1,A2           * Move the user input into A2. This is the starting address.
00001014                            82  
00001014                            83  * LOAD MSGSTART, ASK FOR INPUT
00001014  43F9 000025D8             84          LEA     MSGEND,A1       * Load MESSAGE END
0000101A  303C 000E                 85          MOVE.W  #14,D0          * Trap #14 to display message
0000101E  4E4F                      86          TRAP    #15             * Perform #14
00001020                            87          
00001020                            88  * GETS THE ENDING ADDRESS
00001020  103C 0004                 89          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001024  4E4F                      90          TRAP    #15             * Perform Trap #4
00001026  2A01                      91          MOVE.L  D1,D5           * Move the ending address into D5
00001028  43F9 00002613             92          LEA     NEWLINE,A1      * Store newline variable for seper opcodes
0000102E                            93          
0000102E  3E3C 000F                 94          MOVE.W  #15,D7          * prep D7 for bitmask subroutine
00001032  3C3C 000C                 95          MOVE.W  #12,D6          * prep D6 for bitmask subroutine
00001036  6100 1572                 96          BSR     BITMASK         * obtain a bitmask that goes from 12-15 (inclusive)
0000103A                            97          * MOVE.W  D6,D2           * move the bitmask to D2
0000103A                            98          
0000103A  4279 00002710             99          CLR     (__COUNTER)              * setup the counter
00001040  33FC 0000 00002710       100          MOVE    #0,(__COUNTER)           
00001048                           101          
00001048  6100 0164                102          BSR     CLEAR_SCREEN    * clear the prompt for start/end ADDR's
0000104C                           103  LOOP    
0000104C  2C4A                     104          MOVE.L  A2,A6
0000104E  7608                     105          MOVE.L  #8,D3
00001050  6100 1318                106          BSR     PRINT_ASCII_HEX_CHAR
00001054                           107          
00001054                           108          *MOVE.W  A2,D1           * print what address we are processing
00001054                           109          *MOVE.B  #3,D0
00001054                           110          *TRAP    #15
00001054                           111          
00001054  43F9 000026C0            112          LEA     SPACE,A1        * print a space to seperate the address from the data
0000105A  303C 000E                113          MOVE.W  #14,D0
0000105E  4E4F                     114          TRAP    #15
00001060                           115  
00001060  3F06                     116          MOVE    D6,-(A7)        * save the bitmask on the stack
00001062  341A                     117          MOVE.W  (A2)+,D2        * Read an operation into D2
00001064  CC42                     118          AND.W   D2,D6           * Apply this bitmask
00001066                           119          
00001066  BC7C 0000                120          CMP     #OP_0000,D6     * Does the operation start with 0000?
0000106A  6600 000A                121          BNE     NOT0000         * No, check next case
0000106E  6100 014A                122          BSR     OP0000          * Branch to subroutine 0000
00001072  6000 00F6                123          BRA     ITERATION       * Move to next iteration of the loop
00001076                           124  NOT0000        
00001076  BC7C 1000                125          CMP     #OP_0001,D6     * Does the operation start with 0001?
0000107A  6600 000A                126          BNE     NOT0001         * No, check next case
0000107E  6100 02C4                127          BSR     OP0001          * Branch to subroutine 0001
00001082  6000 00E6                128          BRA     ITERATION       * Move to next iteration of the loop
00001086                           129  NOT0001
00001086  BC7C 2000                130          CMP     #OP_0010,D6     * Does the operation start with 0010?
0000108A  6600 000A                131          BNE     NOT0010         * No, check next case
0000108E  6100 031A                132          BSR     OP0010          * Branch to subroutine 0010
00001092  6000 00D6                133          BRA     ITERATION       * Move to next iteration of the loop
00001096                           134  NOT0010
00001096  BC7C 3000                135          CMP     #OP_0011,D6     * Does the operation start with 0011?
0000109A  6600 000A                136          BNE     NOT0011         * No, check next case
0000109E  6100 0310                137          BSR     OP0011          * Branch to subroutine 0011
000010A2  6000 00C6                138          BRA     ITERATION       * Move to next iteration of the loop
000010A6                           139  NOT0011
000010A6  BC7C 4000                140          CMP     #OP_0100,D6     * Does the operation start with 0100?
000010AA  6600 000A                141          BNE     NOT0100         * No, check next case
000010AE  6100 030E                142          BSR     OP0100          * Branch to subroutine 0100
000010B2  6000 00B6                143          BRA     ITERATION       * Move to next iteration of the loop
000010B6                           144  NOT0100
000010B6  BC7C 5000                145          CMP     #OP_0101,D6     * Does the operation start with 0101?
000010BA  6600 000A                146          BNE     NOT0101         * No, check next case
000010BE  6100 0620                147          BSR     OP0101          * Branch to subroutine 0101
000010C2  6000 00A6                148          BRA     ITERATION       * Move to next iteration of the loop
000010C6                           149  NOT0101
000010C6  BC7C 6000                150          CMP     #OP_0110,D6     * Does the operation start with 0110?
000010CA  6600 000A                151          BNE     NOT0110         * No, check next case
000010CE  6100 067E                152          BSR     OP0110          * Branch to subroutine 0110
000010D2  6000 0096                153          BRA     ITERATION       * Move to next iteration of the loop
000010D6                           154  NOT0110
000010D6  BC7C 7000                155          CMP     #OP_0111,D6     * Does the operation start with 0111?
000010DA  6600 000A                156          BNE     NOT0111         * No, check next case
000010DE  6100 0736                157          BSR     OP0111          * Branch to subroutine 0111
000010E2  6000 0086                158          BRA     ITERATION       * Move to next iteration of the loop
000010E6                           159  NOT0111
000010E6  BC7C 8000                160          CMP     #OP_1000,D6     * Does the operation start with 1000?
000010EA  6600 000A                161          BNE     NOT1000         * No, check next case
000010EE  6100 072C                162          BSR     OP1000          * Branch to subroutine 1000
000010F2  6000 0076                163          BRA     ITERATION       * Move to next iteration of the loop
000010F6                           164  NOT1000
000010F6  BC7C 9000                165          CMP     #OP_1001,D6     * Does the operation start with 1001?
000010FA  6600 000A                166          BNE     NOT1001         * No, check next case
000010FE  6100 07B0                167          BSR     OP1001          * Branch to subroutine 1001
00001102  6000 0066                168          BRA     ITERATION       * Move to next iteration of the loop
00001106                           169  NOT1001
00001106  BC7C A000                170          CMP     #OP_1010,D6     * Does the operation start with 1010?
0000110A  6600 000A                171          BNE     NOT1010         * No, check next case
0000110E  6100 07A0                172          BSR     OP1010          * Branch to subroutine 1010
00001112  6000 0056                173          BRA     ITERATION       * Move to next iteration of the loop
00001116                           174  NOT1010
00001116  BC7C B000                175          CMP     #OP_1011,D6     * Does the operation start with 1011?
0000111A  6600 000A                176          BNE     NOT1011         * No, check next case
0000111E  6100 0796                177          BSR     OP1011          * Branch to subroutine 1011
00001122  6000 0046                178          BRA     ITERATION       * Move to next iteration of the loop
00001126                           179  NOT1011
00001126  BC7C C000                180          CMP     #OP_1100,D6     * Does the operation start with 1100?
0000112A  6600 000A                181          BNE     NOT1100         * No, check next case
0000112E  6100 0830                182          BSR     OP1100          * Branch to subroutine 1100
00001132  6000 0036                183          BRA     ITERATION       * Move to next iteration of the loop
00001136                           184  NOT1100
00001136  BC7C D000                185          CMP     #OP_1101,D6     * Does the operation start with 1101?
0000113A  6600 000A                186          BNE     NOT1101         * No, check next case
0000113E  6100 08AA                187          BSR     OP1101          * Branch to subroutine 1101
00001142  6000 0026                188          BRA     ITERATION       * Move to next iteration of the loop
00001146                           189  NOT1101
00001146  BC7C E000                190          CMP     #OP_1110,D6     * Does the operation start with 1110?
0000114A  6600 000A                191          BNE     NOT1110         * No, check next case
0000114E  6100 0A20                192          BSR     OP1110          * Branch to subroutine 1110
00001152  6000 0016                193          BRA     ITERATION       * Move to next iteration of the loop
00001156                           194  NOT1110
00001156  BC7C F000                195          CMP     #OP_1111,D6     * Does the operation start with 1111?
0000115A  6600 000A                196          BNE     LOOPUNKNOWNOP   * No, check next case
0000115E  6100 0BA6                197          BSR     OP1111          * Branch to subroutine 1111
00001162  6000 0006                198          BRA     ITERATION       * Move to next iteration of the loop
00001166                           199          
00001166                           200  LOOPUNKNOWNOP
00001166  6100 11D8                201          BSR     UNKNOWNOP
0000116A                           202          
0000116A                           203  ITERATION
0000116A  3C1F                     204          MOVE    (A7)+,D6        * restore the bitmask to its previous state
0000116C                           205      
0000116C  5279 00002710            206          ADDI    #1,(__COUNTER)           * Track the lines on screen
00001172  0C79 001E 00002710       207          CMPI    #30,(__COUNTER)
0000117A  6600 0006                208          BNE     END_OF_LOOP     * Not at 30, go loop more
0000117E  6100 000C                209          BSR     IDLE_STATE      * Break to idle, ask to clear screen
00001182                           210  
00001182                           211  END_OF_LOOP
00001182  BA4A                     212          CMP     A2,D5           * Compare the starting address to ending address
00001184  6700 2F04                213          BEQ     END             * If they are equal, branch 
00001188  6000 FEC2                214          BRA     LOOP            * Otherwise, branch back to LOOP
0000118C                           215  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000118C                           216  *-----------------------------------------------------------------------------
0000118C                           217  IDLE_STATE
0000118C  43F9 000025EE            218      LEA     CONT_MSG,A1 * show msg to hit enter in order to continue
00001192  103C 000E                219      MOVE.B  #14,D0
00001196  4E4F                     220      TRAP    #15
00001198                           221      
00001198  103C 0004                222      MOVE.B  #4,D0 * trap task 4 - input
0000119C  4E4F                     223      TRAP    #15
0000119E  0C41 000D                224      CMPI    #$D,D1
000011A2                           225      
000011A2  6100 000A                226      BSR     CLEAR_SCREEN * clear everything, so ready to output another 30
000011A6  42B9 00002710            227      CLR.L   (__COUNTER)
000011AC  4E75                     228      RTS
000011AE                           229  CLEAR_SCREEN
000011AE  103C 000B                230      MOVE.B  #11,D0
000011B2  323C FF00                231      MOVE.W  #$FF00,D1
000011B6  4E4F                     232      TRAP    #15
000011B8  4E75                     233      RTS
000011BA                           234  
000011BA                           235  
000011BA                           236  *-----------------------------------------------------------------------------
000011BA                           237  *-----------------------------------------------------------------------------
000011BA                           238  * NAME: OP_0000   (BCLR, ORI, CMPI)
000011BA                           239  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000011BA                           240  * PRE-CONDITION:  xyz
000011BA                           241  * POST-CONDITION: All registers return to their previous state, and the output
000011BA                           242  *                 goes to the output console for reading the raw data or the
000011BA                           243  *                 actual instruction.
000011BA                           244  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000011BA                           245  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000011BA                           246  OP0000
000011BA  48A7 FFC0                247          MOVEM   D0-D7/A0-A1,-(A7)   * Push values to the stack to save
000011BE                           248                        
000011BE                           249          * Checking for unsupported mode (An) for BCLR, ORI, and CMPI
000011BE  3C3C 0003                250          MOVE.W  #3, D6              * Prep lower value for bitmask
000011C2  3E3C 0005                251          MOVE.W  #5, D7              * Prep upper value for bitmask
000011C6  6100 13E2                252          BSR     BITMASK             * Finalize bitmask setup
000011CA  CC42                     253          AND     D2,D6               * Apply bitmask
000011CC                           254          
000011CC  0C46 0008                255          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
000011D0  6700 0168                256          BEQ     UNKNOWN0000             * If so, the op is unknown
000011D4                           257          
000011D4                           258          * Checking for BCLR Dynamic
000011D4  3C3C 0006                259          MOVE.W  #6, D6              * Prep lower value for bitmask
000011D8  3E3C 0008                260          MOVE.W  #8, D7              * Prep upper value for bitmask
000011DC  6100 13CC                261          BSR     BITMASK             * Finalize bitmask setup
000011E0  CC42                     262          AND     D2,D6               * Apply bitmask
000011E2                           263          
000011E2  0C46 0180                264          CMPI    #%0000000110000000, D6  * Are we BCLR Dynamic?
000011E6  6600 0050                265          BNE     NOTBCLRDYNA             * If not, branch to BCLR Static or other ops
000011EA                           266  
000011EA                           267          * Confirmed BCLR Dynamic at this point
000011EA  43F9 00002647            268          LEA     BCLROP,A1           * We found BCLR
000011F0  103C 000E                269          MOVE.B  #14,D0              * Trap #14 prints out the data
000011F4  4E4F                     270          TRAP    #15                 * Perform Trap #14
000011F6                           271  
000011F6  43F9 000026C0            272          LEA     SPACE,A1            * Formatting
000011FC  103C 000E                273          MOVE.B  #14,D0              * Trap #14 prints out space
00001200  4E4F                     274          TRAP    #15                 * Perform Trap #14
00001202                           275          
00001202                           276          * Set up for printing out the Register
00001202  0882 0006                277          BCLR    #6,D2               * Clear bit 6
00001206  0882 0007                278          BCLR    #7,D2               * Clear bit 7
0000120A  0882 0008                279          BCLR    #8,D2               * Clear bit 8
0000120E                           280          
0000120E  6100 0AFC                281          BSR     EAHELPER611         * Print out Register
00001212                           282  
00001212  43F9 000026C6            283          LEA     COMMA,A1            * formatting
00001218  103C 000E                284          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000121C  4E4F                     285          TRAP    #15                 * Perform Trap #14
0000121E                           286          
0000121E  4243                     287          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
00001220  08C3 0000                288          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
00001224                           289      
00001224  6100 0B28                290          BSR     EAHELPER05          * Print out data.
00001228                           291          
00001228  43F9 00002613            292          LEA     NEWLINE,A1          * Formatting
0000122E  103C 000E                293          MOVE.B  #14,D0              * Trap #14 prints out the data
00001232  4E4F                     294          TRAP    #15                 * Perform Trap #14
00001234                           295          
00001234  6000 0108                296          BRA     END0000             * Found the op, move to next iteration
00001238                           297          
00001238                           298  NOTBCLRDYNA     * Possible options left are BCLR Static, ORI, and CMPI
00001238  3C3C 0006                299          MOVE.W  #6, D6              * Prep lower value for bitmask
0000123C  3E3C 000B                300          MOVE.W  #11, D7             * Prep upper value for bitmask
00001240  6100 1368                301          BSR     BITMASK             * Finalize bitmask setup
00001244  CC42                     302          AND     D2,D6               * Apply bitmask
00001246                           303          
00001246  0C46 0880                304          CMPI    #%0000100010000000, D6  * Are we BCLR Static?
0000124A  6600 003A                305          BNE     NOTBCLR                 * If not, branch to other functions
0000124E                           306          
0000124E                           307          * Confirmed BCLR Static at this point
0000124E  43F9 00002647            308          LEA     BCLROP,A1           * We found BCLR
00001254  103C 000E                309          MOVE.B  #14,D0              * Trap #14 prints out the data
00001258  4E4F                     310          TRAP    #15                 * Perform Trap #14
0000125A                           311  
0000125A  43F9 000026C0            312          LEA     SPACE,A1            * Formatting
00001260  103C 000E                313          MOVE.B  #14,D0              * Trap #14 prints out space
00001264  4E4F                     314          TRAP    #15                 * Perform Trap #14
00001266                           315          
00001266  2802                     316          MOVE.L  D2, D4              * Saving values
00001268                           317                  
00001268  43F9 000026C4            318          LEA     IMD, A1             * Formatting
0000126E  103C 000E                319          MOVE.B  #14,D0              * Trap #14 prints out the data
00001272  4E4F                     320          TRAP    #15                 * Perform Trap #14
00001274                           321          
00001274                           322          * Grab next word
00001274  3A1A                     323          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
00001276  E18D                     324          LSL.L   #8, D5              * LSL for first nibble of the word
00001278  E18D                     325          LSL.L   #8, D5              * LSL for second nibble of the word
0000127A  2C45                     326          MOVE.L  D5, A6              * Store D5 into A6, to be used as parameter
0000127C  7604                     327          MOVE.L  #4, D3              * Four most significant bits in D3
0000127E  6100 10EA                328          BSR     PRINT_ASCII_HEX_CHAR    * Perform number print out
00001282                           329  
00001282  6000 007E                330          BRA     SKIPLONG            * Formatting, returning saved values, etc.
00001286                           331          
00001286                           332  NOTBCLR * Possible options left are ORI or CMPI
00001286  3C3C 0009                333          MOVE.W  #9, D6              * Prep lower value for bitmask
0000128A  3E3C 000B                334          MOVE.W  #11, D7             * Prep upper value for bitmask
0000128E  6100 131A                335          BSR     BITMASK             * Finalize bitmask setup
00001292  CC42                     336          AND     D2,D6               * Apply bitmask
00001294                           337          
00001294  0C46 0000                338          CMPI    #%0000000000000000, D6   * Are we possibly ORI?
00001298  6600 008A                339          BNE     NOTORI                   * If not, branch to NOTORI
0000129C                           340          
0000129C                           341          * Size check to see if unsupported ORI mode
0000129C  3C3C 0006                342          MOVE.W  #6, D6              * Prep lower value for bitmask
000012A0  3E3C 0007                343          MOVE.W  #7, D7              * Prep upper value for bitmask
000012A4  6100 1304                344          BSR     BITMASK             * Finalize bitmask setup
000012A8  CC42                     345          AND     D2,D6               * Apply bitmask
000012AA                           346          
000012AA  0C46 00C0                347          CMPI    #%0000000011000000, D6  * Are bits 6,7 == 1,1?
000012AE  6700 008A                348          BEQ     UNKNOWN0000             * If so, unknown op. 
000012B2                           349          
000012B2                           350          * Confirmed ORI at this point
000012B2  43F9 00002655            351          LEA     ORIOP, A1           * Load 'ORI' into the output window
000012B8  103C 000E                352          MOVE.B  #14,D0              * Trap #14 prints out the data in D0
000012BC  4E4F                     353          TRAP    #15                 * Perform Trap #14
000012BE                           354  
000012BE                           355  IMD_SIZE_0000        
000012BE  6100 0DE4                356          BSR     SIZE67              * Print the size
000012C2                           357  
000012C2                           358          * Mode check to see the size
000012C2  3C3C 0006                359          MOVE.W  #6, D6              * Prep lower value for bitmask
000012C6  3E3C 0007                360          MOVE.W  #7, D7              * Prep upper value for bitmask
000012CA  6100 12DE                361          BSR     BITMASK             * Finalize bitmask setup
000012CE  CC42                     362          AND     D2,D6               * Apply bitmask
000012D0                           363          
000012D0  2802                     364          MOVE.L  D2, D4              * Saving value
000012D2                           365                  
000012D2  43F9 000026C4            366          LEA     IMD, A1             * Formatting
000012D8  103C 000E                367          MOVE.B  #14,D0              * Trap #14 prints out the data
000012DC  4E4F                     368          TRAP    #15                 * Perform Trap #14
000012DE                           369                 
000012DE                           370          * Grab immediate data
000012DE  3A1A                     371          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
000012E0  E18D                     372          LSL.L   #8, D5               
000012E2  E18D                     373          LSL.L   #8, D5
000012E4  2C45                     374          MOVE.L  D5, A6
000012E6  7604                     375          MOVE.L  #4, D3
000012E8  6100 1080                376          BSR     PRINT_ASCII_HEX_CHAR
000012EC                           377  
000012EC  0C46 0080                378          CMPI    #%0000000010000000, D6   * See if the size is a LONG
000012F0  6600 0010                379          BNE     SKIPLONG    
000012F4                           380          
000012F4                           381          * Grab next word
000012F4  3A1A                     382          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
000012F6  E18D                     383          LSL.L   #8, D5              * LSL to get first nibble of the word
000012F8  E18D                     384          LSL.L   #8, D5              * LSL to get second nibble of the word
000012FA  2C45                     385          MOVE.L  D5, A6              * Store D5 into A6 as a parameter
000012FC  7604                     386          MOVE.L  #4, D3              * Move #4 into D3 to show four bits
000012FE  6100 106A                387          BSR     PRINT_ASCII_HEX_CHAR    * Perform number output
00001302                           388  
00001302                           389  SKIPLONG
00001302  43F9 000026C6            390          LEA     COMMA, A1           * Formatting
00001308  103C 000E                391          MOVE.B  #14,D0              * Trap #14 prints out the data
0000130C  4E4F                     392          TRAP    #15                 * Perform Trap #14
0000130E                           393          
0000130E  2404                     394          MOVE.L  D4, D2              * Return saved value
00001310                           395          
00001310  6100 0A3C                396          BSR     EAHELPER05          * Print out the EA
00001314                           397          
00001314  43F9 00002613            398          LEA     NEWLINE,A1          * Formatting
0000131A  103C 000E                399          MOVE.B  #14,D0              * Trap #14 prints out the data
0000131E  4E4F                     400          TRAP    #15                 * Perform Trap #14
00001320                           401          
00001320  6000 001C                402          BRA     END0000             * Done with op. Move to next iteration
00001324                           403  
00001324                           404  NOTORI  * Possible option left is CMPI
00001324                           405  
00001324  0C46 0C00                406          CMPI    #%0000110000000000, D6  * Are we CMPI?
00001328  6600 0010                407          BNE     UNKNOWN0000             * If not, unknown op
0000132C                           408          
0000132C                           409          * Confirmed CMPI at this point
0000132C  43F9 00002659            410          LEA     CMPIOP, A1          * Formatting
00001332  103C 000E                411          MOVE.B  #14,D0              * Trap #14 prints out the data
00001336  4E4F                     412          TRAP    #15                 * Perform Trap #14
00001338                           413          
00001338  6084                     414          BRA     IMD_SIZE_0000       * Get immediate value and end opcode 0000
0000133A                           415          
0000133A                           416  UNKNOWN0000
0000133A  6100 1004                417          BSR     UNKNOWNOP          * Unknown op
0000133E                           418  
0000133E                           419  END0000          
0000133E  4C9F 03FF                420          MOVEM   (A7)+,D0-D7/A0-A1   * Push values to the stack to save
00001342  4E75                     421          RTS
00001344                           422  
00001344                           423  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001344                           424  *-----------------------------------------------------------------------------
00001344                           425  
00001344                           426  
00001344                           427  
00001344                           428  *-----------------------------------------------------------------------------
00001344                           429  *-----------------------------------------------------------------------------
00001344                           430  * NAME: OP_0001   (MOVE.B)
00001344                           431  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001344                           432  * PRE-CONDITION:  xyz
00001344                           433  * POST-CONDITION: All registers return to their previous state, and the output
00001344                           434  *                 goes to the output console for reading the raw data or the
00001344                           435  *                 actual instruction.
00001344                           436  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001344                           437  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001344                           438  OP0001  
00001344  48A7 FFC0                439          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
00001348  3C3C 0006                440          MOVE.W  #6, D6              * Prep lower value for bitmask
0000134C  3E3C 0008                441          MOVE.W  #8, D7              * Prep upper value for bitmask
00001350  6100 1258                442          BSR     BITMASK             * Finalize bitmask setup
00001354  CC42                     443          AND     D2,D6               * Apply bitmask
00001356                           444          
00001356                           445          * I may have fucked off this part, sorry - Caleb
00001356                           446          * CMPI    #%0000000001000000, D6  * Is the destination mode 001?
00001356                           447          * BNE     UNKNOWNOP0001                 * If so, it's unknown.
00001356                           448          
00001356  43F9 0000262B            449          LEA     MOVEOP,A1   * Put 'MOVE' into the window
0000135C  103C 000E                450          MOVE.B  #14,D0      * Trap #14 to print out
00001360  4E4F                     451          TRAP    #15         * Perform Trap #14
00001362                           452          
00001362                           453          *-----------------------------------------------------------
00001362                           454          * the following code is to move the size bits into the
00001362                           455          * 0-1 positions of D3 so that eahelper05 case use that as a "parameter"
00001362                           456          * for eahelper05
00001362                           457          
00001362  3C3C 000C                458          MOVE.W  #12, D6              * Prep lower value for bitmask
00001366  3E3C 000D                459          MOVE.W  #13, D7              * Prep upper value for bitmask
0000136A  6100 123E                460          BSR     BITMASK              * Finalize bitmask setup
0000136E  CC42                     461          AND     D2,D6                * Apply bitmask
00001370                           462          
00001370  E04E                     463          LSR     #8,D6
00001372  E84E                     464          LSR     #4,D6
00001374                           465          
00001374  4243                     466          CLR     D3
00001376                           467          
00001376  1606                     468          MOVE.B  D6,D3
00001378                           469          
00001378                           470          *---------------------------------------------------------------
00001378                           471          
00001378                           472          
00001378  6100 0D2A                473          BSR     SIZE67
0000137C  6100 09D0                474          BSR     EAHELPER05
00001380                           475          
00001380  43F9 000026C6            476          LEA     COMMA,A1
00001386  103C 000E                477          MOVE.B  #14,D0
0000138A  4E4F                     478          TRAP    #15
0000138C                           479          
0000138C  6100 097E                480          BSR     EAHELPER611
00001390                           481          
00001390  43F9 00002613            482          LEA     NEWLINE,A1
00001396  103C 000E                483          MOVE.B  #14,D0
0000139A  4E4F                     484          TRAP    #15
0000139C                           485          
0000139C  6000 0006                486          BRA     ENDOP0001
000013A0                           487          *LEA     __B,A1      * Put '.B' into the window
000013A0                           488          *MOVE.B  #14,D0      * Trap #14 to print out
000013A0                           489          *TRAP    #15         * Perform Trap #14
000013A0                           490          
000013A0                           491  UNKNOWNOP0001
000013A0  6100 0F9E                492          BSR     UNKNOWNOP
000013A4                           493          
000013A4                           494  ENDOP0001
000013A4  4C9F 03FF                495          MOVEM (A7)+,D0-D7/A0-A1
000013A8  4E75                     496          RTS        
000013AA                           497          
000013AA                           498          * TODO: DETERMINE THE MODE AND REG FOR DESTINATION AND SOURCE
000013AA                           499  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000013AA                           500  *-----------------------------------------------------------------------------
000013AA                           501  
000013AA                           502  
000013AA                           503  
000013AA                           504  *-----------------------------------------------------------------------------
000013AA                           505  *-----------------------------------------------------------------------------
000013AA                           506  * NAME: OP_0010   (MOVE.L, MOVEA.L)
000013AA                           507  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000013AA                           508  * PRE-CONDITION:  xyz
000013AA                           509  * POST-CONDITION: All registers return to their previous state, and the output
000013AA                           510  *                 goes to the output console for reading the raw data or the
000013AA                           511  *                 actual instruction.
000013AA                           512  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000013AA                           513  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000013AA                           514  OP0010
000013AA                           515  
000013AA  6100 0F94                516      BSR     UNKNOWNOP
000013AE  4E75                     517      RTS
000013B0                           518  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000013B0                           519  *-----------------------------------------------------------------------------
000013B0                           520  
000013B0                           521  
000013B0                           522  
000013B0                           523  *-----------------------------------------------------------------------------
000013B0                           524  *-----------------------------------------------------------------------------
000013B0                           525  * NAME: OP_0011   (MOVE.W, MOVEA.W)
000013B0                           526  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000013B0                           527  * PRE-CONDITION:  xyz
000013B0                           528  * POST-CONDITION: All registers return to their previous state, and the output
000013B0                           529  *                 goes to the output console for reading the raw data or the
000013B0                           530  *                 actual instruction.
000013B0                           531  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000013B0                           532  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000013B0                           533  OP0011
000013B0  48A7 FFFE                534      MOVEM   D0-D7/A0-A6, -(A7)
000013B4                           535      
000013B4                           536      *MOVE.W  #6,D6
000013B4                           537      *MOVE.W  #8,D7
000013B4                           538      
000013B4                           539      *BSR     BITMASK
000013B4                           540      
000013B4                           541      *AND.W   D2,D6
000013B4                           542      
000013B4                           543      *CMP     #%0000000001000000,D6
000013B4                           544      *BNE     NEXT15
000013B4                           545      *BSR     * for MOVEA.W
000013B4                           546      
000013B4  4C9F 7FFF                547      MOVEM   (A7)+,D0-D7/A0-A6
000013B8                           548      
000013B8  6100 0F86                549      BSR     UNKNOWNOP
000013BC  4E75                     550      RTS
000013BE                           551  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000013BE                           552  *-----------------------------------------------------------------------------
000013BE                           553  
000013BE                           554  *-----------------------------------------------------------------------------
000013BE                           555  *-----------------------------------------------------------------------------
000013BE                           556  * NAME: OP_0100   (NOP, MOVEM, LEA, NEG, JSR, RTS)
000013BE                           557  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000013BE                           558  * PRE-CONDITION:  xyz
000013BE                           559  * POST-CONDITION: All registers return to their previous state, and the output
000013BE                           560  *                 goes to the output console for reading the raw data or the
000013BE                           561  *                 actual instruction.
000013BE                           562  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000013BE                           563  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000013BE                           564  OP0100  
000013BE                           565  
000013BE  48A7 C0C0                566          MOVEM   D0-D1/A0-A1,-(A7) * Push values to the stack to save
000013C2                           567          
000013C2                           568          *NOP
000013C2  0C42 4E71                569          CMPI    #%0100111001110001,D2
000013C6  6600 0012                570          BNE     NOTNOP
000013CA                           571          
000013CA  43F9 00002623            572          LEA     NOOPERATION,A1
000013D0  103C 000D                573          MOVE.B  #13,D0          * Print a newline
000013D4  4E4F                     574          TRAP    #15
000013D6                           575          
000013D6  6000 0302                576          BRA     DONE0100 *we found it, move on to the next iteration
000013DA                           577  NOTNOP *NEG
000013DA                           578          
000013DA                           579          * prep values for BITMASK subroutine
000013DA  7C08                     580          MOVE.L  #8,D6
000013DC  7E0B                     581          MOVE.L  #11,D7
000013DE                           582          
000013DE  6100 11CA                583          BSR     BITMASK
000013E2                           584          
000013E2  CC42                     585          AND     D2,D6                   * apply bitmask
000013E4                           586          
000013E4  0C46 0400                587          CMPI    #%0000010000000000,D6   * are we NEG?
000013E8  6600 0046                588          BNE     NOTNEG                  * not neg
000013EC                           589          
000013EC  7C03                     590          MOVE.L  #3,D6
000013EE  7E05                     591          MOVE.L  #5,D7
000013F0                           592          
000013F0  6100 11B8                593          BSR     BITMASK * generate a bitmask to be used to check mode
000013F4                           594          
000013F4  0C46 0008                595          CMPI    #%0000000000001000,D6 * check to see if it is the unsupported mode
000013F8  6700 02DC                596          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
000013FC                           597          
000013FC  0C46 0028                598          CMPI    #%0000000000101000,D6 * check to see if it is the unsupported mode
00001400  6700 02D4                599          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
00001404                           600          
00001404  0C46 0030                601          CMPI    #%0000000000110000,D6 * check to see if it is the unsupported mode
00001408  6700 02CC                602          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
0000140C                           603        
0000140C                           604          * it is NEG, print
0000140C  43F9 00002627            605          LEA     NEGOP,A1
00001412  103C 000E                606          MOVE.B  #14,D0
00001416  4E4F                     607          TRAP    #15
00001418                           608          
00001418  6100 0C8A                609          BSR     SIZE67
0000141C                           610          
0000141C  6100 0930                611          BSR     EAHELPER05
00001420                           612          
00001420  43F9 00002613            613          LEA     NEWLINE,A1
00001426  103C 000E                614          MOVE.B  #14,D0
0000142A  4E4F                     615          TRAP    #15
0000142C                           616          
0000142C  6000 02AC                617          BRA     DONE0100 * we found the op, move to next iteration
00001430                           618          
00001430                           619  NOTNEG *MOVEM
00001430                           620  
00001430                           621          * prep values for BITMASK subroutine
00001430  7C07                     622          MOVE.L  #7,D6
00001432  7E09                     623          MOVE.L  #9,D7
00001434                           624          
00001434  6100 1174                625          BSR     BITMASK
00001438                           626          
00001438  CC82                     627          AND.L   D2,D6   * apply bitmask
0000143A                           628          
0000143A  0C46 0080                629          CMPI    #%0000000010000000,D6 * is it MOVEM?
0000143E  6600 0148                630          BNE     NOTMOVEM          * it is not MOVEM
00001442                           631          
00001442  7C0A                     632          MOVE.L  #10,D6
00001444  7E0A                     633          MOVE.L  #10,D7
00001446                           634          
00001446  6100 1162                635          BSR     BITMASK
0000144A                           636          
0000144A  CC82                     637          AND.L   D2,D6
0000144C                           638          
0000144C  0C46 0000                639          CMPI    #%0000000000000000,D6 * is it register to memory?
00001450  6700 009C                640          BEQ     MOVEMTOMEM 
00001454                           641          
00001454                           642  MOVEMTOREG *supported modes: 010 011
00001454                           643  
00001454  7C03                     644          MOVE.L  #3,D6
00001456  7E05                     645          MOVE.L  #5,D7
00001458                           646          
00001458  6100 1150                647          BSR     BITMASK
0000145C                           648          
0000145C  CC82                     649          AND.L   D2,D6
0000145E                           650          
0000145E  0C46 0000                651          CMPI    #%0000000000000000,D6 * is it an unsupported mode?
00001462  6700 0272                652          BEQ     UNKNOWN0100
00001466                           653          
00001466  0C46 0008                654          CMPI    #%0000000000001000,D6 * is it an unsupported mode?
0000146A  6700 026A                655          BEQ     UNKNOWN0100
0000146E                           656          
0000146E  0C46 0020                657          CMPI    #%0000000000100000,D6 * is it an unsupported mode?
00001472  6700 0262                658          BEQ     UNKNOWN0100
00001476                           659          
00001476  0C46 0028                660          CMPI    #%0000000000101000,D6 * is it an unsupported mode?
0000147A  6700 025A                661          BEQ     UNKNOWN0100
0000147E                           662          
0000147E  0C46 0030                663          CMPI    #%0000000000110000,D6 * is it an unsupported mode?
00001482  6700 0252                664          BEQ     UNKNOWN0100
00001486                           665          
00001486  0C46 0038                666          CMPI    #%0000000000111000,D6 * is it an unsupported mode?
0000148A  6700 024A                667          BEQ     UNKNOWN0100
0000148E                           668          
0000148E  43F9 00002630            669          LEA     MOVEMOP,A1
00001494  103C 000E                670          MOVE.B  #14,D0          * print MOVEM
00001498  4E4F                     671          TRAP    #15
0000149A                           672          
0000149A  7C06                     673          MOVE.L  #6,D6
0000149C  7E06                     674          MOVE.L  #6,D7
0000149E                           675          
0000149E  6100 110A                676          BSR     BITMASK
000014A2                           677          
000014A2  CC82                     678          AND.L   D2,D6
000014A4                           679          
000014A4  0C46 0040                680          CMPI    #%0000000001000000,D6 * is it a long op?
000014A8  6600 0012                681          BNE     NOTLONGMOVEM1       * no, it is a word
000014AC                           682          
000014AC  43F9 000026DC            683          LEA     __L,A1
000014B2  103C 000E                684          MOVE.B  #14,D0          * print .L 
000014B6  4E4F                     685          TRAP    #15
000014B8                           686          
000014B8  6000 000E                687          BRA     SKIPNOTLONG1
000014BC                           688          
000014BC                           689  NOTLONGMOVEM1
000014BC                           690  
000014BC  43F9 000026D8            691          LEA     __W,A1
000014C2  103C 000E                692          MOVE.B  #14,D0          * print .W 
000014C6  4E4F                     693          TRAP    #15
000014C8                           694                  
000014C8                           695  SKIPNOTLONG1
000014C8                           696  
000014C8  6100 0884                697          BSR     EAHELPER05 * print out the register we are moving from
000014CC                           698          
000014CC  43F9 000026C6            699          LEA     COMMA,A1
000014D2  103C 000E                700          MOVE.B  #14,D0          * print , 
000014D6  4E4F                     701          TRAP    #15
000014D8                           702          
000014D8  6100 0CAC                703          BSR     MOVEMHELPERPOST
000014DC                           704          
000014DC  341A                     705          MOVE.W  (A2)+,D2
000014DE                           706          
000014DE  43F9 00002613            707          LEA     NEWLINE,A1
000014E4  103C 000E                708          MOVE.B  #14,D0          * print a newline 
000014E8  4E4F                     709          TRAP    #15
000014EA                           710      
000014EA  6000 01EE                711          BRA     DONE0100          * we found and printed, move on to the next iteration
000014EE                           712          
000014EE                           713  MOVEMTOMEM * supported modes 010 100
000014EE                           714  
000014EE  7C03                     715          MOVE.L  #3,D6
000014F0  7E05                     716          MOVE.L  #5,D7
000014F2                           717          
000014F2  6100 10B6                718          BSR     BITMASK
000014F6                           719          
000014F6  CC82                     720          AND.L   D2,D6
000014F8                           721          
000014F8  0C46 0000                722          CMPI    #%0000000000000000,D6 * is it an unsopported mode?
000014FC  6700 01D8                723          BEQ     UNKNOWN0100
00001500                           724          
00001500  0C46 0008                725          CMPI    #%0000000000001000,D6 * is it an unsopported mode?
00001504  6700 01D0                726          BEQ     UNKNOWN0100
00001508                           727          
00001508  0C46 0018                728          CMPI    #%0000000000011000,D6 * is it an unsopported mode?
0000150C  6700 01C8                729          BEQ     UNKNOWN0100
00001510                           730          
00001510  0C46 0028                731          CMPI    #%0000000000101000,D6 * is it an unsopported mode?
00001514  6700 01C0                732          BEQ     UNKNOWN0100
00001518                           733          
00001518  0C46 0030                734          CMPI    #%0000000000110000,D6 * is it an unsopported mode?
0000151C  6700 01B8                735          BEQ     UNKNOWN0100
00001520                           736          
00001520  0C46 0070                737          CMPI    #%0000000001110000,D6 * is it an unsopported mode?
00001524  6700 01B0                738          BEQ     UNKNOWN0100
00001528                           739          
00001528  43F9 00002630            740          LEA     MOVEMOP,A1
0000152E  103C 000E                741          MOVE.B  #14,D0          * print MOVEM
00001532  4E4F                     742          TRAP    #15
00001534                           743          
00001534  7C06                     744          MOVE.L  #6,D6
00001536  7E06                     745          MOVE.L  #6,D7
00001538                           746          
00001538  6100 1070                747          BSR     BITMASK
0000153C                           748          
0000153C  CC82                     749          AND.L   D2,D6
0000153E                           750          
0000153E  0C46 0040                751          CMPI    #%0000000001000000,D6 * is it a long op?
00001542  6600 0012                752          BNE     NOTLONGMOVEM2       * no, it is a word
00001546                           753          
00001546  43F9 000026DC            754          LEA     __L,A1
0000154C  103C 000E                755          MOVE.B  #14,D0          * print .L 
00001550  4E4F                     756          TRAP    #15
00001552                           757          
00001552  6000 000E                758          BRA     SKIPNOTLONG2
00001556                           759          
00001556                           760  NOTLONGMOVEM2
00001556                           761  
00001556  43F9 000026D8            762          LEA     __W,A1
0000155C  103C 000E                763          MOVE.B  #14,D0          * print .W 
00001560  4E4F                     764          TRAP    #15
00001562                           765                  
00001562                           766  SKIPNOTLONG2
00001562                           767  
00001562  6100 0DAE                768          BSR     MOVEMHELPERPRE
00001566                           769  
00001566  43F9 000026C6            770          LEA     COMMA,A1
0000156C  103C 000E                771          MOVE.B  #14,D0          * print , 
00001570  4E4F                     772          TRAP    #15
00001572                           773          
00001572  6100 07DA                774          BSR     EAHELPER05 * print out the register we are moving to
00001576                           775          
00001576  341A                     776          MOVE.W  (A2)+,D2
00001578                           777          
00001578  43F9 00002613            778          LEA     NEWLINE,A1
0000157E  103C 000E                779          MOVE.B  #14,D0          * print a newline 
00001582  4E4F                     780          TRAP    #15
00001584                           781      
00001584  6000 0154                782          BRA     DONE0100          * we found and printed, move on to the next iteration
00001588                           783  
00001588                           784  NOTMOVEM *JSR
00001588                           785          * prep values for BITMASK subroutine
00001588  7C06                     786          MOVE.L  #6,D6
0000158A  7E08                     787          MOVE.L  #8,D7
0000158C                           788          
0000158C  6100 101C                789          BSR     BITMASK
00001590                           790          
00001590  CC42                     791          AND     D2,D6   * apply bitmask
00001592                           792          
00001592  0C46 0080                793          CMPI    #%0000000010000000,D6
00001596  6600 003A                794          BNE     NOTJSR          * it's not JSR
0000159A                           795          
0000159A  43F9 00002636            796          LEA     JSROP,A1
000015A0  103C 000E                797          MOVE.B  #14,D0          * Print JSR
000015A4  4E4F                     798          TRAP    #15
000015A6                           799          
000015A6  43F9 000026C0            800          LEA     SPACE,A1
000015AC  103C 000E                801          MOVE.B  #14,D0          * Print space
000015B0  4E4F                     802          TRAP    #15
000015B2                           803          
000015B2                           804          * print out where we are jumping to
000015B2                           805          
000015B2  241A                     806          MOVE.L  (A2)+,D2 * read in the next word of the instruction
000015B4                           807  
000015B4  2E02                     808          MOVE.L  D2,D7
000015B6                           809  
000015B6  2C47                     810          MOVE.L  D7,A6
000015B8                           811          
000015B8  4283                     812          CLR.L   D3
000015BA                           813          
000015BA  163C 0008                814          MOVE.B  #8,D3
000015BE                           815          
000015BE  6100 0DAA                816          BSR     PRINT_ASCII_HEX_CHAR
000015C2                           817          
000015C2                           818          *MOVE.L  D2,D1   * save the opcode to print
000015C2                           819          
000015C2                           820          *MOVE.L  #16,D2  * set the base to 16
000015C2                           821          
000015C2                           822          *MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000015C2                           823          *TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000015C2                           824          
000015C2                           825          *MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
000015C2                           826          
000015C2                           827          *MOVE.L  D2,D1   * save the opcode to print
000015C2                           828          
000015C2                           829          *MOVE.L  #16,D2  * set the base to 16
000015C2                           830          
000015C2                           831          *MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000015C2                           832          *TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000015C2                           833          
000015C2  43F9 00002613            834          LEA     NEWLINE,A1
000015C8  103C 000E                835          MOVE.B  #14,D0          * Print a newline
000015CC  4E4F                     836          TRAP    #15
000015CE                           837          
000015CE  6000 010A                838          BRA     DONE0100          * we already found instruction, next iteration
000015D2                           839  NOTJSR *RTS
000015D2                           840  
000015D2                           841          * prep values for BITMASK subroutine
000015D2  7C06                     842          MOVE.L  #6,D6
000015D4  7E08                     843          MOVE.L  #8,D7
000015D6                           844          
000015D6  6100 0FD2                845          BSR     BITMASK
000015DA                           846          
000015DA  CC42                     847          AND     D2,D6   * apply bitmask
000015DC                           848          
000015DC  0C46 0040                849          CMPI    #%0000000001000000,D6
000015E0  6600 0012                850          BNE     NOTRTS          * it's not RTS
000015E4                           851          
000015E4  43F9 0000263A            852          LEA     RTSOP,A1
000015EA  103C 000D                853          MOVE.B  #13,D0          * Print a newline and RTS
000015EE  4E4F                     854          TRAP    #15
000015F0                           855          
000015F0  6000 00E8                856          BRA     DONE0100          * we already found instruction, next iteration
000015F4                           857  NOTRTS  *LEA
000015F4                           858         
000015F4                           859          * prep values for BITMASK subroutine
000015F4  7C06                     860          MOVE.L  #6,D6
000015F6  7E08                     861          MOVE.L  #8,D7
000015F8                           862          
000015F8  6100 0FB0                863          BSR     BITMASK
000015FC                           864          
000015FC  CC42                     865          AND     D2,D6   * apply bitmask
000015FE                           866          
000015FE  0C46 01C0                867          CMPI    #%0000000111000000,D6
00001602  6600 00D2                868          BNE     UNKNOWN0100          * it's not LEA, we dont know what it is
00001606                           869          
00001606                           870          * prep values for BITMASK subroutine
00001606  7C03                     871          MOVE.L  #3,D6
00001608  7E05                     872          MOVE.L  #5,D7
0000160A                           873          
0000160A  6100 0F9E                874          BSR     BITMASK
0000160E                           875          
0000160E  CC42                     876          AND     D2,D6   * apply bitmask
00001610                           877          
00001610  0C46 0008                878          CMPI    #%0000000000001000,D6
00001614  6700 00C0                879          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001618                           880          
00001618  0C46 0018                881          CMPI    #%0000000000011000,D6
0000161C  6700 00B8                882          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001620                           883          
00001620  0C46 0020                884          CMPI    #%0000000000100000,D6
00001624  6700 00B0                885          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001628                           886          
00001628  0C46 0028                887          CMPI    #%0000000000101000,D6
0000162C  6700 00A8                888          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001630                           889          
00001630  0C46 0030                890          CMPI    #%0000000000110000,D6
00001634  6700 00A0                891          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001638                           892          
00001638  0C46 0038                893          CMPI    #%0000000000111000,D6
0000163C  6700 0046                894          BEQ     TWOWORDLEA          * it's a two word LEA
00001640                           895          
00001640                           896          * check to make sure it is a supported mode and size
00001640                           897          
00001640  43F9 00002643            898          LEA     LEAOP,A1
00001646  103C 000E                899          MOVE.B  #14,D0          * Print LEA
0000164A  4E4F                     900          TRAP    #15
0000164C                           901          
0000164C  0882 0007                902          BCLR    #7,D2
00001650  0882 0008                903          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
00001654                           904          
00001654  43F9 000026C0            905          LEA     SPACE,A1
0000165A  103C 000E                906          MOVE.B  #14,D0          * Print SPACE
0000165E  4E4F                     907          TRAP    #15
00001660                           908          
00001660  6100 06EC                909          BSR     EAHELPER05
00001664                           910          
00001664  43F9 000026C6            911          LEA     COMMA,A1
0000166A  103C 000E                912          MOVE.B  #14,D0          * Print COMMA
0000166E  4E4F                     913          TRAP    #15
00001670                           914          
00001670  6100 069A                915          BSR     EAHELPER611
00001674                           916          
00001674  43F9 00002613            917          LEA     NEWLINE,A1
0000167A  103C 000E                918          MOVE.B  #14,D0          * Start a new line
0000167E  4E4F                     919          TRAP    #15
00001680                           920          
00001680                           921          
00001680                           922          * call EA helper
00001680                           923          * MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
00001680                           924                  
00001680  6000 0058                925          BRA     DONE0100          * we already found instruction, next iteration
00001684                           926          
00001684                           927  TWOWORDLEA
00001684                           928  
00001684  43F9 00002643            929          LEA     LEAOP,A1
0000168A  103C 000E                930          MOVE.B  #14,D0   * Print LEA
0000168E  4E4F                     931          TRAP    #15
00001690                           932          
00001690  43F9 000026C0            933          LEA     SPACE,A1
00001696  103C 000E                934          MOVE.B  #14,D0   * Print SPACE
0000169A  4E4F                     935          TRAP    #15
0000169C                           936  
0000169C  321A                     937          MOVE.W  (A2)+,D1
0000169E                           938          
0000169E  7C00                     939          MOVE.L  #0,D6
000016A0  7E0F                     940          MOVE.L  #15,D7
000016A2                           941          
000016A2  6100 0F06                942          BSR     BITMASK
000016A6                           943          
000016A6  C286                     944          AND.L   D6,D1   * shave off bad info
000016A8                           945          
000016A8  103C 0003                946          MOVE.B  #3,D0   * Print the address which was the source
000016AC  4E4F                     947          TRAP    #15
000016AE                           948          
000016AE  43F9 000026C6            949          LEA     COMMA,A1
000016B4  103C 000E                950          MOVE.B  #14,D0  * Print COMMA
000016B8  4E4F                     951          TRAP    #15
000016BA                           952          
000016BA  0882 0007                953          BCLR    #7,D2
000016BE  0882 0008                954          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
000016C2                           955          
000016C2  6100 0648                956          BSR     EAHELPER611
000016C6                           957          
000016C6  43F9 00002613            958          LEA     NEWLINE,A1
000016CC  103C 000E                959          MOVE.B  #14,D0          * Start a new line
000016D0  4E4F                     960          TRAP    #15
000016D2                           961          
000016D2  6000 0006                962          BRA     DONE0100
000016D6                           963          
000016D6                           964  UNKNOWN0100 *dont know what it is
000016D6  6100 0C68                965          BSR     UNKNOWNOP
000016DA                           966          
000016DA                           967  DONE0100
000016DA  4C9F 0303                968          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
000016DE  4E75                     969          RTS
000016E0                           970          
000016E0                           971  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000016E0                           972  *-----------------------------------------------------------------------------
000016E0                           973        
000016E0                           974          
000016E0                           975          
000016E0                           976  
000016E0                           977  *-----------------------------------------------------------------------------
000016E0                           978  *-----------------------------------------------------------------------------
000016E0                           979  * NAME: OP_0101   (SUBQ)
000016E0                           980  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000016E0                           981  * PRE-CONDITION:  xyz
000016E0                           982  * POST-CONDITION: All registers return to their previous state, and the output
000016E0                           983  *                 goes to the output console for reading the raw data or the
000016E0                           984  *                 actual instruction.
000016E0                           985  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000016E0                           986  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000016E0                           987  OP0101
000016E0  48A7 FFC0                988          MOVEM   D0-D7/A0-A1,-(A7)       * Push values to the stack to save
000016E4                           989  
000016E4  CC7C 0100                990          AND     #%0000000100000000, D6  * Baby-Bitmask for the 8th digit.
000016E8  0C46 0100                991          CMPI    #%0000000100000000, D6  * Is the 8th digit a 1?
000016EC  6700 005A                992          BEQ     UNKNOWN0101             * If so, unknown op
000016F0                           993        
000016F0  0C46 0100                994          CMPI    #%0000000100000000, D6  * Is the size 11, an unsupported value?
000016F4  6700 0052                995          BEQ     UNKNOWN0101             * If so, unknown op
000016F8                           996            
000016F8                           997          * Verified SUBQ at this point
000016F8  43F9 0000263E            998          LEA     SUBQOP,A1           * Print out SUBQ
000016FE  103C 000E                999          MOVE.B  #14,D0              * Trap #14 to print out
00001702  4E4F                    1000          TRAP    #15                 * Perform Trap #14
00001704                          1001                          
00001704  6100 099E               1002          BSR     SIZE67              * Print out size
00001708                          1003          
00001708  43F9 000026C4           1004          LEA     IMD,A1              * Formatting
0000170E  103C 000E               1005          MOVE.B  #14,D0              * Trap #14 prints out space
00001712  4E4F                    1006          TRAP    #15                 * Perform Trap #14
00001714                          1007          
00001714  3C3C 0009               1008          MOVE.W  #9, D6              * Prep lower value for bitmask
00001718  3E3C 000B               1009          MOVE.W  #11,D7              * Prep upper value for bitmask
0000171C  6100 0E8C               1010          BSR     BITMASK             * Finalize bitmask setup
00001720  CC42                    1011          AND     D2,D6               * Apply bitmask
00001722                          1012          
00001722  6100 0DD4               1013          BSR     PRINTDATA911        * Special op for immediate in bits 9->11
00001726                          1014            
00001726  43F9 000026C6           1015          LEA     COMMA,A1            * Formatting
0000172C  103C 000E               1016          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001730  4E4F                    1017          TRAP    #15                 * Perform Trap #14
00001732                          1018          
00001732  6100 061A               1019          BSR     EAHELPER05          * Print out the Effective Address
00001736                          1020          
00001736  43F9 00002613           1021          LEA     NEWLINE,A1          * Formatting
0000173C  103C 000E               1022          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001740  4E4F                    1023          TRAP    #15                 * Perform Trap #14
00001742                          1024          
00001742  4C9F 03FF               1025          MOVEM   (A7)+,D0-D7/A0-A1   * Pop off the stack to return our registers
00001746  4E75                    1026          RTS
00001748                          1027      
00001748                          1028  UNKNOWN0101
00001748  6100 0BF6               1029          BSR     UNKNOWNOP
0000174C  4E75                    1030          RTS
0000174E                          1031  
0000174E                          1032  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000174E                          1033  *-----------------------------------------------------------------------------
0000174E                          1034  
0000174E                          1035  
0000174E                          1036  
0000174E                          1037  *-----------------------------------------------------------------------------
0000174E                          1038  *-----------------------------------------------------------------------------
0000174E                          1039  * NAME: OP_0110   (BCC, BCS, BGE, BLT, BVC, BRA)
0000174E                          1040  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000174E                          1041  * PRE-CONDITION:  Given the possibilties for 0110, masks the next 4 bits
0000174E                          1042  *                 in the instruction and determines what the bits match to a
0000174E                          1043  *                 given condition code. If the 8 bit offset is $00, or $FF,
0000174E                          1044  *                 this signifies a word or long offset (for $00 and $FF
0000174E                          1045  *                 respectively). The 8 bit offset is in 2's comp. form, and
0000174E                          1046  *                 should be un-done, then plus or minus to the current
0000174E                          1047  *                 program counter (PC) to get the actual memory label to
0000174E                          1048  *                 output to console. The word offset signal eats an
0000174E                          1049  *                 additional 16 bits and the long offset eats an additional
0000174E                          1050  *                 32 bits. The word/long offset are for memory alignment.
0000174E                          1051  * POST-CONDITION: All registers return to their previous state, and the output
0000174E                          1052  *                 goes to the output console for reading the raw data or the
0000174E                          1053  *                 actual instruction.
0000174E                          1054  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000174E                          1055  *                 A1 (output)
0000174E                          1056  * CONDITIONS TABLE:
0000174E                          1057  *                Condition Names  - Mnemonic - Condition Code
0000174E                          1058  *                --------------------------------------------
0000174E                          1059  *                True             -    T     - 0000
0000174E                          1060  *                False            -    F     - 0001
0000174E                          1061  *                Higher           -    HI    - 0010
0000174E                          1062  *                Lower or Same    -    LS    - 0011
0000174E                          1063  *                Carry Clear      -    CC    - 0100
0000174E                          1064  *                Carry Set        -    CS    - 0101
0000174E                          1065  *                Not Equal        -    NE    - 0110
0000174E                          1066  *                Equal            -    EQ    - 0111
0000174E                          1067  *                Overflow Clear   -    VC    - 1000
0000174E                          1068  *                Overflow Set     -    VS    - 1001
0000174E                          1069  *                Plus             -    PL    - 1010
0000174E                          1070  *                Minus            -    MI    - 1011
0000174E                          1071  *                Greater or Equal -    GE    - 1100
0000174E                          1072  *                Less Than        -    LT    - 1101
0000174E                          1073  *                Greater Than     -    GT    - 1110
0000174E                          1074  *                Less or Equal    -    LE    - 1111
0000174E                          1075  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000174E  48E7 FFFE               1076  OP0110  MOVEM.L D0-D7/A0-A6,-(A7) * Save main method routine vars to stack
00001752                          1077                          
00001752  3C3C 0009               1078          MOVE.W  #9,D6  * Move in 9 to D6
00001756  3E3C 000B               1079          MOVE.W  #11,D7 * Move in 11 to D7
0000175A                          1080                                        
0000175A  6100 0E4E               1081          BSR     BITMASK * Call BITMASK sub-routine, Returns a bitmask in D6
0000175E  CC42                    1082          AND     D2,D6   * apply the BITMASK
00001760                          1083          
00001760  0C46 0400               1084          CMPI    #%0000010000000000,D6 * CASE 1: BCC - BINARY FOR "CARRY CLEAR" FLAG
00001764  6700 0032               1085          BEQ     OP_BCC
00001768  0C46 0500               1086          CMPI    #%0000010100000000,D6 * CASE 2: BCS - BINARY FOR "CARRY SET" FLAG
0000176C  6700 0034               1087          BEQ     OP_BCS
00001770  0C46 0C00               1088          CMPI    #%0000110000000000,D6 * CASE 3: BGE - BINARY FOR "GREATER OR EQUAL" FLAG
00001774  6700 0036               1089          BEQ     OP_BGE
00001778  0C46 0D00               1090          CMPI    #%0000110100000000,D6 * CASE 4: BLT - BINARY FOR "LESS THAN" FLAG
0000177C  6700 0038               1091          BEQ     OP_BLT
00001780  0C46 0800               1092          CMPI    #%0000100000000000,D6 * CASE 5: BVC - BINARY FOR "OVERFLOW CLEAR" FLAG
00001784  6700 003A               1093          BEQ     OP_BVC
00001788  0C46 0000               1094          CMPI    #%0000000000000000,D6 * CASE 6: BRA - BINARY FOR "BRANCH ALWAYS" FLAG
0000178C  6700 003C               1095          BEQ     OP_BRA
00001790  6100 0BAE               1096          BSR     UNKNOWNOP             * don't know what it is, print it out, skip to end
00001794  6000 007A               1097          BRA     BCC_END
00001798                          1098  
00001798  43F9 0000267E           1099  OP_BCC  LEA     OP_BCC_MSG,A1
0000179E  6000 0034               1100          BRA     OP_BRANCHES_PRINT
000017A2  43F9 00002683           1101  OP_BCS  LEA     OP_BCS_MSG,A1
000017A8  6000 002A               1102          BRA     OP_BRANCHES_PRINT
000017AC  43F9 00002688           1103  OP_BGE  LEA     OP_BGE_MSG,A1
000017B2  6000 0020               1104          BRA     OP_BRANCHES_PRINT
000017B6  43F9 0000268D           1105  OP_BLT  LEA     OP_BLT_MSG,A1
000017BC  6000 0016               1106          BRA     OP_BRANCHES_PRINT
000017C0  43F9 00002692           1107  OP_BVC  LEA     OP_BVC_MSG,A1
000017C6  6000 000C               1108          BRA     OP_BRANCHES_PRINT
000017CA  43F9 00002697           1109  OP_BRA  LEA     OP_BRA_MSG,A1
000017D0  6000 0002               1110          BRA     OP_BRANCHES_PRINT
000017D4                          1111  OP_BRANCHES_PRINT
000017D4  103C 000E               1112          MOVE.B  #14,D0 * print instruction op, chosen from cases directly above
000017D8  4E4F                    1113          TRAP    #15
000017DA                          1114          
000017DA  43F9 000026C2           1115          LEA     DOLLAR,A1
000017E0  103C 000E               1116          MOVE.B  #14,D0 * print raw data hex of the LABEL
000017E4  4E4F                    1117          TRAP    #15
000017E6                          1118          
000017E6  3C3C 0000               1119          MOVE.W  #0,D6                 * Move in 0 to D6 - prep mask
000017EA  3E3C 0007               1120          MOVE.W  #7,D7                 * Move in 7 to D7
000017EE  6100 0DBA               1121          BSR     BITMASK               * Call BITMASK sub-routine, return in D6
000017F2  CC42                    1122          AND     D2,D6                 * AND mask with op bits, get last 8 bits in D6
000017F4                          1123          
000017F4                          1124  *        CMPI    #%00000000,D6         * all 0's == word offset
000017F4                          1125  *        BEQ     BCC_WORD_OFFSET
000017F4                          1126          
000017F4                          1127  *        CMPI    #%11111111,D6         * all F's == long offset
000017F4                          1128  *        BEQ     BCC_LONG_OFFSET
000017F4                          1129  BCC_BYTE_OFFSET
000017F4  4254                    1130          CLR     (A4)
000017F6  2846                    1131          MOVE.L  D6,A4
000017F8  43D4                    1132          LEA     (A4),A1
000017FA  103C 000E               1133          MOVE.B  #14,D0
000017FE  4E4F                    1134          TRAP    #15
00001800  43F9 00002613           1135          LEA     NEWLINE,A1
00001806  103C 000E               1136          MOVE.B  #14,D0
0000180A  4E4F                    1137          TRAP    #15
0000180C                          1138          
0000180C  6000 0002               1139          BRA     BCC_END
00001810                          1140  *BCC_WORD_OFFSET
00001810                          1141  *        MOVEM.W (A2)+,A1
00001810                          1142  *        MOVE.B  #13,D0
00001810                          1143  *        TRAP    #15
00001810                          1144  *        BRA     BCC_END
00001810                          1145  *BCC_LONG_OFFSET
00001810                          1146  *        MOVEM.L (A2)+,A1
00001810                          1147  *        MOVE.B  #13,D0
00001810                          1148  *        TRAP    #15
00001810                          1149  *        BRA     BCC_END
00001810                          1150  BCC_END * reload the memory, call RTS
00001810  4C9F 7FFF               1151          MOVEM   (A7)+,D0-D7/A0-A6 * Pop off the stack to return our registers
00001814  4E75                    1152          RTS
00001816                          1153  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001816                          1154  *-----------------------------------------------------------------------------
00001816                          1155  
00001816                          1156  
00001816                          1157  
00001816                          1158  *-----------------------------------------------------------------------------
00001816                          1159  *-----------------------------------------------------------------------------
00001816                          1160  * NAME: OP_0111   ()
00001816                          1161  * DESCRIPTION:    OP code 0111 is not supported. 
00001816                          1162  * PRE-CONDITION:  
00001816                          1163  * POST-CONDITION: 
00001816                          1164  * REGISTERS:
00001816                          1165  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001816                          1166  OP0111
00001816  6100 0B28               1167      BSR     UNKNOWNOP
0000181A  4E75                    1168      RTS
0000181C                          1169  
0000181C                          1170  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000181C                          1171  *-----------------------------------------------------------------------------
0000181C                          1172  
0000181C                          1173  
0000181C                          1174  
0000181C                          1175  *-----------------------------------------------------------------------------
0000181C                          1176  *-----------------------------------------------------------------------------
0000181C                          1177  * NAME: OP_1000   (DIVS, OR)
0000181C                          1178  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000181C                          1179  * PRE-CONDITION:  xyz
0000181C                          1180  * POST-CONDITION: All registers return to their previous state, and the output
0000181C                          1181  *                 goes to the output console for reading the raw data or the
0000181C                          1182  *                 actual instruction.
0000181C                          1183  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000181C                          1184  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000181C                          1185  OP1000
0000181C  48A7 FFC0               1186          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
00001820                          1187  
00001820                          1188          * Check if the EA Mode is 001 since both DIVS and OR do not support it
00001820  3C3C 0003               1189          MOVE.W  #3, D6              * Prep lower value for bitmask
00001824  3E3C 0005               1190          MOVE.W  #5, D7              * Prep upper value for bitmask
00001828  6100 0D80               1191          BSR     BITMASK             * Finalize bitmask setup
0000182C  CC42                    1192          AND     D2,D6               * Apply bitmask
0000182E                          1193          
0000182E  0C46 0008               1194          CMPI    #%0000000000001000, D6  * Is the mode 001, an unsupported mode?
00001832  6700 0B0C               1195          BEQ     UNKNOWNOP                 * If so, the op is not supported
00001836                          1196          
00001836                          1197          * Checking for DIVS
00001836  3C3C 0006               1198          MOVE.W  #6, D6              * Prep lower value for bitmask
0000183A  3E3C 0008               1199          MOVE.W  #8, D7              * Prep upper value for bitmask
0000183E  6100 0D6A               1200          BSR     BITMASK             * Finalize bitmask setup
00001842  CC42                    1201          AND     D2,D6               * Apply bitmask
00001844                          1202          
00001844  0C46 01C0               1203          CMPI    #%0000000111000000, D6  * Are we DIVS?
00001848  6600 0050               1204          BNE     NOTDIVS                 * If not, branch to see if it's OR
0000184C                          1205          
0000184C  43F9 00002616           1206          LEA     DIVSOP,A1           * We found DIVS
00001852  103C 000E               1207          MOVE.B  #14,D0              * Trap #14 prints out the data
00001856  4E4F                    1208          TRAP    #15                 * Perform Trap #14
00001858                          1209          
00001858  43F9 000026C0           1210          LEA     SPACE,A1            * formatting
0000185E  103C 000E               1211          MOVE.B  #14,D0              * Trap #14 prints out space
00001862  4E4F                    1212          TRAP    #15                 * Perform Trap #14
00001864                          1213          
00001864  4243                    1214          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
00001866  08C3 0000               1215          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
0000186A                          1216                                      * to indicate a potential immediate of size word
0000186A                          1217          
0000186A  6100 04E2               1218          BSR     EAHELPER05          * Print out data
0000186E                          1219  
0000186E  43F9 000026C6           1220          LEA     COMMA,A1            * formatting
00001874  103C 000E               1221          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001878  4E4F                    1222          TRAP    #15                 * Perform Trap #14
0000187A                          1223          
0000187A                          1224          * bit manipulation is needed to make the outlier DIVS work
0000187A                          1225          * with the generic EAHELPER611
0000187A  0882 0006               1226          BCLR    #6,D2
0000187E  0882 0007               1227          BCLR    #7,D2
00001882  0882 0008               1228          BCLR    #8,D2
00001886                          1229          
00001886                          1230          * the above bits were cleared so that eahelper05 knows the destination
00001886                          1231          * is a data register.
00001886                          1232          
00001886  6100 0484               1233          BSR     EAHELPER611 
0000188A                          1234  
0000188A  43F9 00002613           1235          LEA     NEWLINE,A1          * We found DIVS
00001890  103C 000E               1236          MOVE.B  #14,D0              * Trap #14 prints out the data
00001894  4E4F                    1237          TRAP    #15                 * Perform Trap #14
00001896                          1238          
00001896  6000 0012               1239          BRA     OP1000END
0000189A                          1240          
0000189A                          1241  NOTDIVS * It is confirmed OR at this point
0000189A  43F9 00002652           1242          LEA     OROP,A1         * We found OR
000018A0  103C 000E               1243          MOVE.B  #14,D0          * Trap #14 prints out the data
000018A4  4E4F                    1244          TRAP    #15             * Perform Trap #14
000018A6                          1245          *================================================================
000018A6                          1246          * todo, move the size of the operation into the leading bits of D5
000018A6                          1247          * before subroutine call
000018A6  6100 0464               1248          BSR     EAHELPER611
000018AA                          1249  
000018AA                          1250  OP1000END
000018AA  4C9F 03FF               1251          MOVEM   (A7)+,D0-D7/A0-A1
000018AE  4E75                    1252          RTS
000018B0                          1253  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000018B0                          1254  *-----------------------------------------------------------------------------
000018B0                          1255  
000018B0                          1256  
000018B0                          1257  
000018B0                          1258  *-----------------------------------------------------------------------------
000018B0                          1259  *-----------------------------------------------------------------------------
000018B0                          1260  * NAME: OP_1001   (SUB)
000018B0                          1261  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000018B0                          1262  * PRE-CONDITION:  xyz
000018B0                          1263  * POST-CONDITION: All registers return to their previous state, and the output
000018B0                          1264  *                 goes to the output console for reading the raw data or the
000018B0                          1265  *                 actual instruction.
000018B0                          1266  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000018B0                          1267  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000018B0                          1268  OP1001
000018B0                          1269  
000018B0                          1270  
000018B0                          1271  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000018B0                          1272  *-----------------------------------------------------------------------------
000018B0                          1273  
000018B0                          1274  
000018B0                          1275  
000018B0                          1276  *-----------------------------------------------------------------------------
000018B0                          1277  *-----------------------------------------------------------------------------
000018B0                          1278  * NAME: OP_1010   ()
000018B0                          1279  * DESCRIPTION:    a
000018B0                          1280  * PRE-CONDITION:  b
000018B0                          1281  * POST-CONDITION: c
000018B0                          1282  * REGISTERS:      d
000018B0                          1283  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000018B0                          1284  OP1010
000018B0                          1285  
000018B0  6100 0A8E               1286      BSR     UNKNOWNOP
000018B4  4E75                    1287      RTS
000018B6                          1288  
000018B6                          1289  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000018B6                          1290  *-----------------------------------------------------------------------------
000018B6                          1291  
000018B6                          1292  
000018B6                          1293  
000018B6                          1294  *-----------------------------------------------------------------------------
000018B6                          1295  *-----------------------------------------------------------------------------
000018B6                          1296  * NAME: OP_1011   (EOR, CMP)
000018B6                          1297  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000018B6                          1298  * PRE-CONDITION:  xyz
000018B6                          1299  * POST-CONDITION: All registers return to their previous state, and the output
000018B6                          1300  *                 goes to the output console for reading the raw data or the
000018B6                          1301  *                 actual instruction.
000018B6                          1302  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000018B6                          1303  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000018B6                          1304  OP1011
000018B6                          1305  
000018B6  48A7 FFC0               1306          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
000018BA                          1307  
000018BA  3C3C 0006               1308          MOVE.W  #6, D6              * Prep lower value for bitmask
000018BE  3E3C 0008               1309          MOVE.W  #8, D7              * Prep upper value for bitmask
000018C2  6100 0CE6               1310          BSR     BITMASK             * Finalize bitmask setup
000018C6  CC42                    1311          AND     D2,D6               * Apply bitmask
000018C8                          1312          
000018C8                          1313          * Check to see if opmode is unsupported for both EOR and CMP
000018C8  0C46 00C0               1314          CMPI    #%0000000011000000, D6      * Is the OPMODE 011, unsupported by EOR/CMP?
000018CC  6700 0088               1315          BEQ     UNKNOWN1011                 * If so, the OP is unknown
000018D0  0C46 01C0               1316          CMPI    #%0000000111000000, D6      * Is the OPMODE 111, unsupported by EOR/CMP?
000018D4  6700 0080               1317          BEQ     UNKNOWN1011                 * If so, the OP is unknown
000018D8                          1318          
000018D8                          1319          * Check to see if it is CMP
000018D8  0C46 0000               1320          CMPI    #%0000000000000000, D6      * Is the OPMODE 000, a BYTE for CMP?
000018DC  6700 0038               1321          BEQ     NOTEOR                      * If so, the OP is CMP
000018E0  0C46 0040               1322          CMPI    #%0000000001000000, D6      * Is the OPMODE 000, a WORD for CMP?
000018E4  6700 0030               1323          BEQ     NOTEOR                      * If so, the OP is CMP
000018E8  0C46 0080               1324          CMPI    #%0000000010000000, D6      * Is the OPMODE 000, a LONG for CMP?
000018EC  6700 0028               1325          BEQ     NOTEOR                      * If so, the OP is CMP
000018F0                          1326  
000018F0                          1327          * Check to see EA mode is 001, unsupported by EOR
000018F0  3C3C 0003               1328          MOVE.W  #3, D6              * Prep lower value for bitmask
000018F4  3E3C 0005               1329          MOVE.W  #5, D7              * Prep upper value for bitmask
000018F8  6100 0CB0               1330          BSR     BITMASK             * Finalize bitmask setup
000018FC  CC42                    1331          AND     D2,D6               * Apply bitmask
000018FE                          1332          
000018FE  0C46 0040               1333          CMPI    #%0000000001000000, D6      * Is the mode 001, unsupported for EOR?
00001902  6700 0052               1334          BEQ     UNKNOWN1011                 * If so, the op is unknown
00001906                          1335          
00001906                          1336          * Verified to be EOR at this point
00001906  43F9 0000261F           1337          LEA     EOROP,A1            * We found EOR
0000190C  103C 000E               1338          MOVE.B  #14,D0              * Trap #14 prints out the data
00001910  4E4F                    1339          TRAP    #15                 * Perform Trap #14
00001912                          1340          
00001912  6000 000E               1341          BRA     DISPLAY1011         * Branch to the end of 1011       
00001916                          1342  
00001916                          1343  NOTEOR
00001916  43F9 0000261B           1344          LEA     CMPOP,A1            * We found CMP
0000191C  103C 000E               1345          MOVE.B  #14,D0              * Trap #14 prints out the data
00001920  4E4F                    1346          TRAP    #15                 * Perform Trap #14
00001922                          1347          
00001922                          1348  DISPLAY1011
00001922  6100 07C4               1349          BSR     SIZE68
00001926                          1350          
00001926  6100 0426               1351          BSR     EAHELPER05
0000192A                          1352          
0000192A  43F9 000026C6           1353          LEA     COMMA,A1            * Formatting
00001930  103C 000E               1354          MOVE.B  #14,D0              * Trap #14 prints out the data
00001934  4E4F                    1355          TRAP    #15                 * Perform Trap #14
00001936                          1356          
00001936  0882 0006               1357          BCLR    #6,D2               * Bit manipulation is 
0000193A  0882 0007               1358          BCLR    #7,D2               * necessary in order to make
0000193E  0882 0008               1359          BCLR    #8,D2               * EAHELPER611 work generically
00001942                          1360          
00001942  6100 03C8               1361          BSR     EAHELPER611         * Print out EA
00001946                          1362          
00001946  43F9 00002613           1363          LEA     NEWLINE,A1          * Formatting
0000194C  103C 000E               1364          MOVE.B  #14,D0              * Trap #14 prints out the data
00001950  4E4F                    1365          TRAP    #15                 * Perform Trap #14
00001952                          1366          
00001952  6000 0006               1367          BRA     DONE1011            * Branch to end 1011 and move to next op
00001956                          1368          
00001956                          1369  UNKNOWN1011
00001956  6100 09E8               1370          BSR     UNKNOWNOP           * Unknown op
0000195A                          1371                   
0000195A                          1372  DONE1011
0000195A  4C9F 03FF               1373          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
0000195E  4E75                    1374          RTS                         * Return to main
00001960                          1375  
00001960                          1376  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001960                          1377  *-----------------------------------------------------------------------------
00001960                          1378  
00001960                          1379  
00001960                          1380  
00001960                          1381  *-----------------------------------------------------------------------------
00001960                          1382  *-----------------------------------------------------------------------------
00001960                          1383  * NAME: OP_1100   (MULS)
00001960                          1384  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001960                          1385  * PRE-CONDITION:  xyz
00001960                          1386  * POST-CONDITION: All registers return to their previous state, and the output
00001960                          1387  *                 goes to the output console for reading the raw data or the
00001960                          1388  *                 actual instruction.
00001960                          1389  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001960                          1390  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001960                          1391  OP1100
00001960  48A7 FFC0               1392          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
00001964                          1393  
00001964                          1394          * Check if the EA Mode is 001 since MULS does not support it
00001964  3C3C 0003               1395          MOVE.W  #3, D6              * Prep lower value for bitmask
00001968  3E3C 0005               1396          MOVE.W  #5, D7              * Prep upper value for bitmask
0000196C  6100 0C3C               1397          BSR     BITMASK             * Finalize bitmask setup
00001970  CC42                    1398          AND     D2,D6               * Apply bitmask
00001972                          1399          
00001972  0C46 0008               1400          CMPI    #%0000000000001000, D6    * Is the mode 001, an unsupported mode?
00001976  6700 0068               1401          BEQ     UNKNOWN1100               * If so, the op is not supported
0000197A                          1402          
0000197A  3C3C 0006               1403          MOVE.W  #6, D6              * Prep lower value for bitmask
0000197E  3E3C 0008               1404          MOVE.W  #8, D7              * Prep upper value for bitmask
00001982  6100 0C26               1405          BSR     BITMASK             * Finalize bitmask setup
00001986  CC42                    1406          AND     D2,D6               * Apply bitmask
00001988                          1407          
00001988  0C46 01C0               1408          CMPI    #%0000000111000000, D6  * Are we MULS?
0000198C  6600 0052               1409          BNE     UNKNOWN1100             * If not, it is an unknown op
00001990                          1410          
00001990  43F9 0000264D           1411          LEA     MULSOP,A1           * We found MULS
00001996  103C 000E               1412          MOVE.B  #14,D0              * Trap #14 prints out the data
0000199A  4E4F                    1413          TRAP    #15                 * Perform Trap #14
0000199C                          1414          
0000199C  43F9 000026C0           1415          LEA     SPACE,A1            * formatting
000019A2  103C 000E               1416          MOVE.B  #14,D0              * Trap #14 prints out space
000019A6  4E4F                    1417          TRAP    #15                 * Perform Trap #14
000019A8                          1418          
000019A8  4243                    1419          CLR     D3                  * clear D3, it is a parameter
000019AA  08C3 0000               1420          BSET    #0,D3               * of EAHELPER05 to indicate size
000019AE                          1421          
000019AE  6100 039E               1422          BSR     EAHELPER05          * Print out data
000019B2                          1423  
000019B2  43F9 000026C6           1424          LEA     COMMA,A1            * formatting
000019B8  103C 000E               1425          MOVE.B  #14,D0              * Trap #14 prints out a comma
000019BC  4E4F                    1426          TRAP    #15                 * Perform Trap #14
000019BE                          1427          
000019BE  0882 0006               1428          BCLR    #6,D2               * Bit manipulation is 
000019C2  0882 0007               1429          BCLR    #7,D2               * necessary in order to make
000019C6  0882 0008               1430          BCLR    #8,D2               * EAHELPER611 work generically
000019CA                          1431          
000019CA  6100 0340               1432          BSR     EAHELPER611         * Print out EA
000019CE                          1433  
000019CE  43F9 00002613           1434          LEA     NEWLINE,A1          * Formatting
000019D4  103C 000E               1435          MOVE.B  #14,D0              * Trap #14 prints out the data
000019D8  4E4F                    1436          TRAP    #15                 * Perform Trap #14
000019DA                          1437          
000019DA  4C9F 03FF               1438          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
000019DE  4E75                    1439          RTS                         * Return to main
000019E0                          1440          
000019E0                          1441  UNKNOWN1100
000019E0  6100 095E               1442          BSR     UNKNOWNOP
000019E4                          1443       
000019E4  4C9F 03FF               1444          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
000019E8  4E75                    1445          RTS                         * Return to main
000019EA                          1446          
000019EA                          1447  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000019EA                          1448  *-----------------------------------------------------------------------------
000019EA                          1449  
000019EA                          1450  
000019EA                          1451  
000019EA                          1452  
000019EA                          1453  
000019EA                          1454  
000019EA                          1455  *-----------------------------------------------------------------------------
000019EA                          1456  *-----------------------------------------------------------------------------
000019EA                          1457  * NAME: OP_1101   (ADD, ADDA)
000019EA                          1458  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000019EA                          1459  * PRE-CONDITION:  xyz
000019EA                          1460  * POST-CONDITION: All registers return to their previous state, and the output
000019EA                          1461  *                 goes to the output console for reading the raw data or the
000019EA                          1462  *                 actual instruction.
000019EA                          1463  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000019EA                          1464  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000019EA                          1465  OP1101
000019EA  48E7 FFFE               1466          MOVEM.L A0-A6/D0-D7,-(A7)
000019EE                          1467          
000019EE  3C3C 0006               1468          MOVE.W  #6, D6              * Prep lower value for bitmask
000019F2  3E3C 0008               1469          MOVE.W  #8, D7              * Prep upper value for bitmask
000019F6  6100 0BB2               1470          BSR     BITMASK             * Finalize bitmask setup
000019FA  CC42                    1471          AND     D2,D6               * Apply bitmask
000019FC  EC4E                    1472          LSR     #6,D6
000019FE                          1473  
000019FE  0C06 0000               1474          CMPI.B  #%0000000000000000,D6
00001A02  6700 003E               1475          BEQ     BYTE_EA_DN
00001A06                          1476  
00001A06  0C06 0001               1477          CMPI.B  #%0000000000000001,D6
00001A0A  6700 004E               1478          BEQ     WORD_EA_DN
00001A0E                          1479  
00001A0E  0C06 0002               1480          CMPI.B  #%0000000000000010,D6
00001A12  6700 005E               1481          BEQ     LONG_EA_DN
00001A16                          1482  
00001A16  0C06 0003               1483          CMPI.B  #%0000000000000011,D6
00001A1A  6700 006E               1484          BEQ     ADDA_WORD_OP
00001A1E                          1485  
00001A1E  0C06 0004               1486          CMPI.B  #%0000000000000100,D6
00001A22  6700 0086               1487          BEQ     BYTE_DN_EA
00001A26                          1488  
00001A26  0C06 0005               1489          CMPI.B  #%0000000000000101,D6
00001A2A  6700 0096               1490          BEQ     WORD_DN_EA
00001A2E                          1491  
00001A2E  0C06 0006               1492          CMPI.B  #%0000000000000110,D6
00001A32  6700 00A6               1493          BEQ     LONG_DN_EA
00001A36                          1494  
00001A36  0C06 0007               1495          CMPI.B  #%0000000000000111,D6
00001A3A  6700 00B6               1496          BEQ     ADDA_LONG_OP
00001A3E                          1497  
00001A3E  6000 011E               1498          BRA     ADD_ADDA_END
00001A42                          1499          
00001A42                          1500  BYTE_EA_DN
00001A42  6100 00CE               1501          BSR     ADD_EA_DN_GENERIC       * print out 'ADD' base op name for ADDA too
00001A46                          1502  
00001A46  43F9 000026D4           1503          LEA     __B,A1                  * print out size
00001A4C  103C 000E               1504          MOVE.B  #14,D0
00001A50  4E4F                    1505          TRAP    #15
00001A52                          1506  
00001A52  6100 00CC               1507          BSR     ADD_ADDA_SPACE          * print out space
00001A56  6000 00EE               1508          BRA     ADD_ADDA_PRINT
00001A5A                          1509  
00001A5A                          1510  WORD_EA_DN
00001A5A  6100 00B6               1511          BSR     ADD_EA_DN_GENERIC
00001A5E                          1512  
00001A5E  43F9 000026D8           1513          LEA     __W,A1
00001A64  103C 000E               1514          MOVE.B  #14,D0
00001A68  4E4F                    1515          TRAP    #15
00001A6A                          1516          
00001A6A  6100 00B4               1517          BSR     ADD_ADDA_SPACE
00001A6E  6000 00D6               1518          BRA     ADD_ADDA_PRINT
00001A72                          1519          
00001A72                          1520  LONG_EA_DN
00001A72  6100 009E               1521          BSR     ADD_EA_DN_GENERIC
00001A76                          1522  
00001A76  43F9 000026DC           1523          LEA     __L,A1
00001A7C  103C 000E               1524          MOVE.B  #14,D0
00001A80  4E4F                    1525          TRAP    #15
00001A82                          1526  
00001A82  6100 009C               1527          BSR     ADD_ADDA_SPACE
00001A86  6000 00BE               1528          BRA     ADD_ADDA_PRINT
00001A8A                          1529          
00001A8A                          1530  ADDA_WORD_OP
00001A8A  6100 0086               1531          BSR     ADD_EA_DN_GENERIC
00001A8E                          1532  
00001A8E  43F9 000026B4           1533          LEA     ASCII_A,A1
00001A94  103C 000E               1534          MOVE.B  #14,D0
00001A98  4E4F                    1535          TRAP    #15
00001A9A                          1536  
00001A9A  43F9 000026D8           1537          LEA     __W,A1
00001AA0  103C 000E               1538          MOVE.B  #14,D0
00001AA4  4E4F                    1539          TRAP    #15
00001AA6                          1540          
00001AA6  6000 0086               1541          BRA     ADDA_PRT
00001AAA                          1542          
00001AAA                          1543  BYTE_DN_EA
00001AAA  6100 0066               1544          BSR     ADD_EA_DN_GENERIC
00001AAE                          1545          
00001AAE  43F9 000026D4           1546          LEA     __B,A1
00001AB4  103C 000E               1547          MOVE.B  #14,D0
00001AB8  4E4F                    1548          TRAP    #15
00001ABA                          1549          
00001ABA  6100 0064               1550          BSR     ADD_ADDA_SPACE
00001ABE  6000 0086               1551          BRA     ADD_ADDA_PRINT
00001AC2                          1552  
00001AC2                          1553  WORD_DN_EA
00001AC2  6100 004E               1554          BSR     ADD_EA_DN_GENERIC
00001AC6                          1555  
00001AC6  43F9 000026D8           1556          LEA     __W,A1
00001ACC  103C 000E               1557          MOVE.B  #14,D0
00001AD0  4E4F                    1558          TRAP    #15 
00001AD2                          1559  
00001AD2  6100 004C               1560          BSR     ADD_ADDA_SPACE
00001AD6  6000 006E               1561          BRA     ADD_ADDA_PRINT
00001ADA                          1562  
00001ADA                          1563  LONG_DN_EA
00001ADA  6100 0036               1564          BSR     ADD_EA_DN_GENERIC
00001ADE                          1565          
00001ADE  43F9 000026DC           1566          LEA     __L,A1
00001AE4  103C 000E               1567          MOVE.B  #14,D0
00001AE8  4E4F                    1568          TRAP    #15     
00001AEA                          1569          
00001AEA  6100 0034               1570          BSR     ADD_ADDA_SPACE
00001AEE  6000 0056               1571          BRA     ADD_ADDA_PRINT
00001AF2                          1572  
00001AF2                          1573  ADDA_LONG_OP
00001AF2  6100 001E               1574          BSR     ADD_EA_DN_GENERIC
00001AF6                          1575          
00001AF6  43F9 000026B4           1576          LEA     ASCII_A,A1
00001AFC  103C 000E               1577          MOVE.B  #14,D0
00001B00  4E4F                    1578          TRAP    #15
00001B02                          1579          
00001B02  43F9 000026DC           1580          LEA     __L,A1
00001B08  103C 000E               1581          MOVE.B  #14,D0
00001B0C  4E4F                    1582          TRAP    #15
00001B0E                          1583          
00001B0E  6000 001E               1584          BRA     ADDA_PRT
00001B12                          1585          
00001B12                          1586  ADD_EA_DN_GENERIC
00001B12  43F9 0000269C           1587          LEA     OP_ADD_MSG,A1           * print out 'ADD'
00001B18  103C 000E               1588          MOVE.B  #14,D0
00001B1C  4E4F                    1589          TRAP    #15
00001B1E  4E75                    1590          RTS
00001B20                          1591          
00001B20                          1592  ADD_ADDA_SPACE
00001B20  43F9 000026C0           1593          LEA     SPACE,A1
00001B26  103C 000E               1594          MOVE.B  #14,D0
00001B2A  4E4F                    1595          TRAP    #15
00001B2C  4E75                    1596          RTS
00001B2E                          1597  
00001B2E                          1598  ADDA_PRT
00001B2E  6100 0374               1599          BSR     MODE_DN
00001B32  43F9 000026C6           1600          LEA     COMMA,A1
00001B38  103C 000E               1601          MOVE.B  #14,D0
00001B3C  4E4F                    1602          TRAP    #15
00001B3E  6100 0464               1603          BSR     MODE_AN
00001B42  6000 001A               1604          BRA     ADD_ADDA_END
00001B46                          1605  
00001B46                          1606  ADD_ADDA_PRINT
00001B46                          1607  
00001B46  6100 0206               1608          BSR     EAHELPER05          * Print out data. TODO: DOESN'T WORK.
00001B4A                          1609  
00001B4A  43F9 000026C6           1610          LEA     COMMA,A1            * formatting
00001B50  103C 000E               1611          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001B54  4E4F                    1612          TRAP    #15                 * Perform Trap #14
00001B56                          1613          
00001B56  6100 01B4               1614          BSR     EAHELPER611
00001B5A  6000 0002               1615          BRA     ADD_ADDA_END
00001B5E                          1616          
00001B5E                          1617  ADD_ADDA_END
00001B5E  43F9 00002613           1618          LEA     NEWLINE,A1
00001B64  103C 000E               1619          MOVE.B  #14,D0
00001B68  4E4F                    1620          TRAP    #15
00001B6A                          1621          
00001B6A  4CDF 7FFF               1622          MOVEM.L (A7)+,A0-A6/D0-D7
00001B6E  4E75                    1623          RTS
00001B70                          1624  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001B70                          1625  *-----------------------------------------------------------------------------
00001B70                          1626  
00001B70                          1627  
00001B70                          1628  
00001B70                          1629  *-----------------------------------------------------------------------------
00001B70                          1630  *-----------------------------------------------------------------------------
00001B70                          1631  * NAME: OP_1110   (LSL, LSR, ASL, ASR, ROL, ROR)
00001B70                          1632  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001B70                          1633  * PRE-CONDITION:  xyz
00001B70                          1634  * POST-CONDITION: All registers return to their previous state, and the output
00001B70                          1635  *                 goes to the output console for reading the raw data or the
00001B70                          1636  *                 actual instruction.
00001B70                          1637  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001B70                          1638  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001B70                          1639  OP1110
00001B70                          1640  
00001B70  48A7 FFC0               1641      MOVEM   D0-D7/A0-A1,-(A7)   * Caller saved
00001B74                          1642  
00001B74  7C03                    1643      MOVE.L  #3,D6
00001B76  7E04                    1644      MOVE.L  #4,D7
00001B78                          1645      
00001B78  6100 0A30               1646      BSR     BITMASK * generate a bitmask for the 3 and 4 bits
00001B7C                          1647      
00001B7C  CC82                    1648      AND.L   D2,D6
00001B7E                          1649      
00001B7E  0C46 0008               1650      CMPI    #%0000000000001000,D6 *is it a logical shift
00001B82  6700 001A               1651      BEQ     LS
00001B86                          1652      
00001B86  0C46 0000               1653      CMPI    #%0000000000000000,D6 *is it an arithmatic shift
00001B8A  6700 0048               1654      BEQ     AS
00001B8E                          1655      
00001B8E  0C46 0018               1656      CMPI    #%0000000000011000,D6 *is it a rorate?
00001B92  6700 0076               1657      BEQ     RO
00001B96                          1658  
00001B96  6100 07A8               1659      BSR     UNKNOWNOP *if nothing above, we don't know what it is
00001B9A  6000 0158               1660      BRA     ENDOP1110
00001B9E                          1661      
00001B9E                          1662  LS
00001B9E  7C08                    1663      MOVE.L  #8,D6
00001BA0  7E08                    1664      MOVE.L  #8,D7
00001BA2                          1665      
00001BA2  6100 0A06               1666      BSR     BITMASK
00001BA6                          1667      
00001BA6  CC82                    1668      AND.L   D2,D6
00001BA8                          1669      
00001BA8  0C46 0000               1670      CMPI    #0,D6 * is it a left shift?
00001BAC  6700 0016               1671      BEQ     LSR
00001BB0                          1672      
00001BB0  6000 0002               1673      BRA     LSL * if not a left shift, must be right
00001BB4                          1674  
00001BB4                          1675  LSL
00001BB4                          1676  
00001BB4  43F9 0000265E           1677      LEA     LSLOP,A1            * formatting
00001BBA  103C 000E               1678      MOVE.B  #14,D0              * Trap #14 prints out LSL
00001BBE  4E4F                    1679      TRAP    #15                 * Perform Trap #14
00001BC0                          1680      
00001BC0  6000 007E               1681      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001BC4                          1682                                  * prints the registers and imm data
00001BC4                          1683  LSR
00001BC4                          1684  
00001BC4  43F9 00002662           1685      LEA     LSROP,A1            * formatting
00001BCA  103C 000E               1686      MOVE.B  #14,D0              * Trap #14 prints out LSR
00001BCE  4E4F                    1687      TRAP    #15                 * Perform Trap #14
00001BD0                          1688      
00001BD0  6000 006E               1689      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001BD4                          1690                                  * prints the registers and imm data
00001BD4                          1691  
00001BD4                          1692  AS
00001BD4  7C08                    1693      MOVE.L  #8,D6
00001BD6  7E08                    1694      MOVE.L  #8,D7
00001BD8                          1695      
00001BD8  6100 09D0               1696      BSR     BITMASK
00001BDC                          1697      
00001BDC  CC82                    1698      AND.L   D2,D6
00001BDE                          1699      
00001BDE  0C46 0000               1700      CMPI    #0,D6 * is it a left shift?
00001BE2  6700 0016               1701      BEQ     ASR
00001BE6                          1702      
00001BE6  6000 0002               1703      BRA     ASL * if not a left shift, must be right
00001BEA                          1704      
00001BEA                          1705  ASL
00001BEA                          1706  
00001BEA  43F9 00002666           1707      LEA     ASLOP,A1            * formatting
00001BF0  103C 000E               1708      MOVE.B  #14,D0              * Trap #14 prints out ASL
00001BF4  4E4F                    1709      TRAP    #15                 * Perform Trap #14
00001BF6                          1710      
00001BF6  6000 0048               1711      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001BFA                          1712                                  * prints the registers and imm data
00001BFA                          1713  ASR
00001BFA                          1714  
00001BFA  43F9 0000266A           1715      LEA     ASROP,A1            * formatting
00001C00  103C 000E               1716      MOVE.B  #14,D0              * Trap #14 prints out ASR
00001C04  4E4F                    1717      TRAP    #15                 * Perform Trap #14
00001C06                          1718      
00001C06  6000 0038               1719      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001C0A                          1720                                  * prints the registers and imm data
00001C0A                          1721  RO
00001C0A  7C08                    1722      MOVE.L  #8,D6
00001C0C  7E08                    1723      MOVE.L  #8,D7
00001C0E                          1724      
00001C0E  6100 099A               1725      BSR     BITMASK
00001C12                          1726      
00001C12  CC82                    1727      AND.L   D2,D6
00001C14                          1728      
00001C14  0C46 0000               1729      CMPI    #0,D6 * is it a left shift?
00001C18  6700 0016               1730      BEQ     ROR
00001C1C                          1731      
00001C1C  6000 0002               1732      BRA     ROL * if not a left shift, must be right
00001C20                          1733  
00001C20                          1734  ROL
00001C20                          1735  
00001C20  43F9 0000266E           1736      LEA     ROLOP,A1            * formatting
00001C26  103C 000E               1737      MOVE.B  #14,D0              * Trap #14 prints out ROL
00001C2A  4E4F                    1738      TRAP    #15                 * Perform Trap #14
00001C2C                          1739      
00001C2C  6000 0012               1740      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001C30                          1741                                  * prints the registers and imm data
00001C30                          1742  ROR
00001C30                          1743  
00001C30  43F9 00002672           1744      LEA     ROROP,A1            * formatting
00001C36  103C 000E               1745      MOVE.B  #14,D0              * Trap #14 prints out ROR
00001C3A  4E4F                    1746      TRAP    #15                 * Perform Trap #14
00001C3C                          1747      
00001C3C  6000 0002               1748      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001C40                          1749                                  * prints the registers and imm data
00001C40                          1750  
00001C40                          1751  OP1110GENERIC
00001C40                          1752  
00001C40  6100 0462               1753      BSR     SIZE67
00001C44                          1754      
00001C44  7C05                    1755      MOVE.L  #5,D6
00001C46  7E05                    1756      MOVE.L  #5,D7
00001C48                          1757      
00001C48  6100 0960               1758      BSR     BITMASK
00001C4C                          1759      
00001C4C  CC82                    1760      AND.L   D2,D6
00001C4E                          1761      
00001C4E  0C46 0020               1762      CMPI    #%0000000000100000,D6   *is it a data reg?
00001C52  6700 0074               1763      BEQ     OP1110DATAREG
00001C56                          1764      
00001C56  43F9 000026C4           1765      LEA     IMD,A1              * formatting
00001C5C  103C 000E               1766      MOVE.B  #14,D0              * Trap #14 prints out pound #
00001C60  4E4F                    1767      TRAP    #15                 * Perform Trap #14
00001C62                          1768      
00001C62  7C09                    1769      MOVE.L  #9,D6
00001C64  7E0B                    1770      MOVE.L  #11,D7
00001C66                          1771      
00001C66  6100 0942               1772      BSR     BITMASK
00001C6A                          1773      
00001C6A  CC82                    1774      AND.L   D2,D6
00001C6C                          1775      
00001C6C  0C46 0000               1776      CMPI    #0,D6 * special case, if zero print #8 not #0
00001C70  6700 002E               1777      BEQ     OP1110IMMEIGHT
00001C74                          1778      
00001C74  E08E                    1779      LSR.L   #8,D6
00001C76  E28E                    1780      LSR.L   #1,D6
00001C78                          1781      
00001C78  2206                    1782      MOVE.L  D6,D1              * formatting
00001C7A  103C 0003               1783      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001C7E  4E4F                    1784      TRAP    #15                * Perform Trap #14
00001C80                          1785      
00001C80  43F9 000026C6           1786      LEA     COMMA,A1            * formatting
00001C86  103C 000E               1787      MOVE.B  #14,D0              * Trap #14 prints out comma
00001C8A  4E4F                    1788      TRAP    #15                 * Perform Trap #1
00001C8C                          1789      
00001C8C                          1790      * in order to use the eahlpers, we need to do some bit manipulation
00001C8C                          1791      * clearing the bits below lets our helper know that the mode is Dn
00001C8C  0882 0003               1792      BCLR    #3,D2
00001C90  0882 0004               1793      BCLR    #4,D2
00001C94  0882 0005               1794      BCLR    #5,D2
00001C98                          1795      
00001C98  6100 00B4               1796      BSR     EAHELPER05
00001C9C                          1797      
00001C9C  6000 0056               1798      BRA     ENDOP1110
00001CA0                          1799      
00001CA0                          1800  OP1110IMMEIGHT
00001CA0                          1801  
00001CA0  7208                    1802      MOVE.L  #8,D1              * formatting
00001CA2  103C 0003               1803      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001CA6  4E4F                    1804      TRAP    #15                * Perform Trap #14
00001CA8                          1805      
00001CA8  43F9 000026C6           1806      LEA     COMMA,A1            * formatting
00001CAE  103C 000E               1807      MOVE.B  #14,D0              * Trap #14 prints out comma
00001CB2  4E4F                    1808      TRAP    #15                 * Perform Trap #1
00001CB4                          1809      
00001CB4                          1810      * in order to use the eahlpers, we need to do some bit manipulation
00001CB4                          1811      * clearing the bits below lets our helper know that the mode is Dn
00001CB4  0882 0003               1812      BCLR    #3,D2
00001CB8  0882 0004               1813      BCLR    #4,D2
00001CBC  0882 0005               1814      BCLR    #5,D2
00001CC0                          1815      
00001CC0  6100 008C               1816      BSR     EAHELPER05
00001CC4                          1817      
00001CC4  6000 002E               1818      BRA     ENDOP1110
00001CC8                          1819  
00001CC8                          1820  OP1110DATAREG
00001CC8                          1821  
00001CC8                          1822      * in order to use the eahlpers, we need to do some bit manipulation
00001CC8                          1823      * clearing the bits below lets our helper know that the mode is Dn
00001CC8  0882 0003               1824      BCLR    #3,D2
00001CCC  0882 0004               1825      BCLR    #4,D2
00001CD0  0882 0005               1826      BCLR    #5,D2
00001CD4  0882 0006               1827      BCLR    #6,D2
00001CD8  0882 0007               1828      BCLR    #7,D2
00001CDC  0882 0008               1829      BCLR    #8,D2
00001CE0                          1830      
00001CE0  6100 002A               1831      BSR     EAHELPER611
00001CE4                          1832      
00001CE4  43F9 000026C6           1833      LEA     COMMA,A1            * formatting
00001CEA  103C 000E               1834      MOVE.B  #14,D0              * Trap #14 prints out comma
00001CEE  4E4F                    1835      TRAP    #15                 * Perform Trap #14
00001CF0                          1836      
00001CF0  6100 005C               1837      BSR     EAHELPER05
00001CF4                          1838  
00001CF4                          1839  ENDOP1110
00001CF4                          1840  
00001CF4  43F9 00002613           1841      LEA     NEWLINE,A1          * formatting
00001CFA  103C 000E               1842      MOVE.B  #14,D0              * Trap #14 prints out a new line
00001CFE  4E4F                    1843      TRAP    #15                 * Perform Trap #14
00001D00                          1844      
00001D00  4C9F 03FF               1845      MOVEM   (A7)+,D0-D7/A0-A1   * Caller saved
00001D04  4E75                    1846      RTS
00001D06                          1847  
00001D06                          1848  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001D06                          1849  *-----------------------------------------------------------------------------
00001D06                          1850  
00001D06                          1851  
00001D06                          1852  
00001D06                          1853  *-----------------------------------------------------------------------------
00001D06                          1854  *-----------------------------------------------------------------------------
00001D06                          1855  * NAME: OP_1111   ()
00001D06                          1856  * DESCRIPTION:    a
00001D06                          1857  * PRE-CONDITION:  b
00001D06                          1858  * POST-CONDITION: c
00001D06                          1859  * REGISTERS:      d
00001D06                          1860  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001D06                          1861  OP1111
00001D06                          1862  
00001D06  6100 0638               1863      BSR     UNKNOWNOP
00001D0A  4E75                    1864      RTS
00001D0C                          1865  
00001D0C                          1866  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001D0C                          1867  *-----------------------------------------------------------------------------
00001D0C                          1868  
00001D0C                          1869  
00001D0C                          1870  
00001D0C                          1871  *-----------------------------------------------------------------------------
00001D0C                          1872  *-----------------------------------------------------------------------------
00001D0C                          1873  * NAME:           EAHELPER611
00001D0C                          1874  * DESCRIPTION:    a
00001D0C                          1875  * PRE-CONDITION:  D2 contains the instruction to print modes for.
00001D0C                          1876  *                 D5 contains the size of the data to be printed
00001D0C                          1877  * POST-CONDITION: Determines if mode is direct, if it's not, passes D2 to 
00001D0C                          1878  *                 EAHELPER05 to print.
00001D0C                          1879  * REGISTERS:      a
00001D0C                          1880  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001D0C                          1881  EAHELPER611
00001D0C  48A7 FFC0               1882      MOVEM  D0-D7/A0-A1,-(A7)    * Push values onto stack
00001D10                          1883      
00001D10  3C3C 0006               1884      MOVE.W  #6, D6              * Prep lower value for bitmask
00001D14  3E3C 0008               1885      MOVE.W  #8, D7              * Prep upper value for bitmask
00001D18  6100 0890               1886      BSR     BITMASK             * Finalize bitmask setup
00001D1C  CC42                    1887      AND     D2,D6               * Apply bitmask
00001D1E                          1888      
00001D1E                          1889      * to move the mode where EAHELPER50 can process it
00001D1E  7C06                    1890      MOVE.L  #6,D6       * Prep lower value of bitmask
00001D20  7E08                    1891      MOVE.L  #8,D7       * Prep upper value of bitmask
00001D22  6100 0886               1892      BSR     BITMASK     * Create bitmask
00001D26  CC42                    1893      AND     D2,D6       * Apply bitmask
00001D28                          1894      
00001D28  4243                    1895      CLR     D3      * prep D3 to store values
00001D2A  3606                    1896      MOVE.W  D6,D3   * store bitmasked value in D3
00001D2C  E64B                    1897      LSR     #3,D3   * move bits 6-8 to 3-5
00001D2E                          1898      
00001D2E                          1899      * to move the register where EAHELPER50 can process it
00001D2E  7C09                    1900      MOVE.L  #9,D6   * Prep lower value for bitmask
00001D30  7E0B                    1901      MOVE.L  #11,D7  * Prep upper value for bitmask
00001D32  6100 0876               1902      BSR     BITMASK * create bitmask
00001D36  CC42                    1903      AND     D2,D6   * apply bitmask
00001D38                          1904      
00001D38  4244                    1905      CLR     D4      * prep D3 to store values
00001D3A  3806                    1906      MOVE.W  D6,D4   * store bitmasked value in D3
00001D3C                          1907      
00001D3C  E04C                    1908      LSR     #8,D4   * move bits 9-11 to 0-2
00001D3E  E24C                    1909      LSR     #1,D4   * move bits 9-11 to 0-2
00001D40                          1910    
00001D40  8684                    1911      OR.L    D4,D3   * combind the register and mode
00001D42  2403                    1912      MOVE.L  D3,D2   * put the result in D2 so EAHELPER05 can process it
00001D44                          1913      
00001D44  6100 0008               1914      BSR     EAHELPER05
00001D48                          1915      
00001D48                          1916  ENDEAHELPER611
00001D48                          1917      
00001D48  4C9F 03FF               1918      MOVEM  (A7)+,D0-D7/A0-A1    * Revert back
00001D4C  4E75                    1919      RTS
00001D4E                          1920  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001D4E                          1921  *-----------------------------------------------------------------------------
00001D4E                          1922  
00001D4E                          1923  
00001D4E                          1924  
00001D4E                          1925  *-----------------------------------------------------------------------------
00001D4E                          1926  *-----------------------------------------------------------------------------
00001D4E                          1927  * NAME:           EAHELPER05
00001D4E                          1928  * DESCRIPTION:    a
00001D4E                          1929  * PRE-CONDITION:  D2 contains the instruction to print modes for. Only call
00001D4E                          1930  *                 this sub-routine helper for operations that only have one
00001D4E                          1931  *                 mode register.
00001D4E                          1932  * POST-CONDITION: Determines mode, passes D2 to REGHELPER to print.
00001D4E                          1933  * REGISTERS:      a
00001D4E                          1934  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001D4E                          1935  EAHELPER05
00001D4E                          1936      * todo: add code for printing immediate values
00001D4E                          1937      
00001D4E  48A7 FFC0               1938      MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001D52                          1939      
00001D52  7C03                    1940      MOVE.L  #3,D6
00001D54  7E05                    1941      MOVE.L  #5,D7
00001D56                          1942      
00001D56  6100 0852               1943      BSR     BITMASK * generate a bitmask to identify the mode
00001D5A                          1944      
00001D5A  CC42                    1945      AND     D2,D6   * mask off the parts of D2 we don't need
00001D5C                          1946      
00001D5C  2A06                    1947      MOVE.L  D6,D5   * store the 3-5 bitmask for later use
00001D5E                          1948      
00001D5E  0C46 0000               1949      CMPI    #%0000000000000000,D6 * is it data register direct?
00001D62  6600 000A               1950      BNE     NOTDATAREG
00001D66                          1951      
00001D66  6100 013C               1952      BSR     MODE_DN
00001D6A                          1953       
00001D6A  6000 0132               1954      BRA     ENDEAHELPER05
00001D6E                          1955      
00001D6E                          1956  NOTDATAREG * address register direct
00001D6E                          1957      
00001D6E  0C46 0008               1958      CMPI    #%0000000000001000,D6 * is it address register direct?
00001D72  6600 000A               1959      BNE     NOTADRDIRECT
00001D76                          1960      
00001D76  6100 022C               1961      BSR     MODE_AN * simply prints out the address register
00001D7A                          1962       
00001D7A  6000 0122               1963      BRA     ENDEAHELPER05
00001D7E                          1964      
00001D7E                          1965  NOTADRDIRECT * address register indirect
00001D7E                          1966          
00001D7E  0C46 0010               1967      CMPI    #%0000000000010000,D6 * is it address register indirect?
00001D82  6600 0022               1968      BNE     NOTADRINDIRECT
00001D86                          1969      
00001D86  43F9 000026C8           1970      LEA     OBRACK,A1       * Load '('
00001D8C  303C 000E               1971      MOVE.W  #14,D0          * Trap #14 to display message
00001D90  4E4F                    1972      TRAP    #15             * Perform #14
00001D92                          1973          
00001D92                          1974  
00001D92  6100 0210               1975      BSR     MODE_AN * print out an address register
00001D96                          1976      
00001D96  43F9 000026CA           1977      LEA     CBRACK,A1       * Load ')'
00001D9C  303C 000E               1978      MOVE.W  #14,D0          * Trap #14 to display message
00001DA0  4E4F                    1979      TRAP    #15             * Perform #14
00001DA2                          1980       
00001DA2  6000 00FA               1981      BRA     ENDEAHELPER05
00001DA6                          1982      
00001DA6                          1983  NOTADRINDIRECT * address register indirect, post increment
00001DA6                          1984      
00001DA6  0C46 0018               1985      CMPI    #%0000000000011000,D6 * is it address register indirect post increment?
00001DAA  6600 002E               1986      BNE     NOTADRINDIRECTPOST
00001DAE                          1987      
00001DAE  43F9 000026C8           1988      LEA     OBRACK,A1       * Load '('
00001DB4  303C 000E               1989      MOVE.W  #14,D0          * Trap #14 to display message
00001DB8  4E4F                    1990      TRAP    #15             * Perform #14
00001DBA                          1991          
00001DBA                          1992  
00001DBA  6100 01E8               1993      BSR     MODE_AN * print out an address register
00001DBE                          1994      
00001DBE  43F9 000026CA           1995      LEA     CBRACK,A1       * Load ')'
00001DC4  303C 000E               1996      MOVE.W  #14,D0          * Trap #14 to display message
00001DC8  4E4F                    1997      TRAP    #15             * Perform #14
00001DCA                          1998      
00001DCA  43F9 000026CC           1999      LEA     PLUS,A1       * Load '+'
00001DD0  303C 000E               2000      MOVE.W  #14,D0          * Trap #14 to display message
00001DD4  4E4F                    2001      TRAP    #15             * Perform #14
00001DD6                          2002       
00001DD6  6000 00C6               2003      BRA     ENDEAHELPER05
00001DDA                          2004      
00001DDA                          2005  NOTADRINDIRECTPOST * address register indirect, pre decrement
00001DDA                          2006      
00001DDA  0C46 0020               2007      CMPI    #%0000000000100000,D6 * is it address register indirect pre decrement?
00001DDE  6600 002E               2008      BNE     NOTADRINDIRECTPRE
00001DE2                          2009      
00001DE2  43F9 000026CE           2010      LEA     MINUS,A1       * Load '-'
00001DE8  303C 000E               2011      MOVE.W  #14,D0          * Trap #14 to display message
00001DEC  4E4F                    2012      TRAP    #15             * Perform #14
00001DEE                          2013      
00001DEE  43F9 000026C8           2014      LEA     OBRACK,A1       * Load '('
00001DF4  303C 000E               2015      MOVE.W  #14,D0          * Trap #14 to display message
00001DF8  4E4F                    2016      TRAP    #15             * Perform #14
00001DFA                          2017          
00001DFA                          2018  
00001DFA  6100 01A8               2019      BSR     MODE_AN * print out an address register
00001DFE                          2020      
00001DFE  43F9 000026CA           2021      LEA     CBRACK,A1       * Load ')'
00001E04  303C 000E               2022      MOVE.W  #14,D0          * Trap #14 to display message
00001E08  4E4F                    2023      TRAP    #15             * Perform #14
00001E0A                          2024       
00001E0A  6000 0092               2025      BRA     ENDEAHELPER05
00001E0E                          2026  
00001E0E                          2027  NOTADRINDIRECTPRE
00001E0E                          2028  
00001E0E  0C46 0038               2029      CMPI    #%0000000000111000,D6 * is it immediate?
00001E12  6600 0086               2030      BNE     NOTIMMEDIATE
00001E16                          2031  
00001E16  0C43 0001               2032      CMPI    #1,D3 * is it a byte?
00001E1A  6600 0028               2033      BNE     NOTIMMBYTE
00001E1E                          2034      
00001E1E  43F9 000026C4           2035      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001E24  103C 000E               2036      MOVE.B  #14,D0
00001E28  4E4F                    2037      TRAP    #15
00001E2A                          2038      
00001E2A  3C3C 0000               2039      MOVE.W  #0, D6              * Prep lower value for bitmask
00001E2E  3E3C 0007               2040      MOVE.W  #7, D7              * Prep upper value for bitmask
00001E32  6100 0776               2041      BSR     BITMASK             * Finalize bitmask setup
00001E36                          2042          
00001E36  321A                    2043      MOVE.W  (A2)+,D1
00001E38                          2044      
00001E38  C286                    2045      AND.L     D6,D1
00001E3A                          2046          
00001E3A  103C 0003               2047      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001E3E  4E4F                    2048      TRAP    #15      * Perform Trap #3
00001E40                          2049      
00001E40  6000 005C               2050      BRA     ENDEAHELPER05
00001E44                          2051  
00001E44                          2052  NOTIMMBYTE
00001E44                          2053      
00001E44  0C43 0002               2054      CMPI    #2,D3 * is it a word?
00001E48  6600 0028               2055      BNE     NOTIMMWORD
00001E4C                          2056      
00001E4C  43F9 000026C4           2057      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001E52  103C 000E               2058      MOVE.B  #14,D0
00001E56  4E4F                    2059      TRAP    #15
00001E58                          2060      
00001E58  3C3C 0000               2061      MOVE.W  #0, D6              * Prep lower value for bitmask
00001E5C  3E3C 000F               2062      MOVE.W  #15, D7             * Prep upper value for bitmask
00001E60  6100 0748               2063      BSR     BITMASK             * Finalize bitmask setup
00001E64                          2064          
00001E64  321A                    2065      MOVE.W  (A2)+,D1
00001E66                          2066      
00001E66  C286                    2067      AND.L     D6,D1               * Apply bitmask
00001E68                          2068          
00001E68  103C 0003               2069      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001E6C  4E4F                    2070      TRAP    #15      * Perform Trap #3
00001E6E                          2071      
00001E6E  6000 002E               2072      BRA     ENDEAHELPER05
00001E72                          2073      
00001E72                          2074  NOTIMMWORD
00001E72  0C43 0003               2075      CMPI    #3,D3 * is it a long?
00001E76  6600 0022               2076      BNE     NOTIMMEDIATE
00001E7A                          2077      
00001E7A  43F9 000026C4           2078      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001E80  103C 000E               2079      MOVE.B  #14,D0
00001E84  4E4F                    2080      TRAP    #15
00001E86                          2081          
00001E86  221A                    2082      MOVE.L  (A2)+,D1
00001E88                          2083          
00001E88  103C 0003               2084      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001E8C  4E4F                    2085      TRAP    #15      * Perform Trap #3
00001E8E                          2086      
00001E8E  321A                    2087      MOVE.W  (A2)+,D1
00001E90                          2088          
00001E90  103C 0003               2089      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001E94  4E4F                    2090      TRAP    #15      * Perform Trap #3
00001E96                          2091      
00001E96  6000 0006               2092      BRA     ENDEAHELPER05
00001E9A                          2093  
00001E9A                          2094  NOTIMMEDIATE    
00001E9A                          2095  
00001E9A                          2096  
00001E9A  6100 04A4               2097      BSR     UNKNOWNOP
00001E9E                          2098      
00001E9E                          2099  ENDEAHELPER05
00001E9E  4C9F 03FF               2100      MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001EA2  4E75                    2101      RTS
00001EA4                          2102  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001EA4                          2103  *-----------------------------------------------------------------------------
00001EA4                          2104  
00001EA4                          2105  
00001EA4                          2106  
00001EA4                          2107  *-----------------------------------------------------------------------------
00001EA4                          2108  *-----------------------------------------------------------------------------
00001EA4                          2109  * NAME:           MODE_DN
00001EA4                          2110  * DESCRIPTION:    Generalize the EA part of the project.
00001EA4                          2111  * PRE-CONDITION:  The mode must have been correctly identified. All modes
00001EA4                          2112  *                 must be called by RTS.
00001EA4                          2113  * POST-CONDITION: After the EA, the entire op will head back to the BSR that
00001EA4                          2114  *                 called it.
00001EA4                          2115  * REGISTERS:      a
00001EA4                          2116  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001EA4                          2117  * ---> Dn
00001EA4                          2118  MODE_DN
00001EA4  48A7 FFC0               2119          MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001EA8                          2120  
00001EA8  3C3C 0000               2121          MOVE.W  #0, D6              * Prep lower value for bitmask
00001EAC  3E3C 0002               2122          MOVE.W  #2, D7              * Prep upper value for bitmask
00001EB0  6100 06F8               2123          BSR     BITMASK             * Finalize bitmask setup
00001EB4  CC42                    2124          AND     D2,D6               * Apply bitmask
00001EB6                          2125          
00001EB6  0C46 0000               2126          CMPI    #%000000000000000, D6   * Data Register D0?
00001EBA  6600 000A               2127          BNE     NOTD0
00001EBE                          2128          
00001EBE  6100 0074               2129          BSR     PRINTD0
00001EC2  6000 006A               2130          BRA     ENDMODE_DN
00001EC6                          2131  NOTD0      
00001EC6  0C46 0001               2132          CMPI    #%000000000000001, D6   * Data Register D1?
00001ECA  6600 000A               2133          BNE     NOTD1
00001ECE                          2134          
00001ECE  6100 0072               2135          BSR     PRINTD1
00001ED2  6000 005A               2136          BRA     ENDMODE_DN
00001ED6                          2137  NOTD1
00001ED6  0C46 0002               2138          CMPI    #%000000000000010, D6   * Data Register D2?
00001EDA  6600 000A               2139          BNE     NOTD2
00001EDE                          2140          
00001EDE  6100 0070               2141          BSR     PRINTD2
00001EE2  6000 004A               2142          BRA     ENDMODE_DN
00001EE6                          2143  NOTD2
00001EE6  0C46 0003               2144          CMPI    #%000000000000011, D6   * Data Register D3?
00001EEA  6600 000A               2145          BNE     NOTD3
00001EEE                          2146          
00001EEE  6100 006E               2147          BSR     PRINTD3
00001EF2  6000 003A               2148          BRA     ENDMODE_DN
00001EF6                          2149  NOTD3
00001EF6  0C46 0004               2150          CMPI    #%000000000000100, D6   * Data Register D4?
00001EFA  6600 000A               2151          BNE     NOTD4
00001EFE                          2152          
00001EFE  6100 006C               2153          BSR     PRINTD4
00001F02  6000 002A               2154          BRA     ENDMODE_DN
00001F06                          2155  NOTD4
00001F06  0C46 0005               2156          CMPI    #%000000000000101, D6   * Data Register D5?
00001F0A  6600 000A               2157          BNE     NOTD5
00001F0E                          2158          
00001F0E  6100 006A               2159          BSR     PRINTD5
00001F12  6000 001A               2160          BRA     ENDMODE_DN
00001F16                          2161  NOTD5
00001F16  0C46 0006               2162          CMPI    #%000000000000110, D6   * Data Register D6?
00001F1A  6600 000A               2163          BNE     NOTD6
00001F1E                          2164          
00001F1E  6100 0068               2165          BSR     PRINTD6
00001F22  6000 000A               2166          BRA     ENDMODE_DN
00001F26                          2167  NOTD6
00001F26  6100 006E               2168          BSR     PRINTD7
00001F2A  6000 0002               2169          BRA     ENDMODE_DN
00001F2E                          2170          
00001F2E                          2171  ENDMODE_DN
00001F2E  4C9F 03FF               2172          MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001F32  4E75                    2173          RTS
00001F34                          2174  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001F34                          2175  *-----------------------------------------------------------------------------
00001F34                          2176  
00001F34                          2177  
00001F34                          2178  
00001F34                          2179  *-----------------------------------------------------------------------------
00001F34                          2180  *-----------------------------------------------------------------------------
00001F34                          2181  * NAME:           PRINTD0
00001F34                          2182  * DESCRIPTION:    Simply prints D0, D1, ..., up to D7.
00001F34                          2183  * PRE-CONDITION:  a
00001F34                          2184  * POST-CONDITION: a
00001F34                          2185  * REGISTERS:      a
00001F34                          2186  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001F34                          2187  PRINTD0
00001F34  43F9 000026F8           2188          LEA     __D0, A1        * Load 'D0'
00001F3A  103C 000E               2189          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F3E  4E4F                    2190          TRAP    #15             * Perform Trap #14
00001F40  4E75                    2191          RTS
00001F42                          2192  PRINTD1
00001F42  43F9 000026FB           2193          LEA     __D1, A1        * Load 'D1'
00001F48  103C 000E               2194          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F4C  4E4F                    2195          TRAP    #15             * Perform Trap #14
00001F4E  4E75                    2196          RTS      
00001F50                          2197  PRINTD2
00001F50  43F9 000026FE           2198          LEA     __D2, A1        * Load 'D2'
00001F56  103C 000E               2199          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F5A  4E4F                    2200          TRAP    #15             * Perform Trap #14
00001F5C  4E75                    2201          RTS      
00001F5E                          2202  PRINTD3
00001F5E  43F9 00002701           2203          LEA     __D3, A1        * Load 'D3'
00001F64  103C 000E               2204          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F68  4E4F                    2205          TRAP    #15             * Perform Trap #14
00001F6A  4E75                    2206          RTS      
00001F6C                          2207  PRINTD4
00001F6C  43F9 00002704           2208          LEA     __D4, A1        * Load 'D4'
00001F72  103C 000E               2209          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F76  4E4F                    2210          TRAP    #15             * Perform Trap #14
00001F78  4E75                    2211          RTS       
00001F7A                          2212  PRINTD5
00001F7A  43F9 00002707           2213          LEA     __D5, A1        * Load 'D5'
00001F80  103C 000E               2214          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F84  4E4F                    2215          TRAP    #15             * Perform Trap #14
00001F86  4E75                    2216          RTS      
00001F88                          2217  PRINTD6
00001F88  43F9 0000270A           2218          LEA     __D6, A1        * Load 'D6'
00001F8E  103C 000E               2219          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F92  4E4F                    2220          TRAP    #15             * Perform Trap #14
00001F94  4E75                    2221          RTS
00001F96                          2222  PRINTD7
00001F96  43F9 0000270D           2223          LEA     __D7, A1        * Load 'D7'
00001F9C  103C 000E               2224          MOVE.B  #14, D0         * Load Trap #14 to print out
00001FA0  4E4F                    2225          TRAP    #15             * Perform Trap #14
00001FA2  4E75                    2226          RTS
00001FA4                          2227  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001FA4                          2228  *-----------------------------------------------------------------------------
00001FA4                          2229  
00001FA4                          2230  
00001FA4                          2231  
00001FA4                          2232  *-----------------------------------------------------------------------------
00001FA4                          2233  *-----------------------------------------------------------------------------
00001FA4                          2234  * NAME:           MODE_AN
00001FA4                          2235  * DESCRIPTION:    Simply chooses to print A0-A7.
00001FA4                          2236  * PRE-CONDITION:  a
00001FA4                          2237  * POST-CONDITION: a
00001FA4                          2238  * REGISTERS:      a
00001FA4                          2239  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001FA4                          2240  MODE_AN
00001FA4  48A7 FFC0               2241          MOVEM   D0-D7/A0-A1,-(A7)   * Save information
00001FA8                          2242  
00001FA8  3C3C 0000               2243          MOVE.W  #0, D6              * Prep lower value for bitmask
00001FAC  3E3C 0002               2244          MOVE.W  #2, D7              * Prep upper value for bitmask
00001FB0  6100 05F8               2245          BSR     BITMASK             * Finalize bitmask setup
00001FB4  CC42                    2246          AND     D2,D6               * Apply bitmask
00001FB6                          2247          
00001FB6  0C46 0000               2248          CMPI    #%000000000000000, D6   * Address Register A0?
00001FBA  6600 000A               2249          BNE     NOTA0
00001FBE                          2250          
00001FBE  6100 0074               2251          BSR     PRINTA0
00001FC2                          2252          
00001FC2  6000 006A               2253          BRA     ENDMODE_AN
00001FC6                          2254  NOTA0      
00001FC6  0C46 0001               2255          CMPI    #%000000000000001, D6   * Address Register A1?
00001FCA  6600 000A               2256          BNE     NOTA1
00001FCE                          2257          
00001FCE  6100 0072               2258          BSR     PRINTA1
00001FD2                          2259          
00001FD2  6000 005A               2260          BRA     ENDMODE_AN
00001FD6                          2261  NOTA1
00001FD6  0C46 0002               2262          CMPI    #%000000000000010, D6   * Address Register A2?
00001FDA  6600 000A               2263          BNE     NOTA2
00001FDE                          2264          
00001FDE  6100 0070               2265          BSR     PRINTA2
00001FE2                          2266          
00001FE2  6000 004A               2267          BRA     ENDMODE_AN
00001FE6                          2268  NOTA2
00001FE6  0C46 0003               2269          CMPI    #%000000000000011, D6   * Address Register A3?
00001FEA  6600 000A               2270          BNE     NOTA3
00001FEE                          2271          
00001FEE  6100 006E               2272          BSR     PRINTA3
00001FF2                          2273          
00001FF2  6000 003A               2274          BRA     ENDMODE_AN
00001FF6                          2275  NOTA3
00001FF6  0C46 0004               2276          CMPI    #%000000000000100, D6   * Address Register A4?
00001FFA  6600 000A               2277          BNE     NOTA4
00001FFE                          2278          
00001FFE  6100 006C               2279          BSR     PRINTA4
00002002                          2280          
00002002  6000 002A               2281          BRA     ENDMODE_AN
00002006                          2282  NOTA4
00002006  0C46 0005               2283          CMPI    #%000000000000101, D6   * Address Register A5?
0000200A  6600 000A               2284          BNE     NOTA5
0000200E                          2285          
0000200E  6100 006A               2286          BSR     PRINTA5
00002012                          2287          
00002012  6000 001A               2288          BRA     ENDMODE_AN
00002016                          2289  NOTA5
00002016  0C46 0006               2290          CMPI    #%000000000000110, D6   * Address Register A6?
0000201A  6600 000A               2291          BNE     NOTA6
0000201E                          2292          
0000201E  6100 0068               2293          BSR     PRINTA6
00002022                          2294          
00002022  6000 000A               2295          BRA     ENDMODE_AN
00002026                          2296  NOTA6
00002026  6100 006E               2297          BSR     PRINTA7
0000202A                          2298          
0000202A  6000 0002               2299          BRA     ENDMODE_AN
0000202E                          2300  ENDMODE_AN
0000202E  4C9F 03FF               2301          MOVEM   (A7)+,D0-D7/A0-A1   * Restore registers
00002032  4E75                    2302          RTS
00002034                          2303  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002034                          2304  *-----------------------------------------------------------------------------
00002034                          2305  
00002034                          2306  
00002034                          2307  
00002034                          2308  *-----------------------------------------------------------------------------
00002034                          2309  *-----------------------------------------------------------------------------
00002034                          2310  * NAME:           PRINTA0
00002034                          2311  * DESCRIPTION:    Simply print out the address register.
00002034                          2312  * PRE-CONDITION:  a
00002034                          2313  * POST-CONDITION: a
00002034                          2314  * REGISTERS:      a
00002034                          2315  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002034                          2316  PRINTA0
00002034  43F9 000026E0           2317          LEA     __A0, A1        * Load 'A0'
0000203A  103C 000E               2318          MOVE.B  #14, D0         * Load Trap #14 to print out
0000203E  4E4F                    2319          TRAP    #15             * Perform Trap #14
00002040  4E75                    2320          RTS
00002042                          2321  
00002042                          2322  PRINTA1
00002042  43F9 000026E3           2323          LEA     __A1, A1        * Load 'A1'
00002048  103C 000E               2324          MOVE.B  #14, D0         * Load Trap #14 to print out
0000204C  4E4F                    2325          TRAP    #15             * Perform Trap #14
0000204E  4E75                    2326          RTS
00002050                          2327          
00002050                          2328  PRINTA2
00002050  43F9 000026E6           2329          LEA     __A2, A1        * Load 'A2'
00002056  103C 000E               2330          MOVE.B  #14, D0         * Load Trap #14 to print out
0000205A  4E4F                    2331          TRAP    #15             * Perform Trap #14
0000205C  4E75                    2332          RTS
0000205E                          2333  
0000205E                          2334  PRINTA3
0000205E  43F9 000026E9           2335          LEA     __A3, A1        * Load 'A3'
00002064  103C 000E               2336          MOVE.B  #14, D0         * Load Trap #14 to print out
00002068  4E4F                    2337          TRAP    #15             * Perform Trap #14
0000206A  4E75                    2338          RTS
0000206C                          2339  
0000206C                          2340  PRINTA4
0000206C  43F9 000026EC           2341          LEA     __A4, A1        * Load 'A4'
00002072  103C 000E               2342          MOVE.B  #14, D0         * Load Trap #14 to print out
00002076  4E4F                    2343          TRAP    #15             * Perform Trap #14
00002078  4E75                    2344          RTS
0000207A                          2345  
0000207A                          2346  PRINTA5
0000207A  43F9 000026EF           2347          LEA     __A5, A1        * Load 'A5'
00002080  103C 000E               2348          MOVE.B  #14, D0         * Load Trap #14 to print out
00002084  4E4F                    2349          TRAP    #15             * Perform Trap #14
00002086  4E75                    2350          RTS
00002088                          2351  
00002088                          2352  PRINTA6
00002088  43F9 000026F2           2353          LEA     __A6, A1        * Load 'A6'
0000208E  103C 000E               2354          MOVE.B  #14, D0         * Load Trap #14 to print out
00002092  4E4F                    2355          TRAP    #15             * Perform Trap #14
00002094  4E75                    2356          RTS
00002096                          2357  
00002096                          2358  PRINTA7
00002096  43F9 000026F5           2359          LEA     __A7, A1        * Load 'A7'
0000209C  103C 000E               2360          MOVE.B  #14, D0         * Load Trap #14 to print out
000020A0  4E4F                    2361          TRAP    #15             * Perform Trap #14
000020A2  4E75                    2362          RTS
000020A4                          2363  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000020A4                          2364  *-----------------------------------------------------------------------------
000020A4                          2365  
000020A4                          2366  
000020A4                          2367  
000020A4                          2368  *-----------------------------------------------------------------------------
000020A4                          2369  *-----------------------------------------------------------------------------
000020A4                          2370  * NAME:           SIZE67
000020A4                          2371  * DESCRIPTION:    Called if the size is stored in bits 6 to 7.
000020A4                          2372  * PRE-CONDITION:  a
000020A4                          2373  * POST-CONDITION: a
000020A4                          2374  * REGISTERS:      a
000020A4                          2375  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000020A4                          2376  SIZE67
000020A4  48A7 FFFE               2377          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
000020A8  3C3C 0006               2378          MOVE.W  #6, D6              * Prep lower value for bitmask
000020AC  3E3C 0007               2379          MOVE.W  #7, D7              * Prep upper value for bitmask
000020B0  6100 04F8               2380          BSR     BITMASK             * Finalize bitmask setup
000020B4  CC42                    2381          AND     D2,D6               * Apply bitmask     
000020B6                          2382  
000020B6  0C46 0000               2383          CMPI    #%0000000000000000, D6   * is it a BYTE?
000020BA  6600 000A               2384          BNE     NOT67BYTE
000020BE                          2385          
000020BE  6100 009C               2386          BSR     PRINTBYTE               * Branch to handle BYTE sizes
000020C2  6000 001E               2387          BRA     END67
000020C6                          2388  NOT67BYTE        
000020C6  0C46 0040               2389          CMPI    #%0000000001000000, D6   * is it a WORD?
000020CA  6600 000A               2390          BNE     NOT67WORD
000020CE                          2391          
000020CE  6100 009A               2392          BSR     PRINTWORD               * Branch to handle WORD sizes
000020D2  6000 000E               2393          BRA     END67
000020D6                          2394  NOT67WORD
000020D6  0C46 0080               2395          CMPI    #%0000000010000000, D6   * is it a LONG?
000020DA  6600 0006               2396          BNE     END67
000020DE                          2397          
000020DE  6100 0098               2398          BSR     PRINTLONG               * Branch to handle LONG sizes
000020E2                          2399  END67
000020E2  4C9F 7FFF               2400          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
000020E6  4E75                    2401          RTS                             * Return. Size handling is finished.
000020E8                          2402  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000020E8                          2403  *-----------------------------------------------------------------------------
000020E8                          2404  
000020E8                          2405  
000020E8                          2406  
000020E8                          2407  *-----------------------------------------------------------------------------
000020E8                          2408  *-----------------------------------------------------------------------------
000020E8                          2409  * NAME:           SIZE68
000020E8                          2410  * DESCRIPTION:    Called if the size is stored in bits 6 to 8.
000020E8                          2411  * PRE-CONDITION:  a
000020E8                          2412  * POST-CONDITION: a
000020E8                          2413  * REGISTERS:      a
000020E8                          2414  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000020E8                          2415  SIZE68
000020E8                          2416  
000020E8  48A7 FFFE               2417          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
000020EC  3C3C 0006               2418          MOVE.W  #6, D6              * Prep lower value for bitmask
000020F0  3E3C 0008               2419          MOVE.W  #8, D7              * Prep upper value for bitmask
000020F4  6100 04B4               2420          BSR     BITMASK             * Finalize bitmask setup
000020F8  CC42                    2421          AND     D2,D6               * Apply bitmask       
000020FA                          2422  
000020FA  0C46 0000               2423          CMPI    #%0000000000000000, D6  * is it a BYTE?
000020FE  6700 003E               2424          BEQ     PRINTBYTE68               * Branch to handle BYTE sizes
00002102  0C46 0100               2425          CMPI    #%0000000100000000, D6  * is it a BYTE?
00002106  6700 0036               2426          BEQ     PRINTBYTE68               * Branch to handle BYTE sizes 
0000210A                          2427        
0000210A  0C46 0040               2428          CMPI    #%0000000001000000, D6  * is it a WORD?
0000210E  6700 0036               2429          BEQ     PRINTWORD68               * Branch to handle BYTE sizes
00002112  0C46 0140               2430          CMPI    #%0000000101000000, D6  * is it a WORD?
00002116  6700 002E               2431          BEQ     PRINTWORD68               * Branch to handle BYTE sizes
0000211A  0C46 00C0               2432          CMPI    #%0000000011000000, D6  * is it a WORD (ADDA)?
0000211E  6700 0026               2433          BEQ     PRINTWORD68               * Branch to handle BYTE sizes
00002122                          2434  
00002122  0C46 0080               2435          CMPI    #%0000000010000000, D6  * is it a LONG?
00002126  6700 0026               2436          BEQ     PRINTLONG68               * Branch to handle BYTE sizes
0000212A  0C46 0180               2437          CMPI    #%0000000110000000, D6  * is it a LONG?
0000212E  6700 001E               2438          BEQ     PRINTLONG68               * Branch to handle BYTE sizes
00002132  0C46 01C0               2439          CMPI    #%0000000111000000, D6  * is it a LONG (ADDA)?
00002136  6700 0016               2440          BEQ     PRINTLONG68               * Branch to handle BYTE sizes
0000213A                          2441  
0000213A  6000 001A               2442          BRA     END68
0000213E                          2443          
0000213E                          2444  PRINTBYTE68
0000213E  6100 001C               2445          BSR     PRINTBYTE
00002142  6000 0012               2446          BRA     END68
00002146                          2447  
00002146                          2448  PRINTWORD68
00002146  6100 0022               2449          BSR     PRINTWORD
0000214A  6000 000A               2450          BRA     END68
0000214E                          2451          
0000214E                          2452  PRINTLONG68
0000214E  6100 0028               2453          BSR     PRINTLONG
00002152  6000 0002               2454          BRA     END68
00002156                          2455  
00002156                          2456  END68
00002156  4C9F 7FFF               2457          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
0000215A  4E75                    2458          RTS                             * Return. Size handling is finished.
0000215C                          2459  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000215C                          2460  *-----------------------------------------------------------------------------
0000215C                          2461  
0000215C                          2462  
0000215C                          2463  
0000215C                          2464  *-----------------------------------------------------------------------------
0000215C                          2465  *-----------------------------------------------------------------------------
0000215C                          2466  * NAME:           PRINTBYTE
0000215C                          2467  * DESCRIPTION:    a
0000215C                          2468  * PRE-CONDITION:  a
0000215C                          2469  * POST-CONDITION: a
0000215C                          2470  * REGISTERS:      a
0000215C                          2471  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000215C                          2472  PRINTBYTE
0000215C  43F9 000026D4           2473          LEA     __B,A1      * Load '.B ' into A1
00002162  103C 000E               2474          MOVE.B  #14,D0      * Trap #14 setup to print
00002166  4E4F                    2475          TRAP    #15         * Perform Trap #14
00002168  4E75                    2476          RTS                 * Return to SIZE67/SIZE68
0000216A                          2477          
0000216A                          2478  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000216A                          2479  *-----------------------------------------------------------------------------
0000216A                          2480  
0000216A                          2481  
0000216A                          2482  
0000216A                          2483  *-----------------------------------------------------------------------------
0000216A                          2484  *-----------------------------------------------------------------------------
0000216A                          2485  * NAME:           PRINTWORD
0000216A                          2486  * DESCRIPTION:    a
0000216A                          2487  * PRE-CONDITION:  a
0000216A                          2488  * POST-CONDITION: a
0000216A                          2489  * REGISTERS:      a
0000216A                          2490  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000216A                          2491  PRINTWORD
0000216A  43F9 000026D8           2492          LEA     __W,A1      * Load '.W ' into A1
00002170  103C 000E               2493          MOVE.B  #14,D0      * Trap #14 setup to print
00002174  4E4F                    2494          TRAP    #15         * Perform Trap #14
00002176  4E75                    2495          RTS                 * Return to SIZE67/SIZE68
00002178                          2496          
00002178                          2497  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002178                          2498  *-----------------------------------------------------------------------------
00002178                          2499  
00002178                          2500  
00002178                          2501  
00002178                          2502  *-----------------------------------------------------------------------------
00002178                          2503  *-----------------------------------------------------------------------------
00002178                          2504  * NAME:           PRINTLONG
00002178                          2505  * DESCRIPTION:    a
00002178                          2506  * PRE-CONDITION:  a
00002178                          2507  * POST-CONDITION: a
00002178                          2508  * REGISTERS:      a
00002178                          2509  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002178                          2510  PRINTLONG
00002178  43F9 000026DC           2511          LEA     __L,A1      * Load '.L ' into A1
0000217E  103C 000E               2512          MOVE.B  #14,D0      * Trap #14 setup to print
00002182  4E4F                    2513          TRAP    #15         * Perform Trap #14
00002184  4E75                    2514          RTS                 * Return to SIZE67/SIZE68
00002186                          2515          
00002186                          2516  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002186                          2517  *-----------------------------------------------------------------------------
00002186                          2518  
00002186                          2519  
00002186                          2520  
00002186                          2521  *-----------------------------------------------------------------------------
00002186                          2522  *-----------------------------------------------------------------------------
00002186                          2523  * NAME:           MOVEMHELPERPOST
00002186                          2524  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
00002186                          2525  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
00002186                          2526  * POST-CONDITION: The registers being saved are printed
00002186                          2527  * REGISTERS:      A2
00002186                          2528  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002186                          2529  MOVEMHELPERPOST
00002186  48A7 FFFE               2530          MOVEM  D0-D7/A0-A6,-(A7)
0000218A                          2531          
0000218A  4285                    2532          CLR.L   D5  * to be used as a loop counter
0000218C  4284                    2533          CLR.L   D4  * == 1 if we have printed any registers (for fencepost issue)
0000218E  4283                    2534          CLR.L   D3  * == 1 if we are in a range
00002190  4286                    2535          CLR.L   D6  * == 1 if we have already printed the slash or dash
00002192  4287                    2536          CLR.L   D7  * == counts the number of registers in a range
00002194  1C3C 0001               2537          MOVE.B  #1,D6 * to fix fencepost issue
00002198  4282                    2538          CLR.L   D2
0000219A  3412                    2539          MOVE.W  (A2),D2
0000219C                          2540          
0000219C                          2541  DLOOP * loop to print out the data register portion of the addresses being saved
0000219C                          2542  
0000219C  E25A                    2543          ROR     #1,D2
0000219E  6500 0006               2544          BCS     DVALID
000021A2                          2545          
000021A2  6000 0064               2546          BRA     DINVALID
000021A6                          2547          
000021A6                          2548  DVALID
000021A6  0C43 0000               2549          CMPI    #0,D3
000021AA  6700 0020               2550          BEQ     DFORWARDVALID * we are not in a range
000021AE                          2551          
000021AE  5247                    2552          ADDI    #1,D7 *increment number of regs in range
000021B0                          2553          
000021B0  0C46 0001               2554          CMPI    #1,D6   *have we already printed a symbol?
000021B4  6700 0086               2555          BEQ     DLOOPITER
000021B8                          2556          
000021B8  43F9 000026D2           2557          LEA     DASH,A1    *print a dash
000021BE  103C 000E               2558          MOVE.B  #14,D0
000021C2  4E4F                    2559          TRAP    #15
000021C4                          2560          
000021C4  1C3C 0001               2561          MOVE.B  #1,D6 * indicates a symbol has been printed
000021C8                          2562          
000021C8  6000 0072               2563          BRA     DLOOPITER
000021CC                          2564          
000021CC                          2565  DFORWARDVALID
000021CC                          2566          * not in a range yet, print
000021CC                          2567          
000021CC  0C44 0000               2568          CMPI    #0,D4
000021D0  6700 000E               2569          BEQ     DNOSLASH
000021D4                          2570                  
000021D4  43F9 000026D0           2571          LEA     SLASH,A1
000021DA  103C 000E               2572          MOVE.B  #14,D0
000021DE  4E4F                    2573          TRAP    #15
000021E0                          2574          
000021E0                          2575  DNOSLASH
000021E0                          2576  
000021E0  183C 0001               2577          MOVE.B  #1,D4 * we have printed something, now slashes are fair game
000021E4                          2578          
000021E4  1C3C 0001               2579          MOVE.B  #1,D6   * we have printed a symbol
000021E8                          2580          
000021E8  43F9 000026BA           2581          LEA     ASCII_D,A1
000021EE  103C 000E               2582          MOVE.B  #14,D0
000021F2  4E4F                    2583          TRAP    #15
000021F4                          2584          
000021F4  2205                    2585          MOVE.L  D5,D1
000021F6  103C 0003               2586          MOVE.B  #3,D0
000021FA  4E4F                    2587          TRAP    #15
000021FC                          2588  
000021FC  163C 0001               2589          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
00002200  1C3C 0000               2590          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
00002204                          2591          
00002204  6000 0036               2592          BRA     DLOOPITER
00002208                          2593  
00002208                          2594  
00002208                          2595  DINVALID
00002208                          2596  
00002208                          2597          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
00002208                          2598          
00002208  0C43 0001               2599          CMPI    #1,D3
0000220C  6600 002E               2600          BNE     DLOOPITER
00002210                          2601          
00002210  163C 0000               2602          MOVE.B  #0,D3
00002214                          2603          
00002214  0C47 0001               2604          CMPI    #1,D7
00002218  6D00 0020               2605          BLT     DLOOPITERCLR
0000221C                          2606          
0000221C  43F9 000026BA           2607          LEA     ASCII_D,A1
00002222  103C 000E               2608          MOVE.B  #14,D0
00002226  4E4F                    2609          TRAP    #15
00002228                          2610          
00002228  2205                    2611          MOVE.L  D5,D1
0000222A                          2612          
0000222A  0641 FFFF               2613          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
0000222E                          2614          
0000222E  103C 0003               2615          MOVE.B  #3,D0
00002232  4E4F                    2616          TRAP    #15
00002234                          2617          
00002234  4287                    2618          CLR.L   D7
00002236                          2619          
00002236  6000 0004               2620          BRA     DLOOPITER
0000223A                          2621          
0000223A                          2622  DLOOPITERCLR        
0000223A  4287                    2623          CLR.L   D7
0000223C                          2624  
0000223C                          2625  DLOOPITER
0000223C                          2626          
0000223C  0C45 0008               2627          CMPI    #8,D5
00002240  6700 0008               2628          BEQ     DLOOPDONE
00002244                          2629  
00002244  5245                    2630          ADDI    #1,D5
00002246  6000 FF54               2631          BRA     DLOOP
0000224A                          2632  
0000224A                          2633  DLOOPDONE
0000224A                          2634  
0000224A  7A09                    2635          MOVE.L  #9,D5  * to be used as a loop counter
0000224C  4283                    2636          CLR.L   D3  * == 1 if we are in a range
0000224E  4286                    2637          CLR.L   D6  * == 1 if we have already printed the slash or dash
00002250  4287                    2638          CLR.L   D7  * count of registers in a range
00002252  1C3C 0001               2639          MOVE.B  #1,D6 * to fix fencepost issue     
00002256                          2640  
00002256                          2641  ALOOP * loop to print out the data register portion of the addresses being saved
00002256                          2642  
00002256  E25A                    2643          ROR     #1,D2
00002258  6500 0006               2644          BCS     AVALID
0000225C                          2645          
0000225C  6000 0068               2646          BRA     AINVALID
00002260                          2647          
00002260                          2648  AVALID
00002260  0C43 0000               2649          CMPI    #0,D3
00002264  6700 0020               2650          BEQ     AFORWARDVALID * we are not in a range
00002268                          2651          
00002268  5247                    2652          ADDI    #1,D7 *increment number of regs in range
0000226A                          2653          
0000226A  0C46 0001               2654          CMPI    #1,D6   *have we already printed a symbol?
0000226E  6700 008E               2655          BEQ     ALOOPITER
00002272                          2656          
00002272  43F9 000026D2           2657          LEA     DASH,A1    *print a dash
00002278  103C 000E               2658          MOVE.B  #14,D0
0000227C  4E4F                    2659          TRAP    #15
0000227E                          2660          
0000227E  1C3C 0001               2661          MOVE.B  #1,D6 * indicates a symbol has been printed
00002282                          2662          
00002282  6000 007A               2663          BRA     ALOOPITER
00002286                          2664          
00002286                          2665  AFORWARDVALID
00002286                          2666          * not in a range yet, print
00002286                          2667          
00002286                          2668                  
00002286  0C44 0000               2669          CMPI    #0,D4
0000228A  6700 000E               2670          BEQ     ANOSLASH
0000228E                          2671                  
0000228E  43F9 000026D0           2672          LEA     SLASH,A1
00002294  103C 000E               2673          MOVE.B  #14,D0
00002298  4E4F                    2674          TRAP    #15
0000229A                          2675          
0000229A                          2676  ANOSLASH
0000229A                          2677  
0000229A  183C 0001               2678          MOVE.B  #1,D4   * we have printed something, now slashes are fair game
0000229E                          2679          
0000229E  1C3C 0001               2680          MOVE.B  #1,D6   * we have printed a symbol
000022A2                          2681          
000022A2  43F9 000026B4           2682          LEA     ASCII_A,A1
000022A8  103C 000E               2683          MOVE.B  #14,D0
000022AC  4E4F                    2684          TRAP    #15
000022AE                          2685          
000022AE  2205                    2686          MOVE.L  D5,D1
000022B0                          2687          
000022B0  0641 FFF8               2688          ADDI    #-8,D1 * it's A, need to adjust by 8
000022B4                          2689          
000022B4  103C 0003               2690          MOVE.B  #3,D0
000022B8  4E4F                    2691          TRAP    #15
000022BA                          2692  
000022BA  163C 0001               2693          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
000022BE  1C3C 0000               2694          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
000022C2                          2695          
000022C2  6000 003A               2696          BRA     ALOOPITER
000022C6                          2697  
000022C6                          2698  
000022C6                          2699  AINVALID
000022C6                          2700  
000022C6                          2701          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
000022C6                          2702          
000022C6  0C43 0001               2703          CMPI    #1,D3
000022CA  6600 0032               2704          BNE     ALOOPITER
000022CE                          2705          
000022CE  163C 0000               2706          MOVE.B  #0,D3
000022D2                          2707          
000022D2  0C47 0001               2708          CMPI    #1,D7
000022D6  6D00 0024               2709          BLT     ALOOPITERCLR
000022DA                          2710          
000022DA  43F9 000026B4           2711          LEA     ASCII_A,A1
000022E0  103C 000E               2712          MOVE.B  #14,D0
000022E4  4E4F                    2713          TRAP    #15
000022E6                          2714          
000022E6  2205                    2715          MOVE.L  D5,D1
000022E8                          2716          
000022E8  0641 FFFF               2717          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
000022EC  0641 FFF8               2718          ADDI    #-8,D1 * it's A, need to adjust by 8
000022F0                          2719          
000022F0  103C 0003               2720          MOVE.B  #3,D0
000022F4  4E4F                    2721          TRAP    #15
000022F6                          2722          
000022F6  4287                    2723          CLR.L   D7
000022F8                          2724          
000022F8  6000 0004               2725          BRA     ALOOPITER
000022FC                          2726          
000022FC                          2727  ALOOPITERCLR
000022FC                          2728          
000022FC  4287                    2729          CLR.L   D7
000022FE                          2730  
000022FE                          2731  ALOOPITER
000022FE                          2732          
000022FE  0C45 0010               2733          CMPI     #16,D5
00002302  6700 0008               2734          BEQ     ALOOPDONE
00002306                          2735  
00002306  5245                    2736          ADDI    #1,D5
00002308  6000 FF4C               2737          BRA     ALOOP
0000230C                          2738  
0000230C                          2739  ALOOPDONE
0000230C                          2740          
0000230C  4C9F 7FFF               2741          MOVEM    (A7)+,D0-D7/A0-A6
00002310  4E75                    2742          RTS
00002312                          2743  
00002312                          2744          
00002312                          2745  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002312                          2746  *-----------------------------------------------------------------------------
00002312                          2747  
00002312                          2748  
00002312                          2749  
00002312                          2750  
00002312                          2751  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002312                          2752  *-----------------------------------------------------------------------------
00002312                          2753  *-----------------------------------------------------------------------------
00002312                          2754  * NAME:           MOVEMHELPERPRE
00002312                          2755  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
00002312                          2756  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
00002312                          2757  * POST-CONDITION: The registers being saved are printed
00002312                          2758  * REGISTERS:      A2
00002312                          2759  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002312                          2760  MOVEMHELPERPRE
00002312                          2761  
00002312  48A7 7F00               2762      MOVEM   D1-D7,-(A7)
00002316                          2763  
00002316  3412                    2764      MOVE.W  (A2),D2 * move the data we need to proccess into D2
00002318  7800                    2765      MOVE.L  #0,D4
0000231A  4287                    2766      CLR.L    D7 * put the flipped bits here
0000231C                          2767      
0000231C                          2768      *the following block of code moves bits
0000231C                          2769      *into the same position they would be in if
0000231C                          2770      *the MOVEM was post inc, then simply uses post
0000231C                          2771      *inc to print the registers being saved
0000231C                          2772  PRELOOP
0000231C  E35A                    2773      ROL.W   #1,D2
0000231E                          2774      
0000231E  6500 0006               2775      BCS     PRESETBIT
00002322  6000 0004               2776      BRA     PRELOOPITER
00002326                          2777      
00002326                          2778  PRESETBIT
00002326  09C7                    2779      BSET    D4,D7
00002328                          2780  
00002328                          2781  PRELOOPITER
00002328  0C44 000F               2782      CMPI    #15,D4
0000232C  6700 0006               2783      BEQ     PRELOOPDONE
00002330                          2784      
00002330  5244                    2785      ADDI    #1,D4
00002332  60E8                    2786      BRA     PRELOOP
00002334                          2787  
00002334                          2788  PRELOOPDONE
00002334                          2789  
00002334  3487                    2790      MOVE.W  D7,(A2)    
00002336  4C9F 00FE               2791      MOVEM   (A7)+,D1-D7
0000233A                          2792  
0000233A  6100 FE4A               2793      BSR MOVEMHELPERPOST
0000233E                          2794  
0000233E  4E75                    2795      RTS
00002340                          2796  
00002340                          2797  
00002340                          2798  
00002340                          2799          
00002340                          2800  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002340                          2801  *-----------------------------------------------------------------------------
00002340                          2802  
00002340                          2803  
00002340                          2804  
00002340                          2805  *-----------------------------------------------------------------------------
00002340                          2806  *-----------------------------------------------------------------------------
00002340                          2807  * NAME:           UNKNOWNOP
00002340                          2808  * DESCRIPTION:    a
00002340                          2809  * PRE-CONDITION:  D2 contains the instruction to print. D2 has already been
00002340                          2810  *                 identified as an unknown operation.
00002340                          2811  * POST-CONDITION: D2 is no longer the opcode.
00002340                          2812  * REGISTERS:      a
00002340                          2813  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002340                          2814  UNKNOWNOP
00002340  48A7 FFC0               2815          MOVEM   D0-D7/A0-A1,-(A7)
00002344                          2816          
00002344  43F9 00002676           2817          LEA     DATA,A1 * load " DATA $" into register A1
0000234A  700E                    2818          MOVE.L  #14,D0  * print the string stored in A1
0000234C  4E4F                    2819          TRAP    #15
0000234E                          2820          
0000234E  E18A                    2821          LSL.L   #8,D2
00002350  E18A                    2822          LSL.L   #8,D2
00002352                          2823          
00002352  2C42                    2824          MOVE.L  D2,A6
00002354                          2825          
00002354  7604                    2826          MOVE.L  #4,D3
00002356                          2827          
00002356  6100 0012               2828          BSR     PRINT_ASCII_HEX_CHAR
0000235A                          2829  
0000235A  43F9 00002613           2830          LEA     NEWLINE,A1 * load newline into register A1
00002360  700E                    2831          MOVE.L  #14,D0  * print the string stored in A1
00002362  4E4F                    2832          TRAP    #15
00002364                          2833  
00002364  4C9F 03FF               2834          MOVEM   (A7)+,D0-D7/A0-A1
00002368  4E75                    2835          RTS
0000236A                          2836  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000236A                          2837  *-----------------------------------------------------------------------------
0000236A                          2838  
0000236A                          2839  
0000236A                          2840  
0000236A                          2841  *-----------------------------------------------------------------------------
0000236A                          2842  *-----------------------------------------------------------------------------
0000236A                          2843  * NAME: Print ASCII hex char
0000236A                          2844  * DESCRIPTION:    Prints and address register to console in hex (ASCII chars)
0000236A                          2845  * PRE-CONDITION:  A6 contains the register of memory to print.
0000236A                          2846  *                 This parameter would be pre-loaded by, for example:
0000236A                          2847  *                 "LEA FOO_BAR_ADDR,A6" or "LEA $1234FEED,A6"
0000236A                          2848  *                 D3 contains the loops to do (number of nibbles).
0000236A                          2849  * POST-CONDITION: 
0000236A                          2850  * REGISTERS:      
0000236A                          2851  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000236A                          2852  PRINT_ASCII_HEX_CHAR
0000236A  48E7 FFFC               2853      MOVEM.L     D0-D7/A0-A5,-(A7) * push data to save
0000236E  4285                    2854      CLR.L       D5
00002370                          2855      
00002370                          2856      * fence post check (if-statement, check if 0 > chars)
00002370  0C03 0000               2857      CMPI.B      #0,D3
00002374  6700 017C               2858      BEQ         INVALID_ASCII_INPUT * go to very last part if invalid
00002378                          2859      
00002378                          2860  *    MOVE.L      A6,D4
00002378  2E0E                    2861      MOVE.L      A6,D7
0000237A                          2862  PRINT_ASCII_LOOP
0000237A                          2863  *    MOVE.L      A6,D7 * increase a6's pointer position ea. loop
0000237A                          2864  *    MOVE.L      D4,D7 * make a mutable copy
0000237A  E99F                    2865      ROL.L       #4,D7 * roll to next spot
0000237C  48E7 0100               2866      MOVEM.L     D7,-(A7) * save D7
00002380                          2867  
00002380  0287 0000000F           2868      ANDI.L      #HEX_VALUE_MASK_LONG,D7
00002386                          2869      
00002386  0C87 00000000           2870      CMPI.L      #0,D7
0000238C  6D00 0164               2871      BLT         INVALID_ASCII_INPUT
00002390                          2872  
00002390  0C87 0000000F           2873      CMPI.L      #15,D7
00002396  6E00 015A               2874      BGT         INVALID_ASCII_INPUT
0000239A                          2875  
0000239A                          2876      * this might be faster... to do later, after entire assignment done
0000239A                          2877       * CMPI.L      #9,D7
0000239A                          2878       * BLE         PRINT_ASCII_0_TO_9
0000239A                          2879  
0000239A  0C87 00000000           2880      CMPI.L      #0,D7
000023A0  6700 0098               2881      BEQ         PRINT_ASCII_0
000023A4  0C87 00000001           2882      CMPI.L      #1,D7
000023AA  6700 0098               2883      BEQ         PRINT_ASCII_1
000023AE  0C87 00000002           2884      CMPI.L      #2,D7
000023B4  6700 0098               2885      BEQ         PRINT_ASCII_2
000023B8  0C87 00000003           2886      CMPI.L      #3,D7
000023BE  6700 0098               2887      BEQ         PRINT_ASCII_3
000023C2  0C87 00000004           2888      CMPI.L      #4,D7
000023C8  6700 0098               2889      BEQ         PRINT_ASCII_4
000023CC  0C87 00000005           2890      CMPI.L      #5,D7
000023D2  6700 0098               2891      BEQ         PRINT_ASCII_5
000023D6  0C87 00000006           2892      CMPI.L      #6,D7
000023DC  6700 0098               2893      BEQ         PRINT_ASCII_6
000023E0  0C87 00000007           2894      CMPI.L      #7,D7
000023E6  6700 0098               2895      BEQ         PRINT_ASCII_7
000023EA  0C87 00000008           2896      CMPI.L      #8,D7
000023F0  6700 0098               2897      BEQ         PRINT_ASCII_8
000023F4  0C87 00000009           2898      CMPI.L      #9,D7
000023FA  6700 0098               2899      BEQ         PRINT_ASCII_9
000023FE  0C87 0000000A           2900      CMPI.L      #10,D7
00002404  6700 0098               2901      BEQ         PRINT_ASCII_A
00002408  0C87 0000000B           2902      CMPI.L      #11,D7
0000240E  6700 0098               2903      BEQ         PRINT_ASCII_B
00002412  0C87 0000000C           2904      CMPI.L      #12,D7
00002418  6700 0098               2905      BEQ         PRINT_ASCII_C
0000241C  0C87 0000000D           2906      CMPI.L      #13,D7
00002422  6700 0098               2907      BEQ         PRINT_ASCII_D
00002426  0C87 0000000E           2908      CMPI.L      #14,D7
0000242C  6700 0098               2909      BEQ         PRINT_ASCII_E
00002430  0C87 0000000F           2910      CMPI.L      #15,D7
00002436  6700 0098               2911      BEQ         PRINT_ASCII_F
0000243A                          2912  PRINT_ASCII_0
0000243A  43F9 000026A0           2913      LEA         ASCII_0,A1
00002440  6000 0098               2914      BRA         PRINT_ASCII_CHAR
00002444                          2915  PRINT_ASCII_1
00002444  43F9 000026A2           2916      LEA         ASCII_1,A1
0000244A  6000 008E               2917      BRA         PRINT_ASCII_CHAR
0000244E                          2918  PRINT_ASCII_2
0000244E  43F9 000026A4           2919      LEA         ASCII_2,A1
00002454  6000 0084               2920      BRA         PRINT_ASCII_CHAR
00002458                          2921  PRINT_ASCII_3
00002458  43F9 000026A6           2922      LEA         ASCII_3,A1
0000245E  6000 007A               2923      BRA         PRINT_ASCII_CHAR
00002462                          2924  PRINT_ASCII_4
00002462  43F9 000026A8           2925      LEA         ASCII_4,A1
00002468  6000 0070               2926      BRA         PRINT_ASCII_CHAR
0000246C                          2927  PRINT_ASCII_5
0000246C  43F9 000026AA           2928      LEA         ASCII_5,A1
00002472  6000 0066               2929      BRA         PRINT_ASCII_CHAR
00002476                          2930  PRINT_ASCII_6
00002476  43F9 000026AC           2931      LEA         ASCII_6,A1
0000247C  6000 005C               2932      BRA         PRINT_ASCII_CHAR
00002480                          2933  PRINT_ASCII_7
00002480  43F9 000026AE           2934      LEA         ASCII_7,A1
00002486  6000 0052               2935      BRA         PRINT_ASCII_CHAR
0000248A                          2936  PRINT_ASCII_8
0000248A  43F9 000026B0           2937      LEA         ASCII_8,A1
00002490  6000 0048               2938      BRA         PRINT_ASCII_CHAR
00002494                          2939  PRINT_ASCII_9
00002494  43F9 000026B2           2940      LEA         ASCII_9,A1
0000249A  6000 003E               2941      BRA         PRINT_ASCII_CHAR
0000249E                          2942  PRINT_ASCII_A
0000249E  43F9 000026B4           2943      LEA         ASCII_A,A1
000024A4  6000 0034               2944      BRA         PRINT_ASCII_CHAR
000024A8                          2945  PRINT_ASCII_B
000024A8  43F9 000026B6           2946      LEA         ASCII_B,A1
000024AE  6000 002A               2947      BRA         PRINT_ASCII_CHAR
000024B2                          2948  PRINT_ASCII_C
000024B2  43F9 000026B8           2949      LEA         ASCII_C,A1
000024B8  6000 0020               2950      BRA         PRINT_ASCII_CHAR
000024BC                          2951  PRINT_ASCII_D
000024BC  43F9 000026BA           2952      LEA         ASCII_D,A1
000024C2  6000 0016               2953      BRA         PRINT_ASCII_CHAR
000024C6                          2954  PRINT_ASCII_E
000024C6  43F9 000026BC           2955      LEA         ASCII_E,A1
000024CC  6000 000C               2956      BRA         PRINT_ASCII_CHAR
000024D0                          2957  PRINT_ASCII_F
000024D0  43F9 000026BE           2958      LEA         ASCII_F,A1
000024D6  6000 0002               2959      BRA         PRINT_ASCII_CHAR
000024DA                          2960  PRINT_ASCII_CHAR
000024DA  103C 000E               2961      MOVE.B      #14,D0
000024DE  4E4F                    2962      TRAP        #15
000024E0                          2963      
000024E0                          2964          
000024E0  4287                    2965      CLR.L       D7
000024E2  4CDF 0080               2966      MOVEM.L     (A7)+,D7 * copy back D7 from stack, to mutate its' bits
000024E6                          2967      
000024E6  5205                    2968      ADD.B       #1,D5 * loop until counter stops
000024E8  BA03                    2969      CMP.B       D3,D5
000024EA  6C00 0006               2970      BGE         PRINT_ASCII_FINISH
000024EE                          2971      
000024EE  6000 FE8A               2972      BRA         PRINT_ASCII_LOOP
000024F2                          2973  INVALID_ASCII_INPUT
000024F2                          2974  PRINT_ASCII_FINISH
000024F2  4CDF 3FFF               2975      MOVEM.L     (A7)+,D0-D7/A0-A5 * pop saved memory
000024F6  4E75                    2976      RTS
000024F8                          2977      
000024F8                          2978  PRINTDATA911
000024F8  0C46 0E00               2979      CMPI    #%0000111000000000, D6   * Print 7
000024FC  6700 003C               2980      BEQ     PRINT7   
00002500  0C46 0C00               2981      CMPI    #%0000110000000000, D6   * Print 6
00002504  6700 0042               2982      BEQ     PRINT6
00002508  0C46 0A00               2983      CMPI    #%0000101000000000, D6   * Print 5
0000250C  6700 0048               2984      BEQ     PRINT5
00002510  0C46 0800               2985      CMPI    #%0000100000000000, D6   * Print 4
00002514  6700 004E               2986      BEQ     PRINT4 
00002518  0C46 0600               2987      CMPI    #%0000011000000000, D6   * Print 3
0000251C  6700 0054               2988      BEQ     PRINT3    
00002520  0C46 0400               2989      CMPI    #%0000010000000000, D6   * Print 2
00002524  6700 005A               2990      BEQ     PRINT2   
00002528  0C46 0200               2991      CMPI    #%0000001000000000, D6   * Print 1
0000252C  6700 0060               2992      BEQ     PRINT1     
00002530  0C46 0000               2993      CMPI    #%0000000000000000, D6   * Print 0
00002534  6700 0066               2994      BEQ     PRINT8
00002538                          2995      
00002538  4E75                    2996      RTS                             * Fail case  
0000253A                          2997      
0000253A                          2998  PRINT7
0000253A  43F9 000026AE           2999      LEA     ASCII_7, A1
00002540  103C 000E               3000      MOVE.B      #14,D0
00002544  4E4F                    3001      TRAP        #15
00002546  4E75                    3002      RTS
00002548                          3003      
00002548                          3004  PRINT6
00002548  43F9 000026AC           3005      LEA     ASCII_6, A1
0000254E  103C 000E               3006      MOVE.B      #14,D0
00002552  4E4F                    3007      TRAP        #15
00002554  4E75                    3008      RTS
00002556                          3009      
00002556                          3010  PRINT5
00002556  43F9 000026AA           3011      LEA     ASCII_5, A1
0000255C  103C 000E               3012      MOVE.B      #14,D0
00002560  4E4F                    3013      TRAP        #15
00002562  4E75                    3014      RTS
00002564                          3015      
00002564                          3016  PRINT4
00002564  43F9 000026A8           3017      LEA     ASCII_4, A1
0000256A  103C 000E               3018      MOVE.B      #14,D0
0000256E  4E4F                    3019      TRAP        #15
00002570  4E75                    3020      RTS
00002572                          3021      
00002572                          3022  PRINT3
00002572  43F9 000026A6           3023      LEA     ASCII_3, A1
00002578  103C 000E               3024      MOVE.B      #14,D0
0000257C  4E4F                    3025      TRAP        #15
0000257E  4E75                    3026      RTS
00002580                          3027      
00002580                          3028  PRINT2
00002580  43F9 000026A4           3029      LEA     ASCII_2, A1
00002586  103C 000E               3030      MOVE.B      #14,D0
0000258A  4E4F                    3031      TRAP        #15
0000258C  4E75                    3032      RTS
0000258E                          3033      
0000258E                          3034  PRINT1
0000258E  43F9 000026A2           3035      LEA     ASCII_1, A1
00002594  103C 000E               3036      MOVE.B      #14,D0
00002598  4E4F                    3037      TRAP        #15
0000259A  4E75                    3038      RTS
0000259C                          3039          
0000259C                          3040  PRINT8
0000259C  43F9 000026B0           3041      LEA     ASCII_8, A1
000025A2  103C 000E               3042      MOVE.B      #14,D0
000025A6  4E4F                    3043      TRAP        #15
000025A8  4E75                    3044      RTS
000025AA                          3045  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000025AA                          3046  *-----------------------------------------------------------------------------
000025AA                          3047  
000025AA                          3048  
000025AA                          3049  
000025AA                          3050  *-----------------------------------------------------------------------------
000025AA                          3051  *-----------------------------------------------------------------------------
000025AA                          3052  * NAME: Bitmask
000025AA                          3053  * DESCRIPTION:    Masks bits in a data register.
000025AA                          3054  * PRE-CONDITION:  D6 contains the starting bit to be masked, and D7 contains
000025AA                          3055  *                 the ending bit.  For example, a starting bit of decimal
000025AA                          3056  *                 value 0 and an ending bit of decimal value 3 will mask the
000025AA                          3057  *                 bits 0, 1, 2, and 3.
000025AA                          3058  * POST-CONDITION: D6 contains the bitmask, ready for use.
000025AA                          3059  * REGISTERS:      D5,D6,D7
000025AA                          3060  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000025AA                          3061  BITMASK
000025AA  3F05                    3062          MOVE    D5,-(A7)    * push D5 onto the stack so we can use it to
000025AC  4245                    3063          CLR     D5          * clear D5 so we can use it
000025AE                          3064  LOOPBIT 
000025AE  0DC5                    3065          BSET    D6,D5       * set the D6th bit in D5 to 1
000025B0  5246                    3066          ADD     #1,D6       * increment D6
000025B2                          3067  
000025B2  BC47                    3068          CMP     D7,D6       * have we finished?
000025B4  6E00 0004               3069          BGT     BITMASKDONE * yes
000025B8  60F4                    3070          BRA     LOOPBIT     * no, iterate again
000025BA                          3071  
000025BA                          3072  BITMASKDONE
000025BA  2C05                    3073          MOVE.L  D5,D6
000025BC  3A1F                    3074          MOVE    (A7)+,D5    * restore D5
000025BE  4E75                    3075          RTS
000025C0                          3076  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000025C0                          3077  *-----------------------------------------------------------------------------
000025C0                          3078  
000025C0                          3079  
000025C0                          3080  
000025C0                          3081  *-----------------------------------------------------------------------------
000025C0                          3082  *-----------------------------------------------------------------------------
000025C0                          3083  * SECTION: Constants/variables used throughout the program.
000025C0                          3084  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000025C0                          3085  
000025C0                          3086  * ---> GENERAL
000025C0  =0000000D               3087  CR          EQU     $0D
000025C0  =0000000A               3088  LF          EQU     $0A
000025C0= 45 4E 54 45 52 20 ...   3089  MSGSTART    DC.B    'ENTER START ADDRESS: ',CR,LF,0
000025D8= 45 4E 54 45 52 20 ...   3090  MSGEND      DC.B    'ENTER END ADDRESS: ',CR,LF,0
000025EE= 48 69 74 20 74 68 ...   3091  CONT_MSG    DC.B    'Hit the [ENTER] key to continue...',CR,LF,0
00002613= 0D 0A 00                3092  NEWLINE     DC.B    CR,LF,0
00002616                          3093  
00002616                          3094  * ---> OPS
00002616= 44 49 56 53 00          3095  DIVSOP      DC.B    'DIVS',0
0000261B= 43 4D 50 00             3096  CMPOP       DC.B    'CMP',0
0000261F= 45 4F 52 00             3097  EOROP       DC.B    'EOR',0
00002623= 4E 4F 50 00             3098  NOOPERATION DC.B    'NOP',0
00002627= 4E 45 47 00             3099  NEGOP       DC.B    'NEG',0
0000262B= 4D 4F 56 45 00          3100  MOVEOP      DC.B    'MOVE',0
00002630= 4D 4F 56 45 4D 00       3101  MOVEMOP     DC.B    'MOVEM',0
00002636= 4A 53 52 00             3102  JSROP       DC.B    'JSR',0
0000263A= 52 54 53 00             3103  RTSOP       DC.B    'RTS',0
0000263E= 53 55 42 51 00          3104  SUBQOP      DC.B    'SUBQ',0
00002643= 4C 45 41 00             3105  LEAOP       DC.B    'LEA',0
00002647= 42 43 4C 52 20 00       3106  BCLROP      DC.B    'BCLR ',0
0000264D= 4D 55 4C 53 00          3107  MULSOP      DC.B    'MULS',0
00002652= 4F 52 00                3108  OROP        DC.B    'OR',0
00002655= 4F 52 49 00             3109  ORIOP       DC.B    'ORI',0
00002659= 43 4D 50 49 00          3110  CMPIOP      DC.B    'CMPI',0
0000265E= 4C 53 4C 00             3111  LSLOP       DC.B    'LSL',0
00002662= 4C 53 52 00             3112  LSROP       DC.B    'LSR',0
00002666= 41 53 4C 00             3113  ASLOP       DC.B    'ASL',0
0000266A= 41 53 52 00             3114  ASROP       DC.B    'ASR',0
0000266E= 52 4F 4C 00             3115  ROLOP       DC.B    'ROL',0
00002672= 52 4F 52 00             3116  ROROP       DC.B    'ROR',0
00002676= 20 44 41 54 41 20 ...   3117  DATA        DC.B    ' DATA $',0
0000267E= 42 43 43 20 00          3118  OP_BCC_MSG  DC.B    'BCC ',0
00002683= 42 43 53 20 00          3119  OP_BCS_MSG  DC.B    'BCS ',0
00002688= 42 47 45 20 00          3120  OP_BGE_MSG  DC.B    'BGE ',0
0000268D= 42 4C 54 20 00          3121  OP_BLT_MSG  DC.B    'BLT ',0
00002692= 42 56 43 20 00          3122  OP_BVC_MSG  DC.B    'BVC ',0
00002697= 42 52 41 20 00          3123  OP_BRA_MSG  DC.B    'BRA ',0
0000269C= 41 44 44 00             3124  OP_ADD_MSG  DC.B    'ADD',0
000026A0                          3125  
000026A0                          3126  * ---> HEX CHARS
000026A0= 30 00                   3127  ASCII_0     DC.B    '0',0
000026A2= 31 00                   3128  ASCII_1     DC.B    '1',0
000026A4= 32 00                   3129  ASCII_2     DC.B    '2',0
000026A6= 33 00                   3130  ASCII_3     DC.B    '3',0
000026A8= 34 00                   3131  ASCII_4     DC.B    '4',0
000026AA= 35 00                   3132  ASCII_5     DC.B    '5',0
000026AC= 36 00                   3133  ASCII_6     DC.B    '6',0
000026AE= 37 00                   3134  ASCII_7     DC.B    '7',0
000026B0= 38 00                   3135  ASCII_8     DC.B    '8',0
000026B2= 39 00                   3136  ASCII_9     DC.B    '9',0
000026B4= 41 00                   3137  ASCII_A     DC.B    'A',0
000026B6= 42 00                   3138  ASCII_B     DC.B    'B',0
000026B8= 43 00                   3139  ASCII_C     DC.B    'C',0
000026BA= 44 00                   3140  ASCII_D     DC.B    'D',0
000026BC= 45 00                   3141  ASCII_E     DC.B    'E',0
000026BE= 46 00                   3142  ASCII_F     DC.B    'F',0
000026C0                          3143  
000026C0                          3144  * ---> SPECIAL CHARACTERS
000026C0= 20 00                   3145  SPACE       DC.B    ' ',0
000026C2= 24 00                   3146  DOLLAR      DC.B    '$',0
000026C4= 23 00                   3147  IMD         DC.B    '#',0
000026C6= 2C 00                   3148  COMMA       DC.B    ',',0
000026C8= 28 00                   3149  OBRACK      DC.B    '(',0
000026CA= 29 00                   3150  CBRACK      DC.B    ')',0
000026CC= 2B 00                   3151  PLUS        DC.B    '+',0
000026CE= 2D 00                   3152  MINUS       DC.B    '-',0
000026D0= 2F 00                   3153  SLASH       DC.B    '/',0
000026D2= 2D 00                   3154  DASH        DC.B    '-',0
000026D4                          3155  
000026D4                          3156  * ---> B/W/L (BYTE, WORD, LONG, RESPECTIVELY)
000026D4= 2E 42 20 00             3157  __B         DC.B    '.B ',0
000026D8= 2E 57 20 00             3158  __W         DC.B    '.W ',0
000026DC= 2E 4C 20 00             3159  __L         DC.B    '.L ',0
000026E0                          3160  
000026E0                          3161  * ---> ADDRESS REGISTERS A0-A7
000026E0= 41 30 00                3162  __A0        DC.B   'A0',0
000026E3= 41 31 00                3163  __A1        DC.B   'A1',0    
000026E6= 41 32 00                3164  __A2        DC.B   'A2',0
000026E9= 41 33 00                3165  __A3        DC.B   'A3',0
000026EC= 41 34 00                3166  __A4        DC.B   'A4',0
000026EF= 41 35 00                3167  __A5        DC.B   'A5',0
000026F2= 41 36 00                3168  __A6        DC.B   'A6',0
000026F5= 41 37 00                3169  __A7        DC.B   'A7',0
000026F8                          3170  
000026F8                          3171  * ---> DATA REGISTERS D0-D7
000026F8= 44 30 00                3172  __D0        DC.B   'D0',0
000026FB= 44 31 00                3173  __D1        DC.B   'D1',0
000026FE= 44 32 00                3174  __D2        DC.B   'D2',0
00002701= 44 33 00                3175  __D3        DC.B   'D3',0
00002704= 44 34 00                3176  __D4        DC.B   'D4',0
00002707= 44 35 00                3177  __D5        DC.B   'D5',0
0000270A= 44 36 00                3178  __D6        DC.B   'D6',0
0000270D= 44 37 00                3179  __D7        DC.B   'D7',0
00002710                          3180  
00002710                          3181  __COUNTER   DS.B    1       * main loop counter
00002711                          3182  
00002711                          3183  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002711                          3184  *-----------------------------------------------------------------------------
00002711                          3185  
00002711                          3186  
00002711                          3187  
00002711                          3188  *-----------------------------------------------------------------------------
00002711                          3189  *-----------------------------------------------------------------------------
00002711                          3190  * SECTION: Sample program to run, then attempt testing disassembly on.
00002711                          3191  * STARTING: 16384
00002711                          3192  * ENDING:   Any even number before 16384 to continue FOREVER
00002711                          3193  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00004000                          3194      ORG $4000
00004000                          3195      
00004000  B200                    3196      CMP.B   D0,D1
00004002  B441                    3197      CMP.W   D1,D2
00004004  B682                    3198      CMP.L   D2,D3
00004006  B248                    3199      CMP     A0,D1
00004008  B25A                    3200      CMP     (A2)+,D1
0000400A  B101                    3201      EOR.B   D0,D1
0000400C  B342                    3202      EOR.W   D1,D2
0000400E  B583                    3203      EOR.L   D2,D3
00004010  B150                    3204      EOR     D0,(A0)
00004012  B359                    3205      EOR     D1,(A1)+
00004014  0000 0003               3206      ORI.B   #3,D0 
00004018  0042 0290               3207      ORI.W   #$290,D2
0000401C  0087 0000000A           3208      ORI.L   #%1010,D7   * $1010 == A
00004022  0043 0002               3209      ORI     #2,D3
00004026  4E71                    3210      NOP
00004028  103C 009A               3211      MOVE.B   #%10011010, D0
0000402C  123C 00A9               3212      MOVE.B   #%10101001, D1
00004030  81FC 0001               3213      DIVS     #1, D0
00004034  D200                    3214      ADD.B    D0,D1
00004036  4C9F 3C1A               3215      MOVEM    (A7)+,A2-A5/D1/D3-D4
0000403A  43F8 2636               3216      LEA      JSROP,A1
0000403E  4467                    3217      NEG.W    -(A7)
00004040  4EB9 0000408A           3218      JSR      END
00004046  CFFC 0003               3219      MULS.W  #3, D7
0000404A  CFC0                    3220      MULS    D0, D7
0000404C  C5D9                    3221      MULS    (A1)+, D2
0000404E  4E71                    3222      NOP
00004050  C682                    3223      AND.L   D2,D3
00004052  5146                    3224      SUBQ    #8, D6
00004054  4E71                    3225      NOP
00004056  5F81                    3226      SUBQ.L  #7, D1
00004058  4E71                    3227      NOP
0000405A  0041 0004               3228      ORI     #4, D1
0000405E  4E71                    3229      NOP
00004060  E389                    3230      LSL.L   #1,D1
00004062  4E71                    3231      NOP
00004064  E489                    3232      LSR.L   #2,D1
00004066  4E71                    3233      NOP
00004068  E781                    3234      ASL.L   #3,D1
0000406A  4E71                    3235      NOP
0000406C  E881                    3236      ASR.L   #4,D1
0000406E  4E71                    3237      NOP
00004070  EB99                    3238      ROL.L   #5,D1
00004072  4E71                    3239      NOP
00004074  E099                    3240      ROR.L   #8,D1
00004076  4E71                    3241      NOP
00004078  0881 0002               3242      BCLR    #2,D1
0000407C  4E71                    3243      NOP
0000407E  DAC1                    3244      ADDA.W  D1,A5
00004080  4E71                    3245      NOP
00004082  D803                    3246      ADD.B   D3,D4
00004084  4E71                    3247      NOP
00004086  6000 0004               3248      BRA     RLLYEND
0000408A                          3249  
0000408A                          3250  END
0000408A  4E75                    3251      RTS
0000408C                          3252      
0000408C                          3253  RLLYEND
0000408C                          3254      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_LONG_OP        1AF2
ADDA_PRT            1B2E
ADDA_WORD_OP        1A8A
ADD_ADDA_END        1B5E
ADD_ADDA_PRINT      1B46
ADD_ADDA_SPACE      1B20
ADD_EA_DN_GENERIC   1B12
AFORWARDVALID       2286
AINVALID            22C6
ALOOP               2256
ALOOPDONE           230C
ALOOPITER           22FE
ALOOPITERCLR        22FC
ANOSLASH            229A
AS                  1BD4
ASCII_0             26A0
ASCII_1             26A2
ASCII_2             26A4
ASCII_3             26A6
ASCII_4             26A8
ASCII_5             26AA
ASCII_6             26AC
ASCII_7             26AE
ASCII_8             26B0
ASCII_9             26B2
ASCII_A             26B4
ASCII_B             26B6
ASCII_C             26B8
ASCII_D             26BA
ASCII_E             26BC
ASCII_F             26BE
ASL                 1BEA
ASLOP               2666
ASR                 1BFA
ASROP               266A
AVALID              2260
BCC_BYTE_OFFSET     17F4
BCC_END             1810
BCLROP              2647
BITMASK             25AA
BITMASKDONE         25BA
BYTE_DN_EA          1AAA
BYTE_EA_DN          1A42
CBRACK              26CA
CLEAR_SCREEN        11AE
CMPIOP              2659
CMPOP               261B
COMMA               26C6
CONT_MSG            25EE
CR                  D
DASH                26D2
DATA                2676
DFORWARDVALID       21CC
DINVALID            2208
DISPLAY1011         1922
DIVSOP              2616
DLOOP               219C
DLOOPDONE           224A
DLOOPITER           223C
DLOOPITERCLR        223A
DNOSLASH            21E0
DOLLAR              26C2
DONE0100            16DA
DONE1011            195A
DVALID              21A6
EAHELPER05          1D4E
EAHELPER611         1D0C
END                 408A
END0000             133E
END67               20E2
END68               2156
ENDEAHELPER05       1E9E
ENDEAHELPER611      1D48
ENDMODE_AN          202E
ENDMODE_DN          1F2E
ENDOP0001           13A4
ENDOP1110           1CF4
END_OF_LOOP         1182
EOROP               261F
HEX_VALUE_MASK_LONG  F
IDLE_STATE          118C
IMD                 26C4
IMD_SIZE_0000       12BE
INVALID_ASCII_INPUT  24F2
ITERATION           116A
JSROP               2636
LEAOP               2643
LF                  A
LONG_DN_EA          1ADA
LONG_EA_DN          1A72
LOOP                104C
LOOPBIT             25AE
LOOPUNKNOWNOP       1166
LS                  1B9E
LSL                 1BB4
LSLOP               265E
LSR                 1BC4
LSROP               2662
MINUS               26CE
MODE_AN             1FA4
MODE_DN             1EA4
MOVEMHELPERPOST     2186
MOVEMHELPERPRE      2312
MOVEMOP             2630
MOVEMTOMEM          14EE
MOVEMTOREG          1454
MOVEOP              262B
MSGEND              25D8
MSGSTART            25C0
MULSOP              264D
NEGOP               2627
NEWLINE             2613
NOOPERATION         2623
NOT0000             1076
NOT0001             1086
NOT0010             1096
NOT0011             10A6
NOT0100             10B6
NOT0101             10C6
NOT0110             10D6
NOT0111             10E6
NOT1000             10F6
NOT1001             1106
NOT1010             1116
NOT1011             1126
NOT1100             1136
NOT1101             1146
NOT1110             1156
NOT67BYTE           20C6
NOT67WORD           20D6
NOTA0               1FC6
NOTA1               1FD6
NOTA2               1FE6
NOTA3               1FF6
NOTA4               2006
NOTA5               2016
NOTA6               2026
NOTADRDIRECT        1D7E
NOTADRINDIRECT      1DA6
NOTADRINDIRECTPOST  1DDA
NOTADRINDIRECTPRE   1E0E
NOTBCLR             1286
NOTBCLRDYNA         1238
NOTD0               1EC6
NOTD1               1ED6
NOTD2               1EE6
NOTD3               1EF6
NOTD4               1F06
NOTD5               1F16
NOTD6               1F26
NOTDATAREG          1D6E
NOTDIVS             189A
NOTEOR              1916
NOTIMMBYTE          1E44
NOTIMMEDIATE        1E9A
NOTIMMWORD          1E72
NOTJSR              15D2
NOTLONGMOVEM1       14BC
NOTLONGMOVEM2       1556
NOTMOVEM            1588
NOTNEG              1430
NOTNOP              13DA
NOTORI              1324
NOTRTS              15F4
OBRACK              26C8
OP0000              11BA
OP0001              1344
OP0010              13AA
OP0011              13B0
OP0100              13BE
OP0101              16E0
OP0110              174E
OP0111              1816
OP1000              181C
OP1000END           18AA
OP1001              18B0
OP1010              18B0
OP1011              18B6
OP1100              1960
OP1101              19EA
OP1110              1B70
OP1110DATAREG       1CC8
OP1110GENERIC       1C40
OP1110IMMEIGHT      1CA0
OP1111              1D06
OP_0000             0
OP_0001             1000
OP_0010             2000
OP_0011             3000
OP_0100             4000
OP_0101             5000
OP_0110             6000
OP_0111             7000
OP_1000             8000
OP_1001             9000
OP_1010             A000
OP_1011             B000
OP_1100             C000
OP_1101             D000
OP_1110             E000
OP_1111             F000
OP_ADD_MSG          269C
OP_BCC              1798
OP_BCC_MSG          267E
OP_BCS              17A2
OP_BCS_MSG          2683
OP_BGE              17AC
OP_BGE_MSG          2688
OP_BLT              17B6
OP_BLT_MSG          268D
OP_BRA              17CA
OP_BRANCHES_PRINT   17D4
OP_BRA_MSG          2697
OP_BVC              17C0
OP_BVC_MSG          2692
ORIOP               2655
OROP                2652
PLUS                26CC
PRELOOP             231C
PRELOOPDONE         2334
PRELOOPITER         2328
PRESETBIT           2326
PRINT1              258E
PRINT2              2580
PRINT3              2572
PRINT4              2564
PRINT5              2556
PRINT6              2548
PRINT7              253A
PRINT8              259C
PRINTA0             2034
PRINTA1             2042
PRINTA2             2050
PRINTA3             205E
PRINTA4             206C
PRINTA5             207A
PRINTA6             2088
PRINTA7             2096
PRINTBYTE           215C
PRINTBYTE68         213E
PRINTD0             1F34
PRINTD1             1F42
PRINTD2             1F50
PRINTD3             1F5E
PRINTD4             1F6C
PRINTD5             1F7A
PRINTD6             1F88
PRINTD7             1F96
PRINTDATA911        24F8
PRINTLONG           2178
PRINTLONG68         214E
PRINTWORD           216A
PRINTWORD68         2146
PRINT_ASCII_0       243A
PRINT_ASCII_1       2444
PRINT_ASCII_2       244E
PRINT_ASCII_3       2458
PRINT_ASCII_4       2462
PRINT_ASCII_5       246C
PRINT_ASCII_6       2476
PRINT_ASCII_7       2480
PRINT_ASCII_8       248A
PRINT_ASCII_9       2494
PRINT_ASCII_A       249E
PRINT_ASCII_B       24A8
PRINT_ASCII_C       24B2
PRINT_ASCII_CHAR    24DA
PRINT_ASCII_D       24BC
PRINT_ASCII_E       24C6
PRINT_ASCII_F       24D0
PRINT_ASCII_FINISH  24F2
PRINT_ASCII_HEX_CHAR  236A
PRINT_ASCII_LOOP    237A
RLLYEND             408C
RO                  1C0A
ROL                 1C20
ROLOP               266E
ROR                 1C30
ROROP               2672
RTSOP               263A
SIZE67              20A4
SIZE68              20E8
SKIPLONG            1302
SKIPNOTLONG1        14C8
SKIPNOTLONG2        1562
SLASH               26D0
SPACE               26C0
START               1000
SUBQOP              263E
TWOWORDLEA          1684
UNKNOWN0000         133A
UNKNOWN0100         16D6
UNKNOWN0101         1748
UNKNOWN1011         1956
UNKNOWN1100         19E0
UNKNOWNOP           2340
UNKNOWNOP0001       13A0
WORD_DN_EA          1AC2
WORD_EA_DN          1A5A
__A0                26E0
__A1                26E3
__A2                26E6
__A3                26E9
__A4                26EC
__A5                26EF
__A6                26F2
__A7                26F5
__B                 26D4
__COUNTER           2710
__D0                26F8
__D1                26FB
__D2                26FE
__D3                2701
__D4                2704
__D5                2707
__D6                270A
__D7                270D
__L                 26DC
__W                 26D8
