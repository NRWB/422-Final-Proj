00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/11/2014 5:33:03 PM

00000000                             1  *    666
00000000                             2  *   66 66
00000000                             3  *  66   66
00000000                             4  *  66   66         8888
00000000                             5  *  66   66       88   kkkk
00000000                             6  *  66  66       8   88   kk      
00000000                             7  *   66  6      8  88  kkk  kk    
00000000                             8  *    66  6    8  88     kk  k
00000000                             9  *     66 66  88 88        kk
00000000                            10  *     6 _______ 8
00000000                            11  *    6    68k    8
00000000                            12  *   6_____PRO_____8
00000000                            13  *  6               8        68k is as easy as
00000000                            14  *  6    0     0    8        6 - 8 - k !
00000000                            15  *  6   /   V   \   8 
00000000                            16  *  6   \__/ \__/   8        Welcome to our Dissasembler, Professor Nash!
00000000                            17  *    6            8         Enjoy your stay!
00000000                            18  *      6        8      
00000000                            19  *        666888
00000000                            20  *  _____                   __    ___  _    
00000000                            21  * | ____|__ _ ___ _   _   / /_  ( _ )| | __
00000000                            22  * |  _| / _` / __| | | | | '_ \ / _ \| |/ /
00000000                            23  * | |__| (_| \__ \ |_| | | (_) | (_) |   < 
00000000                            24  * |_____\__,_|___/\__, |  \___/ \___/|_|\_\
00000000                            25  *                 |___/           
00000000                            26  *-----------------------------------------------------------
00000000                            27  * Title      : 68K Decompiler
00000000                            28  * Written by : Nick Bell, Sammy Nimnuch, Caleb Larson
00000000                            29  * Date       : 11/2014
00000000                            30  * Description: This program decompiles other 68K programs
00000000                            31  *              which are loaded into the simulator simultaneously.
00000000                            32  *-----------------------------------------------------------
00000000                            33  
00000000                            34  
00000000  =00000000                 35  OP_0000     EQU     %0000000000000000
00000000  =00001000                 36  OP_0001     EQU     %0001000000000000
00000000  =00002000                 37  OP_0010     EQU     %0010000000000000
00000000  =00003000                 38  OP_0011     EQU     %0011000000000000
00000000  =00004000                 39  OP_0100     EQU     %0100000000000000
00000000  =00005000                 40  OP_0101     EQU     %0101000000000000
00000000  =00006000                 41  OP_0110     EQU     %0110000000000000
00000000  =00007000                 42  OP_0111     EQU     %0111000000000000
00000000  =00008000                 43  OP_1000     EQU     %1000000000000000
00000000  =00009000                 44  OP_1001     EQU     %1001000000000000
00000000  =0000A000                 45  OP_1010     EQU     %1010000000000000
00000000  =0000B000                 46  OP_1011     EQU     %1011000000000000
00000000  =0000C000                 47  OP_1100     EQU     %1100000000000000
00000000  =0000D000                 48  OP_1101     EQU     %1101000000000000
00000000  =0000E000                 49  OP_1110     EQU     %1110000000000000
00000000  =0000F000                 50  OP_1111     EQU     %1111000000000000
00000000  =0000000F                 51  HEX_VALUE_MASK_LONG EQU     $0000000F  * mask a hex value in 32-bits
00000000                            52  
00000000                            53  * BITMASK     EQU     $F000       * used to bitmask the first nibble
00000000                            54  
00001000                            55  START:  ORG    $1000            * first instruction of program
00001000                            56  
00001000                            57  * -----------------------------------
00001000                            58  * Starting and Ending Addresses
00001000                            59  * -----------------------------------
00001000                            60  *-----------------------------------------------------------------------------
00001000                            61  *-----------------------------------------------------------------------------
00001000                            62  * NAME: x
00001000                            63  * DESCRIPTION:    a
00001000                            64  * PRE-CONDITION:  b
00001000                            65  * POST-CONDITION: c
00001000                            66  * REGISTERS:      d
00001000                            67  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001000                            68  
00001000                            69  * THINK ABOUT ASKING FOR VALID START/END NO NEGATIVE ADDR
00001000                            70  
00001000                            71  * LOAD MSGSTART, ASK FOR INPUT
00001000  43F9 000025C0             72          LEA     MSGSTART,A1     * Load MESSAGE START
00001006  103C 000E                 73          MOVE.B  #14,D0          * Trap #14 to display message
0000100A  4E4F                      74          TRAP    #15             * Perform #14
0000100C                            75          
0000100C                            76  * GETS THE STARTING ADDRESS
0000100C  103C 0004                 77          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001010  4E4F                      78          TRAP    #15             * Perform #15
00001012                            79          
00001012                            80  * MOVE IT TO ANOTHER ADDRESS REGISTER
00001012  2441                      81          MOVEA.L D1,A2           * Move the user input into A2. This is the starting address.
00001014                            82  
00001014                            83  * LOAD MSGSTART, ASK FOR INPUT
00001014  43F9 000025D8             84          LEA     MSGEND,A1       * Load MESSAGE END
0000101A  303C 000E                 85          MOVE.W  #14,D0          * Trap #14 to display message
0000101E  4E4F                      86          TRAP    #15             * Perform #14
00001020                            87          
00001020                            88  * GETS THE ENDING ADDRESS
00001020  103C 0004                 89          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001024  4E4F                      90          TRAP    #15             * Perform Trap #4
00001026  2A01                      91          MOVE.L  D1,D5           * Move the ending address into D5
00001028  43F9 00002613             92          LEA     NEWLINE,A1      * Store newline variable for seper opcodes
0000102E                            93          
0000102E  3E3C 000F                 94          MOVE.W  #15,D7          * prep D7 for bitmask subroutine
00001032  3C3C 000C                 95          MOVE.W  #12,D6          * prep D6 for bitmask subroutine
00001036  6100 1572                 96          BSR     BITMASK         * obtain a bitmask that goes from 12-15 (inclusive)
0000103A                            97          * MOVE.W  D6,D2           * move the bitmask to D2
0000103A                            98          
0000103A  4279 00002710             99          CLR     (__COUNTER)              * setup the counter
00001040  33FC 0000 00002710       100          MOVE    #0,(__COUNTER)           
00001048                           101          
00001048  6100 0164                102          BSR     CLEAR_SCREEN    * clear the prompt for start/end ADDR's
0000104C                           103  LOOP    
0000104C  2C4A                     104          MOVE.L  A2,A6
0000104E  7608                     105          MOVE.L  #8,D3
00001050  6100 1318                106          BSR     PRINT_ASCII_HEX_CHAR
00001054                           107          
00001054                           108          *MOVE.W  A2,D1           * print what address we are processing
00001054                           109          *MOVE.B  #3,D0
00001054                           110          *TRAP    #15
00001054                           111          
00001054  43F9 000026C0            112          LEA     SPACE,A1        * print a space to seperate the address from the data
0000105A  303C 000E                113          MOVE.W  #14,D0
0000105E  4E4F                     114          TRAP    #15
00001060                           115  
00001060  3F06                     116          MOVE    D6,-(A7)        * save the bitmask on the stack
00001062  341A                     117          MOVE.W  (A2)+,D2        * Read an operation into D2
00001064  CC42                     118          AND.W   D2,D6           * Apply this bitmask
00001066                           119          
00001066  BC7C 0000                120          CMP     #OP_0000,D6     * Does the operation start with 0000?
0000106A  6600 000A                121          BNE     NOT0000         * No, check next case
0000106E  6100 014A                122          BSR     OP0000          * Branch to subroutine 0000
00001072  6000 00F6                123          BRA     ITERATION       * Move to next iteration of the loop
00001076                           124  NOT0000        
00001076  BC7C 1000                125          CMP     #OP_0001,D6     * Does the operation start with 0001?
0000107A  6600 000A                126          BNE     NOT0001         * No, check next case
0000107E  6100 02C4                127          BSR     OP0001          * Branch to subroutine 0001
00001082  6000 00E6                128          BRA     ITERATION       * Move to next iteration of the loop
00001086                           129  NOT0001
00001086  BC7C 2000                130          CMP     #OP_0010,D6     * Does the operation start with 0010?
0000108A  6600 000A                131          BNE     NOT0010         * No, check next case
0000108E  6100 031A                132          BSR     OP0010          * Branch to subroutine 0010
00001092  6000 00D6                133          BRA     ITERATION       * Move to next iteration of the loop
00001096                           134  NOT0010
00001096  BC7C 3000                135          CMP     #OP_0011,D6     * Does the operation start with 0011?
0000109A  6600 000A                136          BNE     NOT0011         * No, check next case
0000109E  6100 0310                137          BSR     OP0011          * Branch to subroutine 0011
000010A2  6000 00C6                138          BRA     ITERATION       * Move to next iteration of the loop
000010A6                           139  NOT0011
000010A6  BC7C 4000                140          CMP     #OP_0100,D6     * Does the operation start with 0100?
000010AA  6600 000A                141          BNE     NOT0100         * No, check next case
000010AE  6100 030E                142          BSR     OP0100          * Branch to subroutine 0100
000010B2  6000 00B6                143          BRA     ITERATION       * Move to next iteration of the loop
000010B6                           144  NOT0100
000010B6  BC7C 5000                145          CMP     #OP_0101,D6     * Does the operation start with 0101?
000010BA  6600 000A                146          BNE     NOT0101         * No, check next case
000010BE  6100 0624                147          BSR     OP0101          * Branch to subroutine 0101
000010C2  6000 00A6                148          BRA     ITERATION       * Move to next iteration of the loop
000010C6                           149  NOT0101
000010C6  BC7C 6000                150          CMP     #OP_0110,D6     * Does the operation start with 0110?
000010CA  6600 000A                151          BNE     NOT0110         * No, check next case
000010CE  6100 0682                152          BSR     OP0110          * Branch to subroutine 0110
000010D2  6000 0096                153          BRA     ITERATION       * Move to next iteration of the loop
000010D6                           154  NOT0110
000010D6  BC7C 7000                155          CMP     #OP_0111,D6     * Does the operation start with 0111?
000010DA  6600 000A                156          BNE     NOT0111         * No, check next case
000010DE  6100 073A                157          BSR     OP0111          * Branch to subroutine 0111
000010E2  6000 0086                158          BRA     ITERATION       * Move to next iteration of the loop
000010E6                           159  NOT0111
000010E6  BC7C 8000                160          CMP     #OP_1000,D6     * Does the operation start with 1000?
000010EA  6600 000A                161          BNE     NOT1000         * No, check next case
000010EE  6100 0730                162          BSR     OP1000          * Branch to subroutine 1000
000010F2  6000 0076                163          BRA     ITERATION       * Move to next iteration of the loop
000010F6                           164  NOT1000
000010F6  BC7C 9000                165          CMP     #OP_1001,D6     * Does the operation start with 1001?
000010FA  6600 000A                166          BNE     NOT1001         * No, check next case
000010FE  6100 07B4                167          BSR     OP1001          * Branch to subroutine 1001
00001102  6000 0066                168          BRA     ITERATION       * Move to next iteration of the loop
00001106                           169  NOT1001
00001106  BC7C A000                170          CMP     #OP_1010,D6     * Does the operation start with 1010?
0000110A  6600 000A                171          BNE     NOT1010         * No, check next case
0000110E  6100 07A4                172          BSR     OP1010          * Branch to subroutine 1010
00001112  6000 0056                173          BRA     ITERATION       * Move to next iteration of the loop
00001116                           174  NOT1010
00001116  BC7C B000                175          CMP     #OP_1011,D6     * Does the operation start with 1011?
0000111A  6600 000A                176          BNE     NOT1011         * No, check next case
0000111E  6100 079A                177          BSR     OP1011          * Branch to subroutine 1011
00001122  6000 0046                178          BRA     ITERATION       * Move to next iteration of the loop
00001126                           179  NOT1011
00001126  BC7C C000                180          CMP     #OP_1100,D6     * Does the operation start with 1100?
0000112A  6600 000A                181          BNE     NOT1100         * No, check next case
0000112E  6100 0834                182          BSR     OP1100          * Branch to subroutine 1100
00001132  6000 0036                183          BRA     ITERATION       * Move to next iteration of the loop
00001136                           184  NOT1100
00001136  BC7C D000                185          CMP     #OP_1101,D6     * Does the operation start with 1101?
0000113A  6600 000A                186          BNE     NOT1101         * No, check next case
0000113E  6100 08AE                187          BSR     OP1101          * Branch to subroutine 1101
00001142  6000 0026                188          BRA     ITERATION       * Move to next iteration of the loop
00001146                           189  NOT1101
00001146  BC7C E000                190          CMP     #OP_1110,D6     * Does the operation start with 1110?
0000114A  6600 000A                191          BNE     NOT1110         * No, check next case
0000114E  6100 0A24                192          BSR     OP1110          * Branch to subroutine 1110
00001152  6000 0016                193          BRA     ITERATION       * Move to next iteration of the loop
00001156                           194  NOT1110
00001156  BC7C F000                195          CMP     #OP_1111,D6     * Does the operation start with 1111?
0000115A  6600 000A                196          BNE     LOOPUNKNOWNOP   * No, check next case
0000115E  6100 0BAA                197          BSR     OP1111          * Branch to subroutine 1111
00001162  6000 0006                198          BRA     ITERATION       * Move to next iteration of the loop
00001166                           199          
00001166                           200  LOOPUNKNOWNOP
00001166  6100 11D8                201          BSR     UNKNOWNOP
0000116A                           202          
0000116A                           203  ITERATION
0000116A  3C1F                     204          MOVE    (A7)+,D6        * restore the bitmask to its previous state
0000116C                           205      
0000116C  5279 00002710            206          ADDI    #1,(__COUNTER)           * Track the lines on screen
00001172  0C79 001E 00002710       207          CMPI    #30,(__COUNTER)
0000117A  6600 0006                208          BNE     END_OF_LOOP     * Not at 30, go loop more
0000117E  6100 000C                209          BSR     IDLE_STATE      * Break to idle, ask to clear screen
00001182                           210  
00001182                           211  END_OF_LOOP
00001182  BA4A                     212          CMP     A2,D5           * Compare the starting address to ending address
00001184  6700 2F02                213          BEQ     END             * If they are equal, branch 
00001188  6000 FEC2                214          BRA     LOOP            * Otherwise, branch back to LOOP
0000118C                           215  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000118C                           216  *-----------------------------------------------------------------------------
0000118C                           217  IDLE_STATE
0000118C  43F9 000025EE            218      LEA     CONT_MSG,A1 * show msg to hit enter in order to continue
00001192  103C 000E                219      MOVE.B  #14,D0
00001196  4E4F                     220      TRAP    #15
00001198                           221      
00001198  103C 0004                222      MOVE.B  #4,D0 * trap task 4 - input
0000119C  4E4F                     223      TRAP    #15
0000119E  0C41 000D                224      CMPI    #$D,D1
000011A2                           225      
000011A2  6100 000A                226      BSR     CLEAR_SCREEN * clear everything, so ready to output another 30
000011A6  42B9 00002710            227      CLR.L   (__COUNTER)
000011AC  4E75                     228      RTS
000011AE                           229  CLEAR_SCREEN
000011AE  103C 000B                230      MOVE.B  #11,D0
000011B2  323C FF00                231      MOVE.W  #$FF00,D1
000011B6  4E4F                     232      TRAP    #15
000011B8  4E75                     233      RTS
000011BA                           234  
000011BA                           235  
000011BA                           236  *-----------------------------------------------------------------------------
000011BA                           237  *-----------------------------------------------------------------------------
000011BA                           238  * NAME: OP_0000   (BCLR, ORI, CMPI)
000011BA                           239  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000011BA                           240  * PRE-CONDITION:  xyz
000011BA                           241  * POST-CONDITION: All registers return to their previous state, and the output
000011BA                           242  *                 goes to the output console for reading the raw data or the
000011BA                           243  *                 actual instruction.
000011BA                           244  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000011BA                           245  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000011BA                           246  OP0000
000011BA  48A7 FFC0                247          MOVEM   D0-D7/A0-A1,-(A7)   * Push values to the stack to save
000011BE                           248                        
000011BE                           249          * Checking for unsupported mode (An) for BCLR, ORI, and CMPI
000011BE  3C3C 0003                250          MOVE.W  #3, D6              * Prep lower value for bitmask
000011C2  3E3C 0005                251          MOVE.W  #5, D7              * Prep upper value for bitmask
000011C6  6100 13E2                252          BSR     BITMASK             * Finalize bitmask setup
000011CA  CC42                     253          AND     D2,D6               * Apply bitmask
000011CC                           254          
000011CC  0C46 0008                255          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
000011D0  6700 0168                256          BEQ     UNKNOWN0000             * If so, the op is unknown
000011D4                           257          
000011D4                           258          * Checking for BCLR Dynamic
000011D4  3C3C 0006                259          MOVE.W  #6, D6              * Prep lower value for bitmask
000011D8  3E3C 0008                260          MOVE.W  #8, D7              * Prep upper value for bitmask
000011DC  6100 13CC                261          BSR     BITMASK             * Finalize bitmask setup
000011E0  CC42                     262          AND     D2,D6               * Apply bitmask
000011E2                           263          
000011E2  0C46 0180                264          CMPI    #%0000000110000000, D6  * Are we BCLR Dynamic?
000011E6  6600 0050                265          BNE     NOTBCLRDYNA             * If not, branch to BCLR Static or other ops
000011EA                           266  
000011EA                           267          * Confirmed BCLR Dynamic at this point
000011EA  43F9 00002647            268          LEA     BCLROP,A1           * We found BCLR
000011F0  103C 000E                269          MOVE.B  #14,D0              * Trap #14 prints out the data
000011F4  4E4F                     270          TRAP    #15                 * Perform Trap #14
000011F6                           271  
000011F6  43F9 000026C0            272          LEA     SPACE,A1            * Formatting
000011FC  103C 000E                273          MOVE.B  #14,D0              * Trap #14 prints out space
00001200  4E4F                     274          TRAP    #15                 * Perform Trap #14
00001202                           275          
00001202                           276          * Set up for printing out the Register
00001202  0882 0006                277          BCLR    #6,D2               * Clear bit 6
00001206  0882 0007                278          BCLR    #7,D2               * Clear bit 7
0000120A  0882 0008                279          BCLR    #8,D2               * Clear bit 8
0000120E                           280          
0000120E  6100 0B00                281          BSR     EAHELPER611         * Print out Register
00001212                           282  
00001212  43F9 000026C6            283          LEA     COMMA,A1            * formatting
00001218  103C 000E                284          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000121C  4E4F                     285          TRAP    #15                 * Perform Trap #14
0000121E                           286          
0000121E  4243                     287          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
00001220  08C3 0000                288          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
00001224                           289      
00001224  6100 0B2C                290          BSR     EAHELPER05          * Print out data.
00001228                           291          
00001228  43F9 00002613            292          LEA     NEWLINE,A1          * Formatting
0000122E  103C 000E                293          MOVE.B  #14,D0              * Trap #14 prints out the data
00001232  4E4F                     294          TRAP    #15                 * Perform Trap #14
00001234                           295          
00001234  6000 0108                296          BRA     END0000             * Found the op, move to next iteration
00001238                           297          
00001238                           298  NOTBCLRDYNA     * Possible options left are BCLR Static, ORI, and CMPI
00001238  3C3C 0006                299          MOVE.W  #6, D6              * Prep lower value for bitmask
0000123C  3E3C 000B                300          MOVE.W  #11, D7             * Prep upper value for bitmask
00001240  6100 1368                301          BSR     BITMASK             * Finalize bitmask setup
00001244  CC42                     302          AND     D2,D6               * Apply bitmask
00001246                           303          
00001246  0C46 0880                304          CMPI    #%0000100010000000, D6  * Are we BCLR Static?
0000124A  6600 003A                305          BNE     NOTBCLR                 * If not, branch to other functions
0000124E                           306          
0000124E                           307          * Confirmed BCLR Static at this point
0000124E  43F9 00002647            308          LEA     BCLROP,A1           * We found BCLR
00001254  103C 000E                309          MOVE.B  #14,D0              * Trap #14 prints out the data
00001258  4E4F                     310          TRAP    #15                 * Perform Trap #14
0000125A                           311  
0000125A  43F9 000026C0            312          LEA     SPACE,A1            * Formatting
00001260  103C 000E                313          MOVE.B  #14,D0              * Trap #14 prints out space
00001264  4E4F                     314          TRAP    #15                 * Perform Trap #14
00001266                           315          
00001266  2802                     316          MOVE.L  D2, D4              * Saving values
00001268                           317                  
00001268  43F9 000026C4            318          LEA     IMD, A1             * Formatting
0000126E  103C 000E                319          MOVE.B  #14,D0              * Trap #14 prints out the data
00001272  4E4F                     320          TRAP    #15                 * Perform Trap #14
00001274                           321          
00001274                           322          * Grab next word
00001274  3A1A                     323          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
00001276  E18D                     324          LSL.L   #8, D5              * LSL for first nibble of the word
00001278  E18D                     325          LSL.L   #8, D5              * LSL for second nibble of the word
0000127A  2C45                     326          MOVE.L  D5, A6              * Store D5 into A6, to be used as parameter
0000127C  7604                     327          MOVE.L  #4, D3              * Four most significant bits in D3
0000127E  6100 10EA                328          BSR     PRINT_ASCII_HEX_CHAR    * Perform number print out
00001282                           329  
00001282  6000 007E                330          BRA     SKIPLONG            * Formatting, returning saved values, etc.
00001286                           331          
00001286                           332  NOTBCLR * Possible options left are ORI or CMPI
00001286  3C3C 0009                333          MOVE.W  #9, D6              * Prep lower value for bitmask
0000128A  3E3C 000B                334          MOVE.W  #11, D7             * Prep upper value for bitmask
0000128E  6100 131A                335          BSR     BITMASK             * Finalize bitmask setup
00001292  CC42                     336          AND     D2,D6               * Apply bitmask
00001294                           337          
00001294  0C46 0000                338          CMPI    #%0000000000000000, D6   * Are we possibly ORI?
00001298  6600 008A                339          BNE     NOTORI                   * If not, branch to NOTORI
0000129C                           340          
0000129C                           341          * Size check to see if unsupported ORI mode
0000129C  3C3C 0006                342          MOVE.W  #6, D6              * Prep lower value for bitmask
000012A0  3E3C 0007                343          MOVE.W  #7, D7              * Prep upper value for bitmask
000012A4  6100 1304                344          BSR     BITMASK             * Finalize bitmask setup
000012A8  CC42                     345          AND     D2,D6               * Apply bitmask
000012AA                           346          
000012AA  0C46 00C0                347          CMPI    #%0000000011000000, D6  * Are bits 6,7 == 1,1?
000012AE  6700 008A                348          BEQ     UNKNOWN0000             * If so, unknown op. 
000012B2                           349          
000012B2                           350          * Confirmed ORI at this point
000012B2  43F9 00002655            351          LEA     ORIOP, A1           * Load 'ORI' into the output window
000012B8  103C 000E                352          MOVE.B  #14,D0              * Trap #14 prints out the data in D0
000012BC  4E4F                     353          TRAP    #15                 * Perform Trap #14
000012BE                           354  
000012BE                           355  IMD_SIZE_0000        
000012BE  6100 0DE8                356          BSR     SIZE67              * Print the size
000012C2                           357  
000012C2                           358          * Mode check to see the size
000012C2  3C3C 0006                359          MOVE.W  #6, D6              * Prep lower value for bitmask
000012C6  3E3C 0007                360          MOVE.W  #7, D7              * Prep upper value for bitmask
000012CA  6100 12DE                361          BSR     BITMASK             * Finalize bitmask setup
000012CE  CC42                     362          AND     D2,D6               * Apply bitmask
000012D0                           363          
000012D0  2802                     364          MOVE.L  D2, D4              * Saving value
000012D2                           365                  
000012D2  43F9 000026C4            366          LEA     IMD, A1             * Formatting
000012D8  103C 000E                367          MOVE.B  #14,D0              * Trap #14 prints out the data
000012DC  4E4F                     368          TRAP    #15                 * Perform Trap #14
000012DE                           369                 
000012DE                           370          * Grab immediate data
000012DE  3A1A                     371          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
000012E0  E18D                     372          LSL.L   #8, D5               
000012E2  E18D                     373          LSL.L   #8, D5
000012E4  2C45                     374          MOVE.L  D5, A6
000012E6  7604                     375          MOVE.L  #4, D3
000012E8  6100 1080                376          BSR     PRINT_ASCII_HEX_CHAR
000012EC                           377  
000012EC  0C46 0080                378          CMPI    #%0000000010000000, D6   * See if the size is a LONG
000012F0  6600 0010                379          BNE     SKIPLONG    
000012F4                           380          
000012F4                           381          * Grab next word
000012F4  3A1A                     382          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
000012F6  E18D                     383          LSL.L   #8, D5              * LSL to get first nibble of the word
000012F8  E18D                     384          LSL.L   #8, D5              * LSL to get second nibble of the word
000012FA  2C45                     385          MOVE.L  D5, A6              * Store D5 into A6 as a parameter
000012FC  7604                     386          MOVE.L  #4, D3              * Move #4 into D3 to show four bits
000012FE  6100 106A                387          BSR     PRINT_ASCII_HEX_CHAR    * Perform number output
00001302                           388  
00001302                           389  SKIPLONG
00001302  43F9 000026C6            390          LEA     COMMA, A1           * Formatting
00001308  103C 000E                391          MOVE.B  #14,D0              * Trap #14 prints out the data
0000130C  4E4F                     392          TRAP    #15                 * Perform Trap #14
0000130E                           393          
0000130E  2404                     394          MOVE.L  D4, D2              * Return saved value
00001310                           395          
00001310  6100 0A40                396          BSR     EAHELPER05          * Print out the EA
00001314                           397          
00001314  43F9 00002613            398          LEA     NEWLINE,A1          * Formatting
0000131A  103C 000E                399          MOVE.B  #14,D0              * Trap #14 prints out the data
0000131E  4E4F                     400          TRAP    #15                 * Perform Trap #14
00001320                           401          
00001320  6000 001C                402          BRA     END0000             * Done with op. Move to next iteration
00001324                           403  
00001324                           404  NOTORI  * Possible option left is CMPI
00001324                           405  
00001324  0C46 0C00                406          CMPI    #%0000110000000000, D6  * Are we CMPI?
00001328  6600 0010                407          BNE     UNKNOWN0000             * If not, unknown op
0000132C                           408          
0000132C                           409          * Confirmed CMPI at this point
0000132C  43F9 00002659            410          LEA     CMPIOP, A1          * Formatting
00001332  103C 000E                411          MOVE.B  #14,D0              * Trap #14 prints out the data
00001336  4E4F                     412          TRAP    #15                 * Perform Trap #14
00001338                           413          
00001338  6084                     414          BRA     IMD_SIZE_0000       * Get immediate value and end opcode 0000
0000133A                           415          
0000133A                           416  UNKNOWN0000
0000133A  6100 1004                417          BSR     UNKNOWNOP          * Unknown op
0000133E                           418  
0000133E                           419  END0000          
0000133E  4C9F 03FF                420          MOVEM   (A7)+,D0-D7/A0-A1   * Push values to the stack to save
00001342  4E75                     421          RTS
00001344                           422  
00001344                           423  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001344                           424  *-----------------------------------------------------------------------------
00001344                           425  
00001344                           426  
00001344                           427  
00001344                           428  *-----------------------------------------------------------------------------
00001344                           429  *-----------------------------------------------------------------------------
00001344                           430  * NAME: OP_0001   (MOVE.B)
00001344                           431  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001344                           432  * PRE-CONDITION:  xyz
00001344                           433  * POST-CONDITION: All registers return to their previous state, and the output
00001344                           434  *                 goes to the output console for reading the raw data or the
00001344                           435  *                 actual instruction.
00001344                           436  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001344                           437  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001344                           438  OP0001  
00001344  48A7 FFC0                439          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
00001348  3C3C 0006                440          MOVE.W  #6, D6              * Prep lower value for bitmask
0000134C  3E3C 0008                441          MOVE.W  #8, D7              * Prep upper value for bitmask
00001350  6100 1258                442          BSR     BITMASK             * Finalize bitmask setup
00001354  CC42                     443          AND     D2,D6               * Apply bitmask
00001356                           444          
00001356                           445          * I may have fucked off this part, sorry - Caleb
00001356                           446          * CMPI    #%0000000001000000, D6  * Is the destination mode 001?
00001356                           447          * BNE     UNKNOWNOP0001                 * If so, it's unknown.
00001356                           448          
00001356  43F9 0000262B            449          LEA     MOVEOP,A1   * Put 'MOVE' into the window
0000135C  103C 000E                450          MOVE.B  #14,D0      * Trap #14 to print out
00001360  4E4F                     451          TRAP    #15         * Perform Trap #14
00001362                           452          
00001362                           453          *-----------------------------------------------------------
00001362                           454          * the following code is to move the size bits into the
00001362                           455          * 0-1 positions of D3 so that eahelper05 case use that as a "parameter"
00001362                           456          * for eahelper05
00001362                           457          
00001362  3C3C 000C                458          MOVE.W  #12, D6              * Prep lower value for bitmask
00001366  3E3C 000D                459          MOVE.W  #13, D7              * Prep upper value for bitmask
0000136A  6100 123E                460          BSR     BITMASK              * Finalize bitmask setup
0000136E  CC42                     461          AND     D2,D6                * Apply bitmask
00001370                           462          
00001370  E04E                     463          LSR     #8,D6
00001372  E84E                     464          LSR     #4,D6
00001374                           465          
00001374  4243                     466          CLR     D3
00001376                           467          
00001376  1606                     468          MOVE.B  D6,D3
00001378                           469          
00001378                           470          *---------------------------------------------------------------
00001378                           471          
00001378                           472          
00001378  6100 0D2E                473          BSR     SIZE67
0000137C  6100 09D4                474          BSR     EAHELPER05
00001380                           475          
00001380  43F9 000026C6            476          LEA     COMMA,A1
00001386  103C 000E                477          MOVE.B  #14,D0
0000138A  4E4F                     478          TRAP    #15
0000138C                           479          
0000138C  6100 0982                480          BSR     EAHELPER611
00001390                           481          
00001390  43F9 00002613            482          LEA     NEWLINE,A1
00001396  103C 000E                483          MOVE.B  #14,D0
0000139A  4E4F                     484          TRAP    #15
0000139C                           485          
0000139C  6000 0006                486          BRA     ENDOP0001
000013A0                           487          *LEA     __B,A1      * Put '.B' into the window
000013A0                           488          *MOVE.B  #14,D0      * Trap #14 to print out
000013A0                           489          *TRAP    #15         * Perform Trap #14
000013A0                           490          
000013A0                           491  UNKNOWNOP0001
000013A0  6100 0F9E                492          BSR     UNKNOWNOP
000013A4                           493          
000013A4                           494  ENDOP0001
000013A4  4C9F 03FF                495          MOVEM (A7)+,D0-D7/A0-A1
000013A8  4E75                     496          RTS        
000013AA                           497          
000013AA                           498          * TODO: DETERMINE THE MODE AND REG FOR DESTINATION AND SOURCE
000013AA                           499  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000013AA                           500  *-----------------------------------------------------------------------------
000013AA                           501  
000013AA                           502  
000013AA                           503  
000013AA                           504  *-----------------------------------------------------------------------------
000013AA                           505  *-----------------------------------------------------------------------------
000013AA                           506  * NAME: OP_0010   (MOVE.L, MOVEA.L)
000013AA                           507  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000013AA                           508  * PRE-CONDITION:  xyz
000013AA                           509  * POST-CONDITION: All registers return to their previous state, and the output
000013AA                           510  *                 goes to the output console for reading the raw data or the
000013AA                           511  *                 actual instruction.
000013AA                           512  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000013AA                           513  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000013AA                           514  OP0010
000013AA                           515  
000013AA  6100 0F94                516      BSR     UNKNOWNOP
000013AE  4E75                     517      RTS
000013B0                           518  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000013B0                           519  *-----------------------------------------------------------------------------
000013B0                           520  
000013B0                           521  
000013B0                           522  
000013B0                           523  *-----------------------------------------------------------------------------
000013B0                           524  *-----------------------------------------------------------------------------
000013B0                           525  * NAME: OP_0011   (MOVE.W, MOVEA.W)
000013B0                           526  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000013B0                           527  * PRE-CONDITION:  xyz
000013B0                           528  * POST-CONDITION: All registers return to their previous state, and the output
000013B0                           529  *                 goes to the output console for reading the raw data or the
000013B0                           530  *                 actual instruction.
000013B0                           531  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000013B0                           532  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000013B0                           533  OP0011
000013B0  48A7 FFFE                534      MOVEM   D0-D7/A0-A6, -(A7)
000013B4                           535      
000013B4                           536      *MOVE.W  #6,D6
000013B4                           537      *MOVE.W  #8,D7
000013B4                           538      
000013B4                           539      *BSR     BITMASK
000013B4                           540      
000013B4                           541      *AND.W   D2,D6
000013B4                           542      
000013B4                           543      *CMP     #%0000000001000000,D6
000013B4                           544      *BNE     NEXT15
000013B4                           545      *BSR     * for MOVEA.W
000013B4                           546      
000013B4  4C9F 7FFF                547      MOVEM   (A7)+,D0-D7/A0-A6
000013B8                           548      
000013B8  6100 0F86                549      BSR     UNKNOWNOP
000013BC  4E75                     550      RTS
000013BE                           551  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000013BE                           552  *-----------------------------------------------------------------------------
000013BE                           553  
000013BE                           554  *-----------------------------------------------------------------------------
000013BE                           555  *-----------------------------------------------------------------------------
000013BE                           556  * NAME: OP_0100   (NOP, MOVEM, LEA, NEG, JSR, RTS)
000013BE                           557  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000013BE                           558  * PRE-CONDITION:  xyz
000013BE                           559  * POST-CONDITION: All registers return to their previous state, and the output
000013BE                           560  *                 goes to the output console for reading the raw data or the
000013BE                           561  *                 actual instruction.
000013BE                           562  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000013BE                           563  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000013BE                           564  OP0100  
000013BE                           565          * TODO: movem
000013BE                           566  
000013BE  48A7 C0C0                567          MOVEM   D0-D1/A0-A1,-(A7) * Push values to the stack to save
000013C2                           568          
000013C2                           569          *NOP
000013C2  0C42 4E71                570          CMPI    #%0100111001110001,D2
000013C6  6600 0012                571          BNE     NOTNOP
000013CA                           572          
000013CA  43F9 00002623            573          LEA     NOOPERATION,A1
000013D0  103C 000D                574          MOVE.B  #13,D0          * Print a newline
000013D4  4E4F                     575          TRAP    #15
000013D6                           576          
000013D6  6000 0306                577          BRA     DONE0100 *we found it, move on to the next iteration
000013DA                           578  NOTNOP *NEG
000013DA                           579          
000013DA                           580          * prep values for BITMASK subroutine
000013DA  7C08                     581          MOVE.L  #8,D6
000013DC  7E0B                     582          MOVE.L  #11,D7
000013DE                           583          
000013DE  6100 11CA                584          BSR     BITMASK
000013E2                           585          
000013E2  CC42                     586          AND     D2,D6                   * apply bitmask
000013E4                           587          
000013E4  0C46 0400                588          CMPI    #%0000010000000000,D6   * are we NEG?
000013E8  6600 0046                589          BNE     NOTNEG                  * not neg
000013EC                           590          
000013EC  7C03                     591          MOVE.L  #3,D6
000013EE  7E05                     592          MOVE.L  #5,D7
000013F0                           593          
000013F0  6100 11B8                594          BSR     BITMASK * generate a bitmask to be used to check mode
000013F4                           595          
000013F4  0C46 0008                596          CMPI    #%0000000000001000,D6 * check to see if it is the unsupported mode
000013F8  6700 02E0                597          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
000013FC                           598          
000013FC  0C46 0028                599          CMPI    #%0000000000101000,D6 * check to see if it is the unsupported mode
00001400  6700 02D8                600          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
00001404                           601          
00001404  0C46 0030                602          CMPI    #%0000000000110000,D6 * check to see if it is the unsupported mode
00001408  6700 02D0                603          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
0000140C                           604        
0000140C                           605          * it is NEG, print
0000140C  43F9 00002627            606          LEA     NEGOP,A1
00001412  103C 000E                607          MOVE.B  #14,D0
00001416  4E4F                     608          TRAP    #15
00001418                           609          
00001418  6100 0C8E                610          BSR     SIZE67
0000141C                           611          
0000141C  6100 0934                612          BSR     EAHELPER05
00001420                           613          
00001420  43F9 00002613            614          LEA     NEWLINE,A1
00001426  103C 000E                615          MOVE.B  #14,D0
0000142A  4E4F                     616          TRAP    #15
0000142C                           617          
0000142C  6000 02B0                618          BRA     DONE0100 * we found the op, move to next iteration
00001430                           619          
00001430                           620  NOTNEG *MOVEM
00001430                           621  
00001430                           622          * prep values for BITMASK subroutine
00001430  7C07                     623          MOVE.L  #7,D6
00001432  7E09                     624          MOVE.L  #9,D7
00001434                           625          
00001434  6100 1174                626          BSR     BITMASK
00001438                           627          
00001438  CC82                     628          AND.L   D2,D6   * apply bitmask
0000143A                           629          
0000143A  0C46 0080                630          CMPI    #%0000000010000000,D6 * is it MOVEM?
0000143E  6600 0148                631          BNE     NOTMOVEM          * it is not MOVEM
00001442                           632          
00001442  7C0A                     633          MOVE.L  #10,D6
00001444  7E0A                     634          MOVE.L  #10,D7
00001446                           635          
00001446  6100 1162                636          BSR     BITMASK
0000144A                           637          
0000144A  CC82                     638          AND.L   D2,D6
0000144C                           639          
0000144C  0C46 0000                640          CMPI    #%0000000000000000,D6 * is it register to memory?
00001450  6700 009C                641          BEQ     MOVEMTOMEM 
00001454                           642          
00001454                           643  MOVEMTOREG *supported modes: 010 011
00001454                           644  
00001454  7C03                     645          MOVE.L  #3,D6
00001456  7E05                     646          MOVE.L  #5,D7
00001458                           647          
00001458  6100 1150                648          BSR     BITMASK
0000145C                           649          
0000145C  CC82                     650          AND.L   D2,D6
0000145E                           651          
0000145E  0C46 0000                652          CMPI    #%0000000000000000,D6 * is it an unsupported mode?
00001462  6700 0276                653          BEQ     UNKNOWN0100
00001466                           654          
00001466  0C46 0008                655          CMPI    #%0000000000001000,D6 * is it an unsupported mode?
0000146A  6700 026E                656          BEQ     UNKNOWN0100
0000146E                           657          
0000146E  0C46 0020                658          CMPI    #%0000000000100000,D6 * is it an unsupported mode?
00001472  6700 0266                659          BEQ     UNKNOWN0100
00001476                           660          
00001476  0C46 0028                661          CMPI    #%0000000000101000,D6 * is it an unsupported mode?
0000147A  6700 025E                662          BEQ     UNKNOWN0100
0000147E                           663          
0000147E  0C46 0030                664          CMPI    #%0000000000110000,D6 * is it an unsupported mode?
00001482  6700 0256                665          BEQ     UNKNOWN0100
00001486                           666          
00001486  0C46 0038                667          CMPI    #%0000000000111000,D6 * is it an unsupported mode?
0000148A  6700 024E                668          BEQ     UNKNOWN0100
0000148E                           669          
0000148E  43F9 00002630            670          LEA     MOVEMOP,A1
00001494  103C 000E                671          MOVE.B  #14,D0          * print MOVEM
00001498  4E4F                     672          TRAP    #15
0000149A                           673          
0000149A  7C06                     674          MOVE.L  #6,D6
0000149C  7E06                     675          MOVE.L  #6,D7
0000149E                           676          
0000149E  6100 110A                677          BSR     BITMASK
000014A2                           678          
000014A2  CC82                     679          AND.L   D2,D6
000014A4                           680          
000014A4  0C46 0040                681          CMPI    #%0000000001000000,D6 * is it a long op?
000014A8  6600 0012                682          BNE     NOTLONGMOVEM1       * no, it is a word
000014AC                           683          
000014AC  43F9 000026DC            684          LEA     __L,A1
000014B2  103C 000E                685          MOVE.B  #14,D0          * print .L 
000014B6  4E4F                     686          TRAP    #15
000014B8                           687          
000014B8  6000 000E                688          BRA     SKIPNOTLONG1
000014BC                           689          
000014BC                           690  NOTLONGMOVEM1
000014BC                           691  
000014BC  43F9 000026D8            692          LEA     __W,A1
000014C2  103C 000E                693          MOVE.B  #14,D0          * print .W 
000014C6  4E4F                     694          TRAP    #15
000014C8                           695                  
000014C8                           696  SKIPNOTLONG1
000014C8                           697  
000014C8  6100 0888                698          BSR     EAHELPER05 * print out the register we are moving from
000014CC                           699          
000014CC  43F9 000026C6            700          LEA     COMMA,A1
000014D2  103C 000E                701          MOVE.B  #14,D0          * print , 
000014D6  4E4F                     702          TRAP    #15
000014D8                           703          
000014D8  6100 0CB0                704          BSR     MOVEMHELPERPOST
000014DC                           705          
000014DC  341A                     706          MOVE.W  (A2)+,D2
000014DE                           707          
000014DE  43F9 00002613            708          LEA     NEWLINE,A1
000014E4  103C 000E                709          MOVE.B  #14,D0          * print a newline 
000014E8  4E4F                     710          TRAP    #15
000014EA                           711      
000014EA  6000 01F2                712          BRA     DONE0100          * we found and printed, move on to the next iteration
000014EE                           713          
000014EE                           714  MOVEMTOMEM * supported modes 010 100
000014EE                           715  
000014EE  7C03                     716          MOVE.L  #3,D6
000014F0  7E05                     717          MOVE.L  #5,D7
000014F2                           718          
000014F2  6100 10B6                719          BSR     BITMASK
000014F6                           720          
000014F6  CC82                     721          AND.L   D2,D6
000014F8                           722          
000014F8  0C46 0000                723          CMPI    #%0000000000000000,D6 * is it an unsopported mode?
000014FC  6700 01DC                724          BEQ     UNKNOWN0100
00001500                           725          
00001500  0C46 0008                726          CMPI    #%0000000000001000,D6 * is it an unsopported mode?
00001504  6700 01D4                727          BEQ     UNKNOWN0100
00001508                           728          
00001508  0C46 0018                729          CMPI    #%0000000000011000,D6 * is it an unsopported mode?
0000150C  6700 01CC                730          BEQ     UNKNOWN0100
00001510                           731          
00001510  0C46 0028                732          CMPI    #%0000000000101000,D6 * is it an unsopported mode?
00001514  6700 01C4                733          BEQ     UNKNOWN0100
00001518                           734          
00001518  0C46 0030                735          CMPI    #%0000000000110000,D6 * is it an unsopported mode?
0000151C  6700 01BC                736          BEQ     UNKNOWN0100
00001520                           737          
00001520  0C46 0070                738          CMPI    #%0000000001110000,D6 * is it an unsopported mode?
00001524  6700 01B4                739          BEQ     UNKNOWN0100
00001528                           740          
00001528  43F9 00002630            741          LEA     MOVEMOP,A1
0000152E  103C 000E                742          MOVE.B  #14,D0          * print MOVEM
00001532  4E4F                     743          TRAP    #15
00001534                           744          
00001534  7C06                     745          MOVE.L  #6,D6
00001536  7E06                     746          MOVE.L  #6,D7
00001538                           747          
00001538  6100 1070                748          BSR     BITMASK
0000153C                           749          
0000153C  CC82                     750          AND.L   D2,D6
0000153E                           751          
0000153E  0C46 0040                752          CMPI    #%0000000001000000,D6 * is it a long op?
00001542  6600 0012                753          BNE     NOTLONGMOVEM2       * no, it is a word
00001546                           754          
00001546  43F9 000026DC            755          LEA     __L,A1
0000154C  103C 000E                756          MOVE.B  #14,D0          * print .L 
00001550  4E4F                     757          TRAP    #15
00001552                           758          
00001552  6000 000E                759          BRA     SKIPNOTLONG2
00001556                           760          
00001556                           761  NOTLONGMOVEM2
00001556                           762  
00001556  43F9 000026D8            763          LEA     __W,A1
0000155C  103C 000E                764          MOVE.B  #14,D0          * print .W 
00001560  4E4F                     765          TRAP    #15
00001562                           766                  
00001562                           767  SKIPNOTLONG2
00001562                           768  
00001562  6100 0DAE                769          BSR     MOVEMHELPERPRE
00001566                           770  
00001566  43F9 000026C6            771          LEA     COMMA,A1
0000156C  103C 000E                772          MOVE.B  #14,D0          * print , 
00001570  4E4F                     773          TRAP    #15
00001572                           774          
00001572  6100 07DE                775          BSR     EAHELPER05 * print out the register we are moving to
00001576                           776          
00001576  341A                     777          MOVE.W  (A2)+,D2
00001578                           778          
00001578  43F9 00002613            779          LEA     NEWLINE,A1
0000157E  103C 000E                780          MOVE.B  #14,D0          * print a newline 
00001582  4E4F                     781          TRAP    #15
00001584                           782      
00001584  6000 0158                783          BRA     DONE0100          * we found and printed, move on to the next iteration
00001588                           784  
00001588                           785  NOTMOVEM *JSR
00001588                           786          * prep values for BITMASK subroutine
00001588  7C06                     787          MOVE.L  #6,D6
0000158A  7E08                     788          MOVE.L  #8,D7
0000158C                           789          
0000158C  6100 101C                790          BSR     BITMASK
00001590                           791          
00001590  CC42                     792          AND     D2,D6   * apply bitmask
00001592                           793          
00001592  0C46 0080                794          CMPI    #%0000000010000000,D6
00001596  6600 003E                795          BNE     NOTJSR          * it's not JSR
0000159A                           796          
0000159A  43F9 00002636            797          LEA     JSROP,A1
000015A0  103C 000E                798          MOVE.B  #14,D0          * Print a newline and JSR
000015A4  4E4F                     799          TRAP    #15
000015A6                           800          
000015A6  43F9 000026C0            801          LEA     SPACE,A1
000015AC  103C 000E                802          MOVE.B  #14,D0          * Print a newline and JSR
000015B0  4E4F                     803          TRAP    #15
000015B2                           804          
000015B2                           805          * print out where we are jumping to
000015B2                           806          
000015B2  341A                     807          MOVE.W  (A2)+,D2 * read in the next word of the instruction 
000015B4                           808          
000015B4  2202                     809          MOVE.L  D2,D1   * save the opcode to print
000015B6                           810          
000015B6  7410                     811          MOVE.L  #16,D2  * set the base to 16
000015B8                           812          
000015B8  700F                     813          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000015BA  4E4F                     814          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000015BC                           815          
000015BC  341A                     816          MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
000015BE                           817          
000015BE  2202                     818          MOVE.L  D2,D1   * save the opcode to print
000015C0                           819          
000015C0  7410                     820          MOVE.L  #16,D2  * set the base to 16
000015C2                           821          
000015C2  700F                     822          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000015C4  4E4F                     823          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000015C6                           824          
000015C6  43F9 00002613            825          LEA     NEWLINE,A1
000015CC  103C 000E                826          MOVE.B  #14,D0          * Print a newline
000015D0  4E4F                     827          TRAP    #15
000015D2                           828          
000015D2  6000 010A                829          BRA     DONE0100          * we already found instruction, next iteration
000015D6                           830  NOTJSR *RTS
000015D6                           831  
000015D6                           832          * prep values for BITMASK subroutine
000015D6  7C06                     833          MOVE.L  #6,D6
000015D8  7E08                     834          MOVE.L  #8,D7
000015DA                           835          
000015DA  6100 0FCE                836          BSR     BITMASK
000015DE                           837          
000015DE  CC42                     838          AND     D2,D6   * apply bitmask
000015E0                           839          
000015E0  0C46 0040                840          CMPI    #%0000000001000000,D6
000015E4  6600 0012                841          BNE     NOTRTS          * it's not RTS
000015E8                           842          
000015E8  43F9 0000263A            843          LEA     RTSOP,A1
000015EE  103C 000D                844          MOVE.B  #13,D0          * Print a newline and RTS
000015F2  4E4F                     845          TRAP    #15
000015F4                           846          
000015F4  6000 00E8                847          BRA     DONE0100          * we already found instruction, next iteration
000015F8                           848  NOTRTS  *LEA
000015F8                           849         
000015F8                           850          * prep values for BITMASK subroutine
000015F8  7C06                     851          MOVE.L  #6,D6
000015FA  7E08                     852          MOVE.L  #8,D7
000015FC                           853          
000015FC  6100 0FAC                854          BSR     BITMASK
00001600                           855          
00001600  CC42                     856          AND     D2,D6   * apply bitmask
00001602                           857          
00001602  0C46 01C0                858          CMPI    #%0000000111000000,D6
00001606  6600 00D2                859          BNE     UNKNOWN0100          * it's not LEA, we dont know what it is
0000160A                           860          
0000160A                           861          * prep values for BITMASK subroutine
0000160A  7C03                     862          MOVE.L  #3,D6
0000160C  7E05                     863          MOVE.L  #5,D7
0000160E                           864          
0000160E  6100 0F9A                865          BSR     BITMASK
00001612                           866          
00001612  CC42                     867          AND     D2,D6   * apply bitmask
00001614                           868          
00001614  0C46 0008                869          CMPI    #%0000000000001000,D6
00001618  6700 00C0                870          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
0000161C                           871          
0000161C  0C46 0018                872          CMPI    #%0000000000011000,D6
00001620  6700 00B8                873          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001624                           874          
00001624  0C46 0020                875          CMPI    #%0000000000100000,D6
00001628  6700 00B0                876          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
0000162C                           877          
0000162C  0C46 0028                878          CMPI    #%0000000000101000,D6
00001630  6700 00A8                879          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001634                           880          
00001634  0C46 0030                881          CMPI    #%0000000000110000,D6
00001638  6700 00A0                882          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
0000163C                           883          
0000163C  0C46 0038                884          CMPI    #%0000000000111000,D6
00001640  6700 0046                885          BEQ     TWOWORDLEA          * it's a two word LEA
00001644                           886          
00001644                           887          * check to make sure it is a supported mode and size
00001644                           888          
00001644  43F9 00002643            889          LEA     LEAOP,A1
0000164A  103C 000E                890          MOVE.B  #14,D0          * Print LEA
0000164E  4E4F                     891          TRAP    #15
00001650                           892          
00001650  0882 0007                893          BCLR    #7,D2
00001654  0882 0008                894          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
00001658                           895          
00001658  43F9 000026C0            896          LEA     SPACE,A1
0000165E  103C 000E                897          MOVE.B  #14,D0          * Print SPACE
00001662  4E4F                     898          TRAP    #15
00001664                           899          
00001664  6100 06EC                900          BSR     EAHELPER05
00001668                           901          
00001668  43F9 000026C6            902          LEA     COMMA,A1
0000166E  103C 000E                903          MOVE.B  #14,D0          * Print COMMA
00001672  4E4F                     904          TRAP    #15
00001674                           905          
00001674  6100 069A                906          BSR     EAHELPER611
00001678                           907          
00001678  43F9 00002613            908          LEA     NEWLINE,A1
0000167E  103C 000E                909          MOVE.B  #14,D0          * Start a new line
00001682  4E4F                     910          TRAP    #15
00001684                           911          
00001684                           912          
00001684                           913          * call EA helper
00001684                           914          * MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
00001684                           915                  
00001684  6000 0058                916          BRA     DONE0100          * we already found instruction, next iteration
00001688                           917          
00001688                           918  TWOWORDLEA
00001688                           919  
00001688  43F9 00002643            920          LEA     LEAOP,A1
0000168E  103C 000E                921          MOVE.B  #14,D0   * Print LEA
00001692  4E4F                     922          TRAP    #15
00001694                           923          
00001694  43F9 000026C0            924          LEA     SPACE,A1
0000169A  103C 000E                925          MOVE.B  #14,D0   * Print SPACE
0000169E  4E4F                     926          TRAP    #15
000016A0                           927  
000016A0  321A                     928          MOVE.W  (A2)+,D1
000016A2                           929          
000016A2  7C00                     930          MOVE.L  #0,D6
000016A4  7E0F                     931          MOVE.L  #15,D7
000016A6                           932          
000016A6  6100 0F02                933          BSR     BITMASK
000016AA                           934          
000016AA  C286                     935          AND.L   D6,D1   * shave off bad info
000016AC                           936          
000016AC  103C 0003                937          MOVE.B  #3,D0   * Print the address which was the source
000016B0  4E4F                     938          TRAP    #15
000016B2                           939          
000016B2  43F9 000026C6            940          LEA     COMMA,A1
000016B8  103C 000E                941          MOVE.B  #14,D0  * Print COMMA
000016BC  4E4F                     942          TRAP    #15
000016BE                           943          
000016BE  0882 0007                944          BCLR    #7,D2
000016C2  0882 0008                945          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
000016C6                           946          
000016C6  6100 0648                947          BSR     EAHELPER611
000016CA                           948          
000016CA  43F9 00002613            949          LEA     NEWLINE,A1
000016D0  103C 000E                950          MOVE.B  #14,D0          * Start a new line
000016D4  4E4F                     951          TRAP    #15
000016D6                           952          
000016D6  6000 0006                953          BRA     DONE0100
000016DA                           954          
000016DA                           955  UNKNOWN0100 *dont know what it is
000016DA  6100 0C64                956          BSR     UNKNOWNOP
000016DE                           957          
000016DE                           958  DONE0100
000016DE  4C9F 0303                959          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
000016E2  4E75                     960          RTS
000016E4                           961          
000016E4                           962  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000016E4                           963  *-----------------------------------------------------------------------------
000016E4                           964        
000016E4                           965          
000016E4                           966          
000016E4                           967  
000016E4                           968  *-----------------------------------------------------------------------------
000016E4                           969  *-----------------------------------------------------------------------------
000016E4                           970  * NAME: OP_0101   (SUBQ)
000016E4                           971  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000016E4                           972  * PRE-CONDITION:  xyz
000016E4                           973  * POST-CONDITION: All registers return to their previous state, and the output
000016E4                           974  *                 goes to the output console for reading the raw data or the
000016E4                           975  *                 actual instruction.
000016E4                           976  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000016E4                           977  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000016E4                           978  OP0101
000016E4  48A7 FFC0                979          MOVEM   D0-D7/A0-A1,-(A7)       * Push values to the stack to save
000016E8                           980  
000016E8  CC7C 0100                981          AND     #%0000000100000000, D6  * Baby-Bitmask for the 8th digit.
000016EC  0C46 0100                982          CMPI    #%0000000100000000, D6  * Is the 8th digit a 1?
000016F0  6700 005A                983          BEQ     UNKNOWN0101             * If so, unknown op
000016F4                           984        
000016F4  0C46 0100                985          CMPI    #%0000000100000000, D6  * Is the size 11, an unsupported value?
000016F8  6700 0052                986          BEQ     UNKNOWN0101             * If so, unknown op
000016FC                           987            
000016FC                           988          * Verified SUBQ at this point
000016FC  43F9 0000263E            989          LEA     SUBQOP,A1           * Print out SUBQ
00001702  103C 000E                990          MOVE.B  #14,D0              * Trap #14 to print out
00001706  4E4F                     991          TRAP    #15                 * Perform Trap #14
00001708                           992                          
00001708  6100 099E                993          BSR     SIZE67              * Print out size
0000170C                           994          
0000170C  43F9 000026C4            995          LEA     IMD,A1              * Formatting
00001712  103C 000E                996          MOVE.B  #14,D0              * Trap #14 prints out space
00001716  4E4F                     997          TRAP    #15                 * Perform Trap #14
00001718                           998          
00001718  3C3C 0009                999          MOVE.W  #9, D6              * Prep lower value for bitmask
0000171C  3E3C 000B               1000          MOVE.W  #11,D7              * Prep upper value for bitmask
00001720  6100 0E88               1001          BSR     BITMASK             * Finalize bitmask setup
00001724  CC42                    1002          AND     D2,D6               * Apply bitmask
00001726                          1003          
00001726  6100 0DD0               1004          BSR     PRINTDATA911        * Special op for immediate in bits 9->11
0000172A                          1005            
0000172A  43F9 000026C6           1006          LEA     COMMA,A1            * Formatting
00001730  103C 000E               1007          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001734  4E4F                    1008          TRAP    #15                 * Perform Trap #14
00001736                          1009          
00001736  6100 061A               1010          BSR     EAHELPER05          * Print out the Effective Address
0000173A                          1011          
0000173A  43F9 00002613           1012          LEA     NEWLINE,A1          * Formatting
00001740  103C 000E               1013          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001744  4E4F                    1014          TRAP    #15                 * Perform Trap #14
00001746                          1015          
00001746  4C9F 03FF               1016          MOVEM   (A7)+,D0-D7/A0-A1   * Pop off the stack to return our registers
0000174A  4E75                    1017          RTS
0000174C                          1018      
0000174C                          1019  UNKNOWN0101
0000174C  6100 0BF2               1020          BSR     UNKNOWNOP
00001750  4E75                    1021          RTS
00001752                          1022  
00001752                          1023  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001752                          1024  *-----------------------------------------------------------------------------
00001752                          1025  
00001752                          1026  
00001752                          1027  
00001752                          1028  *-----------------------------------------------------------------------------
00001752                          1029  *-----------------------------------------------------------------------------
00001752                          1030  * NAME: OP_0110   (BCC, BCS, BGE, BLT, BVC, BRA)
00001752                          1031  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001752                          1032  * PRE-CONDITION:  Given the possibilties for 0110, masks the next 4 bits
00001752                          1033  *                 in the instruction and determines what the bits match to a
00001752                          1034  *                 given condition code. If the 8 bit offset is $00, or $FF,
00001752                          1035  *                 this signifies a word or long offset (for $00 and $FF
00001752                          1036  *                 respectively). The 8 bit offset is in 2's comp. form, and
00001752                          1037  *                 should be un-done, then plus or minus to the current
00001752                          1038  *                 program counter (PC) to get the actual memory label to
00001752                          1039  *                 output to console. The word offset signal eats an
00001752                          1040  *                 additional 16 bits and the long offset eats an additional
00001752                          1041  *                 32 bits. The word/long offset are for memory alignment.
00001752                          1042  * POST-CONDITION: All registers return to their previous state, and the output
00001752                          1043  *                 goes to the output console for reading the raw data or the
00001752                          1044  *                 actual instruction.
00001752                          1045  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001752                          1046  *                 A1 (output)
00001752                          1047  * CONDITIONS TABLE:
00001752                          1048  *                Condition Names  - Mnemonic - Condition Code
00001752                          1049  *                --------------------------------------------
00001752                          1050  *                True             -    T     - 0000
00001752                          1051  *                False            -    F     - 0001
00001752                          1052  *                Higher           -    HI    - 0010
00001752                          1053  *                Lower or Same    -    LS    - 0011
00001752                          1054  *                Carry Clear      -    CC    - 0100
00001752                          1055  *                Carry Set        -    CS    - 0101
00001752                          1056  *                Not Equal        -    NE    - 0110
00001752                          1057  *                Equal            -    EQ    - 0111
00001752                          1058  *                Overflow Clear   -    VC    - 1000
00001752                          1059  *                Overflow Set     -    VS    - 1001
00001752                          1060  *                Plus             -    PL    - 1010
00001752                          1061  *                Minus            -    MI    - 1011
00001752                          1062  *                Greater or Equal -    GE    - 1100
00001752                          1063  *                Less Than        -    LT    - 1101
00001752                          1064  *                Greater Than     -    GT    - 1110
00001752                          1065  *                Less or Equal    -    LE    - 1111
00001752                          1066  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001752  48E7 FFFE               1067  OP0110  MOVEM.L D0-D7/A0-A6,-(A7) * Save main method routine vars to stack
00001756                          1068                          
00001756  3C3C 0009               1069          MOVE.W  #9,D6  * Move in 9 to D6
0000175A  3E3C 000B               1070          MOVE.W  #11,D7 * Move in 11 to D7
0000175E                          1071                                        
0000175E  6100 0E4A               1072          BSR     BITMASK * Call BITMASK sub-routine, Returns a bitmask in D6
00001762  CC42                    1073          AND     D2,D6   * apply the BITMASK
00001764                          1074          
00001764  0C46 0400               1075          CMPI    #%0000010000000000,D6 * CASE 1: BCC - BINARY FOR "CARRY CLEAR" FLAG
00001768  6700 0032               1076          BEQ     OP_BCC
0000176C  0C46 0500               1077          CMPI    #%0000010100000000,D6 * CASE 2: BCS - BINARY FOR "CARRY SET" FLAG
00001770  6700 0034               1078          BEQ     OP_BCS
00001774  0C46 0C00               1079          CMPI    #%0000110000000000,D6 * CASE 3: BGE - BINARY FOR "GREATER OR EQUAL" FLAG
00001778  6700 0036               1080          BEQ     OP_BGE
0000177C  0C46 0D00               1081          CMPI    #%0000110100000000,D6 * CASE 4: BLT - BINARY FOR "LESS THAN" FLAG
00001780  6700 0038               1082          BEQ     OP_BLT
00001784  0C46 0800               1083          CMPI    #%0000100000000000,D6 * CASE 5: BVC - BINARY FOR "OVERFLOW CLEAR" FLAG
00001788  6700 003A               1084          BEQ     OP_BVC
0000178C  0C46 0000               1085          CMPI    #%0000000000000000,D6 * CASE 6: BRA - BINARY FOR "BRANCH ALWAYS" FLAG
00001790  6700 003C               1086          BEQ     OP_BRA
00001794  6100 0BAA               1087          BSR     UNKNOWNOP             * don't know what it is, print it out, skip to end
00001798  6000 007A               1088          BRA     BCC_END
0000179C                          1089  
0000179C  43F9 0000267E           1090  OP_BCC  LEA     OP_BCC_MSG,A1
000017A2  6000 0034               1091          BRA     OP_BRANCHES_PRINT
000017A6  43F9 00002683           1092  OP_BCS  LEA     OP_BCS_MSG,A1
000017AC  6000 002A               1093          BRA     OP_BRANCHES_PRINT
000017B0  43F9 00002688           1094  OP_BGE  LEA     OP_BGE_MSG,A1
000017B6  6000 0020               1095          BRA     OP_BRANCHES_PRINT
000017BA  43F9 0000268D           1096  OP_BLT  LEA     OP_BLT_MSG,A1
000017C0  6000 0016               1097          BRA     OP_BRANCHES_PRINT
000017C4  43F9 00002692           1098  OP_BVC  LEA     OP_BVC_MSG,A1
000017CA  6000 000C               1099          BRA     OP_BRANCHES_PRINT
000017CE  43F9 00002697           1100  OP_BRA  LEA     OP_BRA_MSG,A1
000017D4  6000 0002               1101          BRA     OP_BRANCHES_PRINT
000017D8                          1102  OP_BRANCHES_PRINT
000017D8  103C 000E               1103          MOVE.B  #14,D0 * print instruction op, chosen from cases directly above
000017DC  4E4F                    1104          TRAP    #15
000017DE                          1105          
000017DE  43F9 000026C2           1106          LEA     DOLLAR,A1
000017E4  103C 000E               1107          MOVE.B  #14,D0 * print raw data hex of the LABEL
000017E8  4E4F                    1108          TRAP    #15
000017EA                          1109          
000017EA  3C3C 0000               1110          MOVE.W  #0,D6                 * Move in 0 to D6 - prep mask
000017EE  3E3C 0007               1111          MOVE.W  #7,D7                 * Move in 7 to D7
000017F2  6100 0DB6               1112          BSR     BITMASK               * Call BITMASK sub-routine, return in D6
000017F6  CC42                    1113          AND     D2,D6                 * AND mask with op bits, get last 8 bits in D6
000017F8                          1114          
000017F8                          1115  *        CMPI    #%00000000,D6         * all 0's == word offset
000017F8                          1116  *        BEQ     BCC_WORD_OFFSET
000017F8                          1117          
000017F8                          1118  *        CMPI    #%11111111,D6         * all F's == long offset
000017F8                          1119  *        BEQ     BCC_LONG_OFFSET
000017F8                          1120  BCC_BYTE_OFFSET
000017F8  4254                    1121          CLR     (A4)
000017FA  2846                    1122          MOVE.L  D6,A4
000017FC  43D4                    1123          LEA     (A4),A1
000017FE  103C 000E               1124          MOVE.B  #14,D0
00001802  4E4F                    1125          TRAP    #15
00001804  43F9 00002613           1126          LEA     NEWLINE,A1
0000180A  103C 000E               1127          MOVE.B  #14,D0
0000180E  4E4F                    1128          TRAP    #15
00001810                          1129          
00001810  6000 0002               1130          BRA     BCC_END
00001814                          1131  *BCC_WORD_OFFSET
00001814                          1132  *        MOVEM.W (A2)+,A1
00001814                          1133  *        MOVE.B  #13,D0
00001814                          1134  *        TRAP    #15
00001814                          1135  *        BRA     BCC_END
00001814                          1136  *BCC_LONG_OFFSET
00001814                          1137  *        MOVEM.L (A2)+,A1
00001814                          1138  *        MOVE.B  #13,D0
00001814                          1139  *        TRAP    #15
00001814                          1140  *        BRA     BCC_END
00001814                          1141  BCC_END * reload the memory, call RTS
00001814  4C9F 7FFF               1142          MOVEM   (A7)+,D0-D7/A0-A6 * Pop off the stack to return our registers
00001818  4E75                    1143          RTS
0000181A                          1144  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000181A                          1145  *-----------------------------------------------------------------------------
0000181A                          1146  
0000181A                          1147  
0000181A                          1148  
0000181A                          1149  *-----------------------------------------------------------------------------
0000181A                          1150  *-----------------------------------------------------------------------------
0000181A                          1151  * NAME: OP_0111   ()
0000181A                          1152  * DESCRIPTION:    OP code 0111 is not supported. 
0000181A                          1153  * PRE-CONDITION:  
0000181A                          1154  * POST-CONDITION: 
0000181A                          1155  * REGISTERS:
0000181A                          1156  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000181A                          1157  OP0111
0000181A  6100 0B24               1158      BSR     UNKNOWNOP
0000181E  4E75                    1159      RTS
00001820                          1160  
00001820                          1161  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001820                          1162  *-----------------------------------------------------------------------------
00001820                          1163  
00001820                          1164  
00001820                          1165  
00001820                          1166  *-----------------------------------------------------------------------------
00001820                          1167  *-----------------------------------------------------------------------------
00001820                          1168  * NAME: OP_1000   (DIVS, OR)
00001820                          1169  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001820                          1170  * PRE-CONDITION:  xyz
00001820                          1171  * POST-CONDITION: All registers return to their previous state, and the output
00001820                          1172  *                 goes to the output console for reading the raw data or the
00001820                          1173  *                 actual instruction.
00001820                          1174  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001820                          1175  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001820                          1176  OP1000
00001820  48A7 FFC0               1177          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
00001824                          1178  
00001824                          1179          * Check if the EA Mode is 001 since both DIVS and OR do not support it
00001824  3C3C 0003               1180          MOVE.W  #3, D6              * Prep lower value for bitmask
00001828  3E3C 0005               1181          MOVE.W  #5, D7              * Prep upper value for bitmask
0000182C  6100 0D7C               1182          BSR     BITMASK             * Finalize bitmask setup
00001830  CC42                    1183          AND     D2,D6               * Apply bitmask
00001832                          1184          
00001832  0C46 0008               1185          CMPI    #%0000000000001000, D6  * Is the mode 001, an unsupported mode?
00001836  6700 0B08               1186          BEQ     UNKNOWNOP                 * If so, the op is not supported
0000183A                          1187          
0000183A                          1188          * Checking for DIVS
0000183A  3C3C 0006               1189          MOVE.W  #6, D6              * Prep lower value for bitmask
0000183E  3E3C 0008               1190          MOVE.W  #8, D7              * Prep upper value for bitmask
00001842  6100 0D66               1191          BSR     BITMASK             * Finalize bitmask setup
00001846  CC42                    1192          AND     D2,D6               * Apply bitmask
00001848                          1193          
00001848  0C46 01C0               1194          CMPI    #%0000000111000000, D6  * Are we DIVS?
0000184C  6600 0050               1195          BNE     NOTDIVS                 * If not, branch to see if it's OR
00001850                          1196          
00001850  43F9 00002616           1197          LEA     DIVSOP,A1           * We found DIVS
00001856  103C 000E               1198          MOVE.B  #14,D0              * Trap #14 prints out the data
0000185A  4E4F                    1199          TRAP    #15                 * Perform Trap #14
0000185C                          1200          
0000185C  43F9 000026C0           1201          LEA     SPACE,A1            * formatting
00001862  103C 000E               1202          MOVE.B  #14,D0              * Trap #14 prints out space
00001866  4E4F                    1203          TRAP    #15                 * Perform Trap #14
00001868                          1204          
00001868  4243                    1205          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
0000186A  08C3 0000               1206          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
0000186E                          1207                                      * to indicate a potential immediate of size word
0000186E                          1208          
0000186E  6100 04E2               1209          BSR     EAHELPER05          * Print out data
00001872                          1210  
00001872  43F9 000026C6           1211          LEA     COMMA,A1            * formatting
00001878  103C 000E               1212          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000187C  4E4F                    1213          TRAP    #15                 * Perform Trap #14
0000187E                          1214          
0000187E                          1215          * bit manipulation is needed to make the outlier DIVS work
0000187E                          1216          * with the generic EAHELPER611
0000187E  0882 0006               1217          BCLR    #6,D2
00001882  0882 0007               1218          BCLR    #7,D2
00001886  0882 0008               1219          BCLR    #8,D2
0000188A                          1220          
0000188A                          1221          * the above bits were cleared so that eahelper05 knows the destination
0000188A                          1222          * is a data register.
0000188A                          1223          
0000188A  6100 0484               1224          BSR     EAHELPER611 
0000188E                          1225  
0000188E  43F9 00002613           1226          LEA     NEWLINE,A1          * We found DIVS
00001894  103C 000E               1227          MOVE.B  #14,D0              * Trap #14 prints out the data
00001898  4E4F                    1228          TRAP    #15                 * Perform Trap #14
0000189A                          1229          
0000189A  6000 0012               1230          BRA     OP1000END
0000189E                          1231          
0000189E                          1232  NOTDIVS * It is confirmed OR at this point
0000189E  43F9 00002652           1233          LEA     OROP,A1         * We found OR
000018A4  103C 000E               1234          MOVE.B  #14,D0          * Trap #14 prints out the data
000018A8  4E4F                    1235          TRAP    #15             * Perform Trap #14
000018AA                          1236          *================================================================
000018AA                          1237          * todo, move the size of the operation into the leading bits of D5
000018AA                          1238          * before subroutine call
000018AA  6100 0464               1239          BSR     EAHELPER611
000018AE                          1240  
000018AE                          1241  OP1000END
000018AE  4C9F 03FF               1242          MOVEM   (A7)+,D0-D7/A0-A1
000018B2  4E75                    1243          RTS
000018B4                          1244  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000018B4                          1245  *-----------------------------------------------------------------------------
000018B4                          1246  
000018B4                          1247  
000018B4                          1248  
000018B4                          1249  *-----------------------------------------------------------------------------
000018B4                          1250  *-----------------------------------------------------------------------------
000018B4                          1251  * NAME: OP_1001   (SUB)
000018B4                          1252  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000018B4                          1253  * PRE-CONDITION:  xyz
000018B4                          1254  * POST-CONDITION: All registers return to their previous state, and the output
000018B4                          1255  *                 goes to the output console for reading the raw data or the
000018B4                          1256  *                 actual instruction.
000018B4                          1257  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000018B4                          1258  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000018B4                          1259  OP1001
000018B4                          1260  
000018B4                          1261  
000018B4                          1262  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000018B4                          1263  *-----------------------------------------------------------------------------
000018B4                          1264  
000018B4                          1265  
000018B4                          1266  
000018B4                          1267  *-----------------------------------------------------------------------------
000018B4                          1268  *-----------------------------------------------------------------------------
000018B4                          1269  * NAME: OP_1010   ()
000018B4                          1270  * DESCRIPTION:    a
000018B4                          1271  * PRE-CONDITION:  b
000018B4                          1272  * POST-CONDITION: c
000018B4                          1273  * REGISTERS:      d
000018B4                          1274  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000018B4                          1275  OP1010
000018B4                          1276  
000018B4  6100 0A8A               1277      BSR     UNKNOWNOP
000018B8  4E75                    1278      RTS
000018BA                          1279  
000018BA                          1280  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000018BA                          1281  *-----------------------------------------------------------------------------
000018BA                          1282  
000018BA                          1283  
000018BA                          1284  
000018BA                          1285  *-----------------------------------------------------------------------------
000018BA                          1286  *-----------------------------------------------------------------------------
000018BA                          1287  * NAME: OP_1011   (EOR, CMP)
000018BA                          1288  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000018BA                          1289  * PRE-CONDITION:  xyz
000018BA                          1290  * POST-CONDITION: All registers return to their previous state, and the output
000018BA                          1291  *                 goes to the output console for reading the raw data or the
000018BA                          1292  *                 actual instruction.
000018BA                          1293  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000018BA                          1294  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000018BA                          1295  OP1011
000018BA                          1296  
000018BA  48A7 FFC0               1297          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
000018BE                          1298  
000018BE  3C3C 0006               1299          MOVE.W  #6, D6              * Prep lower value for bitmask
000018C2  3E3C 0008               1300          MOVE.W  #8, D7              * Prep upper value for bitmask
000018C6  6100 0CE2               1301          BSR     BITMASK             * Finalize bitmask setup
000018CA  CC42                    1302          AND     D2,D6               * Apply bitmask
000018CC                          1303          
000018CC                          1304          * Check to see if opmode is unsupported for both EOR and CMP
000018CC  0C46 00C0               1305          CMPI    #%0000000011000000, D6      * Is the OPMODE 011, unsupported by EOR/CMP?
000018D0  6700 0088               1306          BEQ     UNKNOWN1011                 * If so, the OP is unknown
000018D4  0C46 01C0               1307          CMPI    #%0000000111000000, D6      * Is the OPMODE 111, unsupported by EOR/CMP?
000018D8  6700 0080               1308          BEQ     UNKNOWN1011                 * If so, the OP is unknown
000018DC                          1309          
000018DC                          1310          * Check to see if it is CMP
000018DC  0C46 0000               1311          CMPI    #%0000000000000000, D6      * Is the OPMODE 000, a BYTE for CMP?
000018E0  6700 0038               1312          BEQ     NOTEOR                      * If so, the OP is CMP
000018E4  0C46 0040               1313          CMPI    #%0000000001000000, D6      * Is the OPMODE 000, a WORD for CMP?
000018E8  6700 0030               1314          BEQ     NOTEOR                      * If so, the OP is CMP
000018EC  0C46 0080               1315          CMPI    #%0000000010000000, D6      * Is the OPMODE 000, a LONG for CMP?
000018F0  6700 0028               1316          BEQ     NOTEOR                      * If so, the OP is CMP
000018F4                          1317  
000018F4                          1318          * Check to see EA mode is 001, unsupported by EOR
000018F4  3C3C 0003               1319          MOVE.W  #3, D6              * Prep lower value for bitmask
000018F8  3E3C 0005               1320          MOVE.W  #5, D7              * Prep upper value for bitmask
000018FC  6100 0CAC               1321          BSR     BITMASK             * Finalize bitmask setup
00001900  CC42                    1322          AND     D2,D6               * Apply bitmask
00001902                          1323          
00001902  0C46 0040               1324          CMPI    #%0000000001000000, D6      * Is the mode 001, unsupported for EOR?
00001906  6700 0052               1325          BEQ     UNKNOWN1011                 * If so, the op is unknown
0000190A                          1326          
0000190A                          1327          * Verified to be EOR at this point
0000190A  43F9 0000261F           1328          LEA     EOROP,A1            * We found EOR
00001910  103C 000E               1329          MOVE.B  #14,D0              * Trap #14 prints out the data
00001914  4E4F                    1330          TRAP    #15                 * Perform Trap #14
00001916                          1331          
00001916  6000 000E               1332          BRA     DISPLAY1011         * Branch to the end of 1011       
0000191A                          1333  
0000191A                          1334  NOTEOR
0000191A  43F9 0000261B           1335          LEA     CMPOP,A1            * We found CMP
00001920  103C 000E               1336          MOVE.B  #14,D0              * Trap #14 prints out the data
00001924  4E4F                    1337          TRAP    #15                 * Perform Trap #14
00001926                          1338          
00001926                          1339  DISPLAY1011
00001926  6100 07C4               1340          BSR     SIZE68
0000192A                          1341          
0000192A  6100 0426               1342          BSR     EAHELPER05
0000192E                          1343          
0000192E  43F9 000026C6           1344          LEA     COMMA,A1            * Formatting
00001934  103C 000E               1345          MOVE.B  #14,D0              * Trap #14 prints out the data
00001938  4E4F                    1346          TRAP    #15                 * Perform Trap #14
0000193A                          1347          
0000193A  0882 0006               1348          BCLR    #6,D2               * Bit manipulation is 
0000193E  0882 0007               1349          BCLR    #7,D2               * necessary in order to make
00001942  0882 0008               1350          BCLR    #8,D2               * EAHELPER611 work generically
00001946                          1351          
00001946  6100 03C8               1352          BSR     EAHELPER611         * Print out EA
0000194A                          1353          
0000194A  43F9 00002613           1354          LEA     NEWLINE,A1          * Formatting
00001950  103C 000E               1355          MOVE.B  #14,D0              * Trap #14 prints out the data
00001954  4E4F                    1356          TRAP    #15                 * Perform Trap #14
00001956                          1357          
00001956  6000 0006               1358          BRA     DONE1011            * Branch to end 1011 and move to next op
0000195A                          1359          
0000195A                          1360  UNKNOWN1011
0000195A  6100 09E4               1361          BSR     UNKNOWNOP           * Unknown op
0000195E                          1362                   
0000195E                          1363  DONE1011
0000195E  4C9F 03FF               1364          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
00001962  4E75                    1365          RTS                         * Return to main
00001964                          1366  
00001964                          1367  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001964                          1368  *-----------------------------------------------------------------------------
00001964                          1369  
00001964                          1370  
00001964                          1371  
00001964                          1372  *-----------------------------------------------------------------------------
00001964                          1373  *-----------------------------------------------------------------------------
00001964                          1374  * NAME: OP_1100   (MULS)
00001964                          1375  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001964                          1376  * PRE-CONDITION:  xyz
00001964                          1377  * POST-CONDITION: All registers return to their previous state, and the output
00001964                          1378  *                 goes to the output console for reading the raw data or the
00001964                          1379  *                 actual instruction.
00001964                          1380  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001964                          1381  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001964                          1382  OP1100
00001964  48A7 FFC0               1383          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
00001968                          1384  
00001968                          1385          * Check if the EA Mode is 001 since MULS does not support it
00001968  3C3C 0003               1386          MOVE.W  #3, D6              * Prep lower value for bitmask
0000196C  3E3C 0005               1387          MOVE.W  #5, D7              * Prep upper value for bitmask
00001970  6100 0C38               1388          BSR     BITMASK             * Finalize bitmask setup
00001974  CC42                    1389          AND     D2,D6               * Apply bitmask
00001976                          1390          
00001976  0C46 0008               1391          CMPI    #%0000000000001000, D6    * Is the mode 001, an unsupported mode?
0000197A  6700 0068               1392          BEQ     UNKNOWN1100               * If so, the op is not supported
0000197E                          1393          
0000197E  3C3C 0006               1394          MOVE.W  #6, D6              * Prep lower value for bitmask
00001982  3E3C 0008               1395          MOVE.W  #8, D7              * Prep upper value for bitmask
00001986  6100 0C22               1396          BSR     BITMASK             * Finalize bitmask setup
0000198A  CC42                    1397          AND     D2,D6               * Apply bitmask
0000198C                          1398          
0000198C  0C46 01C0               1399          CMPI    #%0000000111000000, D6  * Are we MULS?
00001990  6600 0052               1400          BNE     UNKNOWN1100             * If not, it is an unknown op
00001994                          1401          
00001994  43F9 0000264D           1402          LEA     MULSOP,A1           * We found MULS
0000199A  103C 000E               1403          MOVE.B  #14,D0              * Trap #14 prints out the data
0000199E  4E4F                    1404          TRAP    #15                 * Perform Trap #14
000019A0                          1405          
000019A0  43F9 000026C0           1406          LEA     SPACE,A1            * formatting
000019A6  103C 000E               1407          MOVE.B  #14,D0              * Trap #14 prints out space
000019AA  4E4F                    1408          TRAP    #15                 * Perform Trap #14
000019AC                          1409          
000019AC  4243                    1410          CLR     D3                  * clear D3, it is a parameter
000019AE  08C3 0000               1411          BSET    #0,D3               * of EAHELPER05 to indicate size
000019B2                          1412          
000019B2  6100 039E               1413          BSR     EAHELPER05          * Print out data
000019B6                          1414  
000019B6  43F9 000026C6           1415          LEA     COMMA,A1            * formatting
000019BC  103C 000E               1416          MOVE.B  #14,D0              * Trap #14 prints out a comma
000019C0  4E4F                    1417          TRAP    #15                 * Perform Trap #14
000019C2                          1418          
000019C2  0882 0006               1419          BCLR    #6,D2               * Bit manipulation is 
000019C6  0882 0007               1420          BCLR    #7,D2               * necessary in order to make
000019CA  0882 0008               1421          BCLR    #8,D2               * EAHELPER611 work generically
000019CE                          1422          
000019CE  6100 0340               1423          BSR     EAHELPER611         * Print out EA
000019D2                          1424  
000019D2  43F9 00002613           1425          LEA     NEWLINE,A1          * Formatting
000019D8  103C 000E               1426          MOVE.B  #14,D0              * Trap #14 prints out the data
000019DC  4E4F                    1427          TRAP    #15                 * Perform Trap #14
000019DE                          1428          
000019DE  4C9F 03FF               1429          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
000019E2  4E75                    1430          RTS                         * Return to main
000019E4                          1431          
000019E4                          1432  UNKNOWN1100
000019E4  6100 095A               1433          BSR     UNKNOWNOP
000019E8                          1434       
000019E8  4C9F 03FF               1435          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
000019EC  4E75                    1436          RTS                         * Return to main
000019EE                          1437          
000019EE                          1438  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000019EE                          1439  *-----------------------------------------------------------------------------
000019EE                          1440  
000019EE                          1441  
000019EE                          1442  
000019EE                          1443  
000019EE                          1444  
000019EE                          1445  
000019EE                          1446  *-----------------------------------------------------------------------------
000019EE                          1447  *-----------------------------------------------------------------------------
000019EE                          1448  * NAME: OP_1101   (ADD, ADDA)
000019EE                          1449  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000019EE                          1450  * PRE-CONDITION:  xyz
000019EE                          1451  * POST-CONDITION: All registers return to their previous state, and the output
000019EE                          1452  *                 goes to the output console for reading the raw data or the
000019EE                          1453  *                 actual instruction.
000019EE                          1454  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000019EE                          1455  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000019EE                          1456  OP1101
000019EE  48E7 FFFE               1457          MOVEM.L A0-A6/D0-D7,-(A7)
000019F2                          1458          
000019F2  3C3C 0006               1459          MOVE.W  #6, D6              * Prep lower value for bitmask
000019F6  3E3C 0008               1460          MOVE.W  #8, D7              * Prep upper value for bitmask
000019FA  6100 0BAE               1461          BSR     BITMASK             * Finalize bitmask setup
000019FE  CC42                    1462          AND     D2,D6               * Apply bitmask
00001A00  EC4E                    1463          LSR     #6,D6
00001A02                          1464  
00001A02  0C06 0000               1465          CMPI.B  #%0000000000000000,D6
00001A06  6700 003E               1466          BEQ     BYTE_EA_DN
00001A0A                          1467  
00001A0A  0C06 0001               1468          CMPI.B  #%0000000000000001,D6
00001A0E  6700 004E               1469          BEQ     WORD_EA_DN
00001A12                          1470  
00001A12  0C06 0002               1471          CMPI.B  #%0000000000000010,D6
00001A16  6700 005E               1472          BEQ     LONG_EA_DN
00001A1A                          1473  
00001A1A  0C06 0003               1474          CMPI.B  #%0000000000000011,D6
00001A1E  6700 006E               1475          BEQ     ADDA_WORD_OP
00001A22                          1476  
00001A22  0C06 0004               1477          CMPI.B  #%0000000000000100,D6
00001A26  6700 0086               1478          BEQ     BYTE_DN_EA
00001A2A                          1479  
00001A2A  0C06 0005               1480          CMPI.B  #%0000000000000101,D6
00001A2E  6700 0096               1481          BEQ     WORD_DN_EA
00001A32                          1482  
00001A32  0C06 0006               1483          CMPI.B  #%0000000000000110,D6
00001A36  6700 00A6               1484          BEQ     LONG_DN_EA
00001A3A                          1485  
00001A3A  0C06 0007               1486          CMPI.B  #%0000000000000111,D6
00001A3E  6700 00B6               1487          BEQ     ADDA_LONG_OP
00001A42                          1488  
00001A42  6000 011E               1489          BRA     ADD_ADDA_END
00001A46                          1490          
00001A46                          1491  BYTE_EA_DN
00001A46  6100 00CE               1492          BSR     ADD_EA_DN_GENERIC       * print out 'ADD' base op name for ADDA too
00001A4A                          1493  
00001A4A  43F9 000026D4           1494          LEA     __B,A1                  * print out size
00001A50  103C 000E               1495          MOVE.B  #14,D0
00001A54  4E4F                    1496          TRAP    #15
00001A56                          1497  
00001A56  6100 00CC               1498          BSR     ADD_ADDA_SPACE          * print out space
00001A5A  6000 00EE               1499          BRA     ADD_ADDA_PRINT
00001A5E                          1500  
00001A5E                          1501  WORD_EA_DN
00001A5E  6100 00B6               1502          BSR     ADD_EA_DN_GENERIC
00001A62                          1503  
00001A62  43F9 000026D8           1504          LEA     __W,A1
00001A68  103C 000E               1505          MOVE.B  #14,D0
00001A6C  4E4F                    1506          TRAP    #15
00001A6E                          1507          
00001A6E  6100 00B4               1508          BSR     ADD_ADDA_SPACE
00001A72  6000 00D6               1509          BRA     ADD_ADDA_PRINT
00001A76                          1510          
00001A76                          1511  LONG_EA_DN
00001A76  6100 009E               1512          BSR     ADD_EA_DN_GENERIC
00001A7A                          1513  
00001A7A  43F9 000026DC           1514          LEA     __L,A1
00001A80  103C 000E               1515          MOVE.B  #14,D0
00001A84  4E4F                    1516          TRAP    #15
00001A86                          1517  
00001A86  6100 009C               1518          BSR     ADD_ADDA_SPACE
00001A8A  6000 00BE               1519          BRA     ADD_ADDA_PRINT
00001A8E                          1520          
00001A8E                          1521  ADDA_WORD_OP
00001A8E  6100 0086               1522          BSR     ADD_EA_DN_GENERIC
00001A92                          1523  
00001A92  43F9 000026B4           1524          LEA     ASCII_A,A1
00001A98  103C 000E               1525          MOVE.B  #14,D0
00001A9C  4E4F                    1526          TRAP    #15
00001A9E                          1527  
00001A9E  43F9 000026D8           1528          LEA     __W,A1
00001AA4  103C 000E               1529          MOVE.B  #14,D0
00001AA8  4E4F                    1530          TRAP    #15
00001AAA                          1531          
00001AAA  6000 0086               1532          BRA     ADDA_PRT
00001AAE                          1533          
00001AAE                          1534  BYTE_DN_EA
00001AAE  6100 0066               1535          BSR     ADD_EA_DN_GENERIC
00001AB2                          1536          
00001AB2  43F9 000026D4           1537          LEA     __B,A1
00001AB8  103C 000E               1538          MOVE.B  #14,D0
00001ABC  4E4F                    1539          TRAP    #15
00001ABE                          1540          
00001ABE  6100 0064               1541          BSR     ADD_ADDA_SPACE
00001AC2  6000 0086               1542          BRA     ADD_ADDA_PRINT
00001AC6                          1543  
00001AC6                          1544  WORD_DN_EA
00001AC6  6100 004E               1545          BSR     ADD_EA_DN_GENERIC
00001ACA                          1546  
00001ACA  43F9 000026D8           1547          LEA     __W,A1
00001AD0  103C 000E               1548          MOVE.B  #14,D0
00001AD4  4E4F                    1549          TRAP    #15 
00001AD6                          1550  
00001AD6  6100 004C               1551          BSR     ADD_ADDA_SPACE
00001ADA  6000 006E               1552          BRA     ADD_ADDA_PRINT
00001ADE                          1553  
00001ADE                          1554  LONG_DN_EA
00001ADE  6100 0036               1555          BSR     ADD_EA_DN_GENERIC
00001AE2                          1556          
00001AE2  43F9 000026DC           1557          LEA     __L,A1
00001AE8  103C 000E               1558          MOVE.B  #14,D0
00001AEC  4E4F                    1559          TRAP    #15     
00001AEE                          1560          
00001AEE  6100 0034               1561          BSR     ADD_ADDA_SPACE
00001AF2  6000 0056               1562          BRA     ADD_ADDA_PRINT
00001AF6                          1563  
00001AF6                          1564  ADDA_LONG_OP
00001AF6  6100 001E               1565          BSR     ADD_EA_DN_GENERIC
00001AFA                          1566          
00001AFA  43F9 000026B4           1567          LEA     ASCII_A,A1
00001B00  103C 000E               1568          MOVE.B  #14,D0
00001B04  4E4F                    1569          TRAP    #15
00001B06                          1570          
00001B06  43F9 000026DC           1571          LEA     __L,A1
00001B0C  103C 000E               1572          MOVE.B  #14,D0
00001B10  4E4F                    1573          TRAP    #15
00001B12                          1574          
00001B12  6000 001E               1575          BRA     ADDA_PRT
00001B16                          1576          
00001B16                          1577  ADD_EA_DN_GENERIC
00001B16  43F9 0000269C           1578          LEA     OP_ADD_MSG,A1           * print out 'ADD'
00001B1C  103C 000E               1579          MOVE.B  #14,D0
00001B20  4E4F                    1580          TRAP    #15
00001B22  4E75                    1581          RTS
00001B24                          1582          
00001B24                          1583  ADD_ADDA_SPACE
00001B24  43F9 000026C0           1584          LEA     SPACE,A1
00001B2A  103C 000E               1585          MOVE.B  #14,D0
00001B2E  4E4F                    1586          TRAP    #15
00001B30  4E75                    1587          RTS
00001B32                          1588  
00001B32                          1589  ADDA_PRT
00001B32  6100 0374               1590          BSR     MODE_DN
00001B36  43F9 000026C6           1591          LEA     COMMA,A1
00001B3C  103C 000E               1592          MOVE.B  #14,D0
00001B40  4E4F                    1593          TRAP    #15
00001B42  6100 0464               1594          BSR     MODE_AN
00001B46  6000 001A               1595          BRA     ADD_ADDA_END
00001B4A                          1596  
00001B4A                          1597  ADD_ADDA_PRINT
00001B4A                          1598  
00001B4A  6100 0206               1599          BSR     EAHELPER05          * Print out data. TODO: DOESN'T WORK.
00001B4E                          1600  
00001B4E  43F9 000026C6           1601          LEA     COMMA,A1            * formatting
00001B54  103C 000E               1602          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001B58  4E4F                    1603          TRAP    #15                 * Perform Trap #14
00001B5A                          1604          
00001B5A  6100 01B4               1605          BSR     EAHELPER611
00001B5E  6000 0002               1606          BRA     ADD_ADDA_END
00001B62                          1607          
00001B62                          1608  ADD_ADDA_END
00001B62  43F9 00002613           1609          LEA     NEWLINE,A1
00001B68  103C 000E               1610          MOVE.B  #14,D0
00001B6C  4E4F                    1611          TRAP    #15
00001B6E                          1612          
00001B6E  4CDF 7FFF               1613          MOVEM.L (A7)+,A0-A6/D0-D7
00001B72  4E75                    1614          RTS
00001B74                          1615  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001B74                          1616  *-----------------------------------------------------------------------------
00001B74                          1617  
00001B74                          1618  
00001B74                          1619  
00001B74                          1620  *-----------------------------------------------------------------------------
00001B74                          1621  *-----------------------------------------------------------------------------
00001B74                          1622  * NAME: OP_1110   (LSL, LSR, ASL, ASR, ROL, ROR)
00001B74                          1623  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001B74                          1624  * PRE-CONDITION:  xyz
00001B74                          1625  * POST-CONDITION: All registers return to their previous state, and the output
00001B74                          1626  *                 goes to the output console for reading the raw data or the
00001B74                          1627  *                 actual instruction.
00001B74                          1628  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001B74                          1629  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001B74                          1630  OP1110
00001B74                          1631  
00001B74  48A7 FFC0               1632      MOVEM   D0-D7/A0-A1,-(A7)   * Caller saved
00001B78                          1633  
00001B78  7C03                    1634      MOVE.L  #3,D6
00001B7A  7E04                    1635      MOVE.L  #4,D7
00001B7C                          1636      
00001B7C  6100 0A2C               1637      BSR     BITMASK * generate a bitmask for the 3 and 4 bits
00001B80                          1638      
00001B80  CC82                    1639      AND.L   D2,D6
00001B82                          1640      
00001B82  0C46 0008               1641      CMPI    #%0000000000001000,D6 *is it a logical shift
00001B86  6700 001A               1642      BEQ     LS
00001B8A                          1643      
00001B8A  0C46 0000               1644      CMPI    #%0000000000000000,D6 *is it an arithmatic shift
00001B8E  6700 0048               1645      BEQ     AS
00001B92                          1646      
00001B92  0C46 0018               1647      CMPI    #%0000000000011000,D6 *is it a rorate?
00001B96  6700 0076               1648      BEQ     RO
00001B9A                          1649  
00001B9A  6100 07A4               1650      BSR     UNKNOWNOP *if nothing above, we don't know what it is
00001B9E  6000 0158               1651      BRA     ENDOP1110
00001BA2                          1652      
00001BA2                          1653  LS
00001BA2  7C08                    1654      MOVE.L  #8,D6
00001BA4  7E08                    1655      MOVE.L  #8,D7
00001BA6                          1656      
00001BA6  6100 0A02               1657      BSR     BITMASK
00001BAA                          1658      
00001BAA  CC82                    1659      AND.L   D2,D6
00001BAC                          1660      
00001BAC  0C46 0000               1661      CMPI    #0,D6 * is it a left shift?
00001BB0  6700 0016               1662      BEQ     LSR
00001BB4                          1663      
00001BB4  6000 0002               1664      BRA     LSL * if not a left shift, must be right
00001BB8                          1665  
00001BB8                          1666  LSL
00001BB8                          1667  
00001BB8  43F9 0000265E           1668      LEA     LSLOP,A1            * formatting
00001BBE  103C 000E               1669      MOVE.B  #14,D0              * Trap #14 prints out LSL
00001BC2  4E4F                    1670      TRAP    #15                 * Perform Trap #14
00001BC4                          1671      
00001BC4  6000 007E               1672      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001BC8                          1673                                  * prints the registers and imm data
00001BC8                          1674  LSR
00001BC8                          1675  
00001BC8  43F9 00002662           1676      LEA     LSROP,A1            * formatting
00001BCE  103C 000E               1677      MOVE.B  #14,D0              * Trap #14 prints out LSR
00001BD2  4E4F                    1678      TRAP    #15                 * Perform Trap #14
00001BD4                          1679      
00001BD4  6000 006E               1680      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001BD8                          1681                                  * prints the registers and imm data
00001BD8                          1682  
00001BD8                          1683  AS
00001BD8  7C08                    1684      MOVE.L  #8,D6
00001BDA  7E08                    1685      MOVE.L  #8,D7
00001BDC                          1686      
00001BDC  6100 09CC               1687      BSR     BITMASK
00001BE0                          1688      
00001BE0  CC82                    1689      AND.L   D2,D6
00001BE2                          1690      
00001BE2  0C46 0000               1691      CMPI    #0,D6 * is it a left shift?
00001BE6  6700 0016               1692      BEQ     ASR
00001BEA                          1693      
00001BEA  6000 0002               1694      BRA     ASL * if not a left shift, must be right
00001BEE                          1695      
00001BEE                          1696  ASL
00001BEE                          1697  
00001BEE  43F9 00002666           1698      LEA     ASLOP,A1            * formatting
00001BF4  103C 000E               1699      MOVE.B  #14,D0              * Trap #14 prints out ASL
00001BF8  4E4F                    1700      TRAP    #15                 * Perform Trap #14
00001BFA                          1701      
00001BFA  6000 0048               1702      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001BFE                          1703                                  * prints the registers and imm data
00001BFE                          1704  ASR
00001BFE                          1705  
00001BFE  43F9 0000266A           1706      LEA     ASROP,A1            * formatting
00001C04  103C 000E               1707      MOVE.B  #14,D0              * Trap #14 prints out ASR
00001C08  4E4F                    1708      TRAP    #15                 * Perform Trap #14
00001C0A                          1709      
00001C0A  6000 0038               1710      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001C0E                          1711                                  * prints the registers and imm data
00001C0E                          1712  RO
00001C0E  7C08                    1713      MOVE.L  #8,D6
00001C10  7E08                    1714      MOVE.L  #8,D7
00001C12                          1715      
00001C12  6100 0996               1716      BSR     BITMASK
00001C16                          1717      
00001C16  CC82                    1718      AND.L   D2,D6
00001C18                          1719      
00001C18  0C46 0000               1720      CMPI    #0,D6 * is it a left shift?
00001C1C  6700 0016               1721      BEQ     ROR
00001C20                          1722      
00001C20  6000 0002               1723      BRA     ROL * if not a left shift, must be right
00001C24                          1724  
00001C24                          1725  ROL
00001C24                          1726  
00001C24  43F9 0000266E           1727      LEA     ROLOP,A1            * formatting
00001C2A  103C 000E               1728      MOVE.B  #14,D0              * Trap #14 prints out ROL
00001C2E  4E4F                    1729      TRAP    #15                 * Perform Trap #14
00001C30                          1730      
00001C30  6000 0012               1731      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001C34                          1732                                  * prints the registers and imm data
00001C34                          1733  ROR
00001C34                          1734  
00001C34  43F9 00002672           1735      LEA     ROROP,A1            * formatting
00001C3A  103C 000E               1736      MOVE.B  #14,D0              * Trap #14 prints out ROR
00001C3E  4E4F                    1737      TRAP    #15                 * Perform Trap #14
00001C40                          1738      
00001C40  6000 0002               1739      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001C44                          1740                                  * prints the registers and imm data
00001C44                          1741  
00001C44                          1742  OP1110GENERIC
00001C44                          1743  
00001C44  6100 0462               1744      BSR     SIZE67
00001C48                          1745      
00001C48  7C05                    1746      MOVE.L  #5,D6
00001C4A  7E05                    1747      MOVE.L  #5,D7
00001C4C                          1748      
00001C4C  6100 095C               1749      BSR     BITMASK
00001C50                          1750      
00001C50  CC82                    1751      AND.L   D2,D6
00001C52                          1752      
00001C52  0C46 0020               1753      CMPI    #%0000000000100000,D6   *is it a data reg?
00001C56  6700 0074               1754      BEQ     OP1110DATAREG
00001C5A                          1755      
00001C5A  43F9 000026C4           1756      LEA     IMD,A1              * formatting
00001C60  103C 000E               1757      MOVE.B  #14,D0              * Trap #14 prints out pound #
00001C64  4E4F                    1758      TRAP    #15                 * Perform Trap #14
00001C66                          1759      
00001C66  7C09                    1760      MOVE.L  #9,D6
00001C68  7E0B                    1761      MOVE.L  #11,D7
00001C6A                          1762      
00001C6A  6100 093E               1763      BSR     BITMASK
00001C6E                          1764      
00001C6E  CC82                    1765      AND.L   D2,D6
00001C70                          1766      
00001C70  0C46 0000               1767      CMPI    #0,D6 * special case, if zero print #8 not #0
00001C74  6700 002E               1768      BEQ     OP1110IMMEIGHT
00001C78                          1769      
00001C78  E08E                    1770      LSR.L   #8,D6
00001C7A  E28E                    1771      LSR.L   #1,D6
00001C7C                          1772      
00001C7C  2206                    1773      MOVE.L  D6,D1              * formatting
00001C7E  103C 0003               1774      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001C82  4E4F                    1775      TRAP    #15                * Perform Trap #14
00001C84                          1776      
00001C84  43F9 000026C6           1777      LEA     COMMA,A1            * formatting
00001C8A  103C 000E               1778      MOVE.B  #14,D0              * Trap #14 prints out comma
00001C8E  4E4F                    1779      TRAP    #15                 * Perform Trap #1
00001C90                          1780      
00001C90                          1781      * in order to use the eahlpers, we need to do some bit manipulation
00001C90                          1782      * clearing the bits below lets our helper know that the mode is Dn
00001C90  0882 0003               1783      BCLR    #3,D2
00001C94  0882 0004               1784      BCLR    #4,D2
00001C98  0882 0005               1785      BCLR    #5,D2
00001C9C                          1786      
00001C9C  6100 00B4               1787      BSR     EAHELPER05
00001CA0                          1788      
00001CA0  6000 0056               1789      BRA     ENDOP1110
00001CA4                          1790      
00001CA4                          1791  OP1110IMMEIGHT
00001CA4                          1792  
00001CA4  7208                    1793      MOVE.L  #8,D1              * formatting
00001CA6  103C 0003               1794      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001CAA  4E4F                    1795      TRAP    #15                * Perform Trap #14
00001CAC                          1796      
00001CAC  43F9 000026C6           1797      LEA     COMMA,A1            * formatting
00001CB2  103C 000E               1798      MOVE.B  #14,D0              * Trap #14 prints out comma
00001CB6  4E4F                    1799      TRAP    #15                 * Perform Trap #1
00001CB8                          1800      
00001CB8                          1801      * in order to use the eahlpers, we need to do some bit manipulation
00001CB8                          1802      * clearing the bits below lets our helper know that the mode is Dn
00001CB8  0882 0003               1803      BCLR    #3,D2
00001CBC  0882 0004               1804      BCLR    #4,D2
00001CC0  0882 0005               1805      BCLR    #5,D2
00001CC4                          1806      
00001CC4  6100 008C               1807      BSR     EAHELPER05
00001CC8                          1808      
00001CC8  6000 002E               1809      BRA     ENDOP1110
00001CCC                          1810  
00001CCC                          1811  OP1110DATAREG
00001CCC                          1812  
00001CCC                          1813      * in order to use the eahlpers, we need to do some bit manipulation
00001CCC                          1814      * clearing the bits below lets our helper know that the mode is Dn
00001CCC  0882 0003               1815      BCLR    #3,D2
00001CD0  0882 0004               1816      BCLR    #4,D2
00001CD4  0882 0005               1817      BCLR    #5,D2
00001CD8  0882 0006               1818      BCLR    #6,D2
00001CDC  0882 0007               1819      BCLR    #7,D2
00001CE0  0882 0008               1820      BCLR    #8,D2
00001CE4                          1821      
00001CE4  6100 002A               1822      BSR     EAHELPER611
00001CE8                          1823      
00001CE8  43F9 000026C6           1824      LEA     COMMA,A1            * formatting
00001CEE  103C 000E               1825      MOVE.B  #14,D0              * Trap #14 prints out comma
00001CF2  4E4F                    1826      TRAP    #15                 * Perform Trap #14
00001CF4                          1827      
00001CF4  6100 005C               1828      BSR     EAHELPER05
00001CF8                          1829  
00001CF8                          1830  ENDOP1110
00001CF8                          1831  
00001CF8  43F9 00002613           1832      LEA     NEWLINE,A1          * formatting
00001CFE  103C 000E               1833      MOVE.B  #14,D0              * Trap #14 prints out a new line
00001D02  4E4F                    1834      TRAP    #15                 * Perform Trap #14
00001D04                          1835      
00001D04  4C9F 03FF               1836      MOVEM   (A7)+,D0-D7/A0-A1   * Caller saved
00001D08  4E75                    1837      RTS
00001D0A                          1838  
00001D0A                          1839  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001D0A                          1840  *-----------------------------------------------------------------------------
00001D0A                          1841  
00001D0A                          1842  
00001D0A                          1843  
00001D0A                          1844  *-----------------------------------------------------------------------------
00001D0A                          1845  *-----------------------------------------------------------------------------
00001D0A                          1846  * NAME: OP_1111   ()
00001D0A                          1847  * DESCRIPTION:    a
00001D0A                          1848  * PRE-CONDITION:  b
00001D0A                          1849  * POST-CONDITION: c
00001D0A                          1850  * REGISTERS:      d
00001D0A                          1851  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001D0A                          1852  OP1111
00001D0A                          1853  
00001D0A  6100 0634               1854      BSR     UNKNOWNOP
00001D0E  4E75                    1855      RTS
00001D10                          1856  
00001D10                          1857  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001D10                          1858  *-----------------------------------------------------------------------------
00001D10                          1859  
00001D10                          1860  
00001D10                          1861  
00001D10                          1862  *-----------------------------------------------------------------------------
00001D10                          1863  *-----------------------------------------------------------------------------
00001D10                          1864  * NAME:           EAHELPER611
00001D10                          1865  * DESCRIPTION:    a
00001D10                          1866  * PRE-CONDITION:  D2 contains the instruction to print modes for.
00001D10                          1867  *                 D5 contains the size of the data to be printed
00001D10                          1868  * POST-CONDITION: Determines if mode is direct, if it's not, passes D2 to 
00001D10                          1869  *                 EAHELPER05 to print.
00001D10                          1870  * REGISTERS:      a
00001D10                          1871  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001D10                          1872  EAHELPER611
00001D10  48A7 FFC0               1873      MOVEM  D0-D7/A0-A1,-(A7)    * Push values onto stack
00001D14                          1874      
00001D14  3C3C 0006               1875      MOVE.W  #6, D6              * Prep lower value for bitmask
00001D18  3E3C 0008               1876      MOVE.W  #8, D7              * Prep upper value for bitmask
00001D1C  6100 088C               1877      BSR     BITMASK             * Finalize bitmask setup
00001D20  CC42                    1878      AND     D2,D6               * Apply bitmask
00001D22                          1879      
00001D22                          1880      * to move the mode where EAHELPER50 can process it
00001D22  7C06                    1881      MOVE.L  #6,D6       * Prep lower value of bitmask
00001D24  7E08                    1882      MOVE.L  #8,D7       * Prep upper value of bitmask
00001D26  6100 0882               1883      BSR     BITMASK     * Create bitmask
00001D2A  CC42                    1884      AND     D2,D6       * Apply bitmask
00001D2C                          1885      
00001D2C  4243                    1886      CLR     D3      * prep D3 to store values
00001D2E  3606                    1887      MOVE.W  D6,D3   * store bitmasked value in D3
00001D30  E64B                    1888      LSR     #3,D3   * move bits 6-8 to 3-5
00001D32                          1889      
00001D32                          1890      * to move the register where EAHELPER50 can process it
00001D32  7C09                    1891      MOVE.L  #9,D6   * Prep lower value for bitmask
00001D34  7E0B                    1892      MOVE.L  #11,D7  * Prep upper value for bitmask
00001D36  6100 0872               1893      BSR     BITMASK * create bitmask
00001D3A  CC42                    1894      AND     D2,D6   * apply bitmask
00001D3C                          1895      
00001D3C  4244                    1896      CLR     D4      * prep D3 to store values
00001D3E  3806                    1897      MOVE.W  D6,D4   * store bitmasked value in D3
00001D40                          1898      
00001D40  E04C                    1899      LSR     #8,D4   * move bits 9-11 to 0-2
00001D42  E24C                    1900      LSR     #1,D4   * move bits 9-11 to 0-2
00001D44                          1901    
00001D44  8684                    1902      OR.L    D4,D3   * combind the register and mode
00001D46  2403                    1903      MOVE.L  D3,D2   * put the result in D2 so EAHELPER05 can process it
00001D48                          1904      
00001D48  6100 0008               1905      BSR     EAHELPER05
00001D4C                          1906      
00001D4C                          1907  ENDEAHELPER611
00001D4C                          1908      
00001D4C  4C9F 03FF               1909      MOVEM  (A7)+,D0-D7/A0-A1    * Revert back
00001D50  4E75                    1910      RTS
00001D52                          1911  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001D52                          1912  *-----------------------------------------------------------------------------
00001D52                          1913  
00001D52                          1914  
00001D52                          1915  
00001D52                          1916  *-----------------------------------------------------------------------------
00001D52                          1917  *-----------------------------------------------------------------------------
00001D52                          1918  * NAME:           EAHELPER05
00001D52                          1919  * DESCRIPTION:    a
00001D52                          1920  * PRE-CONDITION:  D2 contains the instruction to print modes for. Only call
00001D52                          1921  *                 this sub-routine helper for operations that only have one
00001D52                          1922  *                 mode register.
00001D52                          1923  * POST-CONDITION: Determines mode, passes D2 to REGHELPER to print.
00001D52                          1924  * REGISTERS:      a
00001D52                          1925  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001D52                          1926  EAHELPER05
00001D52                          1927      * todo: add code for printing immediate values
00001D52                          1928      
00001D52  48A7 FFC0               1929      MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001D56                          1930      
00001D56  7C03                    1931      MOVE.L  #3,D6
00001D58  7E05                    1932      MOVE.L  #5,D7
00001D5A                          1933      
00001D5A  6100 084E               1934      BSR     BITMASK * generate a bitmask to identify the mode
00001D5E                          1935      
00001D5E  CC42                    1936      AND     D2,D6   * mask off the parts of D2 we don't need
00001D60                          1937      
00001D60  2A06                    1938      MOVE.L  D6,D5   * store the 3-5 bitmask for later use
00001D62                          1939      
00001D62  0C46 0000               1940      CMPI    #%0000000000000000,D6 * is it data register direct?
00001D66  6600 000A               1941      BNE     NOTDATAREG
00001D6A                          1942      
00001D6A  6100 013C               1943      BSR     MODE_DN
00001D6E                          1944       
00001D6E  6000 0132               1945      BRA     ENDEAHELPER05
00001D72                          1946      
00001D72                          1947  NOTDATAREG * address register direct
00001D72                          1948      
00001D72  0C46 0008               1949      CMPI    #%0000000000001000,D6 * is it address register direct?
00001D76  6600 000A               1950      BNE     NOTADRDIRECT
00001D7A                          1951      
00001D7A  6100 022C               1952      BSR     MODE_AN * simply prints out the address register
00001D7E                          1953       
00001D7E  6000 0122               1954      BRA     ENDEAHELPER05
00001D82                          1955      
00001D82                          1956  NOTADRDIRECT * address register indirect
00001D82                          1957          
00001D82  0C46 0010               1958      CMPI    #%0000000000010000,D6 * is it address register indirect?
00001D86  6600 0022               1959      BNE     NOTADRINDIRECT
00001D8A                          1960      
00001D8A  43F9 000026C8           1961      LEA     OBRACK,A1       * Load '('
00001D90  303C 000E               1962      MOVE.W  #14,D0          * Trap #14 to display message
00001D94  4E4F                    1963      TRAP    #15             * Perform #14
00001D96                          1964          
00001D96                          1965  
00001D96  6100 0210               1966      BSR     MODE_AN * print out an address register
00001D9A                          1967      
00001D9A  43F9 000026CA           1968      LEA     CBRACK,A1       * Load ')'
00001DA0  303C 000E               1969      MOVE.W  #14,D0          * Trap #14 to display message
00001DA4  4E4F                    1970      TRAP    #15             * Perform #14
00001DA6                          1971       
00001DA6  6000 00FA               1972      BRA     ENDEAHELPER05
00001DAA                          1973      
00001DAA                          1974  NOTADRINDIRECT * address register indirect, post increment
00001DAA                          1975      
00001DAA  0C46 0018               1976      CMPI    #%0000000000011000,D6 * is it address register indirect post increment?
00001DAE  6600 002E               1977      BNE     NOTADRINDIRECTPOST
00001DB2                          1978      
00001DB2  43F9 000026C8           1979      LEA     OBRACK,A1       * Load '('
00001DB8  303C 000E               1980      MOVE.W  #14,D0          * Trap #14 to display message
00001DBC  4E4F                    1981      TRAP    #15             * Perform #14
00001DBE                          1982          
00001DBE                          1983  
00001DBE  6100 01E8               1984      BSR     MODE_AN * print out an address register
00001DC2                          1985      
00001DC2  43F9 000026CA           1986      LEA     CBRACK,A1       * Load ')'
00001DC8  303C 000E               1987      MOVE.W  #14,D0          * Trap #14 to display message
00001DCC  4E4F                    1988      TRAP    #15             * Perform #14
00001DCE                          1989      
00001DCE  43F9 000026CC           1990      LEA     PLUS,A1       * Load '+'
00001DD4  303C 000E               1991      MOVE.W  #14,D0          * Trap #14 to display message
00001DD8  4E4F                    1992      TRAP    #15             * Perform #14
00001DDA                          1993       
00001DDA  6000 00C6               1994      BRA     ENDEAHELPER05
00001DDE                          1995      
00001DDE                          1996  NOTADRINDIRECTPOST * address register indirect, pre decrement
00001DDE                          1997      
00001DDE  0C46 0020               1998      CMPI    #%0000000000100000,D6 * is it address register indirect pre decrement?
00001DE2  6600 002E               1999      BNE     NOTADRINDIRECTPRE
00001DE6                          2000      
00001DE6  43F9 000026CE           2001      LEA     MINUS,A1       * Load '-'
00001DEC  303C 000E               2002      MOVE.W  #14,D0          * Trap #14 to display message
00001DF0  4E4F                    2003      TRAP    #15             * Perform #14
00001DF2                          2004      
00001DF2  43F9 000026C8           2005      LEA     OBRACK,A1       * Load '('
00001DF8  303C 000E               2006      MOVE.W  #14,D0          * Trap #14 to display message
00001DFC  4E4F                    2007      TRAP    #15             * Perform #14
00001DFE                          2008          
00001DFE                          2009  
00001DFE  6100 01A8               2010      BSR     MODE_AN * print out an address register
00001E02                          2011      
00001E02  43F9 000026CA           2012      LEA     CBRACK,A1       * Load ')'
00001E08  303C 000E               2013      MOVE.W  #14,D0          * Trap #14 to display message
00001E0C  4E4F                    2014      TRAP    #15             * Perform #14
00001E0E                          2015       
00001E0E  6000 0092               2016      BRA     ENDEAHELPER05
00001E12                          2017  
00001E12                          2018  NOTADRINDIRECTPRE * if none of the previous cases are true, it is a mode not supported by our decompiler
00001E12                          2019  
00001E12  0C46 0038               2020      CMPI    #%0000000000111000,D6 * is it immediate?
00001E16  6600 0086               2021      BNE     NOTIMMEDIATE
00001E1A                          2022  
00001E1A  0C43 0001               2023      CMPI    #1,D3 * is it a byte?
00001E1E  6600 0028               2024      BNE     NOTIMMBYTE
00001E22                          2025      
00001E22  43F9 000026C4           2026      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001E28  103C 000E               2027      MOVE.B  #14,D0
00001E2C  4E4F                    2028      TRAP    #15
00001E2E                          2029      
00001E2E  3C3C 0000               2030      MOVE.W  #0, D6              * Prep lower value for bitmask
00001E32  3E3C 0007               2031      MOVE.W  #7, D7              * Prep upper value for bitmask
00001E36  6100 0772               2032      BSR     BITMASK             * Finalize bitmask setup
00001E3A                          2033          
00001E3A  321A                    2034      MOVE.W  (A2)+,D1
00001E3C                          2035      
00001E3C  C286                    2036      AND.L     D6,D1
00001E3E                          2037          
00001E3E  103C 0003               2038      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001E42  4E4F                    2039      TRAP    #15      * Perform Trap #3
00001E44                          2040      
00001E44  6000 005C               2041      BRA     ENDEAHELPER05
00001E48                          2042  
00001E48                          2043  NOTIMMBYTE
00001E48                          2044      
00001E48  0C43 0002               2045      CMPI    #2,D3 * is it a word?
00001E4C  6600 0028               2046      BNE     NOTIMMWORD
00001E50                          2047      
00001E50  43F9 000026C4           2048      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001E56  103C 000E               2049      MOVE.B  #14,D0
00001E5A  4E4F                    2050      TRAP    #15
00001E5C                          2051      
00001E5C  3C3C 0000               2052      MOVE.W  #0, D6              * Prep lower value for bitmask
00001E60  3E3C 000F               2053      MOVE.W  #15, D7             * Prep upper value for bitmask
00001E64  6100 0744               2054      BSR     BITMASK             * Finalize bitmask setup
00001E68                          2055          
00001E68  321A                    2056      MOVE.W  (A2)+,D1
00001E6A                          2057      
00001E6A  C286                    2058      AND.L     D6,D1               * Apply bitmask
00001E6C                          2059          
00001E6C  103C 0003               2060      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001E70  4E4F                    2061      TRAP    #15      * Perform Trap #3
00001E72                          2062      
00001E72  6000 002E               2063      BRA     ENDEAHELPER05
00001E76                          2064      
00001E76                          2065  NOTIMMWORD
00001E76  0C43 0003               2066      CMPI    #3,D3 * is it a long?
00001E7A  6600 0022               2067      BNE     NOTIMMEDIATE
00001E7E                          2068      
00001E7E  43F9 000026C4           2069      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001E84  103C 000E               2070      MOVE.B  #14,D0
00001E88  4E4F                    2071      TRAP    #15
00001E8A                          2072          
00001E8A  221A                    2073      MOVE.L  (A2)+,D1
00001E8C                          2074          
00001E8C  103C 0003               2075      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001E90  4E4F                    2076      TRAP    #15      * Perform Trap #3
00001E92                          2077      
00001E92  321A                    2078      MOVE.W  (A2)+,D1
00001E94                          2079          
00001E94  103C 0003               2080      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001E98  4E4F                    2081      TRAP    #15      * Perform Trap #3
00001E9A                          2082      
00001E9A  6000 0006               2083      BRA     ENDEAHELPER05
00001E9E                          2084  
00001E9E                          2085  NOTIMMEDIATE    
00001E9E                          2086  
00001E9E                          2087  
00001E9E  6100 04A0               2088      BSR     UNKNOWNOP
00001EA2                          2089      
00001EA2                          2090  ENDEAHELPER05
00001EA2  4C9F 03FF               2091      MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001EA6  4E75                    2092      RTS
00001EA8                          2093  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001EA8                          2094  *-----------------------------------------------------------------------------
00001EA8                          2095  
00001EA8                          2096  
00001EA8                          2097  
00001EA8                          2098  *-----------------------------------------------------------------------------
00001EA8                          2099  *-----------------------------------------------------------------------------
00001EA8                          2100  * NAME:           MODE_DN
00001EA8                          2101  * DESCRIPTION:    Generalize the EA part of the project.
00001EA8                          2102  * PRE-CONDITION:  The mode must have been correctly identified. All modes
00001EA8                          2103  *                 must be called by RTS.
00001EA8                          2104  * POST-CONDITION: After the EA, the entire op will head back to the BSR that
00001EA8                          2105  *                 called it.
00001EA8                          2106  * REGISTERS:      a
00001EA8                          2107  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001EA8                          2108  * ---> Dn
00001EA8                          2109  MODE_DN
00001EA8  48A7 FFC0               2110          MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001EAC                          2111  
00001EAC  3C3C 0000               2112          MOVE.W  #0, D6              * Prep lower value for bitmask
00001EB0  3E3C 0002               2113          MOVE.W  #2, D7              * Prep upper value for bitmask
00001EB4  6100 06F4               2114          BSR     BITMASK             * Finalize bitmask setup
00001EB8  CC42                    2115          AND     D2,D6               * Apply bitmask
00001EBA                          2116          
00001EBA  0C46 0000               2117          CMPI    #%000000000000000, D6   * Data Register D0?
00001EBE  6600 000A               2118          BNE     NOTD0
00001EC2                          2119          
00001EC2  6100 0074               2120          BSR     PRINTD0
00001EC6  6000 006A               2121          BRA     ENDMODE_DN
00001ECA                          2122  NOTD0      
00001ECA  0C46 0001               2123          CMPI    #%000000000000001, D6   * Data Register D1?
00001ECE  6600 000A               2124          BNE     NOTD1
00001ED2                          2125          
00001ED2  6100 0072               2126          BSR     PRINTD1
00001ED6  6000 005A               2127          BRA     ENDMODE_DN
00001EDA                          2128  NOTD1
00001EDA  0C46 0002               2129          CMPI    #%000000000000010, D6   * Data Register D2?
00001EDE  6600 000A               2130          BNE     NOTD2
00001EE2                          2131          
00001EE2  6100 0070               2132          BSR     PRINTD2
00001EE6  6000 004A               2133          BRA     ENDMODE_DN
00001EEA                          2134  NOTD2
00001EEA  0C46 0003               2135          CMPI    #%000000000000011, D6   * Data Register D3?
00001EEE  6600 000A               2136          BNE     NOTD3
00001EF2                          2137          
00001EF2  6100 006E               2138          BSR     PRINTD3
00001EF6  6000 003A               2139          BRA     ENDMODE_DN
00001EFA                          2140  NOTD3
00001EFA  0C46 0004               2141          CMPI    #%000000000000100, D6   * Data Register D4?
00001EFE  6600 000A               2142          BNE     NOTD4
00001F02                          2143          
00001F02  6100 006C               2144          BSR     PRINTD4
00001F06  6000 002A               2145          BRA     ENDMODE_DN
00001F0A                          2146  NOTD4
00001F0A  0C46 0005               2147          CMPI    #%000000000000101, D6   * Data Register D5?
00001F0E  6600 000A               2148          BNE     NOTD5
00001F12                          2149          
00001F12  6100 006A               2150          BSR     PRINTD5
00001F16  6000 001A               2151          BRA     ENDMODE_DN
00001F1A                          2152  NOTD5
00001F1A  0C46 0006               2153          CMPI    #%000000000000110, D6   * Data Register D6?
00001F1E  6600 000A               2154          BNE     NOTD6
00001F22                          2155          
00001F22  6100 0068               2156          BSR     PRINTD6
00001F26  6000 000A               2157          BRA     ENDMODE_DN
00001F2A                          2158  NOTD6
00001F2A  6100 006E               2159          BSR     PRINTD7
00001F2E  6000 0002               2160          BRA     ENDMODE_DN
00001F32                          2161          
00001F32                          2162  ENDMODE_DN
00001F32  4C9F 03FF               2163          MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001F36  4E75                    2164          RTS
00001F38                          2165  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001F38                          2166  *-----------------------------------------------------------------------------
00001F38                          2167  
00001F38                          2168  
00001F38                          2169  
00001F38                          2170  *-----------------------------------------------------------------------------
00001F38                          2171  *-----------------------------------------------------------------------------
00001F38                          2172  * NAME:           PRINTD0
00001F38                          2173  * DESCRIPTION:    Simply prints D0, D1, ..., up to D7.
00001F38                          2174  * PRE-CONDITION:  a
00001F38                          2175  * POST-CONDITION: a
00001F38                          2176  * REGISTERS:      a
00001F38                          2177  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001F38                          2178  PRINTD0
00001F38  43F9 000026F8           2179          LEA     __D0, A1        * Load 'D0'
00001F3E  103C 000E               2180          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F42  4E4F                    2181          TRAP    #15             * Perform Trap #14
00001F44  4E75                    2182          RTS
00001F46                          2183  PRINTD1
00001F46  43F9 000026FB           2184          LEA     __D1, A1        * Load 'D1'
00001F4C  103C 000E               2185          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F50  4E4F                    2186          TRAP    #15             * Perform Trap #14
00001F52  4E75                    2187          RTS      
00001F54                          2188  PRINTD2
00001F54  43F9 000026FE           2189          LEA     __D2, A1        * Load 'D2'
00001F5A  103C 000E               2190          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F5E  4E4F                    2191          TRAP    #15             * Perform Trap #14
00001F60  4E75                    2192          RTS      
00001F62                          2193  PRINTD3
00001F62  43F9 00002701           2194          LEA     __D3, A1        * Load 'D3'
00001F68  103C 000E               2195          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F6C  4E4F                    2196          TRAP    #15             * Perform Trap #14
00001F6E  4E75                    2197          RTS      
00001F70                          2198  PRINTD4
00001F70  43F9 00002704           2199          LEA     __D4, A1        * Load 'D4'
00001F76  103C 000E               2200          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F7A  4E4F                    2201          TRAP    #15             * Perform Trap #14
00001F7C  4E75                    2202          RTS       
00001F7E                          2203  PRINTD5
00001F7E  43F9 00002707           2204          LEA     __D5, A1        * Load 'D5'
00001F84  103C 000E               2205          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F88  4E4F                    2206          TRAP    #15             * Perform Trap #14
00001F8A  4E75                    2207          RTS      
00001F8C                          2208  PRINTD6
00001F8C  43F9 0000270A           2209          LEA     __D6, A1        * Load 'D6'
00001F92  103C 000E               2210          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F96  4E4F                    2211          TRAP    #15             * Perform Trap #14
00001F98  4E75                    2212          RTS
00001F9A                          2213  PRINTD7
00001F9A  43F9 0000270D           2214          LEA     __D7, A1        * Load 'D7'
00001FA0  103C 000E               2215          MOVE.B  #14, D0         * Load Trap #14 to print out
00001FA4  4E4F                    2216          TRAP    #15             * Perform Trap #14
00001FA6  4E75                    2217          RTS
00001FA8                          2218  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001FA8                          2219  *-----------------------------------------------------------------------------
00001FA8                          2220  
00001FA8                          2221  
00001FA8                          2222  
00001FA8                          2223  *-----------------------------------------------------------------------------
00001FA8                          2224  *-----------------------------------------------------------------------------
00001FA8                          2225  * NAME:           MODE_AN
00001FA8                          2226  * DESCRIPTION:    Simply chooses to print A0-A7.
00001FA8                          2227  * PRE-CONDITION:  a
00001FA8                          2228  * POST-CONDITION: a
00001FA8                          2229  * REGISTERS:      a
00001FA8                          2230  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001FA8                          2231  MODE_AN
00001FA8  48A7 FFC0               2232          MOVEM   D0-D7/A0-A1,-(A7)   * Save information
00001FAC                          2233  
00001FAC  3C3C 0000               2234          MOVE.W  #0, D6              * Prep lower value for bitmask
00001FB0  3E3C 0002               2235          MOVE.W  #2, D7              * Prep upper value for bitmask
00001FB4  6100 05F4               2236          BSR     BITMASK             * Finalize bitmask setup
00001FB8  CC42                    2237          AND     D2,D6               * Apply bitmask
00001FBA                          2238          
00001FBA  0C46 0000               2239          CMPI    #%000000000000000, D6   * Address Register A0?
00001FBE  6600 000A               2240          BNE     NOTA0
00001FC2                          2241          
00001FC2  6100 0074               2242          BSR     PRINTA0
00001FC6                          2243          
00001FC6  6000 006A               2244          BRA     ENDMODE_AN
00001FCA                          2245  NOTA0      
00001FCA  0C46 0001               2246          CMPI    #%000000000000001, D6   * Address Register A1?
00001FCE  6600 000A               2247          BNE     NOTA1
00001FD2                          2248          
00001FD2  6100 0072               2249          BSR     PRINTA1
00001FD6                          2250          
00001FD6  6000 005A               2251          BRA     ENDMODE_AN
00001FDA                          2252  NOTA1
00001FDA  0C46 0002               2253          CMPI    #%000000000000010, D6   * Address Register A2?
00001FDE  6600 000A               2254          BNE     NOTA2
00001FE2                          2255          
00001FE2  6100 0070               2256          BSR     PRINTA2
00001FE6                          2257          
00001FE6  6000 004A               2258          BRA     ENDMODE_AN
00001FEA                          2259  NOTA2
00001FEA  0C46 0003               2260          CMPI    #%000000000000011, D6   * Address Register A3?
00001FEE  6600 000A               2261          BNE     NOTA3
00001FF2                          2262          
00001FF2  6100 006E               2263          BSR     PRINTA3
00001FF6                          2264          
00001FF6  6000 003A               2265          BRA     ENDMODE_AN
00001FFA                          2266  NOTA3
00001FFA  0C46 0004               2267          CMPI    #%000000000000100, D6   * Address Register A4?
00001FFE  6600 000A               2268          BNE     NOTA4
00002002                          2269          
00002002  6100 006C               2270          BSR     PRINTA4
00002006                          2271          
00002006  6000 002A               2272          BRA     ENDMODE_AN
0000200A                          2273  NOTA4
0000200A  0C46 0005               2274          CMPI    #%000000000000101, D6   * Address Register A5?
0000200E  6600 000A               2275          BNE     NOTA5
00002012                          2276          
00002012  6100 006A               2277          BSR     PRINTA5
00002016                          2278          
00002016  6000 001A               2279          BRA     ENDMODE_AN
0000201A                          2280  NOTA5
0000201A  0C46 0006               2281          CMPI    #%000000000000110, D6   * Address Register A6?
0000201E  6600 000A               2282          BNE     NOTA6
00002022                          2283          
00002022  6100 0068               2284          BSR     PRINTA6
00002026                          2285          
00002026  6000 000A               2286          BRA     ENDMODE_AN
0000202A                          2287  NOTA6
0000202A  6100 006E               2288          BSR     PRINTA7
0000202E                          2289          
0000202E  6000 0002               2290          BRA     ENDMODE_AN
00002032                          2291  ENDMODE_AN
00002032  4C9F 03FF               2292          MOVEM   (A7)+,D0-D7/A0-A1   * Restore registers
00002036  4E75                    2293          RTS
00002038                          2294  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002038                          2295  *-----------------------------------------------------------------------------
00002038                          2296  
00002038                          2297  
00002038                          2298  
00002038                          2299  *-----------------------------------------------------------------------------
00002038                          2300  *-----------------------------------------------------------------------------
00002038                          2301  * NAME:           PRINTA0
00002038                          2302  * DESCRIPTION:    Simply print out the address register.
00002038                          2303  * PRE-CONDITION:  a
00002038                          2304  * POST-CONDITION: a
00002038                          2305  * REGISTERS:      a
00002038                          2306  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002038                          2307  PRINTA0
00002038  43F9 000026E0           2308          LEA     __A0, A1        * Load 'A0'
0000203E  103C 000E               2309          MOVE.B  #14, D0         * Load Trap #14 to print out
00002042  4E4F                    2310          TRAP    #15             * Perform Trap #14
00002044  4E75                    2311          RTS
00002046                          2312  
00002046                          2313  PRINTA1
00002046  43F9 000026E3           2314          LEA     __A1, A1        * Load 'A1'
0000204C  103C 000E               2315          MOVE.B  #14, D0         * Load Trap #14 to print out
00002050  4E4F                    2316          TRAP    #15             * Perform Trap #14
00002052  4E75                    2317          RTS
00002054                          2318          
00002054                          2319  PRINTA2
00002054  43F9 000026E6           2320          LEA     __A2, A1        * Load 'A2'
0000205A  103C 000E               2321          MOVE.B  #14, D0         * Load Trap #14 to print out
0000205E  4E4F                    2322          TRAP    #15             * Perform Trap #14
00002060  4E75                    2323          RTS
00002062                          2324  
00002062                          2325  PRINTA3
00002062  43F9 000026E9           2326          LEA     __A3, A1        * Load 'A3'
00002068  103C 000E               2327          MOVE.B  #14, D0         * Load Trap #14 to print out
0000206C  4E4F                    2328          TRAP    #15             * Perform Trap #14
0000206E  4E75                    2329          RTS
00002070                          2330  
00002070                          2331  PRINTA4
00002070  43F9 000026EC           2332          LEA     __A4, A1        * Load 'A4'
00002076  103C 000E               2333          MOVE.B  #14, D0         * Load Trap #14 to print out
0000207A  4E4F                    2334          TRAP    #15             * Perform Trap #14
0000207C  4E75                    2335          RTS
0000207E                          2336  
0000207E                          2337  PRINTA5
0000207E  43F9 000026EF           2338          LEA     __A5, A1        * Load 'A5'
00002084  103C 000E               2339          MOVE.B  #14, D0         * Load Trap #14 to print out
00002088  4E4F                    2340          TRAP    #15             * Perform Trap #14
0000208A  4E75                    2341          RTS
0000208C                          2342  
0000208C                          2343  PRINTA6
0000208C  43F9 000026F2           2344          LEA     __A6, A1        * Load 'A6'
00002092  103C 000E               2345          MOVE.B  #14, D0         * Load Trap #14 to print out
00002096  4E4F                    2346          TRAP    #15             * Perform Trap #14
00002098  4E75                    2347          RTS
0000209A                          2348  
0000209A                          2349  PRINTA7
0000209A  43F9 000026F5           2350          LEA     __A7, A1        * Load 'A7'
000020A0  103C 000E               2351          MOVE.B  #14, D0         * Load Trap #14 to print out
000020A4  4E4F                    2352          TRAP    #15             * Perform Trap #14
000020A6  4E75                    2353          RTS
000020A8                          2354  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000020A8                          2355  *-----------------------------------------------------------------------------
000020A8                          2356  
000020A8                          2357  
000020A8                          2358  
000020A8                          2359  *-----------------------------------------------------------------------------
000020A8                          2360  *-----------------------------------------------------------------------------
000020A8                          2361  * NAME:           SIZE67
000020A8                          2362  * DESCRIPTION:    Called if the size is stored in bits 6 to 7.
000020A8                          2363  * PRE-CONDITION:  a
000020A8                          2364  * POST-CONDITION: a
000020A8                          2365  * REGISTERS:      a
000020A8                          2366  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000020A8                          2367  SIZE67
000020A8  48A7 FFFE               2368          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
000020AC  3C3C 0006               2369          MOVE.W  #6, D6              * Prep lower value for bitmask
000020B0  3E3C 0007               2370          MOVE.W  #7, D7              * Prep upper value for bitmask
000020B4  6100 04F4               2371          BSR     BITMASK             * Finalize bitmask setup
000020B8  CC42                    2372          AND     D2,D6               * Apply bitmask     
000020BA                          2373  
000020BA  0C46 0000               2374          CMPI    #%0000000000000000, D6   * is it a BYTE?
000020BE  6600 000A               2375          BNE     NOT67BYTE
000020C2                          2376          
000020C2  6100 009C               2377          BSR     PRINTBYTE               * Branch to handle BYTE sizes
000020C6  6000 001E               2378          BRA     END67
000020CA                          2379  NOT67BYTE        
000020CA  0C46 0040               2380          CMPI    #%0000000001000000, D6   * is it a WORD?
000020CE  6600 000A               2381          BNE     NOT67WORD
000020D2                          2382          
000020D2  6100 009A               2383          BSR     PRINTWORD               * Branch to handle WORD sizes
000020D6  6000 000E               2384          BRA     END67
000020DA                          2385  NOT67WORD
000020DA  0C46 0080               2386          CMPI    #%0000000010000000, D6   * is it a LONG?
000020DE  6600 0006               2387          BNE     END67
000020E2                          2388          
000020E2  6100 0098               2389          BSR     PRINTLONG               * Branch to handle LONG sizes
000020E6                          2390  END67
000020E6  4C9F 7FFF               2391          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
000020EA  4E75                    2392          RTS                             * Return. Size handling is finished.
000020EC                          2393  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000020EC                          2394  *-----------------------------------------------------------------------------
000020EC                          2395  
000020EC                          2396  
000020EC                          2397  
000020EC                          2398  *-----------------------------------------------------------------------------
000020EC                          2399  *-----------------------------------------------------------------------------
000020EC                          2400  * NAME:           SIZE68
000020EC                          2401  * DESCRIPTION:    Called if the size is stored in bits 6 to 8.
000020EC                          2402  * PRE-CONDITION:  a
000020EC                          2403  * POST-CONDITION: a
000020EC                          2404  * REGISTERS:      a
000020EC                          2405  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000020EC                          2406  SIZE68
000020EC                          2407  
000020EC  48A7 FFFE               2408          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
000020F0  3C3C 0006               2409          MOVE.W  #6, D6              * Prep lower value for bitmask
000020F4  3E3C 0008               2410          MOVE.W  #8, D7              * Prep upper value for bitmask
000020F8  6100 04B0               2411          BSR     BITMASK             * Finalize bitmask setup
000020FC  CC42                    2412          AND     D2,D6               * Apply bitmask       
000020FE                          2413  
000020FE  0C46 0000               2414          CMPI    #%0000000000000000, D6  * is it a BYTE?
00002102  6700 003E               2415          BEQ     PRINTBYTE68               * Branch to handle BYTE sizes
00002106  0C46 0100               2416          CMPI    #%0000000100000000, D6  * is it a BYTE?
0000210A  6700 0036               2417          BEQ     PRINTBYTE68               * Branch to handle BYTE sizes 
0000210E                          2418        
0000210E  0C46 0040               2419          CMPI    #%0000000001000000, D6  * is it a WORD?
00002112  6700 0036               2420          BEQ     PRINTWORD68               * Branch to handle BYTE sizes
00002116  0C46 0140               2421          CMPI    #%0000000101000000, D6  * is it a WORD?
0000211A  6700 002E               2422          BEQ     PRINTWORD68               * Branch to handle BYTE sizes
0000211E  0C46 00C0               2423          CMPI    #%0000000011000000, D6  * is it a WORD (ADDA)?
00002122  6700 0026               2424          BEQ     PRINTWORD68               * Branch to handle BYTE sizes
00002126                          2425  
00002126  0C46 0080               2426          CMPI    #%0000000010000000, D6  * is it a LONG?
0000212A  6700 0026               2427          BEQ     PRINTLONG68               * Branch to handle BYTE sizes
0000212E  0C46 0180               2428          CMPI    #%0000000110000000, D6  * is it a LONG?
00002132  6700 001E               2429          BEQ     PRINTLONG68               * Branch to handle BYTE sizes
00002136  0C46 01C0               2430          CMPI    #%0000000111000000, D6  * is it a LONG (ADDA)?
0000213A  6700 0016               2431          BEQ     PRINTLONG68               * Branch to handle BYTE sizes
0000213E                          2432  
0000213E  6000 001A               2433          BRA     END68
00002142                          2434          
00002142                          2435  PRINTBYTE68
00002142  6100 001C               2436          BSR     PRINTBYTE
00002146  6000 0012               2437          BRA     END68
0000214A                          2438  
0000214A                          2439  PRINTWORD68
0000214A  6100 0022               2440          BSR     PRINTWORD
0000214E  6000 000A               2441          BRA     END68
00002152                          2442          
00002152                          2443  PRINTLONG68
00002152  6100 0028               2444          BSR     PRINTLONG
00002156  6000 0002               2445          BRA     END68
0000215A                          2446  
0000215A                          2447  END68
0000215A  4C9F 7FFF               2448          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
0000215E  4E75                    2449          RTS                             * Return. Size handling is finished.
00002160                          2450  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002160                          2451  *-----------------------------------------------------------------------------
00002160                          2452  
00002160                          2453  
00002160                          2454  
00002160                          2455  *-----------------------------------------------------------------------------
00002160                          2456  *-----------------------------------------------------------------------------
00002160                          2457  * NAME:           PRINTBYTE
00002160                          2458  * DESCRIPTION:    a
00002160                          2459  * PRE-CONDITION:  a
00002160                          2460  * POST-CONDITION: a
00002160                          2461  * REGISTERS:      a
00002160                          2462  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002160                          2463  PRINTBYTE
00002160  43F9 000026D4           2464          LEA     __B,A1      * Load '.B ' into A1
00002166  103C 000E               2465          MOVE.B  #14,D0      * Trap #14 setup to print
0000216A  4E4F                    2466          TRAP    #15         * Perform Trap #14
0000216C  4E75                    2467          RTS                 * Return to SIZE67/SIZE68
0000216E                          2468          
0000216E                          2469  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000216E                          2470  *-----------------------------------------------------------------------------
0000216E                          2471  
0000216E                          2472  
0000216E                          2473  
0000216E                          2474  *-----------------------------------------------------------------------------
0000216E                          2475  *-----------------------------------------------------------------------------
0000216E                          2476  * NAME:           PRINTWORD
0000216E                          2477  * DESCRIPTION:    a
0000216E                          2478  * PRE-CONDITION:  a
0000216E                          2479  * POST-CONDITION: a
0000216E                          2480  * REGISTERS:      a
0000216E                          2481  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000216E                          2482  PRINTWORD
0000216E  43F9 000026D8           2483          LEA     __W,A1      * Load '.W ' into A1
00002174  103C 000E               2484          MOVE.B  #14,D0      * Trap #14 setup to print
00002178  4E4F                    2485          TRAP    #15         * Perform Trap #14
0000217A  4E75                    2486          RTS                 * Return to SIZE67/SIZE68
0000217C                          2487          
0000217C                          2488  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000217C                          2489  *-----------------------------------------------------------------------------
0000217C                          2490  
0000217C                          2491  
0000217C                          2492  
0000217C                          2493  *-----------------------------------------------------------------------------
0000217C                          2494  *-----------------------------------------------------------------------------
0000217C                          2495  * NAME:           PRINTLONG
0000217C                          2496  * DESCRIPTION:    a
0000217C                          2497  * PRE-CONDITION:  a
0000217C                          2498  * POST-CONDITION: a
0000217C                          2499  * REGISTERS:      a
0000217C                          2500  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000217C                          2501  PRINTLONG
0000217C  43F9 000026DC           2502          LEA     __L,A1      * Load '.L ' into A1
00002182  103C 000E               2503          MOVE.B  #14,D0      * Trap #14 setup to print
00002186  4E4F                    2504          TRAP    #15         * Perform Trap #14
00002188  4E75                    2505          RTS                 * Return to SIZE67/SIZE68
0000218A                          2506          
0000218A                          2507  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000218A                          2508  *-----------------------------------------------------------------------------
0000218A                          2509  
0000218A                          2510  
0000218A                          2511  
0000218A                          2512  *-----------------------------------------------------------------------------
0000218A                          2513  *-----------------------------------------------------------------------------
0000218A                          2514  * NAME:           MOVEMHELPERPOST
0000218A                          2515  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
0000218A                          2516  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
0000218A                          2517  * POST-CONDITION: The registers being saved are printed
0000218A                          2518  * REGISTERS:      A2
0000218A                          2519  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000218A                          2520  MOVEMHELPERPOST
0000218A  48A7 FFFE               2521          MOVEM  D0-D7/A0-A6,-(A7)
0000218E                          2522          
0000218E  4285                    2523          CLR.L   D5  * to be used as a loop counter
00002190  4284                    2524          CLR.L   D4  * == 1 if we have printed any registers (for fencepost issue)
00002192  4283                    2525          CLR.L   D3  * == 1 if we are in a range
00002194  4286                    2526          CLR.L   D6  * == 1 if we have already printed the slash or dash
00002196  4287                    2527          CLR.L   D7  * == counts the number of registers in a range
00002198  1C3C 0001               2528          MOVE.B  #1,D6 * to fix fencepost issue
0000219C  4282                    2529          CLR.L   D2
0000219E  3412                    2530          MOVE.W  (A2),D2
000021A0                          2531          
000021A0                          2532  DLOOP * loop to print out the data register portion of the addresses being saved
000021A0                          2533  
000021A0  E25A                    2534          ROR     #1,D2
000021A2  6500 0006               2535          BCS     DVALID
000021A6                          2536          
000021A6  6000 0064               2537          BRA     DINVALID
000021AA                          2538          
000021AA                          2539  DVALID
000021AA  0C43 0000               2540          CMPI    #0,D3
000021AE  6700 0020               2541          BEQ     DFORWARDVALID * we are not in a range
000021B2                          2542          
000021B2  5247                    2543          ADDI    #1,D7 *increment number of regs in range
000021B4                          2544          
000021B4  0C46 0001               2545          CMPI    #1,D6   *have we already printed a symbol?
000021B8  6700 0084               2546          BEQ     DLOOPITER
000021BC                          2547          
000021BC  43F9 000026D2           2548          LEA     DASH,A1    *print a dash
000021C2  103C 000E               2549          MOVE.B  #14,D0
000021C6  4E4F                    2550          TRAP    #15
000021C8                          2551          
000021C8  1C3C 0001               2552          MOVE.B  #1,D6 * indicates a symbol has been printed
000021CC                          2553          
000021CC  6000 0070               2554          BRA     DLOOPITER
000021D0                          2555          
000021D0                          2556  DFORWARDVALID
000021D0                          2557          * not in a range yet, print
000021D0                          2558          
000021D0  0C44 0000               2559          CMPI    #0,D4
000021D4  6700 000E               2560          BEQ     DNOSLASH
000021D8                          2561                  
000021D8  43F9 000026D0           2562          LEA     SLASH,A1
000021DE  103C 000E               2563          MOVE.B  #14,D0
000021E2  4E4F                    2564          TRAP    #15
000021E4                          2565          
000021E4                          2566  DNOSLASH
000021E4                          2567  
000021E4  183C 0001               2568          MOVE.B  #1,D4 * we have printed something, now slashes are fair game
000021E8                          2569          
000021E8  1C3C 0001               2570          MOVE.B  #1,D6   * we have printed a symbol
000021EC                          2571          
000021EC  43F9 000026BA           2572          LEA     ASCII_D,A1
000021F2  103C 000E               2573          MOVE.B  #14,D0
000021F6  4E4F                    2574          TRAP    #15
000021F8                          2575          
000021F8  2205                    2576          MOVE.L  D5,D1
000021FA  103C 0003               2577          MOVE.B  #3,D0
000021FE  4E4F                    2578          TRAP    #15
00002200                          2579  
00002200  163C 0001               2580          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
00002204  1C3C 0000               2581          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
00002208                          2582          
00002208  6000 0034               2583          BRA     DLOOPITER
0000220C                          2584  
0000220C                          2585  
0000220C                          2586  DINVALID
0000220C                          2587  
0000220C                          2588          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
0000220C                          2589          
0000220C  0C43 0001               2590          CMPI    #1,D3
00002210  6600 002C               2591          BNE     DLOOPITER
00002214                          2592          
00002214  163C 0000               2593          MOVE.B  #0,D3
00002218                          2594          
00002218  0C47 0001               2595          CMPI    #1,D7
0000221C  6D00 001E               2596          BLT     DLOOPITERCLR
00002220                          2597          
00002220  43F9 000026BA           2598          LEA     ASCII_D,A1
00002226  103C 000E               2599          MOVE.B  #14,D0
0000222A  4E4F                    2600          TRAP    #15
0000222C                          2601          
0000222C  2205                    2602          MOVE.L  D5,D1
0000222E                          2603          
0000222E  0641 FFFF               2604          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
00002232                          2605          
00002232  103C 0003               2606          MOVE.B  #3,D0
00002236  4E4F                    2607          TRAP    #15
00002238                          2608          
00002238  6000 0004               2609          BRA     DLOOPITER
0000223C                          2610          
0000223C                          2611  DLOOPITERCLR        
0000223C  4287                    2612          CLR.L   D7
0000223E                          2613  
0000223E                          2614  DLOOPITER
0000223E                          2615          
0000223E  0C45 0008               2616          CMPI    #8,D5
00002242  6700 0008               2617          BEQ     DLOOPDONE
00002246                          2618  
00002246  5245                    2619          ADDI    #1,D5
00002248  6000 FF56               2620          BRA     DLOOP
0000224C                          2621  
0000224C                          2622  DLOOPDONE
0000224C                          2623  
0000224C  7A09                    2624          MOVE.L  #9,D5  * to be used as a loop counter
0000224E  4283                    2625          CLR.L   D3  * == 1 if we are in a range
00002250  4286                    2626          CLR.L   D6  * == 1 if we have already printed the slash or dash
00002252  4287                    2627          CLR.L   D7  * count of registers in a range
00002254  1C3C 0001               2628          MOVE.B  #1,D6 * to fix fencepost issue     
00002258                          2629  
00002258                          2630  ALOOP * loop to print out the data register portion of the addresses being saved
00002258                          2631  
00002258  E25A                    2632          ROR     #1,D2
0000225A  6500 0006               2633          BCS     AVALID
0000225E                          2634          
0000225E  6000 0068               2635          BRA     AINVALID
00002262                          2636          
00002262                          2637  AVALID
00002262  0C43 0000               2638          CMPI    #0,D3
00002266  6700 0020               2639          BEQ     AFORWARDVALID * we are not in a range
0000226A                          2640          
0000226A  5247                    2641          ADDI    #1,D7 *increment number of regs in range
0000226C                          2642          
0000226C  0C46 0001               2643          CMPI    #1,D6   *have we already printed a symbol?
00002270  6700 008C               2644          BEQ     ALOOPITER
00002274                          2645          
00002274  43F9 000026D2           2646          LEA     DASH,A1    *print a dash
0000227A  103C 000E               2647          MOVE.B  #14,D0
0000227E  4E4F                    2648          TRAP    #15
00002280                          2649          
00002280  1C3C 0001               2650          MOVE.B  #1,D6 * indicates a symbol has been printed
00002284                          2651          
00002284  6000 0078               2652          BRA     ALOOPITER
00002288                          2653          
00002288                          2654  AFORWARDVALID
00002288                          2655          * not in a range yet, print
00002288                          2656          
00002288                          2657                  
00002288  0C44 0000               2658          CMPI    #0,D4
0000228C  6700 000E               2659          BEQ     ANOSLASH
00002290                          2660                  
00002290  43F9 000026D0           2661          LEA     SLASH,A1
00002296  103C 000E               2662          MOVE.B  #14,D0
0000229A  4E4F                    2663          TRAP    #15
0000229C                          2664          
0000229C                          2665  ANOSLASH
0000229C                          2666  
0000229C  183C 0001               2667          MOVE.B  #1,D4   * we have printed something, now slashes are fair game
000022A0                          2668          
000022A0  1C3C 0001               2669          MOVE.B  #1,D6   * we have printed a symbol
000022A4                          2670          
000022A4  43F9 000026B4           2671          LEA     ASCII_A,A1
000022AA  103C 000E               2672          MOVE.B  #14,D0
000022AE  4E4F                    2673          TRAP    #15
000022B0                          2674          
000022B0  2205                    2675          MOVE.L  D5,D1
000022B2                          2676          
000022B2  0641 FFF8               2677          ADDI    #-8,D1 * it's A, need to adjust by 8
000022B6                          2678          
000022B6  103C 0003               2679          MOVE.B  #3,D0
000022BA  4E4F                    2680          TRAP    #15
000022BC                          2681  
000022BC  163C 0001               2682          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
000022C0  1C3C 0000               2683          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
000022C4                          2684          
000022C4  6000 0038               2685          BRA     ALOOPITER
000022C8                          2686  
000022C8                          2687  
000022C8                          2688  AINVALID
000022C8                          2689  
000022C8                          2690          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
000022C8                          2691          
000022C8  0C43 0001               2692          CMPI    #1,D3
000022CC  6600 0030               2693          BNE     ALOOPITER
000022D0                          2694          
000022D0  163C 0000               2695          MOVE.B  #0,D3
000022D4                          2696          
000022D4  0C47 0001               2697          CMPI    #1,D7
000022D8  6D00 0022               2698          BLT     ALOOPITERCLR
000022DC                          2699          
000022DC  43F9 000026B4           2700          LEA     ASCII_A,A1
000022E2  103C 000E               2701          MOVE.B  #14,D0
000022E6  4E4F                    2702          TRAP    #15
000022E8                          2703          
000022E8  2205                    2704          MOVE.L  D5,D1
000022EA                          2705          
000022EA  0641 FFFF               2706          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
000022EE  0641 FFF8               2707          ADDI    #-8,D1 * it's A, need to adjust by 8
000022F2                          2708          
000022F2  103C 0003               2709          MOVE.B  #3,D0
000022F6  4E4F                    2710          TRAP    #15
000022F8                          2711          
000022F8  6000 0004               2712          BRA     ALOOPITER
000022FC                          2713          
000022FC                          2714  ALOOPITERCLR
000022FC                          2715          
000022FC  4287                    2716          CLR.L   D7
000022FE                          2717  
000022FE                          2718  ALOOPITER
000022FE                          2719          
000022FE  0C45 0010               2720          CMPI     #16,D5
00002302  6700 0008               2721          BEQ     ALOOPDONE
00002306                          2722  
00002306  5245                    2723          ADDI    #1,D5
00002308  6000 FF4E               2724          BRA     ALOOP
0000230C                          2725  
0000230C                          2726  ALOOPDONE
0000230C                          2727          
0000230C  4C9F 7FFF               2728          MOVEM    (A7)+,D0-D7/A0-A6
00002310  4E75                    2729          RTS
00002312                          2730  
00002312                          2731          
00002312                          2732  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002312                          2733  *-----------------------------------------------------------------------------
00002312                          2734  
00002312                          2735  
00002312                          2736  
00002312                          2737  
00002312                          2738  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002312                          2739  *-----------------------------------------------------------------------------
00002312                          2740  *-----------------------------------------------------------------------------
00002312                          2741  * NAME:           MOVEMHELPERPRE
00002312                          2742  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
00002312                          2743  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
00002312                          2744  * POST-CONDITION: The registers being saved are printed
00002312                          2745  * REGISTERS:      A2
00002312                          2746  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002312                          2747  MOVEMHELPERPRE
00002312                          2748  
00002312  48A7 7F00               2749      MOVEM   D1-D7,-(A7)
00002316                          2750  
00002316  3412                    2751      MOVE.W  (A2),D2 * move the data we need to proccess into D2
00002318  7800                    2752      MOVE.L  #0,D4
0000231A  4287                    2753      CLR.L    D7 * put the flipped bits here
0000231C                          2754      
0000231C                          2755      *the following block of code moves bits
0000231C                          2756      *into the same position they would be in if
0000231C                          2757      *the MOVEM was post inc, then simply uses post
0000231C                          2758      *inc to print the registers being saved
0000231C                          2759  PRELOOP
0000231C  E35A                    2760      ROL.W   #1,D2
0000231E                          2761      
0000231E  6500 0006               2762      BCS     PRESETBIT
00002322  6000 0004               2763      BRA     PRELOOPITER
00002326                          2764      
00002326                          2765  PRESETBIT
00002326  09C7                    2766      BSET    D4,D7
00002328                          2767  
00002328                          2768  PRELOOPITER
00002328  0C44 000F               2769      CMPI    #15,D4
0000232C  6700 0006               2770      BEQ     PRELOOPDONE
00002330                          2771      
00002330  5244                    2772      ADDI    #1,D4
00002332  60E8                    2773      BRA     PRELOOP
00002334                          2774  
00002334                          2775  PRELOOPDONE
00002334                          2776  
00002334  3487                    2777      MOVE.W  D7,(A2)    
00002336  4C9F 00FE               2778      MOVEM   (A7)+,D1-D7
0000233A                          2779  
0000233A  6100 FE4E               2780      BSR MOVEMHELPERPOST
0000233E                          2781  
0000233E  4E75                    2782      RTS
00002340                          2783  
00002340                          2784  
00002340                          2785  
00002340                          2786          
00002340                          2787  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002340                          2788  *-----------------------------------------------------------------------------
00002340                          2789  
00002340                          2790  
00002340                          2791  
00002340                          2792  *-----------------------------------------------------------------------------
00002340                          2793  *-----------------------------------------------------------------------------
00002340                          2794  * NAME:           UNKNOWNOP
00002340                          2795  * DESCRIPTION:    a
00002340                          2796  * PRE-CONDITION:  D2 contains the instruction to print. D2 has already been
00002340                          2797  *                 identified as an unknown operation.
00002340                          2798  * POST-CONDITION: D2 is no longer the opcode.
00002340                          2799  * REGISTERS:      a
00002340                          2800  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002340                          2801  UNKNOWNOP
00002340  220A                    2802          MOVE.L  A2,D1   * Prep the add to print
00002342  5581                    2803          SUB.L   #2,D1   * Off by two error due to post increment correct
00002344  2602                    2804          MOVE.L  D2,D3   * Save the opcode to print
00002346                          2805          
00002346  7410                    2806          MOVE.L  #16,D2  * set the base to 16
00002348  700F                    2807          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
0000234A  4E4F                    2808          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
0000234C                          2809          
0000234C  43F9 00002676           2810          LEA     DATA,A1 * load " DATA $" into register A1
00002352  700E                    2811          MOVE.L  #14,D0  * print the string stored in A1
00002354  4E4F                    2812          TRAP    #15
00002356                          2813          
00002356  2203                    2814          MOVE.L  D3,D1   * move the opcode from D3 into D1 to print
00002358  103C 000F               2815          MOVE.B  #15,D0   * Indicate we are using trap #15, 15 to in a certain #base
0000235C  4E4F                    2816          TRAP    #15      * Perform Trap #3
0000235E                          2817  
0000235E  43F9 00002613           2818          LEA     NEWLINE,A1 * load newline into register A1
00002364  700E                    2819          MOVE.L  #14,D0  * print the string stored in A1
00002366  4E4F                    2820          TRAP    #15
00002368                          2821  
00002368  4E75                    2822          RTS
0000236A                          2823  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000236A                          2824  *-----------------------------------------------------------------------------
0000236A                          2825  
0000236A                          2826  
0000236A                          2827  
0000236A                          2828  *-----------------------------------------------------------------------------
0000236A                          2829  *-----------------------------------------------------------------------------
0000236A                          2830  * NAME: Print ASCII hex char
0000236A                          2831  * DESCRIPTION:    Prints and address register to console in hex (ASCII chars)
0000236A                          2832  * PRE-CONDITION:  A6 contains the register of memory to print.
0000236A                          2833  *                 This parameter would be pre-loaded by, for example:
0000236A                          2834  *                 "LEA FOO_BAR_ADDR,A6" or "LEA $1234FEED,A6"
0000236A                          2835  *                 D3 contains the loops to do (number of bytes).
0000236A                          2836  * POST-CONDITION: 
0000236A                          2837  * REGISTERS:      
0000236A                          2838  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000236A                          2839  PRINT_ASCII_HEX_CHAR
0000236A  48E7 FFFC               2840      MOVEM.L     D0-D7/A0-A5,-(A7) * push data to save
0000236E  4285                    2841      CLR.L       D5
00002370                          2842      
00002370                          2843      * fence post check (if-statement, check if 0 > chars)
00002370  0C03 0000               2844      CMPI.B      #0,D3
00002374  6700 017C               2845      BEQ         INVALID_ASCII_INPUT * go to very last part if invalid
00002378                          2846      
00002378                          2847  *    MOVE.L      A6,D4
00002378  2E0E                    2848      MOVE.L      A6,D7
0000237A                          2849  PRINT_ASCII_LOOP
0000237A                          2850  *    MOVE.L      A6,D7 * increase a6's pointer position ea. loop
0000237A                          2851  *    MOVE.L      D4,D7 * make a mutable copy
0000237A  E99F                    2852      ROL.L       #4,D7 * roll to next spot
0000237C  48E7 0100               2853      MOVEM.L     D7,-(A7) * save D7
00002380                          2854  
00002380  0287 0000000F           2855      ANDI.L      #HEX_VALUE_MASK_LONG,D7
00002386                          2856      
00002386  0C87 00000000           2857      CMPI.L      #0,D7
0000238C  6D00 0164               2858      BLT         INVALID_ASCII_INPUT
00002390                          2859  
00002390  0C87 0000000F           2860      CMPI.L      #15,D7
00002396  6E00 015A               2861      BGT         INVALID_ASCII_INPUT
0000239A                          2862  
0000239A                          2863      * this might be faster... to do later, after entire assignment done
0000239A                          2864       * CMPI.L      #9,D7
0000239A                          2865       * BLE         PRINT_ASCII_0_TO_9
0000239A                          2866  
0000239A  0C87 00000000           2867      CMPI.L      #0,D7
000023A0  6700 0098               2868      BEQ         PRINT_ASCII_0
000023A4  0C87 00000001           2869      CMPI.L      #1,D7
000023AA  6700 0098               2870      BEQ         PRINT_ASCII_1
000023AE  0C87 00000002           2871      CMPI.L      #2,D7
000023B4  6700 0098               2872      BEQ         PRINT_ASCII_2
000023B8  0C87 00000003           2873      CMPI.L      #3,D7
000023BE  6700 0098               2874      BEQ         PRINT_ASCII_3
000023C2  0C87 00000004           2875      CMPI.L      #4,D7
000023C8  6700 0098               2876      BEQ         PRINT_ASCII_4
000023CC  0C87 00000005           2877      CMPI.L      #5,D7
000023D2  6700 0098               2878      BEQ         PRINT_ASCII_5
000023D6  0C87 00000006           2879      CMPI.L      #6,D7
000023DC  6700 0098               2880      BEQ         PRINT_ASCII_6
000023E0  0C87 00000007           2881      CMPI.L      #7,D7
000023E6  6700 0098               2882      BEQ         PRINT_ASCII_7
000023EA  0C87 00000008           2883      CMPI.L      #8,D7
000023F0  6700 0098               2884      BEQ         PRINT_ASCII_8
000023F4  0C87 00000009           2885      CMPI.L      #9,D7
000023FA  6700 0098               2886      BEQ         PRINT_ASCII_9
000023FE  0C87 0000000A           2887      CMPI.L      #10,D7
00002404  6700 0098               2888      BEQ         PRINT_ASCII_A
00002408  0C87 0000000B           2889      CMPI.L      #11,D7
0000240E  6700 0098               2890      BEQ         PRINT_ASCII_B
00002412  0C87 0000000C           2891      CMPI.L      #12,D7
00002418  6700 0098               2892      BEQ         PRINT_ASCII_C
0000241C  0C87 0000000D           2893      CMPI.L      #13,D7
00002422  6700 0098               2894      BEQ         PRINT_ASCII_D
00002426  0C87 0000000E           2895      CMPI.L      #14,D7
0000242C  6700 0098               2896      BEQ         PRINT_ASCII_E
00002430  0C87 0000000F           2897      CMPI.L      #15,D7
00002436  6700 0098               2898      BEQ         PRINT_ASCII_F
0000243A                          2899  PRINT_ASCII_0
0000243A  43F9 000026A0           2900      LEA         ASCII_0,A1
00002440  6000 0098               2901      BRA         PRINT_ASCII_CHAR
00002444                          2902  PRINT_ASCII_1
00002444  43F9 000026A2           2903      LEA         ASCII_1,A1
0000244A  6000 008E               2904      BRA         PRINT_ASCII_CHAR
0000244E                          2905  PRINT_ASCII_2
0000244E  43F9 000026A4           2906      LEA         ASCII_2,A1
00002454  6000 0084               2907      BRA         PRINT_ASCII_CHAR
00002458                          2908  PRINT_ASCII_3
00002458  43F9 000026A6           2909      LEA         ASCII_3,A1
0000245E  6000 007A               2910      BRA         PRINT_ASCII_CHAR
00002462                          2911  PRINT_ASCII_4
00002462  43F9 000026A8           2912      LEA         ASCII_4,A1
00002468  6000 0070               2913      BRA         PRINT_ASCII_CHAR
0000246C                          2914  PRINT_ASCII_5
0000246C  43F9 000026AA           2915      LEA         ASCII_5,A1
00002472  6000 0066               2916      BRA         PRINT_ASCII_CHAR
00002476                          2917  PRINT_ASCII_6
00002476  43F9 000026AC           2918      LEA         ASCII_6,A1
0000247C  6000 005C               2919      BRA         PRINT_ASCII_CHAR
00002480                          2920  PRINT_ASCII_7
00002480  43F9 000026AE           2921      LEA         ASCII_7,A1
00002486  6000 0052               2922      BRA         PRINT_ASCII_CHAR
0000248A                          2923  PRINT_ASCII_8
0000248A  43F9 000026B0           2924      LEA         ASCII_8,A1
00002490  6000 0048               2925      BRA         PRINT_ASCII_CHAR
00002494                          2926  PRINT_ASCII_9
00002494  43F9 000026B2           2927      LEA         ASCII_9,A1
0000249A  6000 003E               2928      BRA         PRINT_ASCII_CHAR
0000249E                          2929  PRINT_ASCII_A
0000249E  43F9 000026B4           2930      LEA         ASCII_A,A1
000024A4  6000 0034               2931      BRA         PRINT_ASCII_CHAR
000024A8                          2932  PRINT_ASCII_B
000024A8  43F9 000026B6           2933      LEA         ASCII_B,A1
000024AE  6000 002A               2934      BRA         PRINT_ASCII_CHAR
000024B2                          2935  PRINT_ASCII_C
000024B2  43F9 000026B8           2936      LEA         ASCII_C,A1
000024B8  6000 0020               2937      BRA         PRINT_ASCII_CHAR
000024BC                          2938  PRINT_ASCII_D
000024BC  43F9 000026BA           2939      LEA         ASCII_D,A1
000024C2  6000 0016               2940      BRA         PRINT_ASCII_CHAR
000024C6                          2941  PRINT_ASCII_E
000024C6  43F9 000026BC           2942      LEA         ASCII_E,A1
000024CC  6000 000C               2943      BRA         PRINT_ASCII_CHAR
000024D0                          2944  PRINT_ASCII_F
000024D0  43F9 000026BE           2945      LEA         ASCII_F,A1
000024D6  6000 0002               2946      BRA         PRINT_ASCII_CHAR
000024DA                          2947  PRINT_ASCII_CHAR
000024DA  103C 000E               2948      MOVE.B      #14,D0
000024DE  4E4F                    2949      TRAP        #15
000024E0                          2950      
000024E0                          2951          
000024E0  4287                    2952      CLR.L       D7
000024E2  4CDF 0080               2953      MOVEM.L     (A7)+,D7 * copy back D7 from stack, to mutate its' bits
000024E6                          2954      
000024E6  5205                    2955      ADD.B       #1,D5 * loop until counter stops
000024E8  BA03                    2956      CMP.B       D3,D5
000024EA  6C00 0006               2957      BGE         PRINT_ASCII_FINISH
000024EE                          2958      
000024EE  6000 FE8A               2959      BRA         PRINT_ASCII_LOOP
000024F2                          2960  INVALID_ASCII_INPUT
000024F2                          2961  PRINT_ASCII_FINISH
000024F2  4CDF 3FFF               2962      MOVEM.L     (A7)+,D0-D7/A0-A5 * pop saved memory
000024F6  4E75                    2963      RTS
000024F8                          2964      
000024F8                          2965  PRINTDATA911
000024F8  0C46 0E00               2966      CMPI    #%0000111000000000, D6   * Print 7
000024FC  6700 003C               2967      BEQ     PRINT7   
00002500  0C46 0C00               2968      CMPI    #%0000110000000000, D6   * Print 6
00002504  6700 0042               2969      BEQ     PRINT6
00002508  0C46 0A00               2970      CMPI    #%0000101000000000, D6   * Print 5
0000250C  6700 0048               2971      BEQ     PRINT5
00002510  0C46 0800               2972      CMPI    #%0000100000000000, D6   * Print 4
00002514  6700 004E               2973      BEQ     PRINT4 
00002518  0C46 0600               2974      CMPI    #%0000011000000000, D6   * Print 3
0000251C  6700 0054               2975      BEQ     PRINT3    
00002520  0C46 0400               2976      CMPI    #%0000010000000000, D6   * Print 2
00002524  6700 005A               2977      BEQ     PRINT2   
00002528  0C46 0200               2978      CMPI    #%0000001000000000, D6   * Print 1
0000252C  6700 0060               2979      BEQ     PRINT1     
00002530  0C46 0000               2980      CMPI    #%0000000000000000, D6   * Print 0
00002534  6700 0066               2981      BEQ     PRINT8
00002538                          2982      
00002538  4E75                    2983      RTS                             * Fail case  
0000253A                          2984      
0000253A                          2985  PRINT7
0000253A  43F9 000026AE           2986      LEA     ASCII_7, A1
00002540  103C 000E               2987      MOVE.B      #14,D0
00002544  4E4F                    2988      TRAP        #15
00002546  4E75                    2989      RTS
00002548                          2990      
00002548                          2991  PRINT6
00002548  43F9 000026AC           2992      LEA     ASCII_6, A1
0000254E  103C 000E               2993      MOVE.B      #14,D0
00002552  4E4F                    2994      TRAP        #15
00002554  4E75                    2995      RTS
00002556                          2996      
00002556                          2997  PRINT5
00002556  43F9 000026AA           2998      LEA     ASCII_5, A1
0000255C  103C 000E               2999      MOVE.B      #14,D0
00002560  4E4F                    3000      TRAP        #15
00002562  4E75                    3001      RTS
00002564                          3002      
00002564                          3003  PRINT4
00002564  43F9 000026A8           3004      LEA     ASCII_4, A1
0000256A  103C 000E               3005      MOVE.B      #14,D0
0000256E  4E4F                    3006      TRAP        #15
00002570  4E75                    3007      RTS
00002572                          3008      
00002572                          3009  PRINT3
00002572  43F9 000026A6           3010      LEA     ASCII_3, A1
00002578  103C 000E               3011      MOVE.B      #14,D0
0000257C  4E4F                    3012      TRAP        #15
0000257E  4E75                    3013      RTS
00002580                          3014      
00002580                          3015  PRINT2
00002580  43F9 000026A4           3016      LEA     ASCII_2, A1
00002586  103C 000E               3017      MOVE.B      #14,D0
0000258A  4E4F                    3018      TRAP        #15
0000258C  4E75                    3019      RTS
0000258E                          3020      
0000258E                          3021  PRINT1
0000258E  43F9 000026A2           3022      LEA     ASCII_1, A1
00002594  103C 000E               3023      MOVE.B      #14,D0
00002598  4E4F                    3024      TRAP        #15
0000259A  4E75                    3025      RTS
0000259C                          3026          
0000259C                          3027  PRINT8
0000259C  43F9 000026B0           3028      LEA     ASCII_8, A1
000025A2  103C 000E               3029      MOVE.B      #14,D0
000025A6  4E4F                    3030      TRAP        #15
000025A8  4E75                    3031      RTS
000025AA                          3032  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000025AA                          3033  *-----------------------------------------------------------------------------
000025AA                          3034  
000025AA                          3035  
000025AA                          3036  
000025AA                          3037  *-----------------------------------------------------------------------------
000025AA                          3038  *-----------------------------------------------------------------------------
000025AA                          3039  * NAME: Bitmask
000025AA                          3040  * DESCRIPTION:    Masks bits in a data register.
000025AA                          3041  * PRE-CONDITION:  D6 contains the starting bit to be masked, and D7 contains
000025AA                          3042  *                 the ending bit.  For example, a starting bit of decimal
000025AA                          3043  *                 value 0 and an ending bit of decimal value 3 will mask the
000025AA                          3044  *                 bits 0, 1, 2, and 3.
000025AA                          3045  * POST-CONDITION: D6 contains the bitmask, ready for use.
000025AA                          3046  * REGISTERS:      D5,D6,D7
000025AA                          3047  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000025AA                          3048  BITMASK
000025AA  3F05                    3049          MOVE    D5,-(A7)    * push D5 onto the stack so we can use it to
000025AC  4245                    3050          CLR     D5          * clear D5 so we can use it
000025AE                          3051  LOOPBIT 
000025AE  0DC5                    3052          BSET    D6,D5       * set the D6th bit in D5 to 1
000025B0  5246                    3053          ADD     #1,D6       * increment D6
000025B2                          3054  
000025B2  BC47                    3055          CMP     D7,D6       * have we finished?
000025B4  6E00 0004               3056          BGT     BITMASKDONE * yes
000025B8  60F4                    3057          BRA     LOOPBIT     * no, iterate again
000025BA                          3058  
000025BA                          3059  BITMASKDONE
000025BA  2C05                    3060          MOVE.L  D5,D6
000025BC  3A1F                    3061          MOVE    (A7)+,D5    * restore D5
000025BE  4E75                    3062          RTS
000025C0                          3063  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000025C0                          3064  *-----------------------------------------------------------------------------
000025C0                          3065  
000025C0                          3066  
000025C0                          3067  
000025C0                          3068  *-----------------------------------------------------------------------------
000025C0                          3069  *-----------------------------------------------------------------------------
000025C0                          3070  * SECTION: Constants/variables used throughout the program.
000025C0                          3071  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000025C0                          3072  
000025C0                          3073  * ---> GENERAL
000025C0  =0000000D               3074  CR          EQU     $0D
000025C0  =0000000A               3075  LF          EQU     $0A
000025C0= 45 4E 54 45 52 20 ...   3076  MSGSTART    DC.B    'ENTER START ADDRESS: ',CR,LF,0
000025D8= 45 4E 54 45 52 20 ...   3077  MSGEND      DC.B    'ENTER END ADDRESS: ',CR,LF,0
000025EE= 48 69 74 20 74 68 ...   3078  CONT_MSG    DC.B    'Hit the [ENTER] key to continue...',CR,LF,0
00002613= 0D 0A 00                3079  NEWLINE     DC.B    CR,LF,0
00002616                          3080  
00002616                          3081  * ---> OPS
00002616= 44 49 56 53 00          3082  DIVSOP      DC.B    'DIVS',0
0000261B= 43 4D 50 00             3083  CMPOP       DC.B    'CMP',0
0000261F= 45 4F 52 00             3084  EOROP       DC.B    'EOR',0
00002623= 4E 4F 50 00             3085  NOOPERATION DC.B    'NOP',0
00002627= 4E 45 47 00             3086  NEGOP       DC.B    'NEG',0
0000262B= 4D 4F 56 45 00          3087  MOVEOP      DC.B    'MOVE',0
00002630= 4D 4F 56 45 4D 00       3088  MOVEMOP     DC.B    'MOVEM',0
00002636= 4A 53 52 00             3089  JSROP       DC.B    'JSR',0
0000263A= 52 54 53 00             3090  RTSOP       DC.B    'RTS',0
0000263E= 53 55 42 51 00          3091  SUBQOP      DC.B    'SUBQ',0
00002643= 4C 45 41 00             3092  LEAOP       DC.B    'LEA',0
00002647= 42 43 4C 52 20 00       3093  BCLROP      DC.B    'BCLR ',0
0000264D= 4D 55 4C 53 00          3094  MULSOP      DC.B    'MULS',0
00002652= 4F 52 00                3095  OROP        DC.B    'OR',0
00002655= 4F 52 49 00             3096  ORIOP       DC.B    'ORI',0
00002659= 43 4D 50 49 00          3097  CMPIOP      DC.B    'CMPI',0
0000265E= 4C 53 4C 00             3098  LSLOP       DC.B    'LSL',0
00002662= 4C 53 52 00             3099  LSROP       DC.B    'LSR',0
00002666= 41 53 4C 00             3100  ASLOP       DC.B    'ASL',0
0000266A= 41 53 52 00             3101  ASROP       DC.B    'ASR',0
0000266E= 52 4F 4C 00             3102  ROLOP       DC.B    'ROL',0
00002672= 52 4F 52 00             3103  ROROP       DC.B    'ROR',0
00002676= 20 44 41 54 41 20 ...   3104  DATA        DC.B    ' DATA $',0
0000267E= 42 43 43 20 00          3105  OP_BCC_MSG  DC.B    'BCC ',0
00002683= 42 43 53 20 00          3106  OP_BCS_MSG  DC.B    'BCS ',0
00002688= 42 47 45 20 00          3107  OP_BGE_MSG  DC.B    'BGE ',0
0000268D= 42 4C 54 20 00          3108  OP_BLT_MSG  DC.B    'BLT ',0
00002692= 42 56 43 20 00          3109  OP_BVC_MSG  DC.B    'BVC ',0
00002697= 42 52 41 20 00          3110  OP_BRA_MSG  DC.B    'BRA ',0
0000269C= 41 44 44 00             3111  OP_ADD_MSG  DC.B    'ADD',0
000026A0                          3112  
000026A0                          3113  * ---> HEX CHARS
000026A0= 30 00                   3114  ASCII_0     DC.B    '0',0
000026A2= 31 00                   3115  ASCII_1     DC.B    '1',0
000026A4= 32 00                   3116  ASCII_2     DC.B    '2',0
000026A6= 33 00                   3117  ASCII_3     DC.B    '3',0
000026A8= 34 00                   3118  ASCII_4     DC.B    '4',0
000026AA= 35 00                   3119  ASCII_5     DC.B    '5',0
000026AC= 36 00                   3120  ASCII_6     DC.B    '6',0
000026AE= 37 00                   3121  ASCII_7     DC.B    '7',0
000026B0= 38 00                   3122  ASCII_8     DC.B    '8',0
000026B2= 39 00                   3123  ASCII_9     DC.B    '9',0
000026B4= 41 00                   3124  ASCII_A     DC.B    'A',0
000026B6= 42 00                   3125  ASCII_B     DC.B    'B',0
000026B8= 43 00                   3126  ASCII_C     DC.B    'C',0
000026BA= 44 00                   3127  ASCII_D     DC.B    'D',0
000026BC= 45 00                   3128  ASCII_E     DC.B    'E',0
000026BE= 46 00                   3129  ASCII_F     DC.B    'F',0
000026C0                          3130  
000026C0                          3131  * ---> SPECIAL CHARACTERS
000026C0= 20 00                   3132  SPACE       DC.B    ' ',0
000026C2= 24 00                   3133  DOLLAR      DC.B    '$',0
000026C4= 23 00                   3134  IMD         DC.B    '#',0
000026C6= 2C 00                   3135  COMMA       DC.B    ',',0
000026C8= 28 00                   3136  OBRACK      DC.B    '(',0
000026CA= 29 00                   3137  CBRACK      DC.B    ')',0
000026CC= 2B 00                   3138  PLUS        DC.B    '+',0
000026CE= 2D 00                   3139  MINUS       DC.B    '-',0
000026D0= 2F 00                   3140  SLASH       DC.B    '/',0
000026D2= 2D 00                   3141  DASH        DC.B    '-',0
000026D4                          3142  
000026D4                          3143  * ---> B/W/L (BYTE, WORD, LONG, RESPECTIVELY)
000026D4= 2E 42 20 00             3144  __B         DC.B    '.B ',0
000026D8= 2E 57 20 00             3145  __W         DC.B    '.W ',0
000026DC= 2E 4C 20 00             3146  __L         DC.B    '.L ',0
000026E0                          3147  
000026E0                          3148  * ---> ADDRESS REGISTERS A0-A7
000026E0= 41 30 00                3149  __A0        DC.B   'A0',0
000026E3= 41 31 00                3150  __A1        DC.B   'A1',0    
000026E6= 41 32 00                3151  __A2        DC.B   'A2',0
000026E9= 41 33 00                3152  __A3        DC.B   'A3',0
000026EC= 41 34 00                3153  __A4        DC.B   'A4',0
000026EF= 41 35 00                3154  __A5        DC.B   'A5',0
000026F2= 41 36 00                3155  __A6        DC.B   'A6',0
000026F5= 41 37 00                3156  __A7        DC.B   'A7',0
000026F8                          3157  
000026F8                          3158  * ---> DATA REGISTERS D0-D7
000026F8= 44 30 00                3159  __D0        DC.B   'D0',0
000026FB= 44 31 00                3160  __D1        DC.B   'D1',0
000026FE= 44 32 00                3161  __D2        DC.B   'D2',0
00002701= 44 33 00                3162  __D3        DC.B   'D3',0
00002704= 44 34 00                3163  __D4        DC.B   'D4',0
00002707= 44 35 00                3164  __D5        DC.B   'D5',0
0000270A= 44 36 00                3165  __D6        DC.B   'D6',0
0000270D= 44 37 00                3166  __D7        DC.B   'D7',0
00002710                          3167  
00002710                          3168  __COUNTER   DS.B    1       * main loop counter
00002711                          3169  
00002711                          3170  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002711                          3171  *-----------------------------------------------------------------------------
00002711                          3172  
00002711                          3173  
00002711                          3174  
00002711                          3175  *-----------------------------------------------------------------------------
00002711                          3176  *-----------------------------------------------------------------------------
00002711                          3177  * SECTION: Sample program to run, then attempt testing disassembly on.
00002711                          3178  * STARTING: 16384
00002711                          3179  * ENDING:   Any even number before 16384 to continue FOREVER
00002711                          3180  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00004000                          3181      ORG $4000
00004000                          3182      
00004000  B200                    3183      CMP.B   D0,D1
00004002  B441                    3184      CMP.W   D1,D2
00004004  B682                    3185      CMP.L   D2,D3
00004006  B248                    3186      CMP     A0,D1
00004008  B25A                    3187      CMP     (A2)+,D1
0000400A  B101                    3188      EOR.B   D0,D1
0000400C  B342                    3189      EOR.W   D1,D2
0000400E  B583                    3190      EOR.L   D2,D3
00004010  B150                    3191      EOR     D0,(A0)
00004012  B359                    3192      EOR     D1,(A1)+
00004014  0000 0003               3193      ORI.B   #3,D0 
00004018  0042 0290               3194      ORI.W   #$290,D2
0000401C  0087 0000000A           3195      ORI.L   #%1010,D7   * $1010 == A
00004022  0043 0002               3196      ORI     #2,D3
00004026  4E71                    3197      NOP
00004028  103C 009A               3198      MOVE.B   #%10011010, D0
0000402C  123C 00A9               3199      MOVE.B   #%10101001, D1
00004030  81FC 0001               3200      DIVS     #1, D0
00004034  D200                    3201      ADD.B    D0,D1
00004036  4C9F 3C1A               3202      MOVEM    (A7)+,A2-A5/D1/D3-D4
0000403A  43F8 2636               3203      LEA      JSROP,A1
0000403E  4467                    3204      NEG.W    -(A7)
00004040  4EB9 00004088           3205      JSR      END
00004046  CFFC 0003               3206      MULS.W  #3, D7
0000404A  CFC0                    3207      MULS    D0, D7
0000404C  C5D9                    3208      MULS    (A1)+, D2
0000404E  4E71                    3209      NOP
00004050  5146                    3210      SUBQ    #8, D6
00004052  4E71                    3211      NOP
00004054  5F81                    3212      SUBQ.L  #7, D1
00004056  4E71                    3213      NOP
00004058  0041 0004               3214      ORI     #4, D1
0000405C  4E71                    3215      NOP
0000405E  E389                    3216      LSL.L   #1,D1
00004060  4E71                    3217      NOP
00004062  E489                    3218      LSR.L   #2,D1
00004064  4E71                    3219      NOP
00004066  E781                    3220      ASL.L   #3,D1
00004068  4E71                    3221      NOP
0000406A  E881                    3222      ASR.L   #4,D1
0000406C  4E71                    3223      NOP
0000406E  EB99                    3224      ROL.L   #5,D1
00004070  4E71                    3225      NOP
00004072  E099                    3226      ROR.L   #8,D1
00004074  4E71                    3227      NOP
00004076  0881 0002               3228      BCLR    #2,D1
0000407A  4E71                    3229      NOP
0000407C  DAC1                    3230      ADDA.W  D1,A5
0000407E  4E71                    3231      NOP
00004080  D803                    3232      ADD.B   D3,D4
00004082  4E71                    3233      NOP
00004084  6000 0004               3234      BRA     RLLYEND
00004088                          3235  
00004088                          3236  END
00004088  4E75                    3237      RTS
0000408A                          3238      
0000408A                          3239  RLLYEND
0000408A                          3240      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_LONG_OP        1AF6
ADDA_PRT            1B32
ADDA_WORD_OP        1A8E
ADD_ADDA_END        1B62
ADD_ADDA_PRINT      1B4A
ADD_ADDA_SPACE      1B24
ADD_EA_DN_GENERIC   1B16
AFORWARDVALID       2288
AINVALID            22C8
ALOOP               2258
ALOOPDONE           230C
ALOOPITER           22FE
ALOOPITERCLR        22FC
ANOSLASH            229C
AS                  1BD8
ASCII_0             26A0
ASCII_1             26A2
ASCII_2             26A4
ASCII_3             26A6
ASCII_4             26A8
ASCII_5             26AA
ASCII_6             26AC
ASCII_7             26AE
ASCII_8             26B0
ASCII_9             26B2
ASCII_A             26B4
ASCII_B             26B6
ASCII_C             26B8
ASCII_D             26BA
ASCII_E             26BC
ASCII_F             26BE
ASL                 1BEE
ASLOP               2666
ASR                 1BFE
ASROP               266A
AVALID              2262
BCC_BYTE_OFFSET     17F8
BCC_END             1814
BCLROP              2647
BITMASK             25AA
BITMASKDONE         25BA
BYTE_DN_EA          1AAE
BYTE_EA_DN          1A46
CBRACK              26CA
CLEAR_SCREEN        11AE
CMPIOP              2659
CMPOP               261B
COMMA               26C6
CONT_MSG            25EE
CR                  D
DASH                26D2
DATA                2676
DFORWARDVALID       21D0
DINVALID            220C
DISPLAY1011         1926
DIVSOP              2616
DLOOP               21A0
DLOOPDONE           224C
DLOOPITER           223E
DLOOPITERCLR        223C
DNOSLASH            21E4
DOLLAR              26C2
DONE0100            16DE
DONE1011            195E
DVALID              21AA
EAHELPER05          1D52
EAHELPER611         1D10
END                 4088
END0000             133E
END67               20E6
END68               215A
ENDEAHELPER05       1EA2
ENDEAHELPER611      1D4C
ENDMODE_AN          2032
ENDMODE_DN          1F32
ENDOP0001           13A4
ENDOP1110           1CF8
END_OF_LOOP         1182
EOROP               261F
HEX_VALUE_MASK_LONG  F
IDLE_STATE          118C
IMD                 26C4
IMD_SIZE_0000       12BE
INVALID_ASCII_INPUT  24F2
ITERATION           116A
JSROP               2636
LEAOP               2643
LF                  A
LONG_DN_EA          1ADE
LONG_EA_DN          1A76
LOOP                104C
LOOPBIT             25AE
LOOPUNKNOWNOP       1166
LS                  1BA2
LSL                 1BB8
LSLOP               265E
LSR                 1BC8
LSROP               2662
MINUS               26CE
MODE_AN             1FA8
MODE_DN             1EA8
MOVEMHELPERPOST     218A
MOVEMHELPERPRE      2312
MOVEMOP             2630
MOVEMTOMEM          14EE
MOVEMTOREG          1454
MOVEOP              262B
MSGEND              25D8
MSGSTART            25C0
MULSOP              264D
NEGOP               2627
NEWLINE             2613
NOOPERATION         2623
NOT0000             1076
NOT0001             1086
NOT0010             1096
NOT0011             10A6
NOT0100             10B6
NOT0101             10C6
NOT0110             10D6
NOT0111             10E6
NOT1000             10F6
NOT1001             1106
NOT1010             1116
NOT1011             1126
NOT1100             1136
NOT1101             1146
NOT1110             1156
NOT67BYTE           20CA
NOT67WORD           20DA
NOTA0               1FCA
NOTA1               1FDA
NOTA2               1FEA
NOTA3               1FFA
NOTA4               200A
NOTA5               201A
NOTA6               202A
NOTADRDIRECT        1D82
NOTADRINDIRECT      1DAA
NOTADRINDIRECTPOST  1DDE
NOTADRINDIRECTPRE   1E12
NOTBCLR             1286
NOTBCLRDYNA         1238
NOTD0               1ECA
NOTD1               1EDA
NOTD2               1EEA
NOTD3               1EFA
NOTD4               1F0A
NOTD5               1F1A
NOTD6               1F2A
NOTDATAREG          1D72
NOTDIVS             189E
NOTEOR              191A
NOTIMMBYTE          1E48
NOTIMMEDIATE        1E9E
NOTIMMWORD          1E76
NOTJSR              15D6
NOTLONGMOVEM1       14BC
NOTLONGMOVEM2       1556
NOTMOVEM            1588
NOTNEG              1430
NOTNOP              13DA
NOTORI              1324
NOTRTS              15F8
OBRACK              26C8
OP0000              11BA
OP0001              1344
OP0010              13AA
OP0011              13B0
OP0100              13BE
OP0101              16E4
OP0110              1752
OP0111              181A
OP1000              1820
OP1000END           18AE
OP1001              18B4
OP1010              18B4
OP1011              18BA
OP1100              1964
OP1101              19EE
OP1110              1B74
OP1110DATAREG       1CCC
OP1110GENERIC       1C44
OP1110IMMEIGHT      1CA4
OP1111              1D0A
OP_0000             0
OP_0001             1000
OP_0010             2000
OP_0011             3000
OP_0100             4000
OP_0101             5000
OP_0110             6000
OP_0111             7000
OP_1000             8000
OP_1001             9000
OP_1010             A000
OP_1011             B000
OP_1100             C000
OP_1101             D000
OP_1110             E000
OP_1111             F000
OP_ADD_MSG          269C
OP_BCC              179C
OP_BCC_MSG          267E
OP_BCS              17A6
OP_BCS_MSG          2683
OP_BGE              17B0
OP_BGE_MSG          2688
OP_BLT              17BA
OP_BLT_MSG          268D
OP_BRA              17CE
OP_BRANCHES_PRINT   17D8
OP_BRA_MSG          2697
OP_BVC              17C4
OP_BVC_MSG          2692
ORIOP               2655
OROP                2652
PLUS                26CC
PRELOOP             231C
PRELOOPDONE         2334
PRELOOPITER         2328
PRESETBIT           2326
PRINT1              258E
PRINT2              2580
PRINT3              2572
PRINT4              2564
PRINT5              2556
PRINT6              2548
PRINT7              253A
PRINT8              259C
PRINTA0             2038
PRINTA1             2046
PRINTA2             2054
PRINTA3             2062
PRINTA4             2070
PRINTA5             207E
PRINTA6             208C
PRINTA7             209A
PRINTBYTE           2160
PRINTBYTE68         2142
PRINTD0             1F38
PRINTD1             1F46
PRINTD2             1F54
PRINTD3             1F62
PRINTD4             1F70
PRINTD5             1F7E
PRINTD6             1F8C
PRINTD7             1F9A
PRINTDATA911        24F8
PRINTLONG           217C
PRINTLONG68         2152
PRINTWORD           216E
PRINTWORD68         214A
PRINT_ASCII_0       243A
PRINT_ASCII_1       2444
PRINT_ASCII_2       244E
PRINT_ASCII_3       2458
PRINT_ASCII_4       2462
PRINT_ASCII_5       246C
PRINT_ASCII_6       2476
PRINT_ASCII_7       2480
PRINT_ASCII_8       248A
PRINT_ASCII_9       2494
PRINT_ASCII_A       249E
PRINT_ASCII_B       24A8
PRINT_ASCII_C       24B2
PRINT_ASCII_CHAR    24DA
PRINT_ASCII_D       24BC
PRINT_ASCII_E       24C6
PRINT_ASCII_F       24D0
PRINT_ASCII_FINISH  24F2
PRINT_ASCII_HEX_CHAR  236A
PRINT_ASCII_LOOP    237A
RLLYEND             408A
RO                  1C0E
ROL                 1C24
ROLOP               266E
ROR                 1C34
ROROP               2672
RTSOP               263A
SIZE67              20A8
SIZE68              20EC
SKIPLONG            1302
SKIPNOTLONG1        14C8
SKIPNOTLONG2        1562
SLASH               26D0
SPACE               26C0
START               1000
SUBQOP              263E
TWOWORDLEA          1688
UNKNOWN0000         133A
UNKNOWN0100         16DA
UNKNOWN0101         174C
UNKNOWN1011         195A
UNKNOWN1100         19E4
UNKNOWNOP           2340
UNKNOWNOP0001       13A0
WORD_DN_EA          1AC6
WORD_EA_DN          1A5E
__A0                26E0
__A1                26E3
__A2                26E6
__A3                26E9
__A4                26EC
__A5                26EF
__A6                26F2
__A7                26F5
__B                 26D4
__COUNTER           2710
__D0                26F8
__D1                26FB
__D2                26FE
__D3                2701
__D4                2704
__D5                2707
__D6                270A
__D7                270D
__L                 26DC
__W                 26D8
