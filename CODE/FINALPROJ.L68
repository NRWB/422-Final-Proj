00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/11/2014 2:41:25 PM

00000000                             1  *    666
00000000                             2  *   66 66
00000000                             3  *  66   66
00000000                             4  *  66   66         8888
00000000                             5  *  66   66       88   kkkk
00000000                             6  *  66  66       8   88   kk      
00000000                             7  *   66  6      8  88  kkk  kk    
00000000                             8  *    66  6    8  88     kk  k
00000000                             9  *     66 66  88 88        kk
00000000                            10  *     6 _______ 8
00000000                            11  *    6    68k    8
00000000                            12  *   6_____PRO_____8
00000000                            13  *  6               8        68k is as easy as
00000000                            14  *  6    0     0    8        6 - 8 - k !
00000000                            15  *  6   /   V   \   8 
00000000                            16  *  6   \__/ \__/   8        Welcome to our Dissasembler, Professor Nash!
00000000                            17  *    6            8         Enjoy your stay!
00000000                            18  *      6        8      
00000000                            19  *        666888
00000000                            20  *  _____                   __    ___  _    
00000000                            21  * | ____|__ _ ___ _   _   / /_  ( _ )| | __
00000000                            22  * |  _| / _` / __| | | | | '_ \ / _ \| |/ /
00000000                            23  * | |__| (_| \__ \ |_| | | (_) | (_) |   < 
00000000                            24  * |_____\__,_|___/\__, |  \___/ \___/|_|\_\
00000000                            25  *                 |___/           
00000000                            26  *-----------------------------------------------------------
00000000                            27  * Title      : 68K Decompiler
00000000                            28  * Written by : Nick Bell, Sammy Nimnuch, Caleb Larson
00000000                            29  * Date       : 11/2014
00000000                            30  * Description: This program decompiles other 68K programs
00000000                            31  *              which are loaded into the simulator simultaneously.
00000000                            32  *-----------------------------------------------------------
00000000                            33  
00000000                            34  
00000000  =00000000                 35  OP_0000     EQU     %0000000000000000
00000000  =00001000                 36  OP_0001     EQU     %0001000000000000
00000000  =00002000                 37  OP_0010     EQU     %0010000000000000
00000000  =00003000                 38  OP_0011     EQU     %0011000000000000
00000000  =00004000                 39  OP_0100     EQU     %0100000000000000
00000000  =00005000                 40  OP_0101     EQU     %0101000000000000
00000000  =00006000                 41  OP_0110     EQU     %0110000000000000
00000000  =00007000                 42  OP_0111     EQU     %0111000000000000
00000000  =00008000                 43  OP_1000     EQU     %1000000000000000
00000000  =00009000                 44  OP_1001     EQU     %1001000000000000
00000000  =0000A000                 45  OP_1010     EQU     %1010000000000000
00000000  =0000B000                 46  OP_1011     EQU     %1011000000000000
00000000  =0000C000                 47  OP_1100     EQU     %1100000000000000
00000000  =0000D000                 48  OP_1101     EQU     %1101000000000000
00000000  =0000E000                 49  OP_1110     EQU     %1110000000000000
00000000  =0000F000                 50  OP_1111     EQU     %1111000000000000
00000000  =0000000F                 51  HEX_VALUE_MASK_LONG EQU     $0000000F  * mask a hex value in 32-bits
00000000                            52  
00000000                            53  * BITMASK     EQU     $F000       * used to bitmask the first nibble
00000000                            54  
00001000                            55  START:  ORG    $1000            * first instruction of program
00001000                            56  
00001000                            57  * -----------------------------------
00001000                            58  * Starting and Ending Addresses
00001000                            59  * -----------------------------------
00001000                            60  *-----------------------------------------------------------------------------
00001000                            61  *-----------------------------------------------------------------------------
00001000                            62  * NAME: x
00001000                            63  * DESCRIPTION:    a
00001000                            64  * PRE-CONDITION:  b
00001000                            65  * POST-CONDITION: c
00001000                            66  * REGISTERS:      d
00001000                            67  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001000                            68  
00001000                            69  * THINK ABOUT ASKING FOR VALID START/END NO NEGATIVE ADDR
00001000                            70  
00001000                            71  * LOAD MSGSTART, ASK FOR INPUT
00001000  43F9 000024CC             72          LEA     MSGSTART,A1     * Load MESSAGE START
00001006  103C 000E                 73          MOVE.B  #14,D0          * Trap #14 to display message
0000100A  4E4F                      74          TRAP    #15             * Perform #14
0000100C                            75          
0000100C                            76  * GETS THE STARTING ADDRESS
0000100C  103C 0004                 77          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001010  4E4F                      78          TRAP    #15             * Perform #15
00001012                            79          
00001012                            80  * MOVE IT TO ANOTHER ADDRESS REGISTER
00001012  2441                      81          MOVEA.L D1,A2           * Move the user input into A2. This is the starting address.
00001014                            82  
00001014                            83  * LOAD MSGSTART, ASK FOR INPUT
00001014  43F9 000024E4             84          LEA     MSGEND,A1       * Load MESSAGE END
0000101A  303C 000E                 85          MOVE.W  #14,D0          * Trap #14 to display message
0000101E  4E4F                      86          TRAP    #15             * Perform #14
00001020                            87          
00001020                            88  * GETS THE ENDING ADDRESS
00001020  103C 0004                 89          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001024  4E4F                      90          TRAP    #15             * Perform Trap #4
00001026  2A01                      91          MOVE.L  D1,D5           * Move the ending address into D5
00001028  43F9 000024FA             92          LEA     NEWLINE,A1      * Store newline variable for seper opcodes
0000102E                            93          
0000102E  3E3C 000F                 94          MOVE.W  #15,D7          * prep D7 for bitmask subroutine
00001032  3C3C 000C                 95          MOVE.W  #12,D6          * prep D6 for bitmask subroutine
00001036  6100 147E                 96          BSR     BITMASK         * obtain a bitmask that goes from 12-15 (inclusive)
0000103A                            97          * MOVE.W  D6,D2           * move the bitmask to D2
0000103A                            98          
0000103A                            99  LOOP    
0000103A                           100  
0000103A  2C4A                     101          MOVE.L  A2,A6
0000103C  7608                     102          MOVE.L  #8,D3
0000103E  6100 1236                103          BSR     PRINT_ASCII_HEX_CHAR
00001042                           104          
00001042                           105          *MOVE.W  A2,D1           * print what address we are processing
00001042                           106          *MOVE.B  #3,D0
00001042                           107          *TRAP    #15
00001042                           108          
00001042  43F9 0000259F            109          LEA     SPACE,A1        * print a space to seperate the address from the data
00001048  303C 000E                110          MOVE.W  #14,D0
0000104C  4E4F                     111          TRAP    #15
0000104E                           112  
0000104E  3F06                     113          MOVE    D6,-(A7)        * save the bitmask on the stack
00001050  341A                     114          MOVE.W  (A2)+,D2        * Read an operation into D2
00001052  CC42                     115          AND.W   D2,D6           * Apply this bitmask
00001054                           116          
00001054  BC7C 0000                117          CMP     #OP_0000,D6     * Does the operation start with 0000?
00001058  6600 000A                118          BNE     NOT0000         * No, check next case
0000105C  6100 0106                119          BSR     OP0000          * Branch to subroutine 0000
00001060  6000 00F6                120          BRA     ITERATION       * Move to next iteration of the loop
00001064                           121  NOT0000        
00001064  BC7C 1000                122          CMP     #OP_0001,D6     * Does the operation start with 0001?
00001068  6600 000A                123          BNE     NOT0001         * No, check next case
0000106C  6100 029E                124          BSR     OP0001          * Branch to subroutine 0001
00001070  6000 00E6                125          BRA     ITERATION       * Move to next iteration of the loop
00001074                           126  NOT0001
00001074  BC7C 2000                127          CMP     #OP_0010,D6     * Does the operation start with 0010?
00001078  6600 000A                128          BNE     NOT0010         * No, check next case
0000107C  6100 02F4                129          BSR     OP0010          * Branch to subroutine 0010
00001080  6000 00D6                130          BRA     ITERATION       * Move to next iteration of the loop
00001084                           131  NOT0010
00001084  BC7C 3000                132          CMP     #OP_0011,D6     * Does the operation start with 0011?
00001088  6600 000A                133          BNE     NOT0011         * No, check next case
0000108C  6100 02EA                134          BSR     OP0011          * Branch to subroutine 0011
00001090  6000 00C6                135          BRA     ITERATION       * Move to next iteration of the loop
00001094                           136  NOT0011
00001094  BC7C 4000                137          CMP     #OP_0100,D6     * Does the operation start with 0100?
00001098  6600 000A                138          BNE     NOT0100         * No, check next case
0000109C  6100 02E8                139          BSR     OP0100          * Branch to subroutine 0100
000010A0  6000 00B6                140          BRA     ITERATION       * Move to next iteration of the loop
000010A4                           141  NOT0100
000010A4  BC7C 5000                142          CMP     #OP_0101,D6     * Does the operation start with 0101?
000010A8  6600 000A                143          BNE     NOT0101         * No, check next case
000010AC  6100 0602                144          BSR     OP0101          * Branch to subroutine 0101
000010B0  6000 00A6                145          BRA     ITERATION       * Move to next iteration of the loop
000010B4                           146  NOT0101
000010B4  BC7C 6000                147          CMP     #OP_0110,D6     * Does the operation start with 0110?
000010B8  6600 000A                148          BNE     NOT0110         * No, check next case
000010BC  6100 0660                149          BSR     OP0110          * Branch to subroutine 0110
000010C0  6000 0096                150          BRA     ITERATION       * Move to next iteration of the loop
000010C4                           151  NOT0110
000010C4  BC7C 7000                152          CMP     #OP_0111,D6     * Does the operation start with 0111?
000010C8  6600 000A                153          BNE     NOT0111         * No, check next case
000010CC  6100 0718                154          BSR     OP0111          * Branch to subroutine 0111
000010D0  6000 0086                155          BRA     ITERATION       * Move to next iteration of the loop
000010D4                           156  NOT0111
000010D4  BC7C 8000                157          CMP     #OP_1000,D6     * Does the operation start with 1000?
000010D8  6600 000A                158          BNE     NOT1000         * No, check next case
000010DC  6100 070E                159          BSR     OP1000          * Branch to subroutine 1000
000010E0  6000 0076                160          BRA     ITERATION       * Move to next iteration of the loop
000010E4                           161  NOT1000
000010E4  BC7C 9000                162          CMP     #OP_1001,D6     * Does the operation start with 1001?
000010E8  6600 000A                163          BNE     NOT1001         * No, check next case
000010EC  6100 0792                164          BSR     OP1001          * Branch to subroutine 1001
000010F0  6000 0066                165          BRA     ITERATION       * Move to next iteration of the loop
000010F4                           166  NOT1001
000010F4  BC7C A000                167          CMP     #OP_1010,D6     * Does the operation start with 1010?
000010F8  6600 000A                168          BNE     NOT1010         * No, check next case
000010FC  6100 0782                169          BSR     OP1010          * Branch to subroutine 1010
00001100  6000 0056                170          BRA     ITERATION       * Move to next iteration of the loop
00001104                           171  NOT1010
00001104  BC7C B000                172          CMP     #OP_1011,D6     * Does the operation start with 1011?
00001108  6600 000A                173          BNE     NOT1011         * No, check next case
0000110C  6100 0778                174          BSR     OP1011          * Branch to subroutine 1011
00001110  6000 0046                175          BRA     ITERATION       * Move to next iteration of the loop
00001114                           176  NOT1011
00001114  BC7C C000                177          CMP     #OP_1100,D6     * Does the operation start with 1100?
00001118  6600 000A                178          BNE     NOT1100         * No, check next case
0000111C  6100 076E                179          BSR     OP1100          * Branch to subroutine 1100
00001120  6000 0036                180          BRA     ITERATION       * Move to next iteration of the loop
00001124                           181  NOT1100
00001124  BC7C D000                182          CMP     #OP_1101,D6     * Does the operation start with 1101?
00001128  6600 000A                183          BNE     NOT1101         * No, check next case
0000112C  6100 07E8                184          BSR     OP1101          * Branch to subroutine 1101
00001130  6000 0026                185          BRA     ITERATION       * Move to next iteration of the loop
00001134                           186  NOT1101
00001134  BC7C E000                187          CMP     #OP_1110,D6     * Does the operation start with 1110?
00001138  6600 000A                188          BNE     NOT1110         * No, check next case
0000113C  6100 095E                189          BSR     OP1110          * Branch to subroutine 1110
00001140  6000 0016                190          BRA     ITERATION       * Move to next iteration of the loop
00001144                           191  NOT1110
00001144  BC7C F000                192          CMP     #OP_1111,D6     * Does the operation start with 1111?
00001148  6600 000A                193          BNE     LOOPUNKNOWNOP   * No, check next case
0000114C  6100 0AE4                194          BSR     OP1111          * Branch to subroutine 1111
00001150  6000 0006                195          BRA     ITERATION       * Move to next iteration of the loop
00001154                           196          
00001154                           197  LOOPUNKNOWNOP
00001154  6100 10F6                198          BSR     UNKNOWNOP
00001158                           199          
00001158                           200  ITERATION
00001158  3C1F                     201          MOVE    (A7)+,D6        * restore the bitmask to its previous state
0000115A                           202  
0000115A                           203          *MOVE.B  #14,D0          * Print a newline
0000115A                           204          *TRAP    #15             * Perform Trap #14
0000115A                           205  
0000115A  BA4A                     206          CMP     A2,D5           * Compare the starting address to ending address
0000115C  6700 2EF0                207          BEQ     END             * If they are equal, branch 
00001160  6000 FED8                208          BRA     LOOP            * Otherwise, branch back to LOOP
00001164                           209  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001164                           210  *-----------------------------------------------------------------------------
00001164                           211  
00001164                           212  
00001164                           213  
00001164                           214  *-----------------------------------------------------------------------------
00001164                           215  *-----------------------------------------------------------------------------
00001164                           216  * NAME: OP_0000   (BCLR, ORI, CMPI)
00001164                           217  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001164                           218  * PRE-CONDITION:  xyz
00001164                           219  * POST-CONDITION: All registers return to their previous state, and the output
00001164                           220  *                 goes to the output console for reading the raw data or the
00001164                           221  *                 actual instruction.
00001164                           222  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001164                           223  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001164                           224  OP0000
00001164  48A7 FFC0                225          MOVEM   D0-D7/A0-A1,-(A7)   * Push values to the stack to save
00001168  3C3C 0006                226          MOVE.W  #6, D6              * Prep lower value for bitmask
0000116C  3E3C 0008                227          MOVE.W  #8, D7              * Prep upper value for bitmask
00001170  6100 1344                228          BSR     BITMASK             * Finalize bitmask setup
00001174  CC42                     229          AND     D2,D6               * Apply bitmask
00001176                           230          
00001176  0C46 0180                231          CMPI    #%0000000110000000, D6  * Are we BCLR Dynamic?
0000117A  6600 0066                232          BNE     NOTBCLRDYNA             * If not, branch to BCLR Static or other ops
0000117E                           233          
0000117E                           234          * Checking for unsupported mode
0000117E  3C3C 0003                235          MOVE.W  #3, D6              * Prep lower value for bitmask
00001182  3E3C 0005                236          MOVE.W  #5, D7              * Prep upper value for bitmask
00001186  6100 132E                237          BSR     BITMASK             * Finalize bitmask setup
0000118A  CC42                     238          AND     D2,D6               * Apply bitmask
0000118C                           239          
0000118C  0C46 0008                240          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
00001190  6700 0170                241          BEQ     UNKNOWN0000             * If so, the op is unknown
00001194                           242          
00001194                           243          * Confirmed BCLR at this point
00001194  43F9 00002526            244          LEA     BCLROP,A1           * We found BCLR
0000119A  103C 000E                245          MOVE.B  #14,D0              * Trap #14 prints out the data
0000119E  4E4F                     246          TRAP    #15                 * Perform Trap #14
000011A0                           247  
000011A0  43F9 0000259F            248          LEA     SPACE,A1            * Formatting
000011A6  103C 000E                249          MOVE.B  #14,D0              * Trap #14 prints out space
000011AA  4E4F                     250          TRAP    #15                 * Perform Trap #14
000011AC                           251          
000011AC                           252          * Set up for printing out the Register
000011AC  0882 0006                253          BCLR    #6,D2               * Clear bit 6
000011B0  0882 0007                254          BCLR    #7,D2               * Clear bit 7
000011B4  0882 0008                255          BCLR    #8,D2               * Clear bit 8
000011B8                           256          
000011B8  6100 0A7E                257          BSR     EAHELPER611         * Print out Register
000011BC                           258  
000011BC  43F9 000025A5            259          LEA     COMMA,A1            * formatting
000011C2  103C 000E                260          MOVE.B  #14,D0              * Trap #14 prints out a comma
000011C6  4E4F                     261          TRAP    #15                 * Perform Trap #14
000011C8                           262          
000011C8  4243                     263          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
000011CA  08C3 0000                264          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
000011CE                           265      
000011CE  6100 0AAA                266          BSR     EAHELPER05          * Print out data.
000011D2                           267          
000011D2  43F9 000024FA            268          LEA     NEWLINE,A1          * Formatting
000011D8  103C 000E                269          MOVE.B  #14,D0              * Trap #14 prints out the data
000011DC  4E4F                     270          TRAP    #15                 * Perform Trap #14
000011DE                           271          
000011DE  6000 0126                272          BRA     END0000             * Found the op, move to next iteration
000011E2                           273          
000011E2                           274  NOTBCLRDYNA
000011E2  3C3C 0006                275          MOVE.W  #6, D6              * Prep lower value for bitmask
000011E6  3E3C 000B                276          MOVE.W  #11, D7             * Prep upper value for bitmask
000011EA  6100 12CA                277          BSR     BITMASK             * Finalize bitmask setup
000011EE  CC42                     278          AND     D2,D6               * Apply bitmask
000011F0                           279          
000011F0  0C46 0880                280          CMPI    #%0000100010000000, D6  * Are we BCLR Static?
000011F4  6600 0050                281          BNE     NOTBCLR                 * If not, branch to other functions
000011F8                           282          
000011F8                           283          * Checking for unsupported mode
000011F8  3C3C 0003                284          MOVE.W  #3, D6              * Prep lower value for bitmask
000011FC  3E3C 0005                285          MOVE.W  #5, D7              * Prep upper value for bitmask
00001200  6100 12B4                286          BSR     BITMASK             * Finalize bitmask setup
00001204  CC42                     287          AND     D2,D6               * Apply bitmask
00001206                           288          
00001206  0C46 0008                289          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
0000120A  6700 00F6                290          BEQ     UNKNOWN0000             * If so, the op is unknown
0000120E                           291          
0000120E                           292          * Confirmed BCLR Static at this point
0000120E  43F9 00002526            293          LEA     BCLROP,A1           * We found BCLR
00001214  103C 000E                294          MOVE.B  #14,D0              * Trap #14 prints out the data
00001218  4E4F                     295          TRAP    #15                 * Perform Trap #14
0000121A                           296  
0000121A  43F9 0000259F            297          LEA     SPACE,A1            * Formatting
00001220  103C 000E                298          MOVE.B  #14,D0              * Trap #14 prints out space
00001224  4E4F                     299          TRAP    #15                 * Perform Trap #14
00001226                           300          
00001226  2802                     301          MOVE.L  D2, D4              * Saving values
00001228                           302                  
00001228  43F9 000025A3            303          LEA     IMD, A1             * Formatting
0000122E  103C 000E                304          MOVE.B  #14,D0              * Trap #14 prints out the data
00001232  4E4F                     305          TRAP    #15                 * Perform Trap #14
00001234                           306          
00001234                           307          * Grab next word
00001234  3A1A                     308          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
00001236  E18D                     309          LSL.L   #8, D5              * LSL for first nibble of the word
00001238  E18D                     310          LSL.L   #8, D5              * LSL for second nibble of the word
0000123A  2C45                     311          MOVE.L  D5, A6              * Store D5 into A6, to be used as parameter
0000123C  7604                     312          MOVE.L  #4, D3              * Four most significant bits in D3
0000123E  6100 1036                313          BSR     PRINT_ASCII_HEX_CHAR    * Perform number print out
00001242                           314  
00001242  6000 0094                315          BRA     SKIPLONG            * Formatting, returning saved values, etc.
00001246                           316          
00001246                           317  NOTBCLR * Possible options left are ORI or CMPI
00001246  3C3C 0009                318          MOVE.W  #9, D6              * Prep lower value for bitmask
0000124A  3E3C 000B                319          MOVE.W  #11, D7             * Prep upper value for bitmask
0000124E  6100 1266                320          BSR     BITMASK             * Finalize bitmask setup
00001252  CC42                     321          AND     D2,D6               * Apply bitmask
00001254                           322          
00001254  0C46 0000                323          CMPI    #%0000000000000000, D6   * Are we possibly ORI?
00001258  6600 00A0                324          BNE     NOTORI                   * If not, branch to NOTORI
0000125C                           325          
0000125C                           326          * Size check to see if unsupported ORI mode
0000125C  3C3C 0006                327          MOVE.W  #6, D6              * Prep lower value for bitmask
00001260  3E3C 0007                328          MOVE.W  #7, D7              * Prep upper value for bitmask
00001264  6100 1250                329          BSR     BITMASK             * Finalize bitmask setup
00001268  CC42                     330          AND     D2,D6               * Apply bitmask
0000126A                           331          
0000126A  0C46 00C0                332          CMPI    #%0000000011000000, D6  * Are bits 6,7 == 1,1?
0000126E  6700 0092                333          BEQ     UNKNOWN0000             * If so, unknown op. 
00001272                           334          
00001272                           335          * Mode check to see if unsupported ORI mode
00001272  3C3C 0003                336          MOVE.W  #3, D6              * Prep lower value for bitmask
00001276  3E3C 0005                337          MOVE.W  #5, D7              * Prep upper value for bitmask
0000127A  6100 123A                338          BSR     BITMASK             * Finalize bitmask setup
0000127E  CC42                     339          AND     D2,D6               * Apply bitmask
00001280                           340          
00001280  0C46 0008                341          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
00001284  6700 007C                342          BEQ     UNKNOWN0000             * If so, unknown op. 
00001288                           343          
00001288                           344          * Confirmed ORI at this point
00001288  43F9 00002534            345          LEA     ORIOP, A1           * Load 'ORI' into the output window
0000128E  103C 000E                346          MOVE.B  #14,D0              * Trap #14 prints out the data in D0
00001292  4E4F                     347          TRAP    #15                 * Perform Trap #14
00001294                           348          
00001294  6100 0D3A                349          BSR     SIZE67              * Print the size
00001298                           350  
00001298                           351          * Mode check to see the size
00001298  3C3C 0006                352          MOVE.W  #6, D6              * Prep lower value for bitmask
0000129C  3E3C 0007                353          MOVE.W  #7, D7              * Prep upper value for bitmask
000012A0  6100 1214                354          BSR     BITMASK             * Finalize bitmask setup
000012A4  CC42                     355          AND     D2,D6               * Apply bitmask
000012A6                           356          
000012A6  2802                     357          MOVE.L  D2, D4              * Saving stuff
000012A8                           358                  
000012A8  43F9 000025A3            359          LEA     IMD, A1             * Formatting
000012AE  103C 000E                360          MOVE.B  #14,D0              * Trap #14 prints out the data
000012B2  4E4F                     361          TRAP    #15                 * Perform Trap #14
000012B4                           362                 
000012B4                           363          * Grab immediate data
000012B4  3A1A                     364          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
000012B6  E18D                     365          LSL.L   #8, D5               
000012B8  E18D                     366          LSL.L   #8, D5
000012BA  2C45                     367          MOVE.L  D5, A6
000012BC  7604                     368          MOVE.L  #4, D3
000012BE  6100 0FB6                369          BSR     PRINT_ASCII_HEX_CHAR
000012C2                           370  
000012C2  0C46 0080                371          CMPI    #%0000000010000000, D6   * See if the size is a LONG
000012C6  6600 0010                372          BNE     SKIPLONG    
000012CA                           373          
000012CA                           374          * Grab next word
000012CA  3A1A                     375          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
000012CC  E18D                     376          LSL.L   #8, D5
000012CE  E18D                     377          LSL.L   #8, D5
000012D0  2C45                     378          MOVE.L  D5, A6
000012D2  7604                     379          MOVE.L  #4, D3
000012D4  6100 0FA0                380          BSR     PRINT_ASCII_HEX_CHAR
000012D8                           381  
000012D8                           382  SKIPLONG
000012D8  43F9 000025A5            383          LEA     COMMA, A1           * Formatting
000012DE  103C 000E                384          MOVE.B  #14,D0              * Trap #14 prints out the data
000012E2  4E4F                     385          TRAP    #15                 * Perform Trap #14
000012E4                           386          
000012E4  2404                     387          MOVE.L  D4, D2              * Return stuff
000012E6                           388          
000012E6  6100 0992                389          BSR     EAHELPER05          * Print out the EA
000012EA                           390          
000012EA  43F9 000024FA            391          LEA     NEWLINE,A1          * Formatting
000012F0  103C 000E                392          MOVE.B  #14,D0              * Trap #14 prints out the data
000012F4  4E4F                     393          TRAP    #15                 * Perform Trap #14
000012F6                           394          
000012F6  6000 000E                395          BRA     END0000             * Done with op. Move to next iteration
000012FA                           396  
000012FA                           397  NOTORI  * Possible option left is CMPI
000012FA                           398  
000012FA  0C46 0C00                399          CMPI    #%0000110000000000, D6  * Are we CMPI?
000012FE  6600 0002                400          BNE     UNKNOWN0000             * If not, unknown op
00001302                           401          
00001302                           402          * TODO: Continue checking for CMPI validity
00001302                           403          
00001302                           404  UNKNOWN0000
00001302  6100 0F48                405          BSR     UNKNOWNOP          * Unknown op
00001306                           406          
00001306                           407  END0000          
00001306  4C9F 03FF                408         MOVEM   (A7)+,D0-D7/A0-A1   * Push values to the stack to save
0000130A  4E75                     409         RTS
0000130C                           410  
0000130C                           411  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000130C                           412  *-----------------------------------------------------------------------------
0000130C                           413  
0000130C                           414  
0000130C                           415  
0000130C                           416  *-----------------------------------------------------------------------------
0000130C                           417  *-----------------------------------------------------------------------------
0000130C                           418  * NAME: OP_0001   (MOVE.B)
0000130C                           419  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000130C                           420  * PRE-CONDITION:  xyz
0000130C                           421  * POST-CONDITION: All registers return to their previous state, and the output
0000130C                           422  *                 goes to the output console for reading the raw data or the
0000130C                           423  *                 actual instruction.
0000130C                           424  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000130C                           425  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000130C                           426  OP0001  
0000130C  48A7 FFC0                427          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
00001310  3C3C 0006                428          MOVE.W  #6, D6              * Prep lower value for bitmask
00001314  3E3C 0008                429          MOVE.W  #8, D7              * Prep upper value for bitmask
00001318  6100 119C                430          BSR     BITMASK             * Finalize bitmask setup
0000131C  CC42                     431          AND     D2,D6               * Apply bitmask
0000131E                           432          
0000131E                           433          * I may have fucked off this part, sorry - Caleb
0000131E                           434          * CMPI    #%0000000001000000, D6  * Is the destination mode 001?
0000131E                           435          * BNE     UNKNOWNOP0001                 * If so, it's unknown.
0000131E                           436          
0000131E  43F9 0000250A            437          LEA     MOVEOP,A1   * Put 'MOVE' into the window
00001324  103C 000E                438          MOVE.B  #14,D0      * Trap #14 to print out
00001328  4E4F                     439          TRAP    #15         * Perform Trap #14
0000132A                           440          
0000132A                           441          *-----------------------------------------------------------
0000132A                           442          * the following code is to move the size bits into the
0000132A                           443          * 0-1 positions of D3 so that eahelper05 case use that as a "parameter"
0000132A                           444          * for eahelper05
0000132A                           445          
0000132A  3C3C 000C                446          MOVE.W  #12, D6              * Prep lower value for bitmask
0000132E  3E3C 000D                447          MOVE.W  #13, D7              * Prep upper value for bitmask
00001332  6100 1182                448          BSR     BITMASK              * Finalize bitmask setup
00001336  CC42                     449          AND     D2,D6                * Apply bitmask
00001338                           450          
00001338  E04E                     451          LSR     #8,D6
0000133A  E84E                     452          LSR     #4,D6
0000133C                           453          
0000133C  4243                     454          CLR     D3
0000133E                           455          
0000133E  1606                     456          MOVE.B  D6,D3
00001340                           457          
00001340                           458          *---------------------------------------------------------------
00001340                           459          
00001340                           460          
00001340  6100 0C8E                461          BSR     SIZE67
00001344  6100 0934                462          BSR     EAHELPER05
00001348                           463          
00001348  43F9 000025A5            464          LEA     COMMA,A1
0000134E  103C 000E                465          MOVE.B  #14,D0
00001352  4E4F                     466          TRAP    #15
00001354                           467          
00001354  6100 08E2                468          BSR     EAHELPER611
00001358                           469          
00001358  43F9 000024FA            470          LEA     NEWLINE,A1
0000135E  103C 000E                471          MOVE.B  #14,D0
00001362  4E4F                     472          TRAP    #15
00001364                           473          
00001364  6000 0006                474          BRA     ENDOP0001
00001368                           475          *LEA     __B,A1      * Put '.B' into the window
00001368                           476          *MOVE.B  #14,D0      * Trap #14 to print out
00001368                           477          *TRAP    #15         * Perform Trap #14
00001368                           478          
00001368                           479  UNKNOWNOP0001
00001368  6100 0EE2                480          BSR     UNKNOWNOP
0000136C                           481          
0000136C                           482  ENDOP0001
0000136C  4C9F 03FF                483          MOVEM (A7)+,D0-D7/A0-A1
00001370  4E75                     484          RTS        
00001372                           485          
00001372                           486          * TODO: DETERMINE THE MODE AND REG FOR DESTINATION AND SOURCE
00001372                           487  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001372                           488  *-----------------------------------------------------------------------------
00001372                           489  
00001372                           490  
00001372                           491  
00001372                           492  *-----------------------------------------------------------------------------
00001372                           493  *-----------------------------------------------------------------------------
00001372                           494  * NAME: OP_0010   (MOVE.L, MOVEA.L)
00001372                           495  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001372                           496  * PRE-CONDITION:  xyz
00001372                           497  * POST-CONDITION: All registers return to their previous state, and the output
00001372                           498  *                 goes to the output console for reading the raw data or the
00001372                           499  *                 actual instruction.
00001372                           500  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001372                           501  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001372                           502  OP0010
00001372                           503  
00001372  6100 0ED8                504      BSR     UNKNOWNOP
00001376  4E75                     505      RTS
00001378                           506  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001378                           507  *-----------------------------------------------------------------------------
00001378                           508  
00001378                           509  
00001378                           510  
00001378                           511  *-----------------------------------------------------------------------------
00001378                           512  *-----------------------------------------------------------------------------
00001378                           513  * NAME: OP_0011   (MOVE.W, MOVEA.W)
00001378                           514  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001378                           515  * PRE-CONDITION:  xyz
00001378                           516  * POST-CONDITION: All registers return to their previous state, and the output
00001378                           517  *                 goes to the output console for reading the raw data or the
00001378                           518  *                 actual instruction.
00001378                           519  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001378                           520  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001378                           521  OP0011
00001378  48A7 FFFE                522      MOVEM   D0-D7/A0-A6, -(A7)
0000137C                           523      
0000137C                           524      *MOVE.W  #6,D6
0000137C                           525      *MOVE.W  #8,D7
0000137C                           526      
0000137C                           527      *BSR     BITMASK
0000137C                           528      
0000137C                           529      *AND.W   D2,D6
0000137C                           530      
0000137C                           531      *CMP     #%0000000001000000,D6
0000137C                           532      *BNE     NEXT15
0000137C                           533      *BSR     * for MOVEA.W
0000137C                           534      
0000137C  4C9F 7FFF                535      MOVEM   (A7)+,D0-D7/A0-A6
00001380                           536      
00001380  6100 0ECA                537      BSR     UNKNOWNOP
00001384  4E75                     538      RTS
00001386                           539  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001386                           540  *-----------------------------------------------------------------------------
00001386                           541  
00001386                           542  *-----------------------------------------------------------------------------
00001386                           543  *-----------------------------------------------------------------------------
00001386                           544  * NAME: OP_0100   (NOP, MOVEM, LEA, NEG, JSR, RTS)
00001386                           545  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001386                           546  * PRE-CONDITION:  xyz
00001386                           547  * POST-CONDITION: All registers return to their previous state, and the output
00001386                           548  *                 goes to the output console for reading the raw data or the
00001386                           549  *                 actual instruction.
00001386                           550  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001386                           551  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001386                           552  OP0100  
00001386                           553          * TODO: movem
00001386                           554  
00001386  48A7 C0C0                555          MOVEM   D0-D1/A0-A1,-(A7) * Push values to the stack to save
0000138A                           556          
0000138A                           557          *NOP
0000138A  0C42 4E71                558          CMPI    #%0100111001110001,D2
0000138E  6600 0012                559          BNE     NOTNOP
00001392                           560          
00001392  43F9 00002502            561          LEA     NOOPERATION,A1
00001398  103C 000D                562          MOVE.B  #13,D0          * Print a newline
0000139C  4E4F                     563          TRAP    #15
0000139E                           564          
0000139E  6000 0306                565          BRA     DONE0100 *we found it, move on to the next iteration
000013A2                           566  NOTNOP *NEG
000013A2                           567          
000013A2                           568          * prep values for BITMASK subroutine
000013A2  7C08                     569          MOVE.L  #8,D6
000013A4  7E0B                     570          MOVE.L  #11,D7
000013A6                           571          
000013A6  6100 110E                572          BSR     BITMASK
000013AA                           573          
000013AA  CC42                     574          AND     D2,D6                   * apply bitmask
000013AC                           575          
000013AC  0C46 0400                576          CMPI    #%0000010000000000,D6   * are we NEG?
000013B0  6600 0046                577          BNE     NOTNEG                  * not neg
000013B4                           578          
000013B4  7C03                     579          MOVE.L  #3,D6
000013B6  7E05                     580          MOVE.L  #5,D7
000013B8                           581          
000013B8  6100 10FC                582          BSR     BITMASK * generate a bitmask to be used to check mode
000013BC                           583          
000013BC  0C46 0008                584          CMPI    #%0000000000001000,D6 * check to see if it is the unsupported mode
000013C0  6700 02E0                585          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
000013C4                           586          
000013C4  0C46 0028                587          CMPI    #%0000000000101000,D6 * check to see if it is the unsupported mode
000013C8  6700 02D8                588          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
000013CC                           589          
000013CC  0C46 0030                590          CMPI    #%0000000000110000,D6 * check to see if it is the unsupported mode
000013D0  6700 02D0                591          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
000013D4                           592        
000013D4                           593          * it is NEG, print
000013D4  43F9 00002506            594          LEA     NEGOP,A1
000013DA  103C 000E                595          MOVE.B  #14,D0
000013DE  4E4F                     596          TRAP    #15
000013E0                           597          
000013E0  6100 0BEE                598          BSR     SIZE67
000013E4                           599          
000013E4  6100 0894                600          BSR     EAHELPER05
000013E8                           601          
000013E8  43F9 000024FA            602          LEA     NEWLINE,A1
000013EE  103C 000E                603          MOVE.B  #14,D0
000013F2  4E4F                     604          TRAP    #15
000013F4                           605          
000013F4  6000 02B0                606          BRA     DONE0100 * we found the op, move to next iteration
000013F8                           607          
000013F8                           608  NOTNEG *MOVEM
000013F8                           609  
000013F8                           610          * prep values for BITMASK subroutine
000013F8  7C07                     611          MOVE.L  #7,D6
000013FA  7E09                     612          MOVE.L  #9,D7
000013FC                           613          
000013FC  6100 10B8                614          BSR     BITMASK
00001400                           615          
00001400  CC82                     616          AND.L   D2,D6   * apply bitmask
00001402                           617          
00001402  0C46 0080                618          CMPI    #%0000000010000000,D6 * is it MOVEM?
00001406  6600 0148                619          BNE     NOTMOVEM          * it is not MOVEM
0000140A                           620          
0000140A  7C0A                     621          MOVE.L  #10,D6
0000140C  7E0A                     622          MOVE.L  #10,D7
0000140E                           623          
0000140E  6100 10A6                624          BSR     BITMASK
00001412                           625          
00001412  CC82                     626          AND.L   D2,D6
00001414                           627          
00001414  0C46 0000                628          CMPI    #%0000000000000000,D6 * is it register to memory?
00001418  6700 009C                629          BEQ     MOVEMTOMEM 
0000141C                           630          
0000141C                           631  MOVEMTOREG *supported modes: 010 011
0000141C                           632  
0000141C  7C03                     633          MOVE.L  #3,D6
0000141E  7E05                     634          MOVE.L  #5,D7
00001420                           635          
00001420  6100 1094                636          BSR     BITMASK
00001424                           637          
00001424  CC82                     638          AND.L   D2,D6
00001426                           639          
00001426  0C46 0000                640          CMPI    #%0000000000000000,D6 * is it an unsupported mode?
0000142A  6700 0276                641          BEQ     UNKNOWN0100
0000142E                           642          
0000142E  0C46 0008                643          CMPI    #%0000000000001000,D6 * is it an unsupported mode?
00001432  6700 026E                644          BEQ     UNKNOWN0100
00001436                           645          
00001436  0C46 0020                646          CMPI    #%0000000000100000,D6 * is it an unsupported mode?
0000143A  6700 0266                647          BEQ     UNKNOWN0100
0000143E                           648          
0000143E  0C46 0028                649          CMPI    #%0000000000101000,D6 * is it an unsupported mode?
00001442  6700 025E                650          BEQ     UNKNOWN0100
00001446                           651          
00001446  0C46 0030                652          CMPI    #%0000000000110000,D6 * is it an unsupported mode?
0000144A  6700 0256                653          BEQ     UNKNOWN0100
0000144E                           654          
0000144E  0C46 0038                655          CMPI    #%0000000000111000,D6 * is it an unsupported mode?
00001452  6700 024E                656          BEQ     UNKNOWN0100
00001456                           657          
00001456  43F9 0000250F            658          LEA     MOVEMOP,A1
0000145C  103C 000E                659          MOVE.B  #14,D0          * print MOVEM
00001460  4E4F                     660          TRAP    #15
00001462                           661          
00001462  7C06                     662          MOVE.L  #6,D6
00001464  7E06                     663          MOVE.L  #6,D7
00001466                           664          
00001466  6100 104E                665          BSR     BITMASK
0000146A                           666          
0000146A  CC82                     667          AND.L   D2,D6
0000146C                           668          
0000146C  0C46 0040                669          CMPI    #%0000000001000000,D6 * is it a long op?
00001470  6600 0012                670          BNE     NOTLONGMOVEM1       * no, it is a word
00001474                           671          
00001474  43F9 000025BB            672          LEA     __L,A1
0000147A  103C 000E                673          MOVE.B  #14,D0          * print .L 
0000147E  4E4F                     674          TRAP    #15
00001480                           675          
00001480  6000 000E                676          BRA     SKIPNOTLONG1
00001484                           677          
00001484                           678  NOTLONGMOVEM1
00001484                           679  
00001484  43F9 000025B7            680          LEA     __W,A1
0000148A  103C 000E                681          MOVE.B  #14,D0          * print .W 
0000148E  4E4F                     682          TRAP    #15
00001490                           683                  
00001490                           684  SKIPNOTLONG1
00001490                           685  
00001490  6100 07E8                686          BSR     EAHELPER05 * print out the register we are moving from
00001494                           687          
00001494  43F9 000025A5            688          LEA     COMMA,A1
0000149A  103C 000E                689          MOVE.B  #14,D0          * print , 
0000149E  4E4F                     690          TRAP    #15
000014A0                           691          
000014A0  6100 0BF4                692          BSR     MOVEMHELPERPOST
000014A4                           693          
000014A4  341A                     694          MOVE.W  (A2)+,D2
000014A6                           695          
000014A6  43F9 000024FA            696          LEA     NEWLINE,A1
000014AC  103C 000E                697          MOVE.B  #14,D0          * print a newline 
000014B0  4E4F                     698          TRAP    #15
000014B2                           699      
000014B2  6000 01F2                700          BRA     DONE0100          * we found and printed, move on to the next iteration
000014B6                           701          
000014B6                           702  MOVEMTOMEM * supported modes 010 100
000014B6                           703  
000014B6  7C03                     704          MOVE.L  #3,D6
000014B8  7E05                     705          MOVE.L  #5,D7
000014BA                           706          
000014BA  6100 0FFA                707          BSR     BITMASK
000014BE                           708          
000014BE  CC82                     709          AND.L   D2,D6
000014C0                           710          
000014C0  0C46 0000                711          CMPI    #%0000000000000000,D6 * is it an unsopported mode?
000014C4  6700 01DC                712          BEQ     UNKNOWN0100
000014C8                           713          
000014C8  0C46 0008                714          CMPI    #%0000000000001000,D6 * is it an unsopported mode?
000014CC  6700 01D4                715          BEQ     UNKNOWN0100
000014D0                           716          
000014D0  0C46 0018                717          CMPI    #%0000000000011000,D6 * is it an unsopported mode?
000014D4  6700 01CC                718          BEQ     UNKNOWN0100
000014D8                           719          
000014D8  0C46 0028                720          CMPI    #%0000000000101000,D6 * is it an unsopported mode?
000014DC  6700 01C4                721          BEQ     UNKNOWN0100
000014E0                           722          
000014E0  0C46 0030                723          CMPI    #%0000000000110000,D6 * is it an unsopported mode?
000014E4  6700 01BC                724          BEQ     UNKNOWN0100
000014E8                           725          
000014E8  0C46 0070                726          CMPI    #%0000000001110000,D6 * is it an unsopported mode?
000014EC  6700 01B4                727          BEQ     UNKNOWN0100
000014F0                           728          
000014F0  43F9 0000250F            729          LEA     MOVEMOP,A1
000014F6  103C 000E                730          MOVE.B  #14,D0          * print MOVEM
000014FA  4E4F                     731          TRAP    #15
000014FC                           732          
000014FC  7C06                     733          MOVE.L  #6,D6
000014FE  7E06                     734          MOVE.L  #6,D7
00001500                           735          
00001500  6100 0FB4                736          BSR     BITMASK
00001504                           737          
00001504  CC82                     738          AND.L   D2,D6
00001506                           739          
00001506  0C46 0040                740          CMPI    #%0000000001000000,D6 * is it a long op?
0000150A  6600 0012                741          BNE     NOTLONGMOVEM2       * no, it is a word
0000150E                           742          
0000150E  43F9 000025BB            743          LEA     __L,A1
00001514  103C 000E                744          MOVE.B  #14,D0          * print .L 
00001518  4E4F                     745          TRAP    #15
0000151A                           746          
0000151A  6000 000E                747          BRA     SKIPNOTLONG2
0000151E                           748          
0000151E                           749  NOTLONGMOVEM2
0000151E                           750  
0000151E  43F9 000025B7            751          LEA     __W,A1
00001524  103C 000E                752          MOVE.B  #14,D0          * print .W 
00001528  4E4F                     753          TRAP    #15
0000152A                           754                  
0000152A                           755  SKIPNOTLONG2
0000152A                           756  
0000152A  6100 0CF2                757          BSR     MOVEMHELPERPRE
0000152E                           758  
0000152E  43F9 000025A5            759          LEA     COMMA,A1
00001534  103C 000E                760          MOVE.B  #14,D0          * print , 
00001538  4E4F                     761          TRAP    #15
0000153A                           762          
0000153A  6100 073E                763          BSR     EAHELPER05 * print out the register we are moving to
0000153E                           764          
0000153E  341A                     765          MOVE.W  (A2)+,D2
00001540                           766          
00001540  43F9 000024FA            767          LEA     NEWLINE,A1
00001546  103C 000E                768          MOVE.B  #14,D0          * print a newline 
0000154A  4E4F                     769          TRAP    #15
0000154C                           770      
0000154C  6000 0158                771          BRA     DONE0100          * we found and printed, move on to the next iteration
00001550                           772  
00001550                           773  NOTMOVEM *JSR
00001550                           774          * prep values for BITMASK subroutine
00001550  7C06                     775          MOVE.L  #6,D6
00001552  7E08                     776          MOVE.L  #8,D7
00001554                           777          
00001554  6100 0F60                778          BSR     BITMASK
00001558                           779          
00001558  CC42                     780          AND     D2,D6   * apply bitmask
0000155A                           781          
0000155A  0C46 0080                782          CMPI    #%0000000010000000,D6
0000155E  6600 003E                783          BNE     NOTJSR          * it's not JSR
00001562                           784          
00001562  43F9 00002515            785          LEA     JSROP,A1
00001568  103C 000E                786          MOVE.B  #14,D0          * Print a newline and JSR
0000156C  4E4F                     787          TRAP    #15
0000156E                           788          
0000156E  43F9 0000259F            789          LEA     SPACE,A1
00001574  103C 000E                790          MOVE.B  #14,D0          * Print a newline and JSR
00001578  4E4F                     791          TRAP    #15
0000157A                           792          
0000157A                           793          * print out where we are jumping to
0000157A                           794          
0000157A  341A                     795          MOVE.W  (A2)+,D2 * read in the next word of the instruction 
0000157C                           796          
0000157C  2202                     797          MOVE.L  D2,D1   * save the opcode to print
0000157E                           798          
0000157E  7410                     799          MOVE.L  #16,D2  * set the base to 16
00001580                           800          
00001580  700F                     801          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
00001582  4E4F                     802          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
00001584                           803          
00001584  341A                     804          MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
00001586                           805          
00001586  2202                     806          MOVE.L  D2,D1   * save the opcode to print
00001588                           807          
00001588  7410                     808          MOVE.L  #16,D2  * set the base to 16
0000158A                           809          
0000158A  700F                     810          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
0000158C  4E4F                     811          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
0000158E                           812          
0000158E  43F9 000024FA            813          LEA     NEWLINE,A1
00001594  103C 000E                814          MOVE.B  #14,D0          * Print a newline
00001598  4E4F                     815          TRAP    #15
0000159A                           816          
0000159A  6000 010A                817          BRA     DONE0100          * we already found instruction, next iteration
0000159E                           818  NOTJSR *RTS
0000159E                           819  
0000159E                           820          * prep values for BITMASK subroutine
0000159E  7C06                     821          MOVE.L  #6,D6
000015A0  7E08                     822          MOVE.L  #8,D7
000015A2                           823          
000015A2  6100 0F12                824          BSR     BITMASK
000015A6                           825          
000015A6  CC42                     826          AND     D2,D6   * apply bitmask
000015A8                           827          
000015A8  0C46 0040                828          CMPI    #%0000000001000000,D6
000015AC  6600 0012                829          BNE     NOTRTS          * it's not RTS
000015B0                           830          
000015B0  43F9 00002519            831          LEA     RTSOP,A1
000015B6  103C 000D                832          MOVE.B  #13,D0          * Print a newline and RTS
000015BA  4E4F                     833          TRAP    #15
000015BC                           834          
000015BC  6000 00E8                835          BRA     DONE0100          * we already found instruction, next iteration
000015C0                           836  NOTRTS  *LEA
000015C0                           837         
000015C0                           838          * prep values for BITMASK subroutine
000015C0  7C06                     839          MOVE.L  #6,D6
000015C2  7E08                     840          MOVE.L  #8,D7
000015C4                           841          
000015C4  6100 0EF0                842          BSR     BITMASK
000015C8                           843          
000015C8  CC42                     844          AND     D2,D6   * apply bitmask
000015CA                           845          
000015CA  0C46 01C0                846          CMPI    #%0000000111000000,D6
000015CE  6600 00D2                847          BNE     UNKNOWN0100          * it's not LEA, we dont know what it is
000015D2                           848          
000015D2                           849          * prep values for BITMASK subroutine
000015D2  7C03                     850          MOVE.L  #3,D6
000015D4  7E05                     851          MOVE.L  #5,D7
000015D6                           852          
000015D6  6100 0EDE                853          BSR     BITMASK
000015DA                           854          
000015DA  CC42                     855          AND     D2,D6   * apply bitmask
000015DC                           856          
000015DC  0C46 0008                857          CMPI    #%0000000000001000,D6
000015E0  6700 00C0                858          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
000015E4                           859          
000015E4  0C46 0018                860          CMPI    #%0000000000011000,D6
000015E8  6700 00B8                861          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
000015EC                           862          
000015EC  0C46 0020                863          CMPI    #%0000000000100000,D6
000015F0  6700 00B0                864          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
000015F4                           865          
000015F4  0C46 0028                866          CMPI    #%0000000000101000,D6
000015F8  6700 00A8                867          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
000015FC                           868          
000015FC  0C46 0030                869          CMPI    #%0000000000110000,D6
00001600  6700 00A0                870          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001604                           871          
00001604  0C46 0038                872          CMPI    #%0000000000111000,D6
00001608  6700 0046                873          BEQ     TWOWORDLEA          * it's a two word LEA
0000160C                           874          
0000160C                           875          * check to make sure it is a supported mode and size
0000160C                           876          
0000160C  43F9 00002522            877          LEA     LEAOP,A1
00001612  103C 000E                878          MOVE.B  #14,D0          * Print LEA
00001616  4E4F                     879          TRAP    #15
00001618                           880          
00001618  0882 0007                881          BCLR    #7,D2
0000161C  0882 0008                882          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
00001620                           883          
00001620  43F9 0000259F            884          LEA     SPACE,A1
00001626  103C 000E                885          MOVE.B  #14,D0          * Print SPACE
0000162A  4E4F                     886          TRAP    #15
0000162C                           887          
0000162C  6100 064C                888          BSR     EAHELPER05
00001630                           889          
00001630  43F9 000025A5            890          LEA     COMMA,A1
00001636  103C 000E                891          MOVE.B  #14,D0          * Print COMMA
0000163A  4E4F                     892          TRAP    #15
0000163C                           893          
0000163C  6100 05FA                894          BSR     EAHELPER611
00001640                           895          
00001640  43F9 000024FA            896          LEA     NEWLINE,A1
00001646  103C 000E                897          MOVE.B  #14,D0          * Start a new line
0000164A  4E4F                     898          TRAP    #15
0000164C                           899          
0000164C                           900          
0000164C                           901          * call EA helper
0000164C                           902          * MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
0000164C                           903                  
0000164C  6000 0058                904          BRA     DONE0100          * we already found instruction, next iteration
00001650                           905          
00001650                           906  TWOWORDLEA
00001650                           907  
00001650  43F9 00002522            908          LEA     LEAOP,A1
00001656  103C 000E                909          MOVE.B  #14,D0   * Print LEA
0000165A  4E4F                     910          TRAP    #15
0000165C                           911          
0000165C  43F9 0000259F            912          LEA     SPACE,A1
00001662  103C 000E                913          MOVE.B  #14,D0   * Print SPACE
00001666  4E4F                     914          TRAP    #15
00001668                           915  
00001668  321A                     916          MOVE.W  (A2)+,D1
0000166A                           917          
0000166A  7C00                     918          MOVE.L  #0,D6
0000166C  7E0F                     919          MOVE.L  #15,D7
0000166E                           920          
0000166E  6100 0E46                921          BSR     BITMASK
00001672                           922          
00001672  C286                     923          AND.L   D6,D1   * shave off bad info
00001674                           924          
00001674  103C 0003                925          MOVE.B  #3,D0   * Print the address which was the source
00001678  4E4F                     926          TRAP    #15
0000167A                           927          
0000167A  43F9 000025A5            928          LEA     COMMA,A1
00001680  103C 000E                929          MOVE.B  #14,D0  * Print COMMA
00001684  4E4F                     930          TRAP    #15
00001686                           931          
00001686  0882 0007                932          BCLR    #7,D2
0000168A  0882 0008                933          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
0000168E                           934          
0000168E  6100 05A8                935          BSR     EAHELPER611
00001692                           936          
00001692  43F9 000024FA            937          LEA     NEWLINE,A1
00001698  103C 000E                938          MOVE.B  #14,D0          * Start a new line
0000169C  4E4F                     939          TRAP    #15
0000169E                           940          
0000169E  6000 0006                941          BRA     DONE0100
000016A2                           942          
000016A2                           943  UNKNOWN0100 *dont know what it is
000016A2  6100 0BA8                944          BSR     UNKNOWNOP
000016A6                           945          
000016A6                           946  DONE0100
000016A6  4C9F 0303                947          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
000016AA  4E75                     948          RTS
000016AC                           949          
000016AC  6000 FAAA                950          BRA     ITERATION
000016B0                           951  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000016B0                           952  *-----------------------------------------------------------------------------
000016B0                           953        
000016B0                           954          
000016B0                           955          
000016B0                           956  
000016B0                           957  *-----------------------------------------------------------------------------
000016B0                           958  *-----------------------------------------------------------------------------
000016B0                           959  * NAME: OP_0101   (SUBQ)
000016B0                           960  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000016B0                           961  * PRE-CONDITION:  xyz
000016B0                           962  * POST-CONDITION: All registers return to their previous state, and the output
000016B0                           963  *                 goes to the output console for reading the raw data or the
000016B0                           964  *                 actual instruction.
000016B0                           965  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000016B0                           966  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000016B0                           967  OP0101
000016B0  48A7 FFC0                968          MOVEM   D0-D7/A0-A1,-(A7)       * Push values to the stack to save
000016B4                           969  
000016B4  CC7C 0100                970          AND     #%0000000100000000, D6  * Baby-Bitmask for the 8th digit.
000016B8  0C46 0100                971          CMPI    #%0000000100000000, D6  * Is the 8th digit a 1?
000016BC  6700 005A                972          BEQ     UNKNOWN0101             * If so, unknown op
000016C0                           973        
000016C0  0C46 0100                974          CMPI    #%0000000100000000, D6  * Is the size 11, an unsupported value?
000016C4  6700 0052                975          BEQ     UNKNOWN0101             * If so, unknown op
000016C8                           976            
000016C8                           977          * Verified SUBQ at this point
000016C8  43F9 0000251D            978          LEA     SUBQOP,A1           * Print out SUBQ
000016CE  103C 000E                979          MOVE.B  #14,D0              * Trap #14 to print out
000016D2  4E4F                     980          TRAP    #15                 * Perform Trap #14
000016D4                           981                          
000016D4  6100 08FA                982          BSR     SIZE67              * Print out size
000016D8                           983          
000016D8  43F9 000025A3            984          LEA     IMD,A1              * Formatting
000016DE  103C 000E                985          MOVE.B  #14,D0              * Trap #14 prints out space
000016E2  4E4F                     986          TRAP    #15                 * Perform Trap #14
000016E4                           987          
000016E4  3C3C 0009                988          MOVE.W  #9, D6              * Prep lower value for bitmask
000016E8  3E3C 000B                989          MOVE.W  #11,D7              * Prep upper value for bitmask
000016EC  6100 0DC8                990          BSR     BITMASK             * Finalize bitmask setup
000016F0  CC42                     991          AND     D2,D6               * Apply bitmask
000016F2                           992          
000016F2  6100 0D10                993          BSR     PRINTDATA911        * Special op for immediate in bits 9->11
000016F6                           994            
000016F6  43F9 000025A5            995          LEA     COMMA,A1            * Formatting
000016FC  103C 000E                996          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001700  4E4F                     997          TRAP    #15                 * Perform Trap #14
00001702                           998          
00001702  6100 0576                999          BSR     EAHELPER05          * Print out the Effective Address
00001706                          1000          
00001706  43F9 000024FA           1001          LEA     NEWLINE,A1          * Formatting
0000170C  103C 000E               1002          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001710  4E4F                    1003          TRAP    #15                 * Perform Trap #14
00001712                          1004          
00001712  4C9F 03FF               1005          MOVEM   (A7)+,D0-D7/A0-A1   * Pop off the stack to return our registers
00001716  4E75                    1006          RTS
00001718                          1007      
00001718                          1008  UNKNOWN0101
00001718  6100 0B32               1009          BSR     UNKNOWNOP
0000171C  4E75                    1010          RTS
0000171E                          1011  
0000171E                          1012  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000171E                          1013  *-----------------------------------------------------------------------------
0000171E                          1014  
0000171E                          1015  
0000171E                          1016  
0000171E                          1017  *-----------------------------------------------------------------------------
0000171E                          1018  *-----------------------------------------------------------------------------
0000171E                          1019  * NAME: OP_0110   (BCC, BCS, BGE, BLT, BVC, BRA)
0000171E                          1020  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000171E                          1021  * PRE-CONDITION:  Given the possibilties for 0110, masks the next 4 bits
0000171E                          1022  *                 in the instruction and determines what the bits match to a
0000171E                          1023  *                 given condition code. If the 8 bit offset is $00, or $FF,
0000171E                          1024  *                 this signifies a word or long offset (for $00 and $FF
0000171E                          1025  *                 respectively). The 8 bit offset is in 2's comp. form, and
0000171E                          1026  *                 should be un-done, then plus or minus to the current
0000171E                          1027  *                 program counter (PC) to get the actual memory label to
0000171E                          1028  *                 output to console. The word offset signal eats an
0000171E                          1029  *                 additional 16 bits and the long offset eats an additional
0000171E                          1030  *                 32 bits. The word/long offset are for memory alignment.
0000171E                          1031  * POST-CONDITION: All registers return to their previous state, and the output
0000171E                          1032  *                 goes to the output console for reading the raw data or the
0000171E                          1033  *                 actual instruction.
0000171E                          1034  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000171E                          1035  *                 A1 (output)
0000171E                          1036  * CONDITIONS TABLE:
0000171E                          1037  *                Condition Names  - Mnemonic - Condition Code
0000171E                          1038  *                --------------------------------------------
0000171E                          1039  *                True             -    T     - 0000
0000171E                          1040  *                False            -    F     - 0001
0000171E                          1041  *                Higher           -    HI    - 0010
0000171E                          1042  *                Lower or Same    -    LS    - 0011
0000171E                          1043  *                Carry Clear      -    CC    - 0100
0000171E                          1044  *                Carry Set        -    CS    - 0101
0000171E                          1045  *                Not Equal        -    NE    - 0110
0000171E                          1046  *                Equal            -    EQ    - 0111
0000171E                          1047  *                Overflow Clear   -    VC    - 1000
0000171E                          1048  *                Overflow Set     -    VS    - 1001
0000171E                          1049  *                Plus             -    PL    - 1010
0000171E                          1050  *                Minus            -    MI    - 1011
0000171E                          1051  *                Greater or Equal -    GE    - 1100
0000171E                          1052  *                Less Than        -    LT    - 1101
0000171E                          1053  *                Greater Than     -    GT    - 1110
0000171E                          1054  *                Less or Equal    -    LE    - 1111
0000171E                          1055  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000171E  48E7 FFFE               1056  OP0110  MOVEM.L D0-D7/A0-A6,-(A7) * Save main method routine vars to stack
00001722                          1057                          
00001722  3C3C 0009               1058          MOVE.W  #9,D6  * Move in 9 to D6
00001726  3E3C 000B               1059          MOVE.W  #11,D7 * Move in 11 to D7
0000172A                          1060                                        
0000172A  6100 0D8A               1061          BSR     BITMASK * Call BITMASK sub-routine, Returns a bitmask in D6
0000172E  CC42                    1062          AND     D2,D6   * apply the BITMASK
00001730                          1063          
00001730  0C46 0400               1064          CMPI    #%0000010000000000,D6 * CASE 1: BCC - BINARY FOR "CARRY CLEAR" FLAG
00001734  6700 0032               1065          BEQ     OP_BCC
00001738  0C46 0500               1066          CMPI    #%0000010100000000,D6 * CASE 2: BCS - BINARY FOR "CARRY SET" FLAG
0000173C  6700 0034               1067          BEQ     OP_BCS
00001740  0C46 0C00               1068          CMPI    #%0000110000000000,D6 * CASE 3: BGE - BINARY FOR "GREATER OR EQUAL" FLAG
00001744  6700 0036               1069          BEQ     OP_BGE
00001748  0C46 0D00               1070          CMPI    #%0000110100000000,D6 * CASE 4: BLT - BINARY FOR "LESS THAN" FLAG
0000174C  6700 0038               1071          BEQ     OP_BLT
00001750  0C46 0800               1072          CMPI    #%0000100000000000,D6 * CASE 5: BVC - BINARY FOR "OVERFLOW CLEAR" FLAG
00001754  6700 003A               1073          BEQ     OP_BVC
00001758  0C46 0000               1074          CMPI    #%0000000000000000,D6 * CASE 6: BRA - BINARY FOR "BRANCH ALWAYS" FLAG
0000175C  6700 003C               1075          BEQ     OP_BRA
00001760  6100 0AEA               1076          BSR     UNKNOWNOP             * don't know what it is, print it out, skip to end
00001764  6000 007A               1077          BRA     BCC_END
00001768                          1078  
00001768  43F9 0000255D           1079  OP_BCC  LEA     OP_BCC_MSG,A1
0000176E  6000 0034               1080          BRA     OP_BRANCHES_PRINT
00001772  43F9 00002562           1081  OP_BCS  LEA     OP_BCS_MSG,A1
00001778  6000 002A               1082          BRA     OP_BRANCHES_PRINT
0000177C  43F9 00002567           1083  OP_BGE  LEA     OP_BGE_MSG,A1
00001782  6000 0020               1084          BRA     OP_BRANCHES_PRINT
00001786  43F9 0000256C           1085  OP_BLT  LEA     OP_BLT_MSG,A1
0000178C  6000 0016               1086          BRA     OP_BRANCHES_PRINT
00001790  43F9 00002571           1087  OP_BVC  LEA     OP_BVC_MSG,A1
00001796  6000 000C               1088          BRA     OP_BRANCHES_PRINT
0000179A  43F9 00002576           1089  OP_BRA  LEA     OP_BRA_MSG,A1
000017A0  6000 0002               1090          BRA     OP_BRANCHES_PRINT
000017A4                          1091  OP_BRANCHES_PRINT
000017A4  103C 000E               1092          MOVE.B  #14,D0 * print instruction op, chosen from cases directly above
000017A8  4E4F                    1093          TRAP    #15
000017AA                          1094          
000017AA  43F9 000025A1           1095          LEA     DOLLAR,A1
000017B0  103C 000E               1096          MOVE.B  #14,D0 * print raw data hex of the LABEL
000017B4  4E4F                    1097          TRAP    #15
000017B6                          1098          
000017B6  3C3C 0000               1099          MOVE.W  #0,D6                 * Move in 0 to D6 - prep mask
000017BA  3E3C 0007               1100          MOVE.W  #7,D7                 * Move in 7 to D7
000017BE  6100 0CF6               1101          BSR     BITMASK               * Call BITMASK sub-routine, return in D6
000017C2  CC42                    1102          AND     D2,D6                 * AND mask with op bits, get last 8 bits in D6
000017C4                          1103          
000017C4                          1104  *        CMPI    #%00000000,D6         * all 0's == word offset
000017C4                          1105  *        BEQ     BCC_WORD_OFFSET
000017C4                          1106          
000017C4                          1107  *        CMPI    #%11111111,D6         * all F's == long offset
000017C4                          1108  *        BEQ     BCC_LONG_OFFSET
000017C4                          1109  BCC_BYTE_OFFSET
000017C4  4254                    1110          CLR     (A4)
000017C6  2846                    1111          MOVE.L  D6,A4
000017C8  43D4                    1112          LEA     (A4),A1
000017CA  103C 000E               1113          MOVE.B  #14,D0
000017CE  4E4F                    1114          TRAP    #15
000017D0  43F9 000024FA           1115          LEA     NEWLINE,A1
000017D6  103C 000E               1116          MOVE.B  #14,D0
000017DA  4E4F                    1117          TRAP    #15
000017DC                          1118          
000017DC  6000 0002               1119          BRA     BCC_END
000017E0                          1120  *BCC_WORD_OFFSET
000017E0                          1121  *        MOVEM.W (A2)+,A1
000017E0                          1122  *        MOVE.B  #13,D0
000017E0                          1123  *        TRAP    #15
000017E0                          1124  *        BRA     BCC_END
000017E0                          1125  *BCC_LONG_OFFSET
000017E0                          1126  *        MOVEM.L (A2)+,A1
000017E0                          1127  *        MOVE.B  #13,D0
000017E0                          1128  *        TRAP    #15
000017E0                          1129  *        BRA     BCC_END
000017E0                          1130  BCC_END * reload the memory, call RTS
000017E0  4C9F 7FFF               1131          MOVEM   (A7)+,D0-D7/A0-A6 * Pop off the stack to return our registers
000017E4  4E75                    1132          RTS
000017E6                          1133  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000017E6                          1134  *-----------------------------------------------------------------------------
000017E6                          1135  
000017E6                          1136  
000017E6                          1137  
000017E6                          1138  *-----------------------------------------------------------------------------
000017E6                          1139  *-----------------------------------------------------------------------------
000017E6                          1140  * NAME: OP_0111   ()
000017E6                          1141  * DESCRIPTION:    OP code 0111 is not supported. 
000017E6                          1142  * PRE-CONDITION:  
000017E6                          1143  * POST-CONDITION: 
000017E6                          1144  * REGISTERS:
000017E6                          1145  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000017E6                          1146  OP0111
000017E6  6100 0A64               1147      BSR     UNKNOWNOP
000017EA  4E75                    1148      RTS
000017EC                          1149  
000017EC                          1150  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000017EC                          1151  *-----------------------------------------------------------------------------
000017EC                          1152  
000017EC                          1153  
000017EC                          1154  
000017EC                          1155  *-----------------------------------------------------------------------------
000017EC                          1156  *-----------------------------------------------------------------------------
000017EC                          1157  * NAME: OP_1000   (DIVS, OR)
000017EC                          1158  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000017EC                          1159  * PRE-CONDITION:  xyz
000017EC                          1160  * POST-CONDITION: All registers return to their previous state, and the output
000017EC                          1161  *                 goes to the output console for reading the raw data or the
000017EC                          1162  *                 actual instruction.
000017EC                          1163  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000017EC                          1164  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000017EC                          1165  OP1000
000017EC  48A7 FFC0               1166          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
000017F0                          1167  
000017F0                          1168          * Check if the EA Mode is 001 since both DIVS and OR do not support it
000017F0  3C3C 0003               1169          MOVE.W  #3, D6              * Prep lower value for bitmask
000017F4  3E3C 0005               1170          MOVE.W  #5, D7              * Prep upper value for bitmask
000017F8  6100 0CBC               1171          BSR     BITMASK             * Finalize bitmask setup
000017FC  CC42                    1172          AND     D2,D6               * Apply bitmask
000017FE                          1173          
000017FE  0C46 0008               1174          CMPI    #%0000000000001000, D6  * Is the mode 001, an unsupported mode?
00001802  6700 0A48               1175          BEQ     UNKNOWNOP                 * If so, the op is not supported
00001806                          1176          
00001806                          1177          * Checking for DIVS
00001806  3C3C 0006               1178          MOVE.W  #6, D6              * Prep lower value for bitmask
0000180A  3E3C 0008               1179          MOVE.W  #8, D7              * Prep upper value for bitmask
0000180E  6100 0CA6               1180          BSR     BITMASK             * Finalize bitmask setup
00001812  CC42                    1181          AND     D2,D6               * Apply bitmask
00001814                          1182          
00001814  0C46 01C0               1183          CMPI    #%0000000111000000, D6  * Are we DIVS?
00001818  6600 0050               1184          BNE     NOTDIVS                 * If not, branch to see if it's OR
0000181C                          1185          
0000181C  43F9 000024FD           1186          LEA     DIVSOP,A1           * We found DIVS
00001822  103C 000E               1187          MOVE.B  #14,D0              * Trap #14 prints out the data
00001826  4E4F                    1188          TRAP    #15                 * Perform Trap #14
00001828                          1189          
00001828  43F9 0000259F           1190          LEA     SPACE,A1            * formatting
0000182E  103C 000E               1191          MOVE.B  #14,D0              * Trap #14 prints out space
00001832  4E4F                    1192          TRAP    #15                 * Perform Trap #14
00001834                          1193          
00001834  4243                    1194          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
00001836  08C3 0000               1195          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
0000183A                          1196                                      * to indicate a potential immediate of size word
0000183A                          1197          
0000183A  6100 043E               1198          BSR     EAHELPER05          * Print out data
0000183E                          1199  
0000183E  43F9 000025A5           1200          LEA     COMMA,A1            * formatting
00001844  103C 000E               1201          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001848  4E4F                    1202          TRAP    #15                 * Perform Trap #14
0000184A                          1203          
0000184A                          1204          * bit manipulation is needed to make the outlier DIVS work
0000184A                          1205          * with the generic EAHELPER611
0000184A  0882 0006               1206          BCLR    #6,D2
0000184E  0882 0007               1207          BCLR    #7,D2
00001852  0882 0008               1208          BCLR    #8,D2
00001856                          1209          
00001856                          1210          * the above bits were cleared so that eahelper05 knows the destination
00001856                          1211          * is a data register.
00001856                          1212          
00001856  6100 03E0               1213          BSR     EAHELPER611 
0000185A                          1214  
0000185A  43F9 000024FA           1215          LEA     NEWLINE,A1          * We found DIVS
00001860  103C 000E               1216          MOVE.B  #14,D0              * Trap #14 prints out the data
00001864  4E4F                    1217          TRAP    #15                 * Perform Trap #14
00001866                          1218          
00001866  6000 0012               1219          BRA     OP1000END
0000186A                          1220          
0000186A                          1221  NOTDIVS * It is confirmed OR at this point
0000186A  43F9 00002531           1222          LEA     OROP,A1         * We found OR
00001870  103C 000E               1223          MOVE.B  #14,D0          * Trap #14 prints out the data
00001874  4E4F                    1224          TRAP    #15             * Perform Trap #14
00001876                          1225          *================================================================
00001876                          1226          * todo, move the size of the operation into the leading bits of D5
00001876                          1227          * before subroutine call
00001876  6100 03C0               1228          BSR     EAHELPER611
0000187A                          1229  
0000187A                          1230  OP1000END
0000187A  4C9F 03FF               1231          MOVEM   (A7)+,D0-D7/A0-A1
0000187E  4E75                    1232          RTS
00001880                          1233  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001880                          1234  *-----------------------------------------------------------------------------
00001880                          1235  
00001880                          1236  
00001880                          1237  
00001880                          1238  *-----------------------------------------------------------------------------
00001880                          1239  *-----------------------------------------------------------------------------
00001880                          1240  * NAME: OP_1001   (SUB)
00001880                          1241  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001880                          1242  * PRE-CONDITION:  xyz
00001880                          1243  * POST-CONDITION: All registers return to their previous state, and the output
00001880                          1244  *                 goes to the output console for reading the raw data or the
00001880                          1245  *                 actual instruction.
00001880                          1246  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001880                          1247  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001880                          1248  OP1001
00001880                          1249  
00001880                          1250  
00001880                          1251  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001880                          1252  *-----------------------------------------------------------------------------
00001880                          1253  
00001880                          1254  
00001880                          1255  
00001880                          1256  *-----------------------------------------------------------------------------
00001880                          1257  *-----------------------------------------------------------------------------
00001880                          1258  * NAME: OP_1010   ()
00001880                          1259  * DESCRIPTION:    a
00001880                          1260  * PRE-CONDITION:  b
00001880                          1261  * POST-CONDITION: c
00001880                          1262  * REGISTERS:      d
00001880                          1263  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001880                          1264  OP1010
00001880                          1265  
00001880  6100 09CA               1266      BSR     UNKNOWNOP
00001884  4E75                    1267      RTS
00001886                          1268  
00001886                          1269  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001886                          1270  *-----------------------------------------------------------------------------
00001886                          1271  
00001886                          1272  
00001886                          1273  
00001886                          1274  *-----------------------------------------------------------------------------
00001886                          1275  *-----------------------------------------------------------------------------
00001886                          1276  * NAME: OP_1011   (EOR, CMP)
00001886                          1277  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001886                          1278  * PRE-CONDITION:  xyz
00001886                          1279  * POST-CONDITION: All registers return to their previous state, and the output
00001886                          1280  *                 goes to the output console for reading the raw data or the
00001886                          1281  *                 actual instruction.
00001886                          1282  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001886                          1283  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001886                          1284  OP1011
00001886                          1285  
00001886  6100 09C4               1286      BSR     UNKNOWNOP
0000188A  4E75                    1287      RTS
0000188C                          1288  
0000188C                          1289  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000188C                          1290  *-----------------------------------------------------------------------------
0000188C                          1291  
0000188C                          1292  
0000188C                          1293  
0000188C                          1294  *-----------------------------------------------------------------------------
0000188C                          1295  *-----------------------------------------------------------------------------
0000188C                          1296  * NAME: OP_1100   (MULS)
0000188C                          1297  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000188C                          1298  * PRE-CONDITION:  xyz
0000188C                          1299  * POST-CONDITION: All registers return to their previous state, and the output
0000188C                          1300  *                 goes to the output console for reading the raw data or the
0000188C                          1301  *                 actual instruction.
0000188C                          1302  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000188C                          1303  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000188C                          1304  OP1100
0000188C  48A7 FFC0               1305          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
00001890                          1306  
00001890                          1307          * Check if the EA Mode is 001 since MULS does not support it
00001890  3C3C 0003               1308          MOVE.W  #3, D6              * Prep lower value for bitmask
00001894  3E3C 0005               1309          MOVE.W  #5, D7              * Prep upper value for bitmask
00001898  6100 0C1C               1310          BSR     BITMASK             * Finalize bitmask setup
0000189C  CC42                    1311          AND     D2,D6               * Apply bitmask
0000189E                          1312          
0000189E  0C46 0008               1313          CMPI    #%0000000000001000, D6    * Is the mode 001, an unsupported mode?
000018A2  6700 0068               1314          BEQ     UNKNOWN1100               * If so, the op is not supported
000018A6                          1315          
000018A6  3C3C 0006               1316          MOVE.W  #6, D6              * Prep lower value for bitmask
000018AA  3E3C 0008               1317          MOVE.W  #8, D7              * Prep upper value for bitmask
000018AE  6100 0C06               1318          BSR     BITMASK             * Finalize bitmask setup
000018B2  CC42                    1319          AND     D2,D6               * Apply bitmask
000018B4                          1320          
000018B4  0C46 01C0               1321          CMPI    #%0000000111000000, D6  * Are we MULS?
000018B8  6600 0052               1322          BNE     UNKNOWN1100             * If not, it is an unknown op
000018BC                          1323          
000018BC  43F9 0000252C           1324          LEA     MULSOP,A1           * We found MULS
000018C2  103C 000E               1325          MOVE.B  #14,D0              * Trap #14 prints out the data
000018C6  4E4F                    1326          TRAP    #15                 * Perform Trap #14
000018C8                          1327          
000018C8  43F9 0000259F           1328          LEA     SPACE,A1            * formatting
000018CE  103C 000E               1329          MOVE.B  #14,D0              * Trap #14 prints out space
000018D2  4E4F                    1330          TRAP    #15                 * Perform Trap #14
000018D4                          1331          
000018D4  4243                    1332          CLR     D3                  * clear D3, it is a parameter
000018D6  08C3 0000               1333          BSET    #0,D3               * of EAHELPER05 to indicate size
000018DA                          1334          
000018DA  6100 039E               1335          BSR     EAHELPER05          * Print out data
000018DE                          1336  
000018DE  43F9 000025A5           1337          LEA     COMMA,A1            * formatting
000018E4  103C 000E               1338          MOVE.B  #14,D0              * Trap #14 prints out a comma
000018E8  4E4F                    1339          TRAP    #15                 * Perform Trap #14
000018EA                          1340          
000018EA  0882 0006               1341          BCLR    #6,D2               * Bit manipulation is 
000018EE  0882 0007               1342          BCLR    #7,D2               * necessary in order to make
000018F2  0882 0008               1343          BCLR    #8,D2               * EAHELPER611 work generically
000018F6                          1344          
000018F6  6100 0340               1345          BSR     EAHELPER611         * Print out EA
000018FA                          1346  
000018FA  43F9 000024FA           1347          LEA     NEWLINE,A1          * Formatting
00001900  103C 000E               1348          MOVE.B  #14,D0              * Trap #14 prints out the data
00001904  4E4F                    1349          TRAP    #15                 * Perform Trap #14
00001906                          1350          
00001906  4C9F 03FF               1351          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
0000190A  4E75                    1352          RTS                         * Return to main
0000190C                          1353          
0000190C                          1354  UNKNOWN1100
0000190C  6100 093E               1355          BSR     UNKNOWNOP
00001910                          1356       
00001910  4C9F 03FF               1357          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
00001914  4E75                    1358          RTS                         * Return to main
00001916                          1359          
00001916                          1360  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001916                          1361  *-----------------------------------------------------------------------------
00001916                          1362  
00001916                          1363  
00001916                          1364  
00001916                          1365  
00001916                          1366  
00001916                          1367  
00001916                          1368  *-----------------------------------------------------------------------------
00001916                          1369  *-----------------------------------------------------------------------------
00001916                          1370  * NAME: OP_1101   (ADD, ADDA)
00001916                          1371  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001916                          1372  * PRE-CONDITION:  xyz
00001916                          1373  * POST-CONDITION: All registers return to their previous state, and the output
00001916                          1374  *                 goes to the output console for reading the raw data or the
00001916                          1375  *                 actual instruction.
00001916                          1376  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001916                          1377  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001916                          1378  OP1101
00001916  48E7 FFFE               1379          MOVEM.L A0-A6/D0-D7,-(A7)
0000191A                          1380          
0000191A  3C3C 0006               1381          MOVE.W  #6, D6              * Prep lower value for bitmask
0000191E  3E3C 0008               1382          MOVE.W  #8, D7              * Prep upper value for bitmask
00001922  6100 0B92               1383          BSR     BITMASK             * Finalize bitmask setup
00001926  CC42                    1384          AND     D2,D6               * Apply bitmask
00001928  EC4E                    1385          LSR     #6,D6
0000192A                          1386  
0000192A  0C06 0000               1387          CMPI.B  #%0000000000000000,D6
0000192E  6700 003E               1388          BEQ     BYTE_EA_DN
00001932                          1389  
00001932  0C06 0001               1390          CMPI.B  #%0000000000000001,D6
00001936  6700 004E               1391          BEQ     WORD_EA_DN
0000193A                          1392  
0000193A  0C06 0002               1393          CMPI.B  #%0000000000000010,D6
0000193E  6700 005E               1394          BEQ     LONG_EA_DN
00001942                          1395  
00001942  0C06 0003               1396          CMPI.B  #%0000000000000011,D6
00001946  6700 006E               1397          BEQ     ADDA_WORD_OP
0000194A                          1398  
0000194A  0C06 0004               1399          CMPI.B  #%0000000000000100,D6
0000194E  6700 0086               1400          BEQ     BYTE_DN_EA
00001952                          1401  
00001952  0C06 0005               1402          CMPI.B  #%0000000000000101,D6
00001956  6700 0096               1403          BEQ     WORD_DN_EA
0000195A                          1404  
0000195A  0C06 0006               1405          CMPI.B  #%0000000000000110,D6
0000195E  6700 00A6               1406          BEQ     LONG_DN_EA
00001962                          1407  
00001962  0C06 0007               1408          CMPI.B  #%0000000000000111,D6
00001966  6700 00B6               1409          BEQ     ADDA_LONG_OP
0000196A                          1410  
0000196A  6000 011E               1411          BRA     ADD_ADDA_END
0000196E                          1412          
0000196E                          1413  BYTE_EA_DN
0000196E  6100 00CE               1414          BSR     ADD_EA_DN_GENERIC       * print out 'ADD' base op name for ADDA too
00001972                          1415  
00001972  43F9 000025B3           1416          LEA     __B,A1                  * print out size
00001978  103C 000E               1417          MOVE.B  #14,D0
0000197C  4E4F                    1418          TRAP    #15
0000197E                          1419  
0000197E  6100 00CC               1420          BSR     ADD_ADDA_SPACE          * print out space
00001982  6000 00EE               1421          BRA     ADD_ADDA_PRINT
00001986                          1422  
00001986                          1423  WORD_EA_DN
00001986  6100 00B6               1424          BSR     ADD_EA_DN_GENERIC
0000198A                          1425  
0000198A  43F9 000025B7           1426          LEA     __W,A1
00001990  103C 000E               1427          MOVE.B  #14,D0
00001994  4E4F                    1428          TRAP    #15
00001996                          1429          
00001996  6100 00B4               1430          BSR     ADD_ADDA_SPACE
0000199A  6000 00D6               1431          BRA     ADD_ADDA_PRINT
0000199E                          1432          
0000199E                          1433  LONG_EA_DN
0000199E  6100 009E               1434          BSR     ADD_EA_DN_GENERIC
000019A2                          1435  
000019A2  43F9 000025BB           1436          LEA     __L,A1
000019A8  103C 000E               1437          MOVE.B  #14,D0
000019AC  4E4F                    1438          TRAP    #15
000019AE                          1439  
000019AE  6100 009C               1440          BSR     ADD_ADDA_SPACE
000019B2  6000 00BE               1441          BRA     ADD_ADDA_PRINT
000019B6                          1442          
000019B6                          1443  ADDA_WORD_OP
000019B6  6100 0086               1444          BSR     ADD_EA_DN_GENERIC
000019BA                          1445  
000019BA  43F9 00002593           1446          LEA     ASCII_A,A1
000019C0  103C 000E               1447          MOVE.B  #14,D0
000019C4  4E4F                    1448          TRAP    #15
000019C6                          1449  
000019C6  43F9 000025B7           1450          LEA     __W,A1
000019CC  103C 000E               1451          MOVE.B  #14,D0
000019D0  4E4F                    1452          TRAP    #15
000019D2                          1453          
000019D2  6000 0086               1454          BRA     ADDA_PRT
000019D6                          1455          
000019D6                          1456  BYTE_DN_EA
000019D6  6100 0066               1457          BSR     ADD_EA_DN_GENERIC
000019DA                          1458          
000019DA  43F9 000025B3           1459          LEA     __B,A1
000019E0  103C 000E               1460          MOVE.B  #14,D0
000019E4  4E4F                    1461          TRAP    #15
000019E6                          1462          
000019E6  6100 0064               1463          BSR     ADD_ADDA_SPACE
000019EA  6000 0086               1464          BRA     ADD_ADDA_PRINT
000019EE                          1465  
000019EE                          1466  WORD_DN_EA
000019EE  6100 004E               1467          BSR     ADD_EA_DN_GENERIC
000019F2                          1468  
000019F2  43F9 000025B7           1469          LEA     __W,A1
000019F8  103C 000E               1470          MOVE.B  #14,D0
000019FC  4E4F                    1471          TRAP    #15 
000019FE                          1472  
000019FE  6100 004C               1473          BSR     ADD_ADDA_SPACE
00001A02  6000 006E               1474          BRA     ADD_ADDA_PRINT
00001A06                          1475  
00001A06                          1476  LONG_DN_EA
00001A06  6100 0036               1477          BSR     ADD_EA_DN_GENERIC
00001A0A                          1478          
00001A0A  43F9 000025BB           1479          LEA     __L,A1
00001A10  103C 000E               1480          MOVE.B  #14,D0
00001A14  4E4F                    1481          TRAP    #15     
00001A16                          1482          
00001A16  6100 0034               1483          BSR     ADD_ADDA_SPACE
00001A1A  6000 0056               1484          BRA     ADD_ADDA_PRINT
00001A1E                          1485  
00001A1E                          1486  ADDA_LONG_OP
00001A1E  6100 001E               1487          BSR     ADD_EA_DN_GENERIC
00001A22                          1488          
00001A22  43F9 00002593           1489          LEA     ASCII_A,A1
00001A28  103C 000E               1490          MOVE.B  #14,D0
00001A2C  4E4F                    1491          TRAP    #15
00001A2E                          1492          
00001A2E  43F9 000025BB           1493          LEA     __L,A1
00001A34  103C 000E               1494          MOVE.B  #14,D0
00001A38  4E4F                    1495          TRAP    #15
00001A3A                          1496          
00001A3A  6000 001E               1497          BRA     ADDA_PRT
00001A3E                          1498          
00001A3E                          1499  ADD_EA_DN_GENERIC
00001A3E  43F9 0000257B           1500          LEA     OP_ADD_MSG,A1           * print out 'ADD'
00001A44  103C 000E               1501          MOVE.B  #14,D0
00001A48  4E4F                    1502          TRAP    #15
00001A4A  4E75                    1503          RTS
00001A4C                          1504          
00001A4C                          1505  ADD_ADDA_SPACE
00001A4C  43F9 0000259F           1506          LEA     SPACE,A1
00001A52  103C 000E               1507          MOVE.B  #14,D0
00001A56  4E4F                    1508          TRAP    #15
00001A58  4E75                    1509          RTS
00001A5A                          1510  
00001A5A                          1511  ADDA_PRT
00001A5A  6100 0374               1512          BSR     MODE_DN
00001A5E  43F9 000025A5           1513          LEA     COMMA,A1
00001A64  103C 000E               1514          MOVE.B  #14,D0
00001A68  4E4F                    1515          TRAP    #15
00001A6A  6100 0464               1516          BSR     MODE_AN
00001A6E  6000 001A               1517          BRA     ADD_ADDA_END
00001A72                          1518  
00001A72                          1519  ADD_ADDA_PRINT
00001A72                          1520  
00001A72  6100 0206               1521          BSR     EAHELPER05          * Print out data. TODO: DOESN'T WORK.
00001A76                          1522  
00001A76  43F9 000025A5           1523          LEA     COMMA,A1            * formatting
00001A7C  103C 000E               1524          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001A80  4E4F                    1525          TRAP    #15                 * Perform Trap #14
00001A82                          1526          
00001A82  6100 01B4               1527          BSR     EAHELPER611
00001A86  6000 0002               1528          BRA     ADD_ADDA_END
00001A8A                          1529          
00001A8A                          1530  ADD_ADDA_END
00001A8A  43F9 000024FA           1531          LEA     NEWLINE,A1
00001A90  103C 000E               1532          MOVE.B  #14,D0
00001A94  4E4F                    1533          TRAP    #15
00001A96                          1534          
00001A96  4CDF 7FFF               1535          MOVEM.L (A7)+,A0-A6/D0-D7
00001A9A  4E75                    1536          RTS
00001A9C                          1537  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001A9C                          1538  *-----------------------------------------------------------------------------
00001A9C                          1539  
00001A9C                          1540  
00001A9C                          1541  
00001A9C                          1542  *-----------------------------------------------------------------------------
00001A9C                          1543  *-----------------------------------------------------------------------------
00001A9C                          1544  * NAME: OP_1110   (LSL, LSR, ASL, ASR, ROL, ROR)
00001A9C                          1545  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001A9C                          1546  * PRE-CONDITION:  xyz
00001A9C                          1547  * POST-CONDITION: All registers return to their previous state, and the output
00001A9C                          1548  *                 goes to the output console for reading the raw data or the
00001A9C                          1549  *                 actual instruction.
00001A9C                          1550  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001A9C                          1551  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001A9C                          1552  OP1110
00001A9C                          1553  
00001A9C  48A7 FFC0               1554      MOVEM   D0-D7/A0-A1,-(A7)   * Caller saved
00001AA0                          1555  
00001AA0  7C03                    1556      MOVE.L  #3,D6
00001AA2  7E04                    1557      MOVE.L  #4,D7
00001AA4                          1558      
00001AA4  6100 0A10               1559      BSR     BITMASK * generate a bitmask for the 3 and 4 bits
00001AA8                          1560      
00001AA8  CC82                    1561      AND.L   D2,D6
00001AAA                          1562      
00001AAA  0C46 0008               1563      CMPI    #%0000000000001000,D6 *is it a logical shift
00001AAE  6700 001A               1564      BEQ     LS
00001AB2                          1565      
00001AB2  0C46 0000               1566      CMPI    #%0000000000000000,D6 *is it an arithmatic shift
00001AB6  6700 0048               1567      BEQ     AS
00001ABA                          1568      
00001ABA  0C46 0018               1569      CMPI    #%0000000000011000,D6 *is it a rorate?
00001ABE  6700 0076               1570      BEQ     RO
00001AC2                          1571  
00001AC2  6100 0788               1572      BSR     UNKNOWNOP *if nothing above, we don't know what it is
00001AC6  6000 0158               1573      BRA     ENDOP1110
00001ACA                          1574      
00001ACA                          1575  LS
00001ACA  7C08                    1576      MOVE.L  #8,D6
00001ACC  7E08                    1577      MOVE.L  #8,D7
00001ACE                          1578      
00001ACE  6100 09E6               1579      BSR     BITMASK
00001AD2                          1580      
00001AD2  CC82                    1581      AND.L   D2,D6
00001AD4                          1582      
00001AD4  0C46 0000               1583      CMPI    #0,D6 * is it a left shift?
00001AD8  6700 0016               1584      BEQ     LSR
00001ADC                          1585      
00001ADC  6000 0002               1586      BRA     LSL * if not a left shift, must be right
00001AE0                          1587  
00001AE0                          1588  LSL
00001AE0                          1589  
00001AE0  43F9 0000253D           1590      LEA     LSLOP,A1            * formatting
00001AE6  103C 000E               1591      MOVE.B  #14,D0              * Trap #14 prints out LSL
00001AEA  4E4F                    1592      TRAP    #15                 * Perform Trap #14
00001AEC                          1593      
00001AEC  6000 007E               1594      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001AF0                          1595                                  * prints the registers and imm data
00001AF0                          1596  LSR
00001AF0                          1597  
00001AF0  43F9 00002541           1598      LEA     LSROP,A1            * formatting
00001AF6  103C 000E               1599      MOVE.B  #14,D0              * Trap #14 prints out LSR
00001AFA  4E4F                    1600      TRAP    #15                 * Perform Trap #14
00001AFC                          1601      
00001AFC  6000 006E               1602      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001B00                          1603                                  * prints the registers and imm data
00001B00                          1604  
00001B00                          1605  AS
00001B00  7C08                    1606      MOVE.L  #8,D6
00001B02  7E08                    1607      MOVE.L  #8,D7
00001B04                          1608      
00001B04  6100 09B0               1609      BSR     BITMASK
00001B08                          1610      
00001B08  CC82                    1611      AND.L   D2,D6
00001B0A                          1612      
00001B0A  0C46 0000               1613      CMPI    #0,D6 * is it a left shift?
00001B0E  6700 0016               1614      BEQ     ASR
00001B12                          1615      
00001B12  6000 0002               1616      BRA     ASL * if not a left shift, must be right
00001B16                          1617      
00001B16                          1618  ASL
00001B16                          1619  
00001B16  43F9 00002545           1620      LEA     ASLOP,A1            * formatting
00001B1C  103C 000E               1621      MOVE.B  #14,D0              * Trap #14 prints out ASL
00001B20  4E4F                    1622      TRAP    #15                 * Perform Trap #14
00001B22                          1623      
00001B22  6000 0048               1624      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001B26                          1625                                  * prints the registers and imm data
00001B26                          1626  ASR
00001B26                          1627  
00001B26  43F9 00002549           1628      LEA     ASROP,A1            * formatting
00001B2C  103C 000E               1629      MOVE.B  #14,D0              * Trap #14 prints out ASR
00001B30  4E4F                    1630      TRAP    #15                 * Perform Trap #14
00001B32                          1631      
00001B32  6000 0038               1632      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001B36                          1633                                  * prints the registers and imm data
00001B36                          1634  RO
00001B36  7C08                    1635      MOVE.L  #8,D6
00001B38  7E08                    1636      MOVE.L  #8,D7
00001B3A                          1637      
00001B3A  6100 097A               1638      BSR     BITMASK
00001B3E                          1639      
00001B3E  CC82                    1640      AND.L   D2,D6
00001B40                          1641      
00001B40  0C46 0000               1642      CMPI    #0,D6 * is it a left shift?
00001B44  6700 0016               1643      BEQ     ROR
00001B48                          1644      
00001B48  6000 0002               1645      BRA     ROL * if not a left shift, must be right
00001B4C                          1646  
00001B4C                          1647  ROL
00001B4C                          1648  
00001B4C  43F9 0000254D           1649      LEA     ROLOP,A1            * formatting
00001B52  103C 000E               1650      MOVE.B  #14,D0              * Trap #14 prints out ROL
00001B56  4E4F                    1651      TRAP    #15                 * Perform Trap #14
00001B58                          1652      
00001B58  6000 0012               1653      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001B5C                          1654                                  * prints the registers and imm data
00001B5C                          1655  ROR
00001B5C                          1656  
00001B5C  43F9 00002551           1657      LEA     ROROP,A1            * formatting
00001B62  103C 000E               1658      MOVE.B  #14,D0              * Trap #14 prints out ROR
00001B66  4E4F                    1659      TRAP    #15                 * Perform Trap #14
00001B68                          1660      
00001B68  6000 0002               1661      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001B6C                          1662                                  * prints the registers and imm data
00001B6C                          1663  
00001B6C                          1664  OP1110GENERIC
00001B6C                          1665  
00001B6C  6100 0462               1666      BSR     SIZE67
00001B70                          1667      
00001B70  7C05                    1668      MOVE.L  #5,D6
00001B72  7E05                    1669      MOVE.L  #5,D7
00001B74                          1670      
00001B74  6100 0940               1671      BSR     BITMASK
00001B78                          1672      
00001B78  CC82                    1673      AND.L   D2,D6
00001B7A                          1674      
00001B7A  0C46 0020               1675      CMPI    #%0000000000100000,D6   *is it a data reg?
00001B7E  6700 0074               1676      BEQ     OP1110DATAREG
00001B82                          1677      
00001B82  43F9 000025A3           1678      LEA     IMD,A1              * formatting
00001B88  103C 000E               1679      MOVE.B  #14,D0              * Trap #14 prints out pound #
00001B8C  4E4F                    1680      TRAP    #15                 * Perform Trap #14
00001B8E                          1681      
00001B8E  7C09                    1682      MOVE.L  #9,D6
00001B90  7E0B                    1683      MOVE.L  #11,D7
00001B92                          1684      
00001B92  6100 0922               1685      BSR     BITMASK
00001B96                          1686      
00001B96  CC82                    1687      AND.L   D2,D6
00001B98                          1688      
00001B98  0C46 0000               1689      CMPI    #0,D6 * special case, if zero print #8 not #0
00001B9C  6700 002E               1690      BEQ     OP1110IMMEIGHT
00001BA0                          1691      
00001BA0  E08E                    1692      LSR.L   #8,D6
00001BA2  E28E                    1693      LSR.L   #1,D6
00001BA4                          1694      
00001BA4  2206                    1695      MOVE.L  D6,D1              * formatting
00001BA6  103C 0003               1696      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001BAA  4E4F                    1697      TRAP    #15                * Perform Trap #14
00001BAC                          1698      
00001BAC  43F9 000025A5           1699      LEA     COMMA,A1            * formatting
00001BB2  103C 000E               1700      MOVE.B  #14,D0              * Trap #14 prints out comma
00001BB6  4E4F                    1701      TRAP    #15                 * Perform Trap #1
00001BB8                          1702      
00001BB8                          1703      * in order to use the eahlpers, we need to do some bit manipulation
00001BB8                          1704      * clearing the bits below lets our helper know that the mode is Dn
00001BB8  0882 0003               1705      BCLR    #3,D2
00001BBC  0882 0004               1706      BCLR    #4,D2
00001BC0  0882 0005               1707      BCLR    #5,D2
00001BC4                          1708      
00001BC4  6100 00B4               1709      BSR     EAHELPER05
00001BC8                          1710      
00001BC8  6000 0056               1711      BRA     ENDOP1110
00001BCC                          1712      
00001BCC                          1713  OP1110IMMEIGHT
00001BCC                          1714  
00001BCC  7208                    1715      MOVE.L  #8,D1              * formatting
00001BCE  103C 0003               1716      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001BD2  4E4F                    1717      TRAP    #15                * Perform Trap #14
00001BD4                          1718      
00001BD4  43F9 000025A5           1719      LEA     COMMA,A1            * formatting
00001BDA  103C 000E               1720      MOVE.B  #14,D0              * Trap #14 prints out comma
00001BDE  4E4F                    1721      TRAP    #15                 * Perform Trap #1
00001BE0                          1722      
00001BE0                          1723      * in order to use the eahlpers, we need to do some bit manipulation
00001BE0                          1724      * clearing the bits below lets our helper know that the mode is Dn
00001BE0  0882 0003               1725      BCLR    #3,D2
00001BE4  0882 0004               1726      BCLR    #4,D2
00001BE8  0882 0005               1727      BCLR    #5,D2
00001BEC                          1728      
00001BEC  6100 008C               1729      BSR     EAHELPER05
00001BF0                          1730      
00001BF0  6000 002E               1731      BRA     ENDOP1110
00001BF4                          1732  
00001BF4                          1733  OP1110DATAREG
00001BF4                          1734  
00001BF4                          1735      * in order to use the eahlpers, we need to do some bit manipulation
00001BF4                          1736      * clearing the bits below lets our helper know that the mode is Dn
00001BF4  0882 0003               1737      BCLR    #3,D2
00001BF8  0882 0004               1738      BCLR    #4,D2
00001BFC  0882 0005               1739      BCLR    #5,D2
00001C00  0882 0006               1740      BCLR    #6,D2
00001C04  0882 0007               1741      BCLR    #7,D2
00001C08  0882 0008               1742      BCLR    #8,D2
00001C0C                          1743      
00001C0C  6100 002A               1744      BSR     EAHELPER611
00001C10                          1745      
00001C10  43F9 000025A5           1746      LEA     COMMA,A1            * formatting
00001C16  103C 000E               1747      MOVE.B  #14,D0              * Trap #14 prints out comma
00001C1A  4E4F                    1748      TRAP    #15                 * Perform Trap #14
00001C1C                          1749      
00001C1C  6100 005C               1750      BSR     EAHELPER05
00001C20                          1751  
00001C20                          1752  ENDOP1110
00001C20                          1753  
00001C20  43F9 000024FA           1754      LEA     NEWLINE,A1          * formatting
00001C26  103C 000E               1755      MOVE.B  #14,D0              * Trap #14 prints out a new line
00001C2A  4E4F                    1756      TRAP    #15                 * Perform Trap #14
00001C2C                          1757      
00001C2C  4C9F 03FF               1758      MOVEM   (A7)+,D0-D7/A0-A1   * Caller saved
00001C30  4E75                    1759      RTS
00001C32                          1760  
00001C32                          1761  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001C32                          1762  *-----------------------------------------------------------------------------
00001C32                          1763  
00001C32                          1764  
00001C32                          1765  
00001C32                          1766  *-----------------------------------------------------------------------------
00001C32                          1767  *-----------------------------------------------------------------------------
00001C32                          1768  * NAME: OP_1111   ()
00001C32                          1769  * DESCRIPTION:    a
00001C32                          1770  * PRE-CONDITION:  b
00001C32                          1771  * POST-CONDITION: c
00001C32                          1772  * REGISTERS:      d
00001C32                          1773  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001C32                          1774  OP1111
00001C32                          1775  
00001C32  6100 0618               1776      BSR     UNKNOWNOP
00001C36  4E75                    1777      RTS
00001C38                          1778  
00001C38                          1779  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001C38                          1780  *-----------------------------------------------------------------------------
00001C38                          1781  
00001C38                          1782  
00001C38                          1783  
00001C38                          1784  *-----------------------------------------------------------------------------
00001C38                          1785  *-----------------------------------------------------------------------------
00001C38                          1786  * NAME:           EAHELPER611
00001C38                          1787  * DESCRIPTION:    a
00001C38                          1788  * PRE-CONDITION:  D2 contains the instruction to print modes for.
00001C38                          1789  *                 D5 contains the size of the data to be printed
00001C38                          1790  * POST-CONDITION: Determines if mode is direct, if it's not, passes D2 to 
00001C38                          1791  *                 EAHELPER05 to print.
00001C38                          1792  * REGISTERS:      a
00001C38                          1793  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001C38                          1794  EAHELPER611
00001C38  48A7 FFC0               1795      MOVEM  D0-D7/A0-A1,-(A7)    * Push values onto stack
00001C3C                          1796      
00001C3C  3C3C 0006               1797      MOVE.W  #6, D6              * Prep lower value for bitmask
00001C40  3E3C 0008               1798      MOVE.W  #8, D7              * Prep upper value for bitmask
00001C44  6100 0870               1799      BSR     BITMASK             * Finalize bitmask setup
00001C48  CC42                    1800      AND     D2,D6               * Apply bitmask
00001C4A                          1801      
00001C4A                          1802      * to move the mode where EAHELPER50 can process it
00001C4A  7C06                    1803      MOVE.L  #6,D6       * Prep lower value of bitmask
00001C4C  7E08                    1804      MOVE.L  #8,D7       * Prep upper value of bitmask
00001C4E  6100 0866               1805      BSR     BITMASK     * Create bitmask
00001C52  CC42                    1806      AND     D2,D6       * Apply bitmask
00001C54                          1807      
00001C54  4243                    1808      CLR     D3      * prep D3 to store values
00001C56  3606                    1809      MOVE.W  D6,D3   * store bitmasked value in D3
00001C58  E64B                    1810      LSR     #3,D3   * move bits 6-8 to 3-5
00001C5A                          1811      
00001C5A                          1812      * to move the register where EAHELPER50 can process it
00001C5A  7C09                    1813      MOVE.L  #9,D6   * Prep lower value for bitmask
00001C5C  7E0B                    1814      MOVE.L  #11,D7  * Prep upper value for bitmask
00001C5E  6100 0856               1815      BSR     BITMASK * create bitmask
00001C62  CC42                    1816      AND     D2,D6   * apply bitmask
00001C64                          1817      
00001C64  4244                    1818      CLR     D4      * prep D3 to store values
00001C66  3806                    1819      MOVE.W  D6,D4   * store bitmasked value in D3
00001C68                          1820      
00001C68  E04C                    1821      LSR     #8,D4   * move bits 9-11 to 0-2
00001C6A  E24C                    1822      LSR     #1,D4   * move bits 9-11 to 0-2
00001C6C                          1823    
00001C6C  8684                    1824      OR.L    D4,D3   * combind the register and mode
00001C6E  2403                    1825      MOVE.L  D3,D2   * put the result in D2 so EAHELPER05 can process it
00001C70                          1826      
00001C70  6100 0008               1827      BSR     EAHELPER05
00001C74                          1828      
00001C74                          1829  ENDEAHELPER611
00001C74                          1830      
00001C74  4C9F 03FF               1831      MOVEM  (A7)+,D0-D7/A0-A1    * Revert back
00001C78  4E75                    1832      RTS
00001C7A                          1833  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001C7A                          1834  *-----------------------------------------------------------------------------
00001C7A                          1835  
00001C7A                          1836  
00001C7A                          1837  
00001C7A                          1838  *-----------------------------------------------------------------------------
00001C7A                          1839  *-----------------------------------------------------------------------------
00001C7A                          1840  * NAME:           EAHELPER05
00001C7A                          1841  * DESCRIPTION:    a
00001C7A                          1842  * PRE-CONDITION:  D2 contains the instruction to print modes for. Only call
00001C7A                          1843  *                 this sub-routine helper for operations that only have one
00001C7A                          1844  *                 mode register.
00001C7A                          1845  * POST-CONDITION: Determines mode, passes D2 to REGHELPER to print.
00001C7A                          1846  * REGISTERS:      a
00001C7A                          1847  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001C7A                          1848  EAHELPER05
00001C7A                          1849      * todo: add code for printing immediate values
00001C7A                          1850      
00001C7A  48A7 FFC0               1851      MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001C7E                          1852      
00001C7E  7C03                    1853      MOVE.L  #3,D6
00001C80  7E05                    1854      MOVE.L  #5,D7
00001C82                          1855      
00001C82  6100 0832               1856      BSR     BITMASK * generate a bitmask to identify the mode
00001C86                          1857      
00001C86  CC42                    1858      AND     D2,D6   * mask off the parts of D2 we don't need
00001C88                          1859      
00001C88  2A06                    1860      MOVE.L  D6,D5   * store the 3-5 bitmask for later use
00001C8A                          1861      
00001C8A  0C46 0000               1862      CMPI    #%0000000000000000,D6 * is it data register direct?
00001C8E  6600 000A               1863      BNE     NOTDATAREG
00001C92                          1864      
00001C92  6100 013C               1865      BSR     MODE_DN
00001C96                          1866       
00001C96  6000 0132               1867      BRA     ENDEAHELPER05
00001C9A                          1868      
00001C9A                          1869  NOTDATAREG * address register direct
00001C9A                          1870      
00001C9A  0C46 0008               1871      CMPI    #%0000000000001000,D6 * is it address register direct?
00001C9E  6600 000A               1872      BNE     NOTADRDIRECT
00001CA2                          1873      
00001CA2  6100 022C               1874      BSR     MODE_AN * simply prints out the address register
00001CA6                          1875       
00001CA6  6000 0122               1876      BRA     ENDEAHELPER05
00001CAA                          1877      
00001CAA                          1878  NOTADRDIRECT * address register indirect
00001CAA                          1879          
00001CAA  0C46 0010               1880      CMPI    #%0000000000010000,D6 * is it address register indirect?
00001CAE  6600 0022               1881      BNE     NOTADRINDIRECT
00001CB2                          1882      
00001CB2  43F9 000025A7           1883      LEA     OBRACK,A1       * Load '('
00001CB8  303C 000E               1884      MOVE.W  #14,D0          * Trap #14 to display message
00001CBC  4E4F                    1885      TRAP    #15             * Perform #14
00001CBE                          1886          
00001CBE                          1887  
00001CBE  6100 0210               1888      BSR     MODE_AN * print out an address register
00001CC2                          1889      
00001CC2  43F9 000025A9           1890      LEA     CBRACK,A1       * Load ')'
00001CC8  303C 000E               1891      MOVE.W  #14,D0          * Trap #14 to display message
00001CCC  4E4F                    1892      TRAP    #15             * Perform #14
00001CCE                          1893       
00001CCE  6000 00FA               1894      BRA     ENDEAHELPER05
00001CD2                          1895      
00001CD2                          1896  NOTADRINDIRECT * address register indirect, post increment
00001CD2                          1897      
00001CD2  0C46 0018               1898      CMPI    #%0000000000011000,D6 * is it address register indirect post increment?
00001CD6  6600 002E               1899      BNE     NOTADRINDIRECTPOST
00001CDA                          1900      
00001CDA  43F9 000025A7           1901      LEA     OBRACK,A1       * Load '('
00001CE0  303C 000E               1902      MOVE.W  #14,D0          * Trap #14 to display message
00001CE4  4E4F                    1903      TRAP    #15             * Perform #14
00001CE6                          1904          
00001CE6                          1905  
00001CE6  6100 01E8               1906      BSR     MODE_AN * print out an address register
00001CEA                          1907      
00001CEA  43F9 000025A9           1908      LEA     CBRACK,A1       * Load ')'
00001CF0  303C 000E               1909      MOVE.W  #14,D0          * Trap #14 to display message
00001CF4  4E4F                    1910      TRAP    #15             * Perform #14
00001CF6                          1911      
00001CF6  43F9 000025AB           1912      LEA     PLUS,A1       * Load '+'
00001CFC  303C 000E               1913      MOVE.W  #14,D0          * Trap #14 to display message
00001D00  4E4F                    1914      TRAP    #15             * Perform #14
00001D02                          1915       
00001D02  6000 00C6               1916      BRA     ENDEAHELPER05
00001D06                          1917      
00001D06                          1918  NOTADRINDIRECTPOST * address register indirect, pre decrement
00001D06                          1919      
00001D06  0C46 0020               1920      CMPI    #%0000000000100000,D6 * is it address register indirect pre decrement?
00001D0A  6600 002E               1921      BNE     NOTADRINDIRECTPRE
00001D0E                          1922      
00001D0E  43F9 000025AD           1923      LEA     MINUS,A1       * Load '-'
00001D14  303C 000E               1924      MOVE.W  #14,D0          * Trap #14 to display message
00001D18  4E4F                    1925      TRAP    #15             * Perform #14
00001D1A                          1926      
00001D1A  43F9 000025A7           1927      LEA     OBRACK,A1       * Load '('
00001D20  303C 000E               1928      MOVE.W  #14,D0          * Trap #14 to display message
00001D24  4E4F                    1929      TRAP    #15             * Perform #14
00001D26                          1930          
00001D26                          1931  
00001D26  6100 01A8               1932      BSR     MODE_AN * print out an address register
00001D2A                          1933      
00001D2A  43F9 000025A9           1934      LEA     CBRACK,A1       * Load ')'
00001D30  303C 000E               1935      MOVE.W  #14,D0          * Trap #14 to display message
00001D34  4E4F                    1936      TRAP    #15             * Perform #14
00001D36                          1937       
00001D36  6000 0092               1938      BRA     ENDEAHELPER05
00001D3A                          1939  
00001D3A                          1940  NOTADRINDIRECTPRE * if none of the previous cases are true, it is a mode not supported by our decompiler
00001D3A                          1941  
00001D3A  0C46 0038               1942      CMPI    #%0000000000111000,D6 * is it immediate?
00001D3E  6600 0086               1943      BNE     NOTIMMEDIATE
00001D42                          1944  
00001D42  0C43 0001               1945      CMPI    #1,D3 * is it a byte?
00001D46  6600 0028               1946      BNE     NOTIMMBYTE
00001D4A                          1947      
00001D4A  43F9 000025A3           1948      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001D50  103C 000E               1949      MOVE.B  #14,D0
00001D54  4E4F                    1950      TRAP    #15
00001D56                          1951      
00001D56  3C3C 0000               1952      MOVE.W  #0, D6              * Prep lower value for bitmask
00001D5A  3E3C 0007               1953      MOVE.W  #7, D7              * Prep upper value for bitmask
00001D5E  6100 0756               1954      BSR     BITMASK             * Finalize bitmask setup
00001D62                          1955          
00001D62  321A                    1956      MOVE.W  (A2)+,D1
00001D64                          1957      
00001D64  C286                    1958      AND.L     D6,D1
00001D66                          1959          
00001D66  103C 0003               1960      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001D6A  4E4F                    1961      TRAP    #15      * Perform Trap #3
00001D6C                          1962      
00001D6C  6000 005C               1963      BRA     ENDEAHELPER05
00001D70                          1964  
00001D70                          1965  NOTIMMBYTE
00001D70                          1966      
00001D70  0C43 0002               1967      CMPI    #2,D3 * is it a word?
00001D74  6600 0028               1968      BNE     NOTIMMWORD
00001D78                          1969      
00001D78  43F9 000025A3           1970      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001D7E  103C 000E               1971      MOVE.B  #14,D0
00001D82  4E4F                    1972      TRAP    #15
00001D84                          1973      
00001D84  3C3C 0000               1974      MOVE.W  #0, D6              * Prep lower value for bitmask
00001D88  3E3C 000F               1975      MOVE.W  #15, D7             * Prep upper value for bitmask
00001D8C  6100 0728               1976      BSR     BITMASK             * Finalize bitmask setup
00001D90                          1977          
00001D90  321A                    1978      MOVE.W  (A2)+,D1
00001D92                          1979      
00001D92  C286                    1980      AND.L     D6,D1               * Apply bitmask
00001D94                          1981          
00001D94  103C 0003               1982      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001D98  4E4F                    1983      TRAP    #15      * Perform Trap #3
00001D9A                          1984      
00001D9A  6000 002E               1985      BRA     ENDEAHELPER05
00001D9E                          1986      
00001D9E                          1987  NOTIMMWORD
00001D9E  0C43 0003               1988      CMPI    #3,D3 * is it a long?
00001DA2  6600 0022               1989      BNE     NOTIMMEDIATE
00001DA6                          1990      
00001DA6  43F9 000025A3           1991      LEA     IMD,A1 *print out the '#' indicating an immediate value
00001DAC  103C 000E               1992      MOVE.B  #14,D0
00001DB0  4E4F                    1993      TRAP    #15
00001DB2                          1994          
00001DB2  221A                    1995      MOVE.L  (A2)+,D1
00001DB4                          1996          
00001DB4  103C 0003               1997      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001DB8  4E4F                    1998      TRAP    #15      * Perform Trap #3
00001DBA                          1999      
00001DBA  321A                    2000      MOVE.W  (A2)+,D1
00001DBC                          2001          
00001DBC  103C 0003               2002      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
00001DC0  4E4F                    2003      TRAP    #15      * Perform Trap #3
00001DC2                          2004      
00001DC2  6000 0006               2005      BRA     ENDEAHELPER05
00001DC6                          2006  
00001DC6                          2007  NOTIMMEDIATE    
00001DC6                          2008  
00001DC6                          2009  
00001DC6  6100 0484               2010      BSR     UNKNOWNOP
00001DCA                          2011      
00001DCA                          2012  ENDEAHELPER05
00001DCA  4C9F 03FF               2013      MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001DCE  4E75                    2014      RTS
00001DD0                          2015  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001DD0                          2016  *-----------------------------------------------------------------------------
00001DD0                          2017  
00001DD0                          2018  
00001DD0                          2019  
00001DD0                          2020  *-----------------------------------------------------------------------------
00001DD0                          2021  *-----------------------------------------------------------------------------
00001DD0                          2022  * NAME:           MODE_DN
00001DD0                          2023  * DESCRIPTION:    Generalize the EA part of the project.
00001DD0                          2024  * PRE-CONDITION:  The mode must have been correctly identified. All modes
00001DD0                          2025  *                 must be called by RTS.
00001DD0                          2026  * POST-CONDITION: After the EA, the entire op will head back to the BSR that
00001DD0                          2027  *                 called it.
00001DD0                          2028  * REGISTERS:      a
00001DD0                          2029  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001DD0                          2030  * ---> Dn
00001DD0                          2031  MODE_DN
00001DD0  48A7 FFC0               2032          MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001DD4                          2033  
00001DD4  3C3C 0000               2034          MOVE.W  #0, D6              * Prep lower value for bitmask
00001DD8  3E3C 0002               2035          MOVE.W  #2, D7              * Prep upper value for bitmask
00001DDC  6100 06D8               2036          BSR     BITMASK             * Finalize bitmask setup
00001DE0  CC42                    2037          AND     D2,D6               * Apply bitmask
00001DE2                          2038          
00001DE2  0C46 0000               2039          CMPI    #%000000000000000, D6   * Data Register D0?
00001DE6  6600 000A               2040          BNE     NOTD0
00001DEA                          2041          
00001DEA  6100 0074               2042          BSR     PRINTD0
00001DEE  6000 006A               2043          BRA     ENDMODE_DN
00001DF2                          2044  NOTD0      
00001DF2  0C46 0001               2045          CMPI    #%000000000000001, D6   * Data Register D1?
00001DF6  6600 000A               2046          BNE     NOTD1
00001DFA                          2047          
00001DFA  6100 0072               2048          BSR     PRINTD1
00001DFE  6000 005A               2049          BRA     ENDMODE_DN
00001E02                          2050  NOTD1
00001E02  0C46 0002               2051          CMPI    #%000000000000010, D6   * Data Register D2?
00001E06  6600 000A               2052          BNE     NOTD2
00001E0A                          2053          
00001E0A  6100 0070               2054          BSR     PRINTD2
00001E0E  6000 004A               2055          BRA     ENDMODE_DN
00001E12                          2056  NOTD2
00001E12  0C46 0003               2057          CMPI    #%000000000000011, D6   * Data Register D3?
00001E16  6600 000A               2058          BNE     NOTD3
00001E1A                          2059          
00001E1A  6100 006E               2060          BSR     PRINTD3
00001E1E  6000 003A               2061          BRA     ENDMODE_DN
00001E22                          2062  NOTD3
00001E22  0C46 0004               2063          CMPI    #%000000000000100, D6   * Data Register D4?
00001E26  6600 000A               2064          BNE     NOTD4
00001E2A                          2065          
00001E2A  6100 006C               2066          BSR     PRINTD4
00001E2E  6000 002A               2067          BRA     ENDMODE_DN
00001E32                          2068  NOTD4
00001E32  0C46 0005               2069          CMPI    #%000000000000101, D6   * Data Register D5?
00001E36  6600 000A               2070          BNE     NOTD5
00001E3A                          2071          
00001E3A  6100 006A               2072          BSR     PRINTD5
00001E3E  6000 001A               2073          BRA     ENDMODE_DN
00001E42                          2074  NOTD5
00001E42  0C46 0006               2075          CMPI    #%000000000000110, D6   * Data Register D6?
00001E46  6600 000A               2076          BNE     NOTD6
00001E4A                          2077          
00001E4A  6100 0068               2078          BSR     PRINTD6
00001E4E  6000 000A               2079          BRA     ENDMODE_DN
00001E52                          2080  NOTD6
00001E52  6100 006E               2081          BSR     PRINTD7
00001E56  6000 0002               2082          BRA     ENDMODE_DN
00001E5A                          2083          
00001E5A                          2084  ENDMODE_DN
00001E5A  4C9F 03FF               2085          MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00001E5E  4E75                    2086          RTS
00001E60                          2087  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001E60                          2088  *-----------------------------------------------------------------------------
00001E60                          2089  
00001E60                          2090  
00001E60                          2091  
00001E60                          2092  *-----------------------------------------------------------------------------
00001E60                          2093  *-----------------------------------------------------------------------------
00001E60                          2094  * NAME:           PRINTD0
00001E60                          2095  * DESCRIPTION:    Simply prints D0, D1, ..., up to D7.
00001E60                          2096  * PRE-CONDITION:  a
00001E60                          2097  * POST-CONDITION: a
00001E60                          2098  * REGISTERS:      a
00001E60                          2099  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001E60                          2100  PRINTD0
00001E60  43F9 000025D7           2101          LEA     __D0, A1        * Load 'D0'
00001E66  103C 000E               2102          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E6A  4E4F                    2103          TRAP    #15             * Perform Trap #14
00001E6C  4E75                    2104          RTS
00001E6E                          2105  PRINTD1
00001E6E  43F9 000025DA           2106          LEA     __D1, A1        * Load 'D1'
00001E74  103C 000E               2107          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E78  4E4F                    2108          TRAP    #15             * Perform Trap #14
00001E7A  4E75                    2109          RTS      
00001E7C                          2110  PRINTD2
00001E7C  43F9 000025DD           2111          LEA     __D2, A1        * Load 'D2'
00001E82  103C 000E               2112          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E86  4E4F                    2113          TRAP    #15             * Perform Trap #14
00001E88  4E75                    2114          RTS      
00001E8A                          2115  PRINTD3
00001E8A  43F9 000025E0           2116          LEA     __D3, A1        * Load 'D3'
00001E90  103C 000E               2117          MOVE.B  #14, D0         * Load Trap #14 to print out
00001E94  4E4F                    2118          TRAP    #15             * Perform Trap #14
00001E96  4E75                    2119          RTS      
00001E98                          2120  PRINTD4
00001E98  43F9 000025E3           2121          LEA     __D4, A1        * Load 'D4'
00001E9E  103C 000E               2122          MOVE.B  #14, D0         * Load Trap #14 to print out
00001EA2  4E4F                    2123          TRAP    #15             * Perform Trap #14
00001EA4  4E75                    2124          RTS       
00001EA6                          2125  PRINTD5
00001EA6  43F9 000025E6           2126          LEA     __D5, A1        * Load 'D5'
00001EAC  103C 000E               2127          MOVE.B  #14, D0         * Load Trap #14 to print out
00001EB0  4E4F                    2128          TRAP    #15             * Perform Trap #14
00001EB2  4E75                    2129          RTS      
00001EB4                          2130  PRINTD6
00001EB4  43F9 000025E9           2131          LEA     __D6, A1        * Load 'D6'
00001EBA  103C 000E               2132          MOVE.B  #14, D0         * Load Trap #14 to print out
00001EBE  4E4F                    2133          TRAP    #15             * Perform Trap #14
00001EC0  4E75                    2134          RTS
00001EC2                          2135  PRINTD7
00001EC2  43F9 000025EC           2136          LEA     __D7, A1        * Load 'D7'
00001EC8  103C 000E               2137          MOVE.B  #14, D0         * Load Trap #14 to print out
00001ECC  4E4F                    2138          TRAP    #15             * Perform Trap #14
00001ECE  4E75                    2139          RTS
00001ED0                          2140  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001ED0                          2141  *-----------------------------------------------------------------------------
00001ED0                          2142  
00001ED0                          2143  
00001ED0                          2144  
00001ED0                          2145  *-----------------------------------------------------------------------------
00001ED0                          2146  *-----------------------------------------------------------------------------
00001ED0                          2147  * NAME:           MODE_AN
00001ED0                          2148  * DESCRIPTION:    Simply chooses to print A0-A7.
00001ED0                          2149  * PRE-CONDITION:  a
00001ED0                          2150  * POST-CONDITION: a
00001ED0                          2151  * REGISTERS:      a
00001ED0                          2152  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001ED0                          2153  MODE_AN
00001ED0  48A7 FFC0               2154          MOVEM   D0-D7/A0-A1,-(A7)   * Save information
00001ED4                          2155  
00001ED4  3C3C 0000               2156          MOVE.W  #0, D6              * Prep lower value for bitmask
00001ED8  3E3C 0002               2157          MOVE.W  #2, D7              * Prep upper value for bitmask
00001EDC  6100 05D8               2158          BSR     BITMASK             * Finalize bitmask setup
00001EE0  CC42                    2159          AND     D2,D6               * Apply bitmask
00001EE2                          2160          
00001EE2  0C46 0000               2161          CMPI    #%000000000000000, D6   * Address Register A0?
00001EE6  6600 000A               2162          BNE     NOTA0
00001EEA                          2163          
00001EEA  6100 0074               2164          BSR     PRINTA0
00001EEE                          2165          
00001EEE  6000 006A               2166          BRA     ENDMODE_AN
00001EF2                          2167  NOTA0      
00001EF2  0C46 0001               2168          CMPI    #%000000000000001, D6   * Address Register A1?
00001EF6  6600 000A               2169          BNE     NOTA1
00001EFA                          2170          
00001EFA  6100 0072               2171          BSR     PRINTA1
00001EFE                          2172          
00001EFE  6000 005A               2173          BRA     ENDMODE_AN
00001F02                          2174  NOTA1
00001F02  0C46 0002               2175          CMPI    #%000000000000010, D6   * Address Register A2?
00001F06  6600 000A               2176          BNE     NOTA2
00001F0A                          2177          
00001F0A  6100 0070               2178          BSR     PRINTA2
00001F0E                          2179          
00001F0E  6000 004A               2180          BRA     ENDMODE_AN
00001F12                          2181  NOTA2
00001F12  0C46 0003               2182          CMPI    #%000000000000011, D6   * Address Register A3?
00001F16  6600 000A               2183          BNE     NOTA3
00001F1A                          2184          
00001F1A  6100 006E               2185          BSR     PRINTA3
00001F1E                          2186          
00001F1E  6000 003A               2187          BRA     ENDMODE_AN
00001F22                          2188  NOTA3
00001F22  0C46 0004               2189          CMPI    #%000000000000100, D6   * Address Register A4?
00001F26  6600 000A               2190          BNE     NOTA4
00001F2A                          2191          
00001F2A  6100 006C               2192          BSR     PRINTA4
00001F2E                          2193          
00001F2E  6000 002A               2194          BRA     ENDMODE_AN
00001F32                          2195  NOTA4
00001F32  0C46 0005               2196          CMPI    #%000000000000101, D6   * Address Register A5?
00001F36  6600 000A               2197          BNE     NOTA5
00001F3A                          2198          
00001F3A  6100 006A               2199          BSR     PRINTA5
00001F3E                          2200          
00001F3E  6000 001A               2201          BRA     ENDMODE_AN
00001F42                          2202  NOTA5
00001F42  0C46 0006               2203          CMPI    #%000000000000110, D6   * Address Register A6?
00001F46  6600 000A               2204          BNE     NOTA6
00001F4A                          2205          
00001F4A  6100 0068               2206          BSR     PRINTA6
00001F4E                          2207          
00001F4E  6000 000A               2208          BRA     ENDMODE_AN
00001F52                          2209  NOTA6
00001F52  6100 006E               2210          BSR     PRINTA7
00001F56                          2211          
00001F56  6000 0002               2212          BRA     ENDMODE_AN
00001F5A                          2213  ENDMODE_AN
00001F5A  4C9F 03FF               2214          MOVEM   (A7)+,D0-D7/A0-A1   * Restore registers
00001F5E  4E75                    2215          RTS
00001F60                          2216  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001F60                          2217  *-----------------------------------------------------------------------------
00001F60                          2218  
00001F60                          2219  
00001F60                          2220  
00001F60                          2221  *-----------------------------------------------------------------------------
00001F60                          2222  *-----------------------------------------------------------------------------
00001F60                          2223  * NAME:           PRINTA0
00001F60                          2224  * DESCRIPTION:    Simply print out the address register.
00001F60                          2225  * PRE-CONDITION:  a
00001F60                          2226  * POST-CONDITION: a
00001F60                          2227  * REGISTERS:      a
00001F60                          2228  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001F60                          2229  PRINTA0
00001F60  43F9 000025BF           2230          LEA     __A0, A1        * Load 'A0'
00001F66  103C 000E               2231          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F6A  4E4F                    2232          TRAP    #15             * Perform Trap #14
00001F6C  4E75                    2233          RTS
00001F6E                          2234  
00001F6E                          2235  PRINTA1
00001F6E  43F9 000025C2           2236          LEA     __A1, A1        * Load 'A1'
00001F74  103C 000E               2237          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F78  4E4F                    2238          TRAP    #15             * Perform Trap #14
00001F7A  4E75                    2239          RTS
00001F7C                          2240          
00001F7C                          2241  PRINTA2
00001F7C  43F9 000025C5           2242          LEA     __A2, A1        * Load 'A2'
00001F82  103C 000E               2243          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F86  4E4F                    2244          TRAP    #15             * Perform Trap #14
00001F88  4E75                    2245          RTS
00001F8A                          2246  
00001F8A                          2247  PRINTA3
00001F8A  43F9 000025C8           2248          LEA     __A3, A1        * Load 'A3'
00001F90  103C 000E               2249          MOVE.B  #14, D0         * Load Trap #14 to print out
00001F94  4E4F                    2250          TRAP    #15             * Perform Trap #14
00001F96  4E75                    2251          RTS
00001F98                          2252  
00001F98                          2253  PRINTA4
00001F98  43F9 000025CB           2254          LEA     __A4, A1        * Load 'A4'
00001F9E  103C 000E               2255          MOVE.B  #14, D0         * Load Trap #14 to print out
00001FA2  4E4F                    2256          TRAP    #15             * Perform Trap #14
00001FA4  4E75                    2257          RTS
00001FA6                          2258  
00001FA6                          2259  PRINTA5
00001FA6  43F9 000025CE           2260          LEA     __A5, A1        * Load 'A5'
00001FAC  103C 000E               2261          MOVE.B  #14, D0         * Load Trap #14 to print out
00001FB0  4E4F                    2262          TRAP    #15             * Perform Trap #14
00001FB2  4E75                    2263          RTS
00001FB4                          2264  
00001FB4                          2265  PRINTA6
00001FB4  43F9 000025D1           2266          LEA     __A6, A1        * Load 'A6'
00001FBA  103C 000E               2267          MOVE.B  #14, D0         * Load Trap #14 to print out
00001FBE  4E4F                    2268          TRAP    #15             * Perform Trap #14
00001FC0  4E75                    2269          RTS
00001FC2                          2270  
00001FC2                          2271  PRINTA7
00001FC2  43F9 000025D4           2272          LEA     __A7, A1        * Load 'A7'
00001FC8  103C 000E               2273          MOVE.B  #14, D0         * Load Trap #14 to print out
00001FCC  4E4F                    2274          TRAP    #15             * Perform Trap #14
00001FCE  4E75                    2275          RTS
00001FD0                          2276  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001FD0                          2277  *-----------------------------------------------------------------------------
00001FD0                          2278  
00001FD0                          2279  
00001FD0                          2280  
00001FD0                          2281  *-----------------------------------------------------------------------------
00001FD0                          2282  *-----------------------------------------------------------------------------
00001FD0                          2283  * NAME:           SIZE67
00001FD0                          2284  * DESCRIPTION:    Called if the size is stored in bits 6 to 7.
00001FD0                          2285  * PRE-CONDITION:  a
00001FD0                          2286  * POST-CONDITION: a
00001FD0                          2287  * REGISTERS:      a
00001FD0                          2288  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001FD0                          2289  SIZE67
00001FD0  48A7 FFFE               2290          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
00001FD4  3C3C 0006               2291          MOVE.W  #6, D6              * Prep lower value for bitmask
00001FD8  3E3C 0007               2292          MOVE.W  #7, D7              * Prep upper value for bitmask
00001FDC  6100 04D8               2293          BSR     BITMASK             * Finalize bitmask setup
00001FE0  CC42                    2294          AND     D2,D6               * Apply bitmask     
00001FE2                          2295  
00001FE2  0C46 0000               2296          CMPI    #%0000000000000000, D6   * is it a BYTE?
00001FE6  6600 000A               2297          BNE     NOT67BYTE
00001FEA                          2298          
00001FEA  6100 0080               2299          BSR     PRINTBYTE               * Branch to handle BYTE sizes
00001FEE  6000 001E               2300          BRA     END67
00001FF2                          2301  NOT67BYTE        
00001FF2  0C46 0040               2302          CMPI    #%0000000001000000, D6   * is it a WORD?
00001FF6  6600 000A               2303          BNE     NOT67WORD
00001FFA                          2304          
00001FFA  6100 007E               2305          BSR     PRINTWORD               * Branch to handle WORD sizes
00001FFE  6000 000E               2306          BRA     END67
00002002                          2307  NOT67WORD
00002002  0C46 0080               2308          CMPI    #%0000000010000000, D6   * is it a LONG?
00002006  6600 0006               2309          BNE     END67
0000200A                          2310          
0000200A  6100 007C               2311          BSR     PRINTLONG               * Branch to handle LONG sizes
0000200E                          2312  END67
0000200E  4C9F 7FFF               2313          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
00002012  4E75                    2314          RTS                             * Return. Size handling is finished.
00002014                          2315  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002014                          2316  *-----------------------------------------------------------------------------
00002014                          2317  
00002014                          2318  
00002014                          2319  
00002014                          2320  *-----------------------------------------------------------------------------
00002014                          2321  *-----------------------------------------------------------------------------
00002014                          2322  * NAME:           SIZE68
00002014                          2323  * DESCRIPTION:    Called if the size is stored in bits 6 to 8.
00002014                          2324  * PRE-CONDITION:  a
00002014                          2325  * POST-CONDITION: a
00002014                          2326  * REGISTERS:      a
00002014                          2327  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002014                          2328  SIZE68
00002014                          2329          * finish later, need to follow the same format as SIZE67
00002014                          2330          
00002014                          2331          
00002014  48A7 FFFE               2332          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
00002018  3C3C 0006               2333          MOVE.W  #6, D6              * Prep lower value for bitmask
0000201C  3E3C 0008               2334          MOVE.W  #8, D7              * Prep upper value for bitmask
00002020  6100 0494               2335          BSR     BITMASK             * Finalize bitmask setup
00002024  CC42                    2336          AND     D2,D6               * Apply bitmask          
00002026                          2337          
00002026  0C46 0000               2338          CMPI    #%0000000000000000, D6   * is it a BYTE?
0000202A  6100 0040               2339          BSR     PRINTBYTE               * Branch to handle BYTE sizes
0000202E  0C46 0100               2340          CMPI    #%0000000100000000, D6   * is it a BYTE?
00002032  6100 0038               2341          BSR     PRINTBYTE               * Branch to handle BYTE sizes 
00002036                          2342        
00002036  0C46 0040               2343          CMPI    #%0000000001000000, D6   * is it a WORD?
0000203A  6100 003E               2344          BSR     PRINTWORD               * Branch to handle BYTE sizes
0000203E  0C46 0140               2345          CMPI    #%0000000101000000, D6   * is it a WORD?
00002042  6100 0036               2346          BSR     PRINTWORD               * Branch to handle BYTE sizes
00002046  0C46 00C0               2347          CMPI    #%0000000011000000, D6   * is it a WORD (ADDA)?
0000204A  6100 002E               2348          BSR     PRINTWORD               * Branch to handle BYTE sizes
0000204E                          2349  
0000204E  0C46 0080               2350          CMPI    #%0000000010000000, D6   * is it a LONG?
00002052  6100 0034               2351          BSR     PRINTLONG               * Branch to handle BYTE sizes
00002056  0C46 0180               2352          CMPI    #%0000000110000000, D6   * is it a LONG?
0000205A  6100 002C               2353          BSR     PRINTLONG               * Branch to handle BYTE sizes
0000205E  0C46 01C0               2354          CMPI    #%0000000111000000, D6   * is it a LONG (ADDA)?
00002062  6100 0024               2355          BSR     PRINTLONG               * Branch to handle BYTE sizes
00002066                          2356  
00002066  4C9F 7FFF               2357          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
0000206A  4E75                    2358          RTS                             * Return. Size handling is finished.
0000206C                          2359  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000206C                          2360  *-----------------------------------------------------------------------------
0000206C                          2361  
0000206C                          2362  
0000206C                          2363  
0000206C                          2364  *-----------------------------------------------------------------------------
0000206C                          2365  *-----------------------------------------------------------------------------
0000206C                          2366  * NAME:           PRINTBYTE
0000206C                          2367  * DESCRIPTION:    a
0000206C                          2368  * PRE-CONDITION:  a
0000206C                          2369  * POST-CONDITION: a
0000206C                          2370  * REGISTERS:      a
0000206C                          2371  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000206C                          2372  PRINTBYTE
0000206C  43F9 000025B3           2373          LEA     __B,A1      * Load '.B ' into A1
00002072  103C 000E               2374          MOVE.B  #14,D0      * Trap #14 setup to print
00002076  4E4F                    2375          TRAP    #15         * Perform Trap #14
00002078  4E75                    2376          RTS                 * Return to SIZE67/SIZE68
0000207A                          2377          
0000207A                          2378  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000207A                          2379  *-----------------------------------------------------------------------------
0000207A                          2380  
0000207A                          2381  
0000207A                          2382  
0000207A                          2383  *-----------------------------------------------------------------------------
0000207A                          2384  *-----------------------------------------------------------------------------
0000207A                          2385  * NAME:           PRINTWORD
0000207A                          2386  * DESCRIPTION:    a
0000207A                          2387  * PRE-CONDITION:  a
0000207A                          2388  * POST-CONDITION: a
0000207A                          2389  * REGISTERS:      a
0000207A                          2390  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000207A                          2391  PRINTWORD
0000207A  43F9 000025B7           2392          LEA     __W,A1      * Load '.W ' into A1
00002080  103C 000E               2393          MOVE.B  #14,D0      * Trap #14 setup to print
00002084  4E4F                    2394          TRAP    #15         * Perform Trap #14
00002086  4E75                    2395          RTS                 * Return to SIZE67/SIZE68
00002088                          2396          
00002088                          2397  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002088                          2398  *-----------------------------------------------------------------------------
00002088                          2399  
00002088                          2400  
00002088                          2401  
00002088                          2402  *-----------------------------------------------------------------------------
00002088                          2403  *-----------------------------------------------------------------------------
00002088                          2404  * NAME:           PRINTLONG
00002088                          2405  * DESCRIPTION:    a
00002088                          2406  * PRE-CONDITION:  a
00002088                          2407  * POST-CONDITION: a
00002088                          2408  * REGISTERS:      a
00002088                          2409  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002088                          2410  PRINTLONG
00002088  43F9 000025BB           2411          LEA     __L,A1      * Load '.L ' into A1
0000208E  103C 000E               2412          MOVE.B  #14,D0      * Trap #14 setup to print
00002092  4E4F                    2413          TRAP    #15         * Perform Trap #14
00002094  4E75                    2414          RTS                 * Return to SIZE67/SIZE68
00002096                          2415          
00002096                          2416  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002096                          2417  *-----------------------------------------------------------------------------
00002096                          2418  
00002096                          2419  
00002096                          2420  
00002096                          2421  *-----------------------------------------------------------------------------
00002096                          2422  *-----------------------------------------------------------------------------
00002096                          2423  * NAME:           MOVEMHELPERPOST
00002096                          2424  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
00002096                          2425  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
00002096                          2426  * POST-CONDITION: The registers being saved are printed
00002096                          2427  * REGISTERS:      A2
00002096                          2428  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002096                          2429  MOVEMHELPERPOST
00002096  48A7 FFFE               2430          MOVEM  D0-D7/A0-A6,-(A7)
0000209A                          2431          
0000209A  4285                    2432          CLR.L   D5  * to be used as a loop counter
0000209C  4284                    2433          CLR.L   D4  * == 1 if we have printed any registers (for fencepost issue)
0000209E  4283                    2434          CLR.L   D3  * == 1 if we are in a range
000020A0  4286                    2435          CLR.L   D6  * == 1 if we have already printed the slash or dash
000020A2  4287                    2436          CLR.L   D7  * == counts the number of registers in a range
000020A4  1C3C 0001               2437          MOVE.B  #1,D6 * to fix fencepost issue
000020A8  4282                    2438          CLR.L   D2
000020AA  3412                    2439          MOVE.W  (A2),D2
000020AC                          2440          
000020AC                          2441  DLOOP * loop to print out the data register portion of the addresses being saved
000020AC                          2442  
000020AC  E25A                    2443          ROR     #1,D2
000020AE  6500 0006               2444          BCS     DVALID
000020B2                          2445          
000020B2  6000 0064               2446          BRA     DINVALID
000020B6                          2447          
000020B6                          2448  DVALID
000020B6  0C43 0000               2449          CMPI    #0,D3
000020BA  6700 0020               2450          BEQ     DFORWARDVALID * we are not in a range
000020BE                          2451          
000020BE  5247                    2452          ADDI    #1,D7 *increment number of regs in range
000020C0                          2453          
000020C0  0C46 0001               2454          CMPI    #1,D6   *have we already printed a symbol?
000020C4  6700 0084               2455          BEQ     DLOOPITER
000020C8                          2456          
000020C8  43F9 000025B1           2457          LEA     DASH,A1    *print a dash
000020CE  103C 000E               2458          MOVE.B  #14,D0
000020D2  4E4F                    2459          TRAP    #15
000020D4                          2460          
000020D4  1C3C 0001               2461          MOVE.B  #1,D6 * indicates a symbol has been printed
000020D8                          2462          
000020D8  6000 0070               2463          BRA     DLOOPITER
000020DC                          2464          
000020DC                          2465  DFORWARDVALID
000020DC                          2466          * not in a range yet, print
000020DC                          2467          
000020DC  0C44 0000               2468          CMPI    #0,D4
000020E0  6700 000E               2469          BEQ     DNOSLASH
000020E4                          2470                  
000020E4  43F9 000025AF           2471          LEA     SLASH,A1
000020EA  103C 000E               2472          MOVE.B  #14,D0
000020EE  4E4F                    2473          TRAP    #15
000020F0                          2474          
000020F0                          2475  DNOSLASH
000020F0                          2476  
000020F0  183C 0001               2477          MOVE.B  #1,D4 * we have printed something, now slashes are fair game
000020F4                          2478          
000020F4  1C3C 0001               2479          MOVE.B  #1,D6   * we have printed a symbol
000020F8                          2480          
000020F8  43F9 00002599           2481          LEA     ASCII_D,A1
000020FE  103C 000E               2482          MOVE.B  #14,D0
00002102  4E4F                    2483          TRAP    #15
00002104                          2484          
00002104  2205                    2485          MOVE.L  D5,D1
00002106  103C 0003               2486          MOVE.B  #3,D0
0000210A  4E4F                    2487          TRAP    #15
0000210C                          2488  
0000210C  163C 0001               2489          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
00002110  1C3C 0000               2490          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
00002114                          2491          
00002114  6000 0034               2492          BRA     DLOOPITER
00002118                          2493  
00002118                          2494  
00002118                          2495  DINVALID
00002118                          2496  
00002118                          2497          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
00002118                          2498          
00002118  0C43 0001               2499          CMPI    #1,D3
0000211C  6600 002C               2500          BNE     DLOOPITER
00002120                          2501          
00002120  163C 0000               2502          MOVE.B  #0,D3
00002124                          2503          
00002124  0C47 0001               2504          CMPI    #1,D7
00002128  6D00 001E               2505          BLT     DLOOPITERCLR
0000212C                          2506          
0000212C  43F9 00002599           2507          LEA     ASCII_D,A1
00002132  103C 000E               2508          MOVE.B  #14,D0
00002136  4E4F                    2509          TRAP    #15
00002138                          2510          
00002138  2205                    2511          MOVE.L  D5,D1
0000213A                          2512          
0000213A  0641 FFFF               2513          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
0000213E                          2514          
0000213E  103C 0003               2515          MOVE.B  #3,D0
00002142  4E4F                    2516          TRAP    #15
00002144                          2517          
00002144  6000 0004               2518          BRA     DLOOPITER
00002148                          2519          
00002148                          2520  DLOOPITERCLR        
00002148  4287                    2521          CLR.L   D7
0000214A                          2522  
0000214A                          2523  DLOOPITER
0000214A                          2524          
0000214A  0C45 0008               2525          CMPI    #8,D5
0000214E  6700 0008               2526          BEQ     DLOOPDONE
00002152                          2527  
00002152  5245                    2528          ADDI    #1,D5
00002154  6000 FF56               2529          BRA     DLOOP
00002158                          2530  
00002158                          2531  DLOOPDONE
00002158                          2532  
00002158  7A09                    2533          MOVE.L  #9,D5  * to be used as a loop counter
0000215A  4283                    2534          CLR.L   D3  * == 1 if we are in a range
0000215C  4286                    2535          CLR.L   D6  * == 1 if we have already printed the slash or dash
0000215E  4287                    2536          CLR.L   D7  * count of registers in a range
00002160  1C3C 0001               2537          MOVE.B  #1,D6 * to fix fencepost issue     
00002164                          2538  
00002164                          2539  ALOOP * loop to print out the data register portion of the addresses being saved
00002164                          2540  
00002164  E25A                    2541          ROR     #1,D2
00002166  6500 0006               2542          BCS     AVALID
0000216A                          2543          
0000216A  6000 0068               2544          BRA     AINVALID
0000216E                          2545          
0000216E                          2546  AVALID
0000216E  0C43 0000               2547          CMPI    #0,D3
00002172  6700 0020               2548          BEQ     AFORWARDVALID * we are not in a range
00002176                          2549          
00002176  5247                    2550          ADDI    #1,D7 *increment number of regs in range
00002178                          2551          
00002178  0C46 0001               2552          CMPI    #1,D6   *have we already printed a symbol?
0000217C  6700 008C               2553          BEQ     ALOOPITER
00002180                          2554          
00002180  43F9 000025B1           2555          LEA     DASH,A1    *print a dash
00002186  103C 000E               2556          MOVE.B  #14,D0
0000218A  4E4F                    2557          TRAP    #15
0000218C                          2558          
0000218C  1C3C 0001               2559          MOVE.B  #1,D6 * indicates a symbol has been printed
00002190                          2560          
00002190  6000 0078               2561          BRA     ALOOPITER
00002194                          2562          
00002194                          2563  AFORWARDVALID
00002194                          2564          * not in a range yet, print
00002194                          2565          
00002194                          2566                  
00002194  0C44 0000               2567          CMPI    #0,D4
00002198  6700 000E               2568          BEQ     ANOSLASH
0000219C                          2569                  
0000219C  43F9 000025AF           2570          LEA     SLASH,A1
000021A2  103C 000E               2571          MOVE.B  #14,D0
000021A6  4E4F                    2572          TRAP    #15
000021A8                          2573          
000021A8                          2574  ANOSLASH
000021A8                          2575  
000021A8  183C 0001               2576          MOVE.B  #1,D4   * we have printed something, now slashes are fair game
000021AC                          2577          
000021AC  1C3C 0001               2578          MOVE.B  #1,D6   * we have printed a symbol
000021B0                          2579          
000021B0  43F9 00002593           2580          LEA     ASCII_A,A1
000021B6  103C 000E               2581          MOVE.B  #14,D0
000021BA  4E4F                    2582          TRAP    #15
000021BC                          2583          
000021BC  2205                    2584          MOVE.L  D5,D1
000021BE                          2585          
000021BE  0641 FFF8               2586          ADDI    #-8,D1 * it's A, need to adjust by 8
000021C2                          2587          
000021C2  103C 0003               2588          MOVE.B  #3,D0
000021C6  4E4F                    2589          TRAP    #15
000021C8                          2590  
000021C8  163C 0001               2591          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
000021CC  1C3C 0000               2592          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
000021D0                          2593          
000021D0  6000 0038               2594          BRA     ALOOPITER
000021D4                          2595  
000021D4                          2596  
000021D4                          2597  AINVALID
000021D4                          2598  
000021D4                          2599          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
000021D4                          2600          
000021D4  0C43 0001               2601          CMPI    #1,D3
000021D8  6600 0030               2602          BNE     ALOOPITER
000021DC                          2603          
000021DC  163C 0000               2604          MOVE.B  #0,D3
000021E0                          2605          
000021E0  0C47 0001               2606          CMPI    #1,D7
000021E4  6D00 0022               2607          BLT     ALOOPITERCLR
000021E8                          2608          
000021E8  43F9 00002593           2609          LEA     ASCII_A,A1
000021EE  103C 000E               2610          MOVE.B  #14,D0
000021F2  4E4F                    2611          TRAP    #15
000021F4                          2612          
000021F4  2205                    2613          MOVE.L  D5,D1
000021F6                          2614          
000021F6  0641 FFFF               2615          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
000021FA  0641 FFF8               2616          ADDI    #-8,D1 * it's A, need to adjust by 8
000021FE                          2617          
000021FE  103C 0003               2618          MOVE.B  #3,D0
00002202  4E4F                    2619          TRAP    #15
00002204                          2620          
00002204  6000 0004               2621          BRA     ALOOPITER
00002208                          2622          
00002208                          2623  ALOOPITERCLR
00002208                          2624          
00002208  4287                    2625          CLR.L   D7
0000220A                          2626  
0000220A                          2627  ALOOPITER
0000220A                          2628          
0000220A  0C45 0010               2629          CMPI     #16,D5
0000220E  6700 0008               2630          BEQ     ALOOPDONE
00002212                          2631  
00002212  5245                    2632          ADDI    #1,D5
00002214  6000 FF4E               2633          BRA     ALOOP
00002218                          2634  
00002218                          2635  ALOOPDONE
00002218                          2636          
00002218  4C9F 7FFF               2637          MOVEM    (A7)+,D0-D7/A0-A6
0000221C  4E75                    2638          RTS
0000221E                          2639  
0000221E                          2640          
0000221E                          2641  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000221E                          2642  *-----------------------------------------------------------------------------
0000221E                          2643  
0000221E                          2644  
0000221E                          2645  
0000221E                          2646  
0000221E                          2647  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000221E                          2648  *-----------------------------------------------------------------------------
0000221E                          2649  *-----------------------------------------------------------------------------
0000221E                          2650  * NAME:           MOVEMHELPERPRE
0000221E                          2651  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
0000221E                          2652  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
0000221E                          2653  * POST-CONDITION: The registers being saved are printed
0000221E                          2654  * REGISTERS:      A2
0000221E                          2655  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000221E                          2656  MOVEMHELPERPRE
0000221E                          2657  
0000221E  48A7 7F00               2658      MOVEM   D1-D7,-(A7)
00002222                          2659  
00002222  3412                    2660      MOVE.W  (A2),D2 * move the data we need to proccess into D2
00002224  7800                    2661      MOVE.L  #0,D4
00002226  4287                    2662      CLR.L    D7 * put the flipped bits here
00002228                          2663      
00002228                          2664      *the following block of code moves bits
00002228                          2665      *into the same position they would be in if
00002228                          2666      *the MOVEM was post inc, then simply uses post
00002228                          2667      *inc to print the registers being saved
00002228                          2668  PRELOOP
00002228  E35A                    2669      ROL.W   #1,D2
0000222A                          2670      
0000222A  6500 0006               2671      BCS     PRESETBIT
0000222E  6000 0004               2672      BRA     PRELOOPITER
00002232                          2673      
00002232                          2674  PRESETBIT
00002232  09C7                    2675      BSET    D4,D7
00002234                          2676  
00002234                          2677  PRELOOPITER
00002234  0C44 000F               2678      CMPI    #15,D4
00002238  6700 0006               2679      BEQ     PRELOOPDONE
0000223C                          2680      
0000223C  5244                    2681      ADDI    #1,D4
0000223E  60E8                    2682      BRA     PRELOOP
00002240                          2683  
00002240                          2684  PRELOOPDONE
00002240                          2685  
00002240  3487                    2686      MOVE.W  D7,(A2)    
00002242  4C9F 00FE               2687      MOVEM   (A7)+,D1-D7
00002246                          2688  
00002246  6100 FE4E               2689      BSR MOVEMHELPERPOST
0000224A                          2690  
0000224A  4E75                    2691      RTS
0000224C                          2692  
0000224C                          2693  
0000224C                          2694  
0000224C                          2695          
0000224C                          2696  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000224C                          2697  *-----------------------------------------------------------------------------
0000224C                          2698  
0000224C                          2699  
0000224C                          2700  
0000224C                          2701  *-----------------------------------------------------------------------------
0000224C                          2702  *-----------------------------------------------------------------------------
0000224C                          2703  * NAME:           UNKNOWNOP
0000224C                          2704  * DESCRIPTION:    a
0000224C                          2705  * PRE-CONDITION:  D2 contains the instruction to print. D2 has already been
0000224C                          2706  *                 identified as an unknown operation.
0000224C                          2707  * POST-CONDITION: D2 is no longer the opcode.
0000224C                          2708  * REGISTERS:      a
0000224C                          2709  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000224C                          2710  UNKNOWNOP
0000224C  220A                    2711          MOVE.L  A2,D1   * Prep the add to print
0000224E  5581                    2712          SUB.L   #2,D1   * Off by two error due to post increment correct
00002250  2602                    2713          MOVE.L  D2,D3   * Save the opcode to print
00002252                          2714          
00002252  7410                    2715          MOVE.L  #16,D2  * set the base to 16
00002254  700F                    2716          MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
00002256  4E4F                    2717          TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
00002258                          2718          
00002258  43F9 00002555           2719          LEA     DATA,A1 * load " DATA $" into register A1
0000225E  700E                    2720          MOVE.L  #14,D0  * print the string stored in A1
00002260  4E4F                    2721          TRAP    #15
00002262                          2722          
00002262  2203                    2723          MOVE.L  D3,D1   * move the opcode from D3 into D1 to print
00002264  103C 000F               2724          MOVE.B  #15,D0   * Indicate we are using trap #15, 15 to in a certain #base
00002268  4E4F                    2725          TRAP    #15      * Perform Trap #3
0000226A                          2726  
0000226A  43F9 000024FA           2727          LEA     NEWLINE,A1 * load newline into register A1
00002270  700E                    2728          MOVE.L  #14,D0  * print the string stored in A1
00002272  4E4F                    2729          TRAP    #15
00002274                          2730  
00002274  4E75                    2731          RTS
00002276                          2732  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002276                          2733  *-----------------------------------------------------------------------------
00002276                          2734  
00002276                          2735  
00002276                          2736  
00002276                          2737  *-----------------------------------------------------------------------------
00002276                          2738  *-----------------------------------------------------------------------------
00002276                          2739  * NAME: Print ASCII hex char
00002276                          2740  * DESCRIPTION:    Prints and address register to console in hex (ASCII chars)
00002276                          2741  * PRE-CONDITION:  A6 contains the register of memory to print.
00002276                          2742  *                 This parameter would be pre-loaded by, for example:
00002276                          2743  *                 "LEA FOO_BAR_ADDR,A6" or "LEA $1234FEED,A6"
00002276                          2744  *                 D3 contains the loops to do (number of bytes).
00002276                          2745  * POST-CONDITION: 
00002276                          2746  * REGISTERS:      
00002276                          2747  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002276                          2748  PRINT_ASCII_HEX_CHAR
00002276  48E7 FFFC               2749      MOVEM.L     D0-D7/A0-A5,-(A7) * push data to save
0000227A  4285                    2750      CLR.L       D5
0000227C                          2751      
0000227C                          2752      * fence post check (if-statement, check if 0 > chars)
0000227C  0C03 0000               2753      CMPI.B      #0,D3
00002280  6700 017C               2754      BEQ         INVALID_ASCII_INPUT * go to very last part if invalid
00002284                          2755      
00002284                          2756  *    MOVE.L      A6,D4
00002284  2E0E                    2757      MOVE.L      A6,D7
00002286                          2758  PRINT_ASCII_LOOP
00002286                          2759  *    MOVE.L      A6,D7 * increase a6's pointer position ea. loop
00002286                          2760  *    MOVE.L      D4,D7 * make a mutable copy
00002286  E99F                    2761      ROL.L       #4,D7 * roll to next spot
00002288  48E7 0100               2762      MOVEM.L     D7,-(A7) * save D7
0000228C                          2763  
0000228C  0287 0000000F           2764      ANDI.L      #HEX_VALUE_MASK_LONG,D7
00002292                          2765      
00002292  0C87 00000000           2766      CMPI.L      #0,D7
00002298  6D00 0164               2767      BLT         INVALID_ASCII_INPUT
0000229C                          2768  
0000229C  0C87 0000000F           2769      CMPI.L      #15,D7
000022A2  6E00 015A               2770      BGT         INVALID_ASCII_INPUT
000022A6                          2771  
000022A6                          2772      * this might be faster... to do later, after entire assignment done
000022A6                          2773       * CMPI.L      #9,D7
000022A6                          2774       * BLE         PRINT_ASCII_0_TO_9
000022A6                          2775  
000022A6  0C87 00000000           2776      CMPI.L      #0,D7
000022AC  6700 0098               2777      BEQ         PRINT_ASCII_0
000022B0  0C87 00000001           2778      CMPI.L      #1,D7
000022B6  6700 0098               2779      BEQ         PRINT_ASCII_1
000022BA  0C87 00000002           2780      CMPI.L      #2,D7
000022C0  6700 0098               2781      BEQ         PRINT_ASCII_2
000022C4  0C87 00000003           2782      CMPI.L      #3,D7
000022CA  6700 0098               2783      BEQ         PRINT_ASCII_3
000022CE  0C87 00000004           2784      CMPI.L      #4,D7
000022D4  6700 0098               2785      BEQ         PRINT_ASCII_4
000022D8  0C87 00000005           2786      CMPI.L      #5,D7
000022DE  6700 0098               2787      BEQ         PRINT_ASCII_5
000022E2  0C87 00000006           2788      CMPI.L      #6,D7
000022E8  6700 0098               2789      BEQ         PRINT_ASCII_6
000022EC  0C87 00000007           2790      CMPI.L      #7,D7
000022F2  6700 0098               2791      BEQ         PRINT_ASCII_7
000022F6  0C87 00000008           2792      CMPI.L      #8,D7
000022FC  6700 0098               2793      BEQ         PRINT_ASCII_8
00002300  0C87 00000009           2794      CMPI.L      #9,D7
00002306  6700 0098               2795      BEQ         PRINT_ASCII_9
0000230A  0C87 0000000A           2796      CMPI.L      #10,D7
00002310  6700 0098               2797      BEQ         PRINT_ASCII_A
00002314  0C87 0000000B           2798      CMPI.L      #11,D7
0000231A  6700 0098               2799      BEQ         PRINT_ASCII_B
0000231E  0C87 0000000C           2800      CMPI.L      #12,D7
00002324  6700 0098               2801      BEQ         PRINT_ASCII_C
00002328  0C87 0000000D           2802      CMPI.L      #13,D7
0000232E  6700 0098               2803      BEQ         PRINT_ASCII_D
00002332  0C87 0000000E           2804      CMPI.L      #14,D7
00002338  6700 0098               2805      BEQ         PRINT_ASCII_E
0000233C  0C87 0000000F           2806      CMPI.L      #15,D7
00002342  6700 0098               2807      BEQ         PRINT_ASCII_F
00002346                          2808  PRINT_ASCII_0
00002346  43F9 0000257F           2809      LEA         ASCII_0,A1
0000234C  6000 0098               2810      BRA         PRINT_ASCII_CHAR
00002350                          2811  PRINT_ASCII_1
00002350  43F9 00002581           2812      LEA         ASCII_1,A1
00002356  6000 008E               2813      BRA         PRINT_ASCII_CHAR
0000235A                          2814  PRINT_ASCII_2
0000235A  43F9 00002583           2815      LEA         ASCII_2,A1
00002360  6000 0084               2816      BRA         PRINT_ASCII_CHAR
00002364                          2817  PRINT_ASCII_3
00002364  43F9 00002585           2818      LEA         ASCII_3,A1
0000236A  6000 007A               2819      BRA         PRINT_ASCII_CHAR
0000236E                          2820  PRINT_ASCII_4
0000236E  43F9 00002587           2821      LEA         ASCII_4,A1
00002374  6000 0070               2822      BRA         PRINT_ASCII_CHAR
00002378                          2823  PRINT_ASCII_5
00002378  43F9 00002589           2824      LEA         ASCII_5,A1
0000237E  6000 0066               2825      BRA         PRINT_ASCII_CHAR
00002382                          2826  PRINT_ASCII_6
00002382  43F9 0000258B           2827      LEA         ASCII_6,A1
00002388  6000 005C               2828      BRA         PRINT_ASCII_CHAR
0000238C                          2829  PRINT_ASCII_7
0000238C  43F9 0000258D           2830      LEA         ASCII_7,A1
00002392  6000 0052               2831      BRA         PRINT_ASCII_CHAR
00002396                          2832  PRINT_ASCII_8
00002396  43F9 0000258F           2833      LEA         ASCII_8,A1
0000239C  6000 0048               2834      BRA         PRINT_ASCII_CHAR
000023A0                          2835  PRINT_ASCII_9
000023A0  43F9 00002591           2836      LEA         ASCII_9,A1
000023A6  6000 003E               2837      BRA         PRINT_ASCII_CHAR
000023AA                          2838  PRINT_ASCII_A
000023AA  43F9 00002593           2839      LEA         ASCII_A,A1
000023B0  6000 0034               2840      BRA         PRINT_ASCII_CHAR
000023B4                          2841  PRINT_ASCII_B
000023B4  43F9 00002595           2842      LEA         ASCII_B,A1
000023BA  6000 002A               2843      BRA         PRINT_ASCII_CHAR
000023BE                          2844  PRINT_ASCII_C
000023BE  43F9 00002597           2845      LEA         ASCII_C,A1
000023C4  6000 0020               2846      BRA         PRINT_ASCII_CHAR
000023C8                          2847  PRINT_ASCII_D
000023C8  43F9 00002599           2848      LEA         ASCII_D,A1
000023CE  6000 0016               2849      BRA         PRINT_ASCII_CHAR
000023D2                          2850  PRINT_ASCII_E
000023D2  43F9 0000259B           2851      LEA         ASCII_E,A1
000023D8  6000 000C               2852      BRA         PRINT_ASCII_CHAR
000023DC                          2853  PRINT_ASCII_F
000023DC  43F9 0000259D           2854      LEA         ASCII_F,A1
000023E2  6000 0002               2855      BRA         PRINT_ASCII_CHAR
000023E6                          2856  PRINT_ASCII_CHAR
000023E6  103C 000E               2857      MOVE.B      #14,D0
000023EA  4E4F                    2858      TRAP        #15
000023EC                          2859      
000023EC                          2860          
000023EC  4287                    2861      CLR.L       D7
000023EE  4CDF 0080               2862      MOVEM.L     (A7)+,D7 * copy back D7 from stack, to mutate its' bits
000023F2                          2863      
000023F2  5205                    2864      ADD.B       #1,D5 * loop until counter stops
000023F4  BA03                    2865      CMP.B       D3,D5
000023F6  6C00 0006               2866      BGE         PRINT_ASCII_FINISH
000023FA                          2867      
000023FA  6000 FE8A               2868      BRA         PRINT_ASCII_LOOP
000023FE                          2869  INVALID_ASCII_INPUT
000023FE                          2870  PRINT_ASCII_FINISH
000023FE  4CDF 3FFF               2871      MOVEM.L     (A7)+,D0-D7/A0-A5 * pop saved memory
00002402  4E75                    2872      RTS
00002404                          2873      
00002404                          2874  PRINTDATA911
00002404  0C46 0E00               2875      CMPI    #%0000111000000000, D6   * Print 7
00002408  6700 003C               2876      BEQ     PRINT7   
0000240C  0C46 0C00               2877      CMPI    #%0000110000000000, D6   * Print 6
00002410  6700 0042               2878      BEQ     PRINT6
00002414  0C46 0A00               2879      CMPI    #%0000101000000000, D6   * Print 5
00002418  6700 0048               2880      BEQ     PRINT5
0000241C  0C46 0800               2881      CMPI    #%0000100000000000, D6   * Print 4
00002420  6700 004E               2882      BEQ     PRINT4 
00002424  0C46 0600               2883      CMPI    #%0000011000000000, D6   * Print 3
00002428  6700 0054               2884      BEQ     PRINT3    
0000242C  0C46 0400               2885      CMPI    #%0000010000000000, D6   * Print 2
00002430  6700 005A               2886      BEQ     PRINT2   
00002434  0C46 0200               2887      CMPI    #%0000001000000000, D6   * Print 1
00002438  6700 0060               2888      BEQ     PRINT1     
0000243C  0C46 0000               2889      CMPI    #%0000000000000000, D6   * Print 0
00002440  6700 0066               2890      BEQ     PRINT8
00002444                          2891      
00002444  4E75                    2892      RTS                             * Fail case  
00002446                          2893      
00002446                          2894  PRINT7
00002446  43F9 0000258D           2895      LEA     ASCII_7, A1
0000244C  103C 000E               2896      MOVE.B      #14,D0
00002450  4E4F                    2897      TRAP        #15
00002452  4E75                    2898      RTS
00002454                          2899      
00002454                          2900  PRINT6
00002454  43F9 0000258B           2901      LEA     ASCII_6, A1
0000245A  103C 000E               2902      MOVE.B      #14,D0
0000245E  4E4F                    2903      TRAP        #15
00002460  4E75                    2904      RTS
00002462                          2905      
00002462                          2906  PRINT5
00002462  43F9 00002589           2907      LEA     ASCII_5, A1
00002468  103C 000E               2908      MOVE.B      #14,D0
0000246C  4E4F                    2909      TRAP        #15
0000246E  4E75                    2910      RTS
00002470                          2911      
00002470                          2912  PRINT4
00002470  43F9 00002587           2913      LEA     ASCII_4, A1
00002476  103C 000E               2914      MOVE.B      #14,D0
0000247A  4E4F                    2915      TRAP        #15
0000247C  4E75                    2916      RTS
0000247E                          2917      
0000247E                          2918  PRINT3
0000247E  43F9 00002585           2919      LEA     ASCII_3, A1
00002484  103C 000E               2920      MOVE.B      #14,D0
00002488  4E4F                    2921      TRAP        #15
0000248A  4E75                    2922      RTS
0000248C                          2923      
0000248C                          2924  PRINT2
0000248C  43F9 00002583           2925      LEA     ASCII_2, A1
00002492  103C 000E               2926      MOVE.B      #14,D0
00002496  4E4F                    2927      TRAP        #15
00002498  4E75                    2928      RTS
0000249A                          2929      
0000249A                          2930  PRINT1
0000249A  43F9 00002581           2931      LEA     ASCII_1, A1
000024A0  103C 000E               2932      MOVE.B      #14,D0
000024A4  4E4F                    2933      TRAP        #15
000024A6  4E75                    2934      RTS
000024A8                          2935          
000024A8                          2936  PRINT8
000024A8  43F9 0000258F           2937      LEA     ASCII_8, A1
000024AE  103C 000E               2938      MOVE.B      #14,D0
000024B2  4E4F                    2939      TRAP        #15
000024B4  4E75                    2940      RTS
000024B6                          2941  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000024B6                          2942  *-----------------------------------------------------------------------------
000024B6                          2943  
000024B6                          2944  
000024B6                          2945  
000024B6                          2946  *-----------------------------------------------------------------------------
000024B6                          2947  *-----------------------------------------------------------------------------
000024B6                          2948  * NAME: Bitmask
000024B6                          2949  * DESCRIPTION:    Masks bits in a data register.
000024B6                          2950  * PRE-CONDITION:  D6 contains the starting bit to be masked, and D7 contains
000024B6                          2951  *                 the ending bit.  For example, a starting bit of decimal
000024B6                          2952  *                 value 0 and an ending bit of decimal value 3 will mask the
000024B6                          2953  *                 bits 0, 1, 2, and 3.
000024B6                          2954  * POST-CONDITION: D6 contains the bitmask, ready for use.
000024B6                          2955  * REGISTERS:      D5,D6,D7
000024B6                          2956  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000024B6                          2957  BITMASK
000024B6  3F05                    2958          MOVE    D5,-(A7)    * push D5 onto the stack so we can use it to
000024B8  4245                    2959          CLR     D5          * clear D5 so we can use it
000024BA                          2960  LOOPBIT 
000024BA  0DC5                    2961          BSET    D6,D5       * set the D6th bit in D5 to 1
000024BC  5246                    2962          ADD     #1,D6       * increment D6
000024BE                          2963  
000024BE  BC47                    2964          CMP     D7,D6       * have we finished?
000024C0  6E00 0004               2965          BGT     BITMASKDONE * yes
000024C4  60F4                    2966          BRA     LOOPBIT     * no, iterate again
000024C6                          2967  
000024C6                          2968  BITMASKDONE
000024C6  2C05                    2969          MOVE.L  D5,D6
000024C8  3A1F                    2970          MOVE    (A7)+,D5    * restore D5
000024CA  4E75                    2971          RTS
000024CC                          2972  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000024CC                          2973  *-----------------------------------------------------------------------------
000024CC                          2974  
000024CC                          2975  
000024CC                          2976  
000024CC                          2977  *-----------------------------------------------------------------------------
000024CC                          2978  *-----------------------------------------------------------------------------
000024CC                          2979  * SECTION: Constants/variables used throughout the program.
000024CC                          2980  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000024CC                          2981  
000024CC                          2982  * ---> GENERAL
000024CC  =0000000D               2983  CR          EQU     $0D
000024CC  =0000000A               2984  LF          EQU     $0A
000024CC= 45 4E 54 45 52 20 ...   2985  MSGSTART    DC.B    'ENTER START ADDRESS: ',CR,LF,0
000024E4= 45 4E 54 45 52 20 ...   2986  MSGEND      DC.B    'ENTER END ADDRESS: ',CR,LF,0
000024FA= 0D 0A 00                2987  NEWLINE     DC.B    CR,LF,0
000024FD                          2988  
000024FD                          2989  * ---> OPS
000024FD= 44 49 56 53 00          2990  DIVSOP      DC.B    'DIVS',0
00002502= 4E 4F 50 00             2991  NOOPERATION DC.B    'NOP',0
00002506= 4E 45 47 00             2992  NEGOP       DC.B    'NEG',0
0000250A= 4D 4F 56 45 00          2993  MOVEOP      DC.B    'MOVE',0
0000250F= 4D 4F 56 45 4D 00       2994  MOVEMOP     DC.B    'MOVEM',0
00002515= 4A 53 52 00             2995  JSROP       DC.B    'JSR',0
00002519= 52 54 53 00             2996  RTSOP       DC.B    'RTS',0
0000251D= 53 55 42 51 00          2997  SUBQOP      DC.B    'SUBQ',0
00002522= 4C 45 41 00             2998  LEAOP       DC.B    'LEA',0
00002526= 42 43 4C 52 20 00       2999  BCLROP      DC.B    'BCLR ',0
0000252C= 4D 55 4C 53 00          3000  MULSOP      DC.B    'MULS',0
00002531= 4F 52 00                3001  OROP        DC.B    'OR',0
00002534= 4F 52 49 00             3002  ORIOP       DC.B    'ORI',0
00002538= 43 4D 50 49 00          3003  CMPIOP      DC.B    'CMPI',0
0000253D= 4C 53 4C 00             3004  LSLOP       DC.B    'LSL',0
00002541= 4C 53 52 00             3005  LSROP       DC.B    'LSR',0
00002545= 41 53 4C 00             3006  ASLOP       DC.B    'ASL',0
00002549= 41 53 52 00             3007  ASROP       DC.B    'ASR',0
0000254D= 52 4F 4C 00             3008  ROLOP       DC.B    'ROL',0
00002551= 52 4F 52 00             3009  ROROP       DC.B    'ROR',0
00002555= 20 44 41 54 41 20 ...   3010  DATA        DC.B    ' DATA $',0
0000255D= 42 43 43 20 00          3011  OP_BCC_MSG  DC.B    'BCC ',0
00002562= 42 43 53 20 00          3012  OP_BCS_MSG  DC.B    'BCS ',0
00002567= 42 47 45 20 00          3013  OP_BGE_MSG  DC.B    'BGE ',0
0000256C= 42 4C 54 20 00          3014  OP_BLT_MSG  DC.B    'BLT ',0
00002571= 42 56 43 20 00          3015  OP_BVC_MSG  DC.B    'BVC ',0
00002576= 42 52 41 20 00          3016  OP_BRA_MSG  DC.B    'BRA ',0
0000257B= 41 44 44 00             3017  OP_ADD_MSG  DC.B    'ADD',0
0000257F                          3018  
0000257F                          3019  * ---> HEX CHARS
0000257F= 30 00                   3020  ASCII_0     DC.B    '0',0
00002581= 31 00                   3021  ASCII_1     DC.B    '1',0
00002583= 32 00                   3022  ASCII_2     DC.B    '2',0
00002585= 33 00                   3023  ASCII_3     DC.B    '3',0
00002587= 34 00                   3024  ASCII_4     DC.B    '4',0
00002589= 35 00                   3025  ASCII_5     DC.B    '5',0
0000258B= 36 00                   3026  ASCII_6     DC.B    '6',0
0000258D= 37 00                   3027  ASCII_7     DC.B    '7',0
0000258F= 38 00                   3028  ASCII_8     DC.B    '8',0
00002591= 39 00                   3029  ASCII_9     DC.B    '9',0
00002593= 41 00                   3030  ASCII_A     DC.B    'A',0
00002595= 42 00                   3031  ASCII_B     DC.B    'B',0
00002597= 43 00                   3032  ASCII_C     DC.B    'C',0
00002599= 44 00                   3033  ASCII_D     DC.B    'D',0
0000259B= 45 00                   3034  ASCII_E     DC.B    'E',0
0000259D= 46 00                   3035  ASCII_F     DC.B    'F',0
0000259F                          3036  
0000259F                          3037  * ---> SPECIAL CHARACTERS
0000259F= 20 00                   3038  SPACE       DC.B    ' ',0
000025A1= 24 00                   3039  DOLLAR      DC.B    '$',0
000025A3= 23 00                   3040  IMD         DC.B    '#',0
000025A5= 2C 00                   3041  COMMA       DC.B    ',',0
000025A7= 28 00                   3042  OBRACK      DC.B    '(',0
000025A9= 29 00                   3043  CBRACK      DC.B    ')',0
000025AB= 2B 00                   3044  PLUS        DC.B    '+',0
000025AD= 2D 00                   3045  MINUS       DC.B    '-',0
000025AF= 2F 00                   3046  SLASH       DC.B    '/',0
000025B1= 2D 00                   3047  DASH        DC.B    '-',0
000025B3                          3048  
000025B3                          3049  * ---> B/W/L (BYTE, WORD, LONG, RESPECTIVELY)
000025B3= 2E 42 20 00             3050  __B         DC.B    '.B ',0
000025B7= 2E 57 20 00             3051  __W         DC.B    '.W ',0
000025BB= 2E 4C 20 00             3052  __L         DC.B    '.L ',0
000025BF                          3053  
000025BF                          3054  * ---> ADDRESS REGISTERS A0-A7
000025BF= 41 30 00                3055  __A0        DC.B   'A0',0
000025C2= 41 31 00                3056  __A1        DC.B   'A1',0    
000025C5= 41 32 00                3057  __A2        DC.B   'A2',0
000025C8= 41 33 00                3058  __A3        DC.B   'A3',0
000025CB= 41 34 00                3059  __A4        DC.B   'A4',0
000025CE= 41 35 00                3060  __A5        DC.B   'A5',0
000025D1= 41 36 00                3061  __A6        DC.B   'A6',0
000025D4= 41 37 00                3062  __A7        DC.B   'A7',0
000025D7                          3063  
000025D7                          3064  * ---> DATA REGISTERS D0-D7
000025D7= 44 30 00                3065  __D0        DC.B   'D0',0
000025DA= 44 31 00                3066  __D1        DC.B   'D1',0
000025DD= 44 32 00                3067  __D2        DC.B   'D2',0
000025E0= 44 33 00                3068  __D3        DC.B   'D3',0
000025E3= 44 34 00                3069  __D4        DC.B   'D4',0
000025E6= 44 35 00                3070  __D5        DC.B   'D5',0
000025E9= 44 36 00                3071  __D6        DC.B   'D6',0
000025EC= 44 37 00                3072  __D7        DC.B   'D7',0
000025EF                          3073  
000025EF                          3074  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000025EF                          3075  *-----------------------------------------------------------------------------
000025EF                          3076  
000025EF                          3077  
000025EF                          3078  
000025EF                          3079  *-----------------------------------------------------------------------------
000025EF                          3080  *-----------------------------------------------------------------------------
000025EF                          3081  * SECTION: Sample program to run, then attempt testing disassembly on.
000025EF                          3082  * STARTING: 16384
000025EF                          3083  * ENDING:   16420
000025EF                          3084  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00004000                          3085      ORG $4000
00004000                          3086      
00004000  4E71                    3087      NOP
00004002  103C 009A               3088      MOVE.B   #%10011010, D0
00004006  123C 00A9               3089      MOVE.B   #%10101001, D1
0000400A  D200                    3090      ADD.B    D0,D1
0000400C  4C9F 3C1A               3091      MOVEM    (A7)+,A2-A5/D1/D3-D4
00004010  43F8 2515               3092      LEA      JSROP,A1
00004014  4467                    3093      NEG.W    -(A7)
00004016  4EB9 0000404E           3094      JSR      END
0000401C  81FC 0001               3095      DIVS    #1, D0
00004020  0181                    3096      BCLR    D0, D1
00004022  CFFC 0003               3097      MULS.W  #3, D7
00004026  CFC0                    3098      MULS    D0, D7
00004028  C5D9                    3099      MULS    (A1)+, D2
0000402A  5146                    3100      SUBQ    #8, D6
0000402C  5F81                    3101      SUBQ.L  #7, D1
0000402E  0041 0004               3102      ORI     #4, D1
00004032  E389                    3103      LSL.L   #1,D1
00004034  E489                    3104      LSR.L   #2,D1
00004036  E781                    3105      ASL.L   #3,D1
00004038  E881                    3106      ASR.L   #4,D1
0000403A  EB99                    3107      ROL.L   #5,D1
0000403C  E099                    3108      ROR.L   #8,D1
0000403E  0881 0002               3109      BCLR    #2,D1
00004042  DAC1                    3110      ADDA.W  D1,A5
00004044  D803                    3111      ADD.B   D3, D4
00004046  6C00 0006               3112      BGE     END
0000404A  6000 0002               3113      BRA     END
0000404E                          3114  
0000404E                          3115  END
0000404E  4E75                    3116      RTS
00004050                          3117      
00004050                          3118  RLLYEND
00004050                          3119      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_LONG_OP        1A1E
ADDA_PRT            1A5A
ADDA_WORD_OP        19B6
ADD_ADDA_END        1A8A
ADD_ADDA_PRINT      1A72
ADD_ADDA_SPACE      1A4C
ADD_EA_DN_GENERIC   1A3E
AFORWARDVALID       2194
AINVALID            21D4
ALOOP               2164
ALOOPDONE           2218
ALOOPITER           220A
ALOOPITERCLR        2208
ANOSLASH            21A8
AS                  1B00
ASCII_0             257F
ASCII_1             2581
ASCII_2             2583
ASCII_3             2585
ASCII_4             2587
ASCII_5             2589
ASCII_6             258B
ASCII_7             258D
ASCII_8             258F
ASCII_9             2591
ASCII_A             2593
ASCII_B             2595
ASCII_C             2597
ASCII_D             2599
ASCII_E             259B
ASCII_F             259D
ASL                 1B16
ASLOP               2545
ASR                 1B26
ASROP               2549
AVALID              216E
BCC_BYTE_OFFSET     17C4
BCC_END             17E0
BCLROP              2526
BITMASK             24B6
BITMASKDONE         24C6
BYTE_DN_EA          19D6
BYTE_EA_DN          196E
CBRACK              25A9
CMPIOP              2538
COMMA               25A5
CR                  D
DASH                25B1
DATA                2555
DFORWARDVALID       20DC
DINVALID            2118
DIVSOP              24FD
DLOOP               20AC
DLOOPDONE           2158
DLOOPITER           214A
DLOOPITERCLR        2148
DNOSLASH            20F0
DOLLAR              25A1
DONE0100            16A6
DVALID              20B6
EAHELPER05          1C7A
EAHELPER611         1C38
END                 404E
END0000             1306
END67               200E
ENDEAHELPER05       1DCA
ENDEAHELPER611      1C74
ENDMODE_AN          1F5A
ENDMODE_DN          1E5A
ENDOP0001           136C
ENDOP1110           1C20
HEX_VALUE_MASK_LONG  F
IMD                 25A3
INVALID_ASCII_INPUT  23FE
ITERATION           1158
JSROP               2515
LEAOP               2522
LF                  A
LONG_DN_EA          1A06
LONG_EA_DN          199E
LOOP                103A
LOOPBIT             24BA
LOOPUNKNOWNOP       1154
LS                  1ACA
LSL                 1AE0
LSLOP               253D
LSR                 1AF0
LSROP               2541
MINUS               25AD
MODE_AN             1ED0
MODE_DN             1DD0
MOVEMHELPERPOST     2096
MOVEMHELPERPRE      221E
MOVEMOP             250F
MOVEMTOMEM          14B6
MOVEMTOREG          141C
MOVEOP              250A
MSGEND              24E4
MSGSTART            24CC
MULSOP              252C
NEGOP               2506
NEWLINE             24FA
NOOPERATION         2502
NOT0000             1064
NOT0001             1074
NOT0010             1084
NOT0011             1094
NOT0100             10A4
NOT0101             10B4
NOT0110             10C4
NOT0111             10D4
NOT1000             10E4
NOT1001             10F4
NOT1010             1104
NOT1011             1114
NOT1100             1124
NOT1101             1134
NOT1110             1144
NOT67BYTE           1FF2
NOT67WORD           2002
NOTA0               1EF2
NOTA1               1F02
NOTA2               1F12
NOTA3               1F22
NOTA4               1F32
NOTA5               1F42
NOTA6               1F52
NOTADRDIRECT        1CAA
NOTADRINDIRECT      1CD2
NOTADRINDIRECTPOST  1D06
NOTADRINDIRECTPRE   1D3A
NOTBCLR             1246
NOTBCLRDYNA         11E2
NOTD0               1DF2
NOTD1               1E02
NOTD2               1E12
NOTD3               1E22
NOTD4               1E32
NOTD5               1E42
NOTD6               1E52
NOTDATAREG          1C9A
NOTDIVS             186A
NOTIMMBYTE          1D70
NOTIMMEDIATE        1DC6
NOTIMMWORD          1D9E
NOTJSR              159E
NOTLONGMOVEM1       1484
NOTLONGMOVEM2       151E
NOTMOVEM            1550
NOTNEG              13F8
NOTNOP              13A2
NOTORI              12FA
NOTRTS              15C0
OBRACK              25A7
OP0000              1164
OP0001              130C
OP0010              1372
OP0011              1378
OP0100              1386
OP0101              16B0
OP0110              171E
OP0111              17E6
OP1000              17EC
OP1000END           187A
OP1001              1880
OP1010              1880
OP1011              1886
OP1100              188C
OP1101              1916
OP1110              1A9C
OP1110DATAREG       1BF4
OP1110GENERIC       1B6C
OP1110IMMEIGHT      1BCC
OP1111              1C32
OP_0000             0
OP_0001             1000
OP_0010             2000
OP_0011             3000
OP_0100             4000
OP_0101             5000
OP_0110             6000
OP_0111             7000
OP_1000             8000
OP_1001             9000
OP_1010             A000
OP_1011             B000
OP_1100             C000
OP_1101             D000
OP_1110             E000
OP_1111             F000
OP_ADD_MSG          257B
OP_BCC              1768
OP_BCC_MSG          255D
OP_BCS              1772
OP_BCS_MSG          2562
OP_BGE              177C
OP_BGE_MSG          2567
OP_BLT              1786
OP_BLT_MSG          256C
OP_BRA              179A
OP_BRANCHES_PRINT   17A4
OP_BRA_MSG          2576
OP_BVC              1790
OP_BVC_MSG          2571
ORIOP               2534
OROP                2531
PLUS                25AB
PRELOOP             2228
PRELOOPDONE         2240
PRELOOPITER         2234
PRESETBIT           2232
PRINT1              249A
PRINT2              248C
PRINT3              247E
PRINT4              2470
PRINT5              2462
PRINT6              2454
PRINT7              2446
PRINT8              24A8
PRINTA0             1F60
PRINTA1             1F6E
PRINTA2             1F7C
PRINTA3             1F8A
PRINTA4             1F98
PRINTA5             1FA6
PRINTA6             1FB4
PRINTA7             1FC2
PRINTBYTE           206C
PRINTD0             1E60
PRINTD1             1E6E
PRINTD2             1E7C
PRINTD3             1E8A
PRINTD4             1E98
PRINTD5             1EA6
PRINTD6             1EB4
PRINTD7             1EC2
PRINTDATA911        2404
PRINTLONG           2088
PRINTWORD           207A
PRINT_ASCII_0       2346
PRINT_ASCII_1       2350
PRINT_ASCII_2       235A
PRINT_ASCII_3       2364
PRINT_ASCII_4       236E
PRINT_ASCII_5       2378
PRINT_ASCII_6       2382
PRINT_ASCII_7       238C
PRINT_ASCII_8       2396
PRINT_ASCII_9       23A0
PRINT_ASCII_A       23AA
PRINT_ASCII_B       23B4
PRINT_ASCII_C       23BE
PRINT_ASCII_CHAR    23E6
PRINT_ASCII_D       23C8
PRINT_ASCII_E       23D2
PRINT_ASCII_F       23DC
PRINT_ASCII_FINISH  23FE
PRINT_ASCII_HEX_CHAR  2276
PRINT_ASCII_LOOP    2286
RLLYEND             4050
RO                  1B36
ROL                 1B4C
ROLOP               254D
ROR                 1B5C
ROROP               2551
RTSOP               2519
SIZE67              1FD0
SIZE68              2014
SKIPLONG            12D8
SKIPNOTLONG1        1490
SKIPNOTLONG2        152A
SLASH               25AF
SPACE               259F
START               1000
SUBQOP              251D
TWOWORDLEA          1650
UNKNOWN0000         1302
UNKNOWN0100         16A2
UNKNOWN0101         1718
UNKNOWN1100         190C
UNKNOWNOP           224C
UNKNOWNOP0001       1368
WORD_DN_EA          19EE
WORD_EA_DN          1986
__A0                25BF
__A1                25C2
__A2                25C5
__A3                25C8
__A4                25CB
__A5                25CE
__A6                25D1
__A7                25D4
__B                 25B3
__D0                25D7
__D1                25DA
__D2                25DD
__D3                25E0
__D4                25E3
__D5                25E6
__D6                25E9
__D7                25EC
__L                 25BB
__W                 25B7
