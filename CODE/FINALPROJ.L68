00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/12/2014 9:39:33 AM

00000000                             1  *    666
00000000                             2  *   66 66
00000000                             3  *  66   66
00000000                             4  *  66   66         8888
00000000                             5  *  66   66       88   kkkk
00000000                             6  *  66  66       8   88   kk      
00000000                             7  *   66  6      8  88  kkk  kk    
00000000                             8  *    66  6    8  88     kk  k
00000000                             9  *     66 66  88 88        kk
00000000                            10  *     6 _______ 8
00000000                            11  *    6    68k    8
00000000                            12  *   6_____PRO_____8
00000000                            13  *  6               8        68k is as easy as
00000000                            14  *  6    0     0    8        6 - 8 - k !
00000000                            15  *  6   /   V   \   8 
00000000                            16  *  6   \__/ \__/   8        Welcome to our Dissasembler, Professor Nash!
00000000                            17  *    6            8         Enjoy your stay!
00000000                            18  *      6        8      
00000000                            19  *        666888
00000000                            20  *  _____                   __    ___  _    
00000000                            21  * | ____|__ _ ___ _   _   / /_  ( _ )| | __
00000000                            22  * |  _| / _` / __| | | | | '_ \ / _ \| |/ /
00000000                            23  * | |__| (_| \__ \ |_| | | (_) | (_) |   < 
00000000                            24  * |_____\__,_|___/\__, |  \___/ \___/|_|\_\
00000000                            25  *                 |___/           
00000000                            26  *-----------------------------------------------------------
00000000                            27  * Title      : 68K Decompiler
00000000                            28  * Written by : Nick Bell, Sammy Nimnuch, Caleb Larson
00000000                            29  * Date       : 11/2014 -> 12/2014
00000000                            30  * Description: This program decompiles other 68K programs
00000000                            31  *              which are loaded into the simulator simultaneously.
00000000                            32  *-----------------------------------------------------------
00000000                            33  
00000000                            34  
00000000  =00000000                 35  OP_0000     EQU     %0000000000000000
00000000  =00001000                 36  OP_0001     EQU     %0001000000000000
00000000  =00002000                 37  OP_0010     EQU     %0010000000000000
00000000  =00003000                 38  OP_0011     EQU     %0011000000000000
00000000  =00004000                 39  OP_0100     EQU     %0100000000000000
00000000  =00005000                 40  OP_0101     EQU     %0101000000000000
00000000  =00006000                 41  OP_0110     EQU     %0110000000000000
00000000  =00007000                 42  OP_0111     EQU     %0111000000000000
00000000  =00008000                 43  OP_1000     EQU     %1000000000000000
00000000  =00009000                 44  OP_1001     EQU     %1001000000000000
00000000  =0000A000                 45  OP_1010     EQU     %1010000000000000
00000000  =0000B000                 46  OP_1011     EQU     %1011000000000000
00000000  =0000C000                 47  OP_1100     EQU     %1100000000000000
00000000  =0000D000                 48  OP_1101     EQU     %1101000000000000
00000000  =0000E000                 49  OP_1110     EQU     %1110000000000000
00000000  =0000F000                 50  OP_1111     EQU     %1111000000000000
00000000  =0000000F                 51  HEX_VALUE_MASK_LONG EQU     $0000000F  * mask a hex value in 32-bits
00000000                            52  
00001000                            53  START:  ORG    $1000            * first instruction of program
00001000                            54  
00001000                            55  * -----------------------------------
00001000                            56  * Starting and Ending Addresses
00001000                            57  * -----------------------------------
00001000                            58  *-----------------------------------------------------------------------------
00001000                            59  *-----------------------------------------------------------------------------
00001000                            60  * NAME: START OF PROGRAM
00001000                            61  * DESCRIPTION:    Grab the starting and ending address for the program
00001000                            62  * PRE-CONDITION:  
00001000                            63  * POST-CONDITION: 
00001000                            64  * REGISTERS:      
00001000                            65  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001000                            66  
00001000                            67  * THINK ABOUT ASKING FOR VALID START/END NO NEGATIVE ADDR
00001000                            68  
00001000  43F9 000027E0             69          LEA     MSGSTART,A1     * Load MESSAGE START, asking for input
00001006  103C 000E                 70          MOVE.B  #14,D0          * Trap #14 to display message
0000100A  4E4F                      71          TRAP    #15             * Perform #14
0000100C                            72          
0000100C  103C 0004                 73          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001010  4E4F                      74          TRAP    #15             * Perform Trap #15
00001012  2441                      75          MOVEA.L D1,A2           * Move the user input into A2. This is the starting address.
00001014                            76  
00001014  43F9 000027F8             77          LEA     MSGEND,A1       * Load MESSAGE END, asking for input
0000101A  303C 000E                 78          MOVE.W  #14,D0          * Trap #14 to display MESGEND
0000101E  4E4F                      79          TRAP    #15             * Perform #14
00001020                            80          
00001020  103C 0004                 81          MOVE.B  #4,D0           * Trap #4 gets an input and stores in D1
00001024  4E4F                      82          TRAP    #15             * Perform Trap #4 to get the ending address
00001026  2A01                      83          MOVE.L  D1,D5           * Move the ending address into D5
00001028  43F9 00002833             84          LEA     NEWLINE,A1      * Store newline variable for seperate opcodes
0000102E                            85          
0000102E  3E3C 000F                 86          MOVE.W  #15,D7          * prep D7 for bitmask subroutine
00001032  3C3C 000C                 87          MOVE.W  #12,D6          * prep D6 for bitmask subroutine
00001036  6100 1792                 88          BSR     BITMASK         * obtain a bitmask that goes from 12-15 (inclusive)
0000103A                            89          
0000103A  4279 0000293A             90          CLR     (__COUNTER)     * setup for the counter
00001040  33FC 0000 0000293A        91          MOVE    #0,(__COUNTER)  * setup for the counter        
00001048                            92          
00001048  6100 0164                 93          BSR     CLEAR_SCREEN    * clear the prompt for start/end ADDR's
0000104C                            94  
0000104C                            95  LOOP    
0000104C  2C4A                      96          MOVE.L  A2,A6           * Copy the starting address into A6   
0000104E  7608                      97          MOVE.L  #8,D3           * Move #8 into D3 to indicate the size
00001050  6100 1538                 98          BSR     PRINT_ASCII_HEX_CHAR    * Subroutine to print out the char without Trap Task #15
00001054                            99          
00001054  43F9 000028EA            100          LEA     SPACE,A1        * print a space to seperate the address from the data
0000105A  303C 000E                101          MOVE.W  #14,D0          * Trap #14 to display the SPACE
0000105E  4E4F                     102          TRAP    #15             * Perform Trap #15
00001060                           103  
00001060  3F06                     104          MOVE    D6,-(A7)        * save the bitmask on the stack
00001062  341A                     105          MOVE.W  (A2)+,D2        * Read an operation into D2
00001064  CC42                     106          AND.W   D2,D6           * Apply this bitmask
00001066                           107          
00001066  BC7C 0000                108          CMP     #OP_0000,D6     * Does the operation start with 0000?
0000106A  6600 000A                109          BNE     NOT0000         * No, check next case
0000106E  6100 014A                110          BSR     OP0000          * Branch to subroutine 0000
00001072  6000 00F6                111          BRA     ITERATION       * Move to next iteration of the loop
00001076                           112  NOT0000        
00001076  BC7C 1000                113          CMP     #OP_0001,D6     * Does the operation start with 0001?
0000107A  6600 000A                114          BNE     NOT0001         * No, check next case
0000107E  6100 02C4                115          BSR     OP0001          * Branch to subroutine 0001
00001082  6000 00E6                116          BRA     ITERATION       * Move to next iteration of the loop
00001086                           117  NOT0001
00001086  BC7C 2000                118          CMP     #OP_0010,D6     * Does the operation start with 0010?
0000108A  6600 000A                119          BNE     NOT0010         * No, check next case
0000108E  6100 0326                120          BSR     OP0010          * Branch to subroutine 0010
00001092  6000 00D6                121          BRA     ITERATION       * Move to next iteration of the loop
00001096                           122  NOT0010
00001096  BC7C 3000                123          CMP     #OP_0011,D6     * Does the operation start with 0011?
0000109A  6600 000A                124          BNE     NOT0011         * No, check next case
0000109E  6100 0388                125          BSR     OP0011          * Branch to subroutine 0011
000010A2  6000 00C6                126          BRA     ITERATION       * Move to next iteration of the loop
000010A6                           127  NOT0011
000010A6  BC7C 4000                128          CMP     #OP_0100,D6     * Does the operation start with 0100?
000010AA  6600 000A                129          BNE     NOT0100         * No, check next case
000010AE  6100 03EA                130          BSR     OP0100          * Branch to subroutine 0100
000010B2  6000 00B6                131          BRA     ITERATION       * Move to next iteration of the loop
000010B6                           132  NOT0100
000010B6  BC7C 5000                133          CMP     #OP_0101,D6     * Does the operation start with 0101?
000010BA  6600 000A                134          BNE     NOT0101         * No, check next case
000010BE  6100 0708                135          BSR     OP0101          * Branch to subroutine 0101
000010C2  6000 00A6                136          BRA     ITERATION       * Move to next iteration of the loop
000010C6                           137  NOT0101
000010C6  BC7C 6000                138          CMP     #OP_0110,D6     * Does the operation start with 0110?
000010CA  6600 000A                139          BNE     NOT0110         * No, check next case
000010CE  6100 0766                140          BSR     OP0110          * Branch to subroutine 0110
000010D2  6000 0096                141          BRA     ITERATION       * Move to next iteration of the loop
000010D6                           142  NOT0110
000010D6  BC7C 7000                143          CMP     #OP_0111,D6     * Does the operation start with 0111?
000010DA  6600 000A                144          BNE     NOT0111         * No, check next case
000010DE  6100 0868                145          BSR     OP0111          * Branch to subroutine 0111
000010E2  6000 0086                146          BRA     ITERATION       * Move to next iteration of the loop
000010E6                           147  NOT0111
000010E6  BC7C 8000                148          CMP     #OP_1000,D6     * Does the operation start with 1000?
000010EA  6600 000A                149          BNE     NOT1000         * No, check next case
000010EE  6100 085E                150          BSR     OP1000          * Branch to subroutine 1000
000010F2  6000 0076                151          BRA     ITERATION       * Move to next iteration of the loop
000010F6                           152  NOT1000
000010F6  BC7C 9000                153          CMP     #OP_1001,D6     * Does the operation start with 1001?
000010FA  6600 000A                154          BNE     NOT1001         * No, check next case
000010FE  6100 0926                155          BSR     OP1001          * Branch to subroutine 1001
00001102  6000 0066                156          BRA     ITERATION       * Move to next iteration of the loop
00001106                           157  NOT1001
00001106  BC7C A000                158          CMP     #OP_1010,D6     * Does the operation start with 1010?
0000110A  6600 000A                159          BNE     NOT1010         * No, check next case
0000110E  6100 09D0                160          BSR     OP1010          * Branch to subroutine 1010
00001112  6000 0056                161          BRA     ITERATION       * Move to next iteration of the loop
00001116                           162  NOT1010
00001116  BC7C B000                163          CMP     #OP_1011,D6     * Does the operation start with 1011?
0000111A  6600 000A                164          BNE     NOT1011         * No, check next case
0000111E  6100 09C6                165          BSR     OP1011          * Branch to subroutine 1011
00001122  6000 0046                166          BRA     ITERATION       * Move to next iteration of the loop
00001126                           167  NOT1011
00001126  BC7C C000                168          CMP     #OP_1100,D6     * Does the operation start with 1100?
0000112A  6600 000A                169          BNE     NOT1100         * No, check next case
0000112E  6100 0A60                170          BSR     OP1100          * Branch to subroutine 1100
00001132  6000 0036                171          BRA     ITERATION       * Move to next iteration of the loop
00001136                           172  NOT1100
00001136  BC7C D000                173          CMP     #OP_1101,D6     * Does the operation start with 1101?
0000113A  6600 000A                174          BNE     NOT1101         * No, check next case
0000113E  6100 0ADA                175          BSR     OP1101          * Branch to subroutine 1101
00001142  6000 0026                176          BRA     ITERATION       * Move to next iteration of the loop
00001146                           177  NOT1101
00001146  BC7C E000                178          CMP     #OP_1110,D6     * Does the operation start with 1110?
0000114A  6600 000A                179          BNE     NOT1110         * No, check next case
0000114E  6100 0C50                180          BSR     OP1110          * Branch to subroutine 1110
00001152  6000 0016                181          BRA     ITERATION       * Move to next iteration of the loop
00001156                           182  NOT1110
00001156  BC7C F000                183          CMP     #OP_1111,D6     * Does the operation start with 1111?
0000115A  6600 000A                184          BNE     LOOPUNKNOWNOP   * No, check next case
0000115E  6100 0DD6                185          BSR     OP1111          * Branch to subroutine 1111
00001162  6000 0006                186          BRA     ITERATION       * Move to next iteration of the loop
00001166                           187          
00001166                           188  LOOPUNKNOWNOP
00001166  6100 13F8                189          BSR     UNKNOWNOP       * Fail case
0000116A                           190          
0000116A                           191  ITERATION
0000116A  3C1F                     192          MOVE    (A7)+,D6        * restore the bitmask to its previous state
0000116C                           193      
0000116C  5279 0000293A            194          ADDI    #1,(__COUNTER)  * Track the lines on screen
00001172  0C79 001E 0000293A       195          CMPI    #30,(__COUNTER) * Has the counter reached 30?
0000117A  6600 0006                196          BNE     END_OF_LOOP     * Not at 30, go loop more
0000117E  6100 000C                197          BSR     IDLE_STATE      * Break to idle, ask to clear screen
00001182                           198  
00001182                           199  END_OF_LOOP
00001182  BA4A                     200          CMP     A2,D5           * Compare the starting address to ending address
00001184  6700 2F0C                201          BEQ     END             * If they are equal, branch 
00001188  6000 FEC2                202          BRA     LOOP            * Otherwise, branch back to LOOP
0000118C                           203          
0000118C                           204  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000118C                           205  *-----------------------------------------------------------------------------
0000118C                           206  
0000118C                           207  IDLE_STATE
0000118C  43F9 0000280E            208      LEA     CONT_MSG,A1     * show msg to hit enter in order to continue
00001192  103C 000E                209      MOVE.B  #14,D0          * Trap #14 to show CONT_MSG
00001196  4E4F                     210      TRAP    #15             * Perform Trap #14
00001198                           211      
00001198  103C 0004                212      MOVE.B  #4,D0           * trap task 4 for input
0000119C  4E4F                     213      TRAP    #15             * Perform Trap #15
0000119E  0C41 000D                214      CMPI    #$D,D1          * Compare 13 (Enter) to D1
000011A2                           215      
000011A2  6100 000A                216      BSR     CLEAR_SCREEN    * Clear everything, so ready to output another 30
000011A6  42B9 0000293A            217      CLR.L   (__COUNTER)     * Reset the counter
000011AC  4E75                     218      RTS                     * Done with IDLE State
000011AE                           219      
000011AE                           220  CLEAR_SCREEN
000011AE  103C 000B                221      MOVE.B  #11,D0          * Move #11 into D0 for Trap Task #11
000011B2  323C FF00                222      MOVE.W  #$FF00,D1       * To clear screen, set D1.W to $FF00
000011B6  4E4F                     223      TRAP    #15             * Perform Trap #11
000011B8  4E75                     224      RTS                     * Return to IDLE_STATE
000011BA                           225  
000011BA                           226  *-----------------------------------------------------------------------------
000011BA                           227  *-----------------------------------------------------------------------------
000011BA                           228  * NAME: OP_0000   (BCLR, ORI, CMPI)
000011BA                           229  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000011BA                           230  * PRE-CONDITION:  
000011BA                           231  * POST-CONDITION: All registers return to their previous state, and the output
000011BA                           232  *                 goes to the output console for reading the raw data or the
000011BA                           233  *                 actual instruction.
000011BA                           234  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000011BA                           235  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000011BA                           236  OP0000
000011BA  48A7 FFC0                237          MOVEM   D0-D7/A0-A1,-(A7)   * Push values to the stack to save
000011BE                           238                        
000011BE                           239          * Checking for unsupported mode (An) for BCLR, ORI, and CMPI
000011BE  3C3C 0003                240          MOVE.W  #3, D6              * Prep lower value for bitmask
000011C2  3E3C 0005                241          MOVE.W  #5, D7              * Prep upper value for bitmask
000011C6  6100 1602                242          BSR     BITMASK             * Finalize bitmask setup
000011CA  CC42                     243          AND     D2,D6               * Apply bitmask
000011CC                           244          
000011CC  0C46 0008                245          CMPI    #%0000000000001000, D6  * Is the mode An, an unsupported mode?
000011D0  6700 0168                246          BEQ     UNKNOWN0000             * If so, the op is unknown
000011D4                           247          
000011D4                           248          * Checking for BCLR Dynamic
000011D4  3C3C 0006                249          MOVE.W  #6, D6              * Prep lower value for bitmask
000011D8  3E3C 0008                250          MOVE.W  #8, D7              * Prep upper value for bitmask
000011DC  6100 15EC                251          BSR     BITMASK             * Finalize bitmask setup
000011E0  CC42                     252          AND     D2,D6               * Apply bitmask
000011E2                           253          
000011E2  0C46 0180                254          CMPI    #%0000000110000000, D6  * Are we BCLR Dynamic?
000011E6  6600 0050                255          BNE     NOTBCLRDYNA             * If not, branch to BCLR Static or other ops
000011EA                           256  
000011EA                           257          * Confirmed BCLR Dynamic at this point
000011EA  43F9 0000286D            258          LEA     BCLROP,A1           * We found BCLR
000011F0  103C 000E                259          MOVE.B  #14,D0              * Trap #14 prints out the data
000011F4  4E4F                     260          TRAP    #15                 * Perform Trap #14
000011F6                           261  
000011F6  43F9 000028EA            262          LEA     SPACE,A1            * Formatting
000011FC  103C 000E                263          MOVE.B  #14,D0              * Trap #14 prints out space
00001200  4E4F                     264          TRAP    #15                 * Perform Trap #14
00001202                           265          
00001202                           266          * Set up for printing out the Register
00001202  0882 0006                267          BCLR    #6,D2               * Clear bit 6
00001206  0882 0007                268          BCLR    #7,D2               * Clear bit 7
0000120A  0882 0008                269          BCLR    #8,D2               * Clear bit 8
0000120E                           270          
0000120E  6100 0D2C                271          BSR     EAHELPER611         * Print out Register
00001212                           272  
00001212  43F9 000028F0            273          LEA     COMMA,A1            * formatting
00001218  103C 000E                274          MOVE.B  #14,D0              * Trap #14 prints out a comma
0000121C  4E4F                     275          TRAP    #15                 * Perform Trap #14
0000121E                           276          
0000121E  4243                     277          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
00001220  08C3 0000                278          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
00001224                           279      
00001224  6100 0D58                280          BSR     EAHELPER05          * Print out data.
00001228                           281          
00001228  43F9 00002833            282          LEA     NEWLINE,A1          * Formatting
0000122E  103C 000E                283          MOVE.B  #14,D0              * Trap #14 prints out the data
00001232  4E4F                     284          TRAP    #15                 * Perform Trap #14
00001234                           285          
00001234  6000 0108                286          BRA     END0000             * Found the op, move to next iteration
00001238                           287          
00001238                           288  NOTBCLRDYNA     * Possible options left are BCLR Static, ORI, and CMPI
00001238  3C3C 0006                289          MOVE.W  #6, D6              * Prep lower value for bitmask
0000123C  3E3C 000B                290          MOVE.W  #11, D7             * Prep upper value for bitmask
00001240  6100 1588                291          BSR     BITMASK             * Finalize bitmask setup
00001244  CC42                     292          AND     D2,D6               * Apply bitmask
00001246                           293          
00001246  0C46 0880                294          CMPI    #%0000100010000000, D6  * Are we BCLR Static?
0000124A  6600 003A                295          BNE     NOTBCLR                 * If not, branch to other functions
0000124E                           296          
0000124E                           297          * Confirmed BCLR Static at this point
0000124E  43F9 0000286D            298          LEA     BCLROP,A1           * We found BCLR
00001254  103C 000E                299          MOVE.B  #14,D0              * Trap #14 prints out the data
00001258  4E4F                     300          TRAP    #15                 * Perform Trap #14
0000125A                           301  
0000125A  43F9 000028EA            302          LEA     SPACE,A1            * Formatting
00001260  103C 000E                303          MOVE.B  #14,D0              * Trap #14 prints out space
00001264  4E4F                     304          TRAP    #15                 * Perform Trap #14
00001266                           305          
00001266  2802                     306          MOVE.L  D2, D4              * Saving values
00001268                           307                  
00001268  43F9 000028EE            308          LEA     IMD, A1             * Formatting
0000126E  103C 000E                309          MOVE.B  #14,D0              * Trap #14 prints out the data
00001272  4E4F                     310          TRAP    #15                 * Perform Trap #14
00001274                           311          
00001274                           312          * Grab next word
00001274  3A1A                     313          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
00001276  E18D                     314          LSL.L   #8, D5              * LSL for first nibble of the word
00001278  E18D                     315          LSL.L   #8, D5              * LSL for second nibble of the word
0000127A  2C45                     316          MOVE.L  D5, A6              * Store D5 into A6, to be used as parameter
0000127C  7604                     317          MOVE.L  #4, D3              * Four most significant bits in D3
0000127E  6100 130A                318          BSR     PRINT_ASCII_HEX_CHAR    * Perform number print out
00001282                           319  
00001282  6000 007E                320          BRA     SKIPLONG            * Formatting, returning saved values, etc.
00001286                           321          
00001286                           322  NOTBCLR * Possible options left are ORI or CMPI
00001286  3C3C 0009                323          MOVE.W  #9, D6              * Prep lower value for bitmask
0000128A  3E3C 000B                324          MOVE.W  #11, D7             * Prep upper value for bitmask
0000128E  6100 153A                325          BSR     BITMASK             * Finalize bitmask setup
00001292  CC42                     326          AND     D2,D6               * Apply bitmask
00001294                           327          
00001294  0C46 0000                328          CMPI    #%0000000000000000, D6   * Are we possibly ORI?
00001298  6600 008A                329          BNE     NOTORI                   * If not, branch to NOTORI
0000129C                           330          
0000129C                           331          * Size check to see if unsupported ORI mode
0000129C  3C3C 0006                332          MOVE.W  #6, D6              * Prep lower value for bitmask
000012A0  3E3C 0007                333          MOVE.W  #7, D7              * Prep upper value for bitmask
000012A4  6100 1524                334          BSR     BITMASK             * Finalize bitmask setup
000012A8  CC42                     335          AND     D2,D6               * Apply bitmask
000012AA                           336          
000012AA  0C46 00C0                337          CMPI    #%0000000011000000, D6  * Are bits 6,7 == 1,1?
000012AE  6700 008A                338          BEQ     UNKNOWN0000             * If so, unknown op. 
000012B2                           339          
000012B2                           340          * Confirmed ORI at this point
000012B2  43F9 0000287B            341          LEA     ORIOP, A1           * Load 'ORI' into the output window
000012B8  103C 000E                342          MOVE.B  #14,D0              * Trap #14 prints out the data in D0
000012BC  4E4F                     343          TRAP    #15                 * Perform Trap #14
000012BE                           344  
000012BE                           345  IMD_SIZE_0000        
000012BE  6100 1004                346          BSR     SIZE67              * Print the size
000012C2                           347  
000012C2                           348          * Mode check to see the size
000012C2  3C3C 0006                349          MOVE.W  #6, D6              * Prep lower value for bitmask
000012C6  3E3C 0007                350          MOVE.W  #7, D7              * Prep upper value for bitmask
000012CA  6100 14FE                351          BSR     BITMASK             * Finalize bitmask setup
000012CE  CC42                     352          AND     D2,D6               * Apply bitmask
000012D0                           353          
000012D0  2802                     354          MOVE.L  D2, D4              * Saving value
000012D2                           355                  
000012D2  43F9 000028EE            356          LEA     IMD, A1             * Formatting
000012D8  103C 000E                357          MOVE.B  #14,D0              * Trap #14 prints out the data
000012DC  4E4F                     358          TRAP    #15                 * Perform Trap #14
000012DE                           359                 
000012DE                           360          * Grab immediate data
000012DE  3A1A                     361          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
000012E0  E18D                     362          LSL.L   #8, D5              * LSL to get one nibble 
000012E2  E18D                     363          LSL.L   #8, D5              * LSL to get the next nibble
000012E4  2C45                     364          MOVE.L  D5, A6              * Store D5 into A6 for PRINT_ASCII_HEX_CHAR
000012E6  7604                     365          MOVE.L  #4, D3              * Move #4 into D3 to display four bits
000012E8  6100 12A0                366          BSR     PRINT_ASCII_HEX_CHAR
000012EC                           367  
000012EC  0C46 0080                368          CMPI    #%0000000010000000, D6   * See if the size is a LONG
000012F0  6600 0010                369          BNE     SKIPLONG    
000012F4                           370          
000012F4                           371          * Grab next word, if necessary
000012F4  3A1A                     372          MOVE.W (A2)+, D5            * Move the pointer, and store it in D3
000012F6  E18D                     373          LSL.L   #8, D5              * LSL to get first nibble of the word
000012F8  E18D                     374          LSL.L   #8, D5              * LSL to get second nibble of the word
000012FA  2C45                     375          MOVE.L  D5, A6              * Store D5 into A6 as a parameter
000012FC  7604                     376          MOVE.L  #4, D3              * Move #4 into D3 to show four bits
000012FE  6100 128A                377          BSR     PRINT_ASCII_HEX_CHAR    * Perform number output
00001302                           378  
00001302                           379  SKIPLONG
00001302  43F9 000028F0            380          LEA     COMMA, A1           * Formatting
00001308  103C 000E                381          MOVE.B  #14,D0              * Trap #14 prints out the data
0000130C  4E4F                     382          TRAP    #15                 * Perform Trap #14
0000130E                           383          
0000130E  2404                     384          MOVE.L  D4, D2              * Return saved value
00001310                           385          
00001310  6100 0C6C                386          BSR     EAHELPER05          * Print out the EA
00001314                           387          
00001314  43F9 00002833            388          LEA     NEWLINE,A1          * Formatting
0000131A  103C 000E                389          MOVE.B  #14,D0              * Trap #14 prints out the data
0000131E  4E4F                     390          TRAP    #15                 * Perform Trap #14
00001320                           391          
00001320  6000 001C                392          BRA     END0000             * Done with op. Move to next iteration
00001324                           393  
00001324                           394  NOTORI  * Possible option left is CMPI
00001324                           395  
00001324  0C46 0C00                396          CMPI    #%0000110000000000, D6  * Are we CMPI?
00001328  6600 0010                397          BNE     UNKNOWN0000             * If not, unknown op
0000132C                           398          
0000132C                           399          * Confirmed CMPI at this point
0000132C  43F9 0000287F            400          LEA     CMPIOP, A1          * Formatting
00001332  103C 000E                401          MOVE.B  #14,D0              * Trap #14 prints out the data
00001336  4E4F                     402          TRAP    #15                 * Perform Trap #14
00001338                           403          
00001338  6084                     404          BRA     IMD_SIZE_0000       * Get immediate value and end opcode 0000
0000133A                           405          
0000133A                           406  UNKNOWN0000
0000133A  6100 1224                407          BSR     UNKNOWNOP           * Unknown op
0000133E                           408  
0000133E                           409  END0000          
0000133E  4C9F 03FF                410          MOVEM   (A7)+,D0-D7/A0-A1   * Push values to the stack to save
00001342  4E75                     411          RTS
00001344                           412  
00001344                           413  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001344                           414  *-----------------------------------------------------------------------------
00001344                           415  
00001344                           416  
00001344                           417  
00001344                           418  *-----------------------------------------------------------------------------
00001344                           419  *-----------------------------------------------------------------------------
00001344                           420  * NAME: OP_0001   (MOVE.B)
00001344                           421  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001344                           422  * PRE-CONDITION:  xyz
00001344                           423  * POST-CONDITION: All registers return to their previous state, and the output
00001344                           424  *                 goes to the output console for reading the raw data or the
00001344                           425  *                 actual instruction.
00001344                           426  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001344                           427  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001344                           428  OP0001  
00001344  48A7 FFC0                429          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
00001348                           430          
00001348  3C3C 0006                431          MOVE.W  #6, D6              * Prep lower value for bitmask
0000134C  3E3C 0008                432          MOVE.W  #8, D7              * Prep upper value for bitmask
00001350  6100 1478                433          BSR     BITMASK             * Finalize bitmask setup
00001354  CC42                     434          AND     D2,D6               * Apply bitmask
00001356                           435          
00001356  0C46 0040                436          CMPI    #%0000000001000000,D6   * Is the move 001, an aspect of MOVEA?
0000135A  6600 0012                437          BNE     OP0001MOVE              * If not, branch to only print out MOVE
0000135E                           438          
0000135E                           439          * Confirmed MOVEA at this point
0000135E  43F9 00002850            440          LEA     MOVEAOP,A1      * Put 'MOVEA' into the window
00001364  103C 000E                441          MOVE.B  #14,D0          * Trap #14 to print out
00001368  4E4F                     442          TRAP    #15             * Perform Trap #14
0000136A                           443          
0000136A  6000 000E                444          BRA     OP0001MOVEA     * Continue with printing out size, registers, etc.
0000136E                           445          
0000136E                           446  OP0001MOVE
0000136E  43F9 0000284B            447          LEA     MOVEOP,A1   * Put 'MOVE' into the window
00001374  103C 000E                448          MOVE.B  #14,D0      * Trap #14 to print out
00001378  4E4F                     449          TRAP    #15         * Perform Trap #14
0000137A                           450          
0000137A                           451  OP0001MOVEA
0000137A                           452  
0000137A  43F9 000028FE            453          LEA     __B,A1      * Put '.B' into the window
00001380  103C 000E                454          MOVE.B  #14,D0      * Trap #14 to print out
00001384  4E4F                     455          TRAP    #15         * Perform Trap #14
00001386                           456          
00001386  7601                     457          MOVE.L  #1,D3       * Move #1 into D3 as a size parameter for EAHELPER05
00001388  6100 0BF4                458          BSR     EAHELPER05  * Perform EAHELPER05
0000138C                           459          
0000138C  43F9 000028F0            460          LEA     COMMA,A1    * Load ',' into the window
00001392  103C 000E                461          MOVE.B  #14,D0      * Trap #14 to print out
00001396  4E4F                     462          TRAP    #15         * Perform Trap #14
00001398                           463          
00001398  6100 0BA2                464          BSR     EAHELPER611 * Perform EAHELPER611 for Destination Reg and Mode
0000139C                           465          
0000139C  43F9 00002833            466          LEA     NEWLINE,A1  * Load a newline into the window
000013A2  103C 000E                467          MOVE.B  #14,D0      * Trap #14 to print it out
000013A6  4E4F                     468          TRAP    #15         * Perform trap #14
000013A8                           469          
000013A8  6000 0006                470          BRA     ENDOP0001   * Move to next iteration
000013AC                           471          
000013AC                           472  UNKNOWNOP0001
000013AC  6100 11B2                473          BSR     UNKNOWNOP   * Op is unknown
000013B0                           474          
000013B0                           475  ENDOP0001
000013B0  4C9F 03FF                476          MOVEM (A7)+,D0-D7/A0-A1 * Pop values back
000013B4  4E75                     477          RTS                     * Move to next iteration
000013B6                           478          
000013B6                           479  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000013B6                           480  *-----------------------------------------------------------------------------
000013B6                           481  
000013B6                           482  
000013B6                           483  
000013B6                           484  *-----------------------------------------------------------------------------
000013B6                           485  *-----------------------------------------------------------------------------
000013B6                           486  * NAME: OP_0010   (MOVE.L, MOVEA.L)
000013B6                           487  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000013B6                           488  * PRE-CONDITION:  xyz
000013B6                           489  * POST-CONDITION: All registers return to their previous state, and the output
000013B6                           490  *                 goes to the output console for reading the raw data or the
000013B6                           491  *                 actual instruction.
000013B6                           492  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000013B6                           493  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000013B6                           494  OP0010  
000013B6  48A7 FFC0                495          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
000013BA                           496          
000013BA  3C3C 0006                497          MOVE.W  #6, D6              * Prep lower value for bitmask
000013BE  3E3C 0008                498          MOVE.W  #8, D7              * Prep upper value for bitmask
000013C2  6100 1406                499          BSR     BITMASK             * Finalize bitmask setup
000013C6                           500          
000013C6  CC42                     501          AND     D2,D6               * Apply bitmask
000013C8                           502          
000013C8  0C46 0040                503          CMPI    #%0000000001000000,D6
000013CC  6600 0012                504          BNE     OP0010MOVE
000013D0                           505          
000013D0  43F9 00002850            506          LEA     MOVEAOP,A1   * Put 'MOVE' into the window
000013D6  103C 000E                507          MOVE.B  #14,D0      * Trap #14 to print out
000013DA  4E4F                     508          TRAP    #15         * Perform Trap #14
000013DC                           509          
000013DC  6000 000E                510          BRA     OP0010MOVEA
000013E0                           511          
000013E0                           512  OP0010MOVE
000013E0                           513  
000013E0  43F9 0000284B            514          LEA     MOVEOP,A1   * Put 'MOVE' into the window
000013E6  103C 000E                515          MOVE.B  #14,D0      * Trap #14 to print out
000013EA  4E4F                     516          TRAP    #15         * Perform Trap #14
000013EC                           517          
000013EC                           518  OP0010MOVEA
000013EC                           519  
000013EC  43F9 00002906            520          LEA     __L,A1   * Put 'MOVE' into the window
000013F2  103C 000E                521          MOVE.B  #14,D0      * Trap #14 to print out
000013F6  4E4F                     522          TRAP    #15         * Perform Trap #14
000013F8                           523          
000013F8  7603                     524          MOVE.L  #3,D3
000013FA                           525          
000013FA  6100 0B82                526          BSR     EAHELPER05
000013FE                           527          
000013FE  43F9 000028F0            528          LEA     COMMA,A1
00001404  103C 000E                529          MOVE.B  #14,D0
00001408  4E4F                     530          TRAP    #15
0000140A                           531          
0000140A  6100 0B30                532          BSR     EAHELPER611
0000140E                           533          
0000140E  43F9 00002833            534          LEA     NEWLINE,A1
00001414  103C 000E                535          MOVE.B  #14,D0
00001418  4E4F                     536          TRAP    #15
0000141A                           537          
0000141A  6000 0006                538          BRA     ENDOP0010
0000141E                           539          
0000141E                           540  UNKNOWNOP0010
0000141E  6100 1140                541          BSR     UNKNOWNOP
00001422                           542          
00001422                           543  ENDOP0010
00001422  4C9F 03FF                544          MOVEM (A7)+,D0-D7/A0-A1
00001426  4E75                     545          RTS        
00001428                           546  
00001428                           547  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001428                           548  *-----------------------------------------------------------------------------
00001428                           549  
00001428                           550  
00001428                           551  
00001428                           552  *-----------------------------------------------------------------------------
00001428                           553  *-----------------------------------------------------------------------------
00001428                           554  * NAME: OP_0011   (MOVE.W, MOVEA.W)
00001428                           555  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001428                           556  * PRE-CONDITION:  xyz
00001428                           557  * POST-CONDITION: All registers return to their previous state, and the output
00001428                           558  *                 goes to the output console for reading the raw data or the
00001428                           559  *                 actual instruction.
00001428                           560  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001428                           561  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001428                           562  OP0011  
00001428  48A7 FFC0                563          MOVEM   D0-D7/A0-A1,-(A7)   * Push vales onto stack
0000142C                           564          
0000142C  3C3C 0006                565          MOVE.W  #6, D6              * Prep lower value for bitmask
00001430  3E3C 0008                566          MOVE.W  #8, D7              * Prep upper value for bitmask
00001434  6100 1394                567          BSR     BITMASK             * Finalize bitmask setup
00001438                           568          
00001438  CC42                     569          AND     D2,D6               * Apply bitmask
0000143A                           570          
0000143A  0C46 0040                571          CMPI    #%0000000001000000,D6
0000143E  6600 0012                572          BNE     OP0011MOVE
00001442                           573          
00001442  43F9 00002850            574          LEA     MOVEAOP,A1   * Put 'MOVE' into the window
00001448  103C 000E                575          MOVE.B  #14,D0      * Trap #14 to print out
0000144C  4E4F                     576          TRAP    #15         * Perform Trap #14
0000144E                           577          
0000144E  6000 000E                578          BRA     OP0011MOVEA
00001452                           579          
00001452                           580  OP0011MOVE
00001452                           581  
00001452  43F9 0000284B            582          LEA     MOVEOP,A1   * Put 'MOVE' into the window
00001458  103C 000E                583          MOVE.B  #14,D0      * Trap #14 to print out
0000145C  4E4F                     584          TRAP    #15         * Perform Trap #14
0000145E                           585          
0000145E                           586  OP0011MOVEA
0000145E                           587  
0000145E  43F9 00002902            588          LEA     __W,A1   * Put 'MOVE' into the window
00001464  103C 000E                589          MOVE.B  #14,D0      * Trap #14 to print out
00001468  4E4F                     590          TRAP    #15         * Perform Trap #14
0000146A                           591          
0000146A  7602                     592          MOVE.L  #2,D3
0000146C                           593          
0000146C  6100 0B10                594          BSR     EAHELPER05
00001470                           595          
00001470  43F9 000028F0            596          LEA     COMMA,A1
00001476  103C 000E                597          MOVE.B  #14,D0
0000147A  4E4F                     598          TRAP    #15
0000147C                           599          
0000147C  6100 0ABE                600          BSR     EAHELPER611
00001480                           601          
00001480  43F9 00002833            602          LEA     NEWLINE,A1
00001486  103C 000E                603          MOVE.B  #14,D0
0000148A  4E4F                     604          TRAP    #15
0000148C                           605          
0000148C  6000 0006                606          BRA     ENDOP0011
00001490                           607          
00001490                           608  UNKNOWNOP0011
00001490  6100 10CE                609          BSR     UNKNOWNOP
00001494                           610          
00001494                           611  ENDOP0011
00001494  4C9F 03FF                612          MOVEM (A7)+,D0-D7/A0-A1
00001498  4E75                     613          RTS        
0000149A                           614  
0000149A                           615  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000149A                           616  *-----------------------------------------------------------------------------
0000149A                           617  
0000149A                           618  *-----------------------------------------------------------------------------
0000149A                           619  *-----------------------------------------------------------------------------
0000149A                           620  * NAME: OP_0100   (NOP, MOVEM, LEA, NEG, JSR, RTS)
0000149A                           621  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000149A                           622  * PRE-CONDITION:  xyz
0000149A                           623  * POST-CONDITION: All registers return to their previous state, and the output
0000149A                           624  *                 goes to the output console for reading the raw data or the
0000149A                           625  *                 actual instruction.
0000149A                           626  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000149A                           627  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000149A                           628  OP0100  
0000149A                           629  
0000149A  48A7 C0C0                630          MOVEM   D0-D1/A0-A1,-(A7) * Push values to the stack to save
0000149E                           631          
0000149E                           632          *NOP
0000149E  0C42 4E71                633          CMPI    #%0100111001110001,D2
000014A2  6600 0012                634          BNE     NOTNOP
000014A6                           635          
000014A6  43F9 00002843            636          LEA     NOOPERATION,A1
000014AC  103C 000D                637          MOVE.B  #13,D0          * Print a newline
000014B0  4E4F                     638          TRAP    #15
000014B2                           639          
000014B2  6000 030E                640          BRA     DONE0100 *we found it, move on to the next iteration
000014B6                           641  NOTNOP *NEG
000014B6                           642          
000014B6                           643          * prep values for BITMASK subroutine
000014B6  7C08                     644          MOVE.L  #8,D6
000014B8  7E0B                     645          MOVE.L  #11,D7
000014BA                           646          
000014BA  6100 130E                647          BSR     BITMASK
000014BE                           648          
000014BE  CC42                     649          AND     D2,D6                   * apply bitmask
000014C0                           650          
000014C0  0C46 0400                651          CMPI    #%0000010000000000,D6   * are we NEG?
000014C4  6600 0046                652          BNE     NOTNEG                  * not neg
000014C8                           653          
000014C8  7C03                     654          MOVE.L  #3,D6
000014CA  7E05                     655          MOVE.L  #5,D7
000014CC                           656          
000014CC  6100 12FC                657          BSR     BITMASK * generate a bitmask to be used to check mode
000014D0                           658          
000014D0  0C46 0008                659          CMPI    #%0000000000001000,D6 * check to see if it is the unsupported mode
000014D4  6700 02E8                660          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
000014D8                           661          
000014D8  0C46 0028                662          CMPI    #%0000000000101000,D6 * check to see if it is the unsupported mode
000014DC  6700 02E0                663          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
000014E0                           664          
000014E0  0C46 0030                665          CMPI    #%0000000000110000,D6 * check to see if it is the unsupported mode
000014E4  6700 02D8                666          BEQ     UNKNOWN0100 * if it is, print print out as hex indicating bad op
000014E8                           667        
000014E8                           668          * it is NEG, print
000014E8  43F9 00002847            669          LEA     NEGOP,A1
000014EE  103C 000E                670          MOVE.B  #14,D0
000014F2  4E4F                     671          TRAP    #15
000014F4                           672          
000014F4  6100 0DCE                673          BSR     SIZE67
000014F8                           674          
000014F8  6100 0A84                675          BSR     EAHELPER05
000014FC                           676          
000014FC  43F9 00002833            677          LEA     NEWLINE,A1
00001502  103C 000E                678          MOVE.B  #14,D0
00001506  4E4F                     679          TRAP    #15
00001508                           680          
00001508  6000 02B8                681          BRA     DONE0100 * we found the op, move to next iteration
0000150C                           682          
0000150C                           683  NOTNEG *MOVEM
0000150C                           684  
0000150C                           685          * prep values for BITMASK subroutine
0000150C  7C07                     686          MOVE.L  #7,D6
0000150E  7E09                     687          MOVE.L  #9,D7
00001510                           688          
00001510  6100 12B8                689          BSR     BITMASK
00001514                           690          
00001514  CC82                     691          AND.L   D2,D6   * apply bitmask
00001516                           692          
00001516  0C46 0080                693          CMPI    #%0000000010000000,D6 * is it MOVEM?
0000151A  6600 0148                694          BNE     NOTMOVEM          * it is not MOVEM
0000151E                           695          
0000151E  7C0A                     696          MOVE.L  #10,D6
00001520  7E0A                     697          MOVE.L  #10,D7
00001522                           698          
00001522  6100 12A6                699          BSR     BITMASK
00001526                           700          
00001526  CC82                     701          AND.L   D2,D6
00001528                           702          
00001528  0C46 0000                703          CMPI    #%0000000000000000,D6 * is it register to memory?
0000152C  6700 009C                704          BEQ     MOVEMTOMEM 
00001530                           705          
00001530                           706  MOVEMTOREG *supported modes: 010 011
00001530                           707  
00001530  7C03                     708          MOVE.L  #3,D6
00001532  7E05                     709          MOVE.L  #5,D7
00001534                           710          
00001534  6100 1294                711          BSR     BITMASK
00001538                           712          
00001538  CC82                     713          AND.L   D2,D6
0000153A                           714          
0000153A  0C46 0000                715          CMPI    #%0000000000000000,D6 * is it an unsupported mode?
0000153E  6700 027E                716          BEQ     UNKNOWN0100
00001542                           717          
00001542  0C46 0008                718          CMPI    #%0000000000001000,D6 * is it an unsupported mode?
00001546  6700 0276                719          BEQ     UNKNOWN0100
0000154A                           720          
0000154A  0C46 0020                721          CMPI    #%0000000000100000,D6 * is it an unsupported mode?
0000154E  6700 026E                722          BEQ     UNKNOWN0100
00001552                           723          
00001552  0C46 0028                724          CMPI    #%0000000000101000,D6 * is it an unsupported mode?
00001556  6700 0266                725          BEQ     UNKNOWN0100
0000155A                           726          
0000155A  0C46 0030                727          CMPI    #%0000000000110000,D6 * is it an unsupported mode?
0000155E  6700 025E                728          BEQ     UNKNOWN0100
00001562                           729          
00001562  0C46 0038                730          CMPI    #%0000000000111000,D6 * is it an unsupported mode?
00001566  6700 0256                731          BEQ     UNKNOWN0100
0000156A                           732          
0000156A  43F9 00002856            733          LEA     MOVEMOP,A1
00001570  103C 000E                734          MOVE.B  #14,D0          * print MOVEM
00001574  4E4F                     735          TRAP    #15
00001576                           736          
00001576  7C06                     737          MOVE.L  #6,D6
00001578  7E06                     738          MOVE.L  #6,D7
0000157A                           739          
0000157A  6100 124E                740          BSR     BITMASK
0000157E                           741          
0000157E  CC82                     742          AND.L   D2,D6
00001580                           743          
00001580  0C46 0040                744          CMPI    #%0000000001000000,D6 * is it a long op?
00001584  6600 0012                745          BNE     NOTLONGMOVEM1       * no, it is a word
00001588                           746          
00001588  43F9 00002906            747          LEA     __L,A1
0000158E  103C 000E                748          MOVE.B  #14,D0          * print .L 
00001592  4E4F                     749          TRAP    #15
00001594                           750          
00001594  6000 000E                751          BRA     SKIPNOTLONG1
00001598                           752          
00001598                           753  NOTLONGMOVEM1
00001598                           754  
00001598  43F9 00002902            755          LEA     __W,A1
0000159E  103C 000E                756          MOVE.B  #14,D0          * print .W 
000015A2  4E4F                     757          TRAP    #15
000015A4                           758                  
000015A4                           759  SKIPNOTLONG1
000015A4                           760  
000015A4  6100 09D8                761          BSR     EAHELPER05 * print out the register we are moving from
000015A8                           762          
000015A8  43F9 000028F0            763          LEA     COMMA,A1
000015AE  103C 000E                764          MOVE.B  #14,D0          * print , 
000015B2  4E4F                     765          TRAP    #15
000015B4                           766          
000015B4  6100 0DF0                767          BSR     MOVEMHELPERPOST
000015B8                           768          
000015B8  341A                     769          MOVE.W  (A2)+,D2
000015BA                           770          
000015BA  43F9 00002833            771          LEA     NEWLINE,A1
000015C0  103C 000E                772          MOVE.B  #14,D0          * print a newline 
000015C4  4E4F                     773          TRAP    #15
000015C6                           774      
000015C6  6000 01FA                775          BRA     DONE0100          * we found and printed, move on to the next iteration
000015CA                           776          
000015CA                           777  MOVEMTOMEM * supported modes 010 100
000015CA                           778  
000015CA  7C03                     779          MOVE.L  #3,D6
000015CC  7E05                     780          MOVE.L  #5,D7
000015CE                           781          
000015CE  6100 11FA                782          BSR     BITMASK
000015D2                           783          
000015D2  CC82                     784          AND.L   D2,D6
000015D4                           785          
000015D4  0C46 0000                786          CMPI    #%0000000000000000,D6 * is it an unsopported mode?
000015D8  6700 01E4                787          BEQ     UNKNOWN0100
000015DC                           788          
000015DC  0C46 0008                789          CMPI    #%0000000000001000,D6 * is it an unsopported mode?
000015E0  6700 01DC                790          BEQ     UNKNOWN0100
000015E4                           791          
000015E4  0C46 0018                792          CMPI    #%0000000000011000,D6 * is it an unsopported mode?
000015E8  6700 01D4                793          BEQ     UNKNOWN0100
000015EC                           794          
000015EC  0C46 0028                795          CMPI    #%0000000000101000,D6 * is it an unsopported mode?
000015F0  6700 01CC                796          BEQ     UNKNOWN0100
000015F4                           797          
000015F4  0C46 0030                798          CMPI    #%0000000000110000,D6 * is it an unsopported mode?
000015F8  6700 01C4                799          BEQ     UNKNOWN0100
000015FC                           800          
000015FC  0C46 0070                801          CMPI    #%0000000001110000,D6 * is it an unsopported mode?
00001600  6700 01BC                802          BEQ     UNKNOWN0100
00001604                           803          
00001604  43F9 00002856            804          LEA     MOVEMOP,A1
0000160A  103C 000E                805          MOVE.B  #14,D0          * print MOVEM
0000160E  4E4F                     806          TRAP    #15
00001610                           807          
00001610  7C06                     808          MOVE.L  #6,D6
00001612  7E06                     809          MOVE.L  #6,D7
00001614                           810          
00001614  6100 11B4                811          BSR     BITMASK
00001618                           812          
00001618  CC82                     813          AND.L   D2,D6
0000161A                           814          
0000161A  0C46 0040                815          CMPI    #%0000000001000000,D6 * is it a long op?
0000161E  6600 0012                816          BNE     NOTLONGMOVEM2       * no, it is a word
00001622                           817          
00001622  43F9 00002906            818          LEA     __L,A1
00001628  103C 000E                819          MOVE.B  #14,D0          * print .L 
0000162C  4E4F                     820          TRAP    #15
0000162E                           821          
0000162E  6000 000E                822          BRA     SKIPNOTLONG2
00001632                           823          
00001632                           824  NOTLONGMOVEM2
00001632                           825  
00001632  43F9 00002902            826          LEA     __W,A1
00001638  103C 000E                827          MOVE.B  #14,D0          * print .W 
0000163C  4E4F                     828          TRAP    #15
0000163E                           829                  
0000163E                           830  SKIPNOTLONG2
0000163E                           831  
0000163E  6100 0EF2                832          BSR     MOVEMHELPERPRE
00001642                           833  
00001642  43F9 000028F0            834          LEA     COMMA,A1
00001648  103C 000E                835          MOVE.B  #14,D0          * print , 
0000164C  4E4F                     836          TRAP    #15
0000164E                           837          
0000164E  6100 092E                838          BSR     EAHELPER05 * print out the register we are moving to
00001652                           839          
00001652  341A                     840          MOVE.W  (A2)+,D2
00001654                           841          
00001654  43F9 00002833            842          LEA     NEWLINE,A1
0000165A  103C 000E                843          MOVE.B  #14,D0          * print a newline 
0000165E  4E4F                     844          TRAP    #15
00001660                           845      
00001660  6000 0160                846          BRA     DONE0100          * we found and printed, move on to the next iteration
00001664                           847  
00001664                           848  NOTMOVEM *JSR
00001664                           849          * prep values for BITMASK subroutine
00001664  7C06                     850          MOVE.L  #6,D6
00001666  7E08                     851          MOVE.L  #8,D7
00001668                           852          
00001668  6100 1160                853          BSR     BITMASK
0000166C                           854          
0000166C  CC42                     855          AND     D2,D6   * apply bitmask
0000166E                           856          
0000166E  0C46 0080                857          CMPI    #%0000000010000000,D6
00001672  6600 0046                858          BNE     NOTJSR          * it's not JSR
00001676                           859          
00001676  43F9 0000285C            860          LEA     JSROP,A1
0000167C  103C 000E                861          MOVE.B  #14,D0          * Print JSR
00001680  4E4F                     862          TRAP    #15
00001682                           863          
00001682  43F9 000028EA            864          LEA     SPACE,A1
00001688  103C 000E                865          MOVE.B  #14,D0          * Print space
0000168C  4E4F                     866          TRAP    #15
0000168E                           867          
0000168E  43F9 000028EC            868          LEA     DOLLAR,A1
00001694  103C 000E                869          MOVE.B  #14,D0          * Print $
00001698  4E4F                     870          TRAP    #15
0000169A                           871          
0000169A                           872          * print out where we are jumping to
0000169A                           873          
0000169A  241A                     874          MOVE.L  (A2)+,D2 * read in the next word of the instruction
0000169C                           875  
0000169C  2E02                     876          MOVE.L  D2,D7
0000169E                           877  
0000169E  2C47                     878          MOVE.L  D7,A6
000016A0                           879          
000016A0  4283                     880          CLR.L   D3
000016A2                           881          
000016A2  163C 0008                882          MOVE.B  #8,D3
000016A6                           883          
000016A6  6100 0EE2                884          BSR     PRINT_ASCII_HEX_CHAR
000016AA                           885          
000016AA                           886          *MOVE.L  D2,D1   * save the opcode to print
000016AA                           887          
000016AA                           888          *MOVE.L  #16,D2  * set the base to 16
000016AA                           889          
000016AA                           890          *MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000016AA                           891          *TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000016AA                           892          
000016AA                           893          *MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
000016AA                           894          
000016AA                           895          *MOVE.L  D2,D1   * save the opcode to print
000016AA                           896          
000016AA                           897          *MOVE.L  #16,D2  * set the base to 16
000016AA                           898          
000016AA                           899          *MOVE.L  #15,D0  * set D0 to 15 to indicate we are converting to a different base
000016AA                           900          *TRAP    #15     * Perform Trap #15, 15 to print out mem add in hex
000016AA                           901          
000016AA  43F9 00002833            902          LEA     NEWLINE,A1
000016B0  103C 000E                903          MOVE.B  #14,D0          * Print a newline
000016B4  4E4F                     904          TRAP    #15
000016B6                           905          
000016B6  6000 010A                906          BRA     DONE0100          * we already found instruction, next iteration
000016BA                           907  NOTJSR *RTS
000016BA                           908  
000016BA                           909          * prep values for BITMASK subroutine
000016BA  7C06                     910          MOVE.L  #6,D6
000016BC  7E08                     911          MOVE.L  #8,D7
000016BE                           912          
000016BE  6100 110A                913          BSR     BITMASK
000016C2                           914          
000016C2  CC42                     915          AND     D2,D6   * apply bitmask
000016C4                           916          
000016C4  0C46 0040                917          CMPI    #%0000000001000000,D6
000016C8  6600 0012                918          BNE     NOTRTS          * it's not RTS
000016CC                           919          
000016CC  43F9 00002860            920          LEA     RTSOP,A1
000016D2  103C 000D                921          MOVE.B  #13,D0          * Print a newline and RTS
000016D6  4E4F                     922          TRAP    #15
000016D8                           923          
000016D8  6000 00E8                924          BRA     DONE0100          * we already found instruction, next iteration
000016DC                           925  NOTRTS  *LEA
000016DC                           926         
000016DC                           927          * prep values for BITMASK subroutine
000016DC  7C06                     928          MOVE.L  #6,D6
000016DE  7E08                     929          MOVE.L  #8,D7
000016E0                           930          
000016E0  6100 10E8                931          BSR     BITMASK
000016E4                           932          
000016E4  CC42                     933          AND     D2,D6   * apply bitmask
000016E6                           934          
000016E6  0C46 01C0                935          CMPI    #%0000000111000000,D6
000016EA  6600 00D2                936          BNE     UNKNOWN0100          * it's not LEA, we dont know what it is
000016EE                           937          
000016EE                           938          * prep values for BITMASK subroutine
000016EE  7C03                     939          MOVE.L  #3,D6
000016F0  7E05                     940          MOVE.L  #5,D7
000016F2                           941          
000016F2  6100 10D6                942          BSR     BITMASK
000016F6                           943          
000016F6  CC42                     944          AND     D2,D6   * apply bitmask
000016F8                           945          
000016F8  0C46 0008                946          CMPI    #%0000000000001000,D6
000016FC  6700 00C0                947          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001700                           948          
00001700  0C46 0018                949          CMPI    #%0000000000011000,D6
00001704  6700 00B8                950          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001708                           951          
00001708  0C46 0020                952          CMPI    #%0000000000100000,D6
0000170C  6700 00B0                953          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001710                           954          
00001710  0C46 0028                955          CMPI    #%0000000000101000,D6
00001714  6700 00A8                956          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001718                           957          
00001718  0C46 0030                958          CMPI    #%0000000000110000,D6
0000171C  6700 00A0                959          BEQ     UNKNOWN0100          * it's not LEA, we dont know what it is
00001720                           960          
00001720  0C46 0038                961          CMPI    #%0000000000111000,D6
00001724  6700 0046                962          BEQ     TWOWORDLEA          * it's a two word LEA
00001728                           963          
00001728  43F9 00002869            964          LEA     LEAOP,A1
0000172E  103C 000E                965          MOVE.B  #14,D0          * Print LEA
00001732  4E4F                     966          TRAP    #15
00001734                           967          
00001734  0882 0007                968          BCLR    #7,D2
00001738  0882 0008                969          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
0000173C                           970          
0000173C  43F9 000028EA            971          LEA     SPACE,A1
00001742  103C 000E                972          MOVE.B  #14,D0          * Print SPACE
00001746  4E4F                     973          TRAP    #15
00001748                           974          
00001748  6100 0834                975          BSR     EAHELPER05
0000174C                           976          
0000174C  43F9 000028F0            977          LEA     COMMA,A1
00001752  103C 000E                978          MOVE.B  #14,D0          * Print COMMA
00001756  4E4F                     979          TRAP    #15
00001758                           980          
00001758  6100 07E2                981          BSR     EAHELPER611
0000175C                           982          
0000175C  43F9 00002833            983          LEA     NEWLINE,A1
00001762  103C 000E                984          MOVE.B  #14,D0          * Start a new line
00001766  4E4F                     985          TRAP    #15
00001768                           986          
00001768                           987          
00001768                           988          * call EA helper
00001768                           989          * MOVE.W  (A2)+,D2        * simply used to advance the pointer, since it is a two word OP
00001768                           990                  
00001768  6000 0058                991          BRA     DONE0100          * we already found instruction, next iteration
0000176C                           992          
0000176C                           993  TWOWORDLEA
0000176C                           994  
0000176C  43F9 00002869            995          LEA     LEAOP,A1
00001772  103C 000E                996          MOVE.B  #14,D0   * Print LEA
00001776  4E4F                     997          TRAP    #15
00001778                           998          
00001778  43F9 000028EA            999          LEA     SPACE,A1
0000177E  103C 000E               1000          MOVE.B  #14,D0   * Print SPACE
00001782  4E4F                    1001          TRAP    #15
00001784                          1002  
00001784  321A                    1003          MOVE.W  (A2)+,D1
00001786                          1004          
00001786  7C00                    1005          MOVE.L  #0,D6
00001788  7E0F                    1006          MOVE.L  #15,D7
0000178A                          1007          
0000178A  6100 103E               1008          BSR     BITMASK
0000178E                          1009          
0000178E  C286                    1010          AND.L   D6,D1   * shave off bad info
00001790                          1011          
00001790  103C 0003               1012          MOVE.B  #3,D0   * Print the address which was the source
00001794  4E4F                    1013          TRAP    #15
00001796                          1014          
00001796  43F9 000028F0           1015          LEA     COMMA,A1
0000179C  103C 000E               1016          MOVE.B  #14,D0  * Print COMMA
000017A0  4E4F                    1017          TRAP    #15
000017A2                          1018          
000017A2  0882 0007               1019          BCLR    #7,D2
000017A6  0882 0008               1020          BCLR    #8,D2 * needed so eahelper recognizes it as the correct mode
000017AA                          1021          
000017AA  6100 0790               1022          BSR     EAHELPER611
000017AE                          1023          
000017AE  43F9 00002833           1024          LEA     NEWLINE,A1
000017B4  103C 000E               1025          MOVE.B  #14,D0          * Start a new line
000017B8  4E4F                    1026          TRAP    #15
000017BA                          1027          
000017BA  6000 0006               1028          BRA     DONE0100
000017BE                          1029          
000017BE                          1030  UNKNOWN0100 *dont know what it is
000017BE  6100 0DA0               1031          BSR     UNKNOWNOP
000017C2                          1032          
000017C2                          1033  DONE0100
000017C2  4C9F 0303               1034          MOVEM   (A7)+,D0-D1/A0-A1 * Pop off the stack to return our registers
000017C6  4E75                    1035          RTS
000017C8                          1036          
000017C8                          1037  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000017C8                          1038  *-----------------------------------------------------------------------------
000017C8                          1039        
000017C8                          1040          
000017C8                          1041          
000017C8                          1042  
000017C8                          1043  *-----------------------------------------------------------------------------
000017C8                          1044  *-----------------------------------------------------------------------------
000017C8                          1045  * NAME: OP_0101   (SUBQ)
000017C8                          1046  * DESCRIPTION:    Determines the instruction by using bit-level logic.
000017C8                          1047  * PRE-CONDITION:  xyz
000017C8                          1048  * POST-CONDITION: All registers return to their previous state, and the output
000017C8                          1049  *                 goes to the output console for reading the raw data or the
000017C8                          1050  *                 actual instruction.
000017C8                          1051  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
000017C8                          1052  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000017C8                          1053  OP0101
000017C8  48A7 FFC0               1054          MOVEM   D0-D7/A0-A1,-(A7)       * Push values to the stack to save
000017CC                          1055  
000017CC  CC7C 0100               1056          AND     #%0000000100000000, D6  * Baby-Bitmask for the 8th digit.
000017D0  0C46 0100               1057          CMPI    #%0000000100000000, D6  * Is the 8th digit a 1?
000017D4  6700 005A               1058          BEQ     UNKNOWN0101             * If so, unknown op
000017D8                          1059        
000017D8  0C46 0100               1060          CMPI    #%0000000100000000, D6  * Is the size 11, an unsupported value?
000017DC  6700 0052               1061          BEQ     UNKNOWN0101             * If so, unknown op
000017E0                          1062            
000017E0                          1063          * Verified SUBQ at this point
000017E0  43F9 00002864           1064          LEA     SUBQOP,A1           * Print out SUBQ
000017E6  103C 000E               1065          MOVE.B  #14,D0              * Trap #14 to print out
000017EA  4E4F                    1066          TRAP    #15                 * Perform Trap #14
000017EC                          1067                          
000017EC  6100 0AD6               1068          BSR     SIZE67              * Print out size
000017F0                          1069          
000017F0  43F9 000028EE           1070          LEA     IMD,A1              * Formatting
000017F6  103C 000E               1071          MOVE.B  #14,D0              * Trap #14 prints out space
000017FA  4E4F                    1072          TRAP    #15                 * Perform Trap #14
000017FC                          1073          
000017FC  3C3C 0009               1074          MOVE.W  #9, D6              * Prep lower value for bitmask
00001800  3E3C 000B               1075          MOVE.W  #11,D7              * Prep upper value for bitmask
00001804  6100 0FC4               1076          BSR     BITMASK             * Finalize bitmask setup
00001808  CC42                    1077          AND     D2,D6               * Apply bitmask
0000180A                          1078          
0000180A  6100 0F0C               1079          BSR     PRINTDATA911        * Special op for immediate in bits 9->11
0000180E                          1080            
0000180E  43F9 000028F0           1081          LEA     COMMA,A1            * Formatting
00001814  103C 000E               1082          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001818  4E4F                    1083          TRAP    #15                 * Perform Trap #14
0000181A                          1084          
0000181A  6100 0762               1085          BSR     EAHELPER05          * Print out the Effective Address
0000181E                          1086          
0000181E  43F9 00002833           1087          LEA     NEWLINE,A1          * Formatting
00001824  103C 000E               1088          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001828  4E4F                    1089          TRAP    #15                 * Perform Trap #14
0000182A                          1090          
0000182A  4C9F 03FF               1091          MOVEM   (A7)+,D0-D7/A0-A1   * Pop off the stack to return our registers
0000182E  4E75                    1092          RTS
00001830                          1093      
00001830                          1094  UNKNOWN0101
00001830  6100 0D2E               1095          BSR     UNKNOWNOP
00001834  4E75                    1096          RTS
00001836                          1097  
00001836                          1098  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001836                          1099  *-----------------------------------------------------------------------------
00001836                          1100  
00001836                          1101  
00001836                          1102  
00001836                          1103  *-----------------------------------------------------------------------------
00001836                          1104  *-----------------------------------------------------------------------------
00001836                          1105  * NAME: OP_0110   (BCC, BCS, BGE, BLT, BVC, BRA)
00001836                          1106  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001836                          1107  * PRE-CONDITION:  Given the possibilties for 0110, masks the next 4 bits
00001836                          1108  *                 in the instruction and determines what the bits match to a
00001836                          1109  *                 given condition code. If the 8 bit offset is $00, or $FF,
00001836                          1110  *                 this signifies a word or long offset (for $00 and $FF
00001836                          1111  *                 respectively). The 8 bit offset is in 2's comp. form, and
00001836                          1112  *                 should be un-done, then plus or minus to the current
00001836                          1113  *                 program counter (PC) to get the actual memory label to
00001836                          1114  *                 output to console. The word offset signal eats an
00001836                          1115  *                 additional 16 bits and the long offset eats an additional
00001836                          1116  *                 32 bits. The word/long offset are for memory alignment.
00001836                          1117  * POST-CONDITION: All registers return to their previous state, and the output
00001836                          1118  *                 goes to the output console for reading the raw data or the
00001836                          1119  *                 actual instruction.
00001836                          1120  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001836                          1121  *                 A1 (output)
00001836                          1122  * CONDITIONS TABLE:
00001836                          1123  *                Condition Names  - Mnemonic - Condition Code
00001836                          1124  *                --------------------------------------------
00001836                          1125  *                True             -    T     - 0000
00001836                          1126  *                False            -    F     - 0001
00001836                          1127  *                Higher           -    HI    - 0010
00001836                          1128  *                Lower or Same    -    LS    - 0011
00001836                          1129  *                Carry Clear      -    CC    - 0100
00001836                          1130  *                Carry Set        -    CS    - 0101
00001836                          1131  *                Not Equal        -    NE    - 0110
00001836                          1132  *                Equal            -    EQ    - 0111
00001836                          1133  *                Overflow Clear   -    VC    - 1000
00001836                          1134  *                Overflow Set     -    VS    - 1001
00001836                          1135  *                Plus             -    PL    - 1010
00001836                          1136  *                Minus            -    MI    - 1011
00001836                          1137  *                Greater or Equal -    GE    - 1100
00001836                          1138  *                Less Than        -    LT    - 1101
00001836                          1139  *                Greater Than     -    GT    - 1110
00001836                          1140  *                Less or Equal    -    LE    - 1111
00001836                          1141  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001836  48E7 FFC2               1142  OP0110  MOVEM.L D0-D7/A0-A1/A6,-(A7) * Save main method routine vars to stack
0000183A                          1143                          
0000183A  3C3C 0009               1144          MOVE.W  #9,D6  * Move in 9 to D6
0000183E  3E3C 000B               1145          MOVE.W  #11,D7 * Move in 11 to D7
00001842                          1146                                        
00001842  6100 0F86               1147          BSR     BITMASK * Call BITMASK sub-routine, Returns a bitmask in D6
00001846  CC42                    1148          AND     D2,D6   * apply the BITMASK
00001848                          1149          
00001848  0C46 0400               1150          CMPI    #%0000010000000000,D6 * CASE 1: BCC - BINARY FOR "CARRY CLEAR" FLAG
0000184C  6700 0032               1151          BEQ     OP_BCC
00001850  0C46 0500               1152          CMPI    #%0000010100000000,D6 * CASE 2: BCS - BINARY FOR "CARRY SET" FLAG
00001854  6700 0034               1153          BEQ     OP_BCS
00001858  0C46 0C00               1154          CMPI    #%0000110000000000,D6 * CASE 3: BGE - BINARY FOR "GREATER OR EQUAL" FLAG
0000185C  6700 0036               1155          BEQ     OP_BGE
00001860  0C46 0D00               1156          CMPI    #%0000110100000000,D6 * CASE 4: BLT - BINARY FOR "LESS THAN" FLAG
00001864  6700 0038               1157          BEQ     OP_BLT
00001868  0C46 0800               1158          CMPI    #%0000100000000000,D6 * CASE 5: BVC - BINARY FOR "OVERFLOW CLEAR" FLAG
0000186C  6700 003A               1159          BEQ     OP_BVC
00001870  0C46 0000               1160          CMPI    #%0000000000000000,D6 * CASE 6: BRA - BINARY FOR "BRANCH ALWAYS" FLAG
00001874  6700 003C               1161          BEQ     OP_BRA
00001878  6100 0CE6               1162          BSR     UNKNOWNOP             * don't know what it is, print it out, skip to end
0000187C  6000 00C4               1163          BRA     BCC_END
00001880                          1164  
00001880  43F9 000028A8           1165  OP_BCC  LEA     OP_BCC_MSG,A1
00001886  6000 0034               1166          BRA     OP_BRANCHES_PRINT
0000188A  43F9 000028AD           1167  OP_BCS  LEA     OP_BCS_MSG,A1
00001890  6000 002A               1168          BRA     OP_BRANCHES_PRINT
00001894  43F9 000028B2           1169  OP_BGE  LEA     OP_BGE_MSG,A1
0000189A  6000 0020               1170          BRA     OP_BRANCHES_PRINT
0000189E  43F9 000028B7           1171  OP_BLT  LEA     OP_BLT_MSG,A1
000018A4  6000 0016               1172          BRA     OP_BRANCHES_PRINT
000018A8  43F9 000028BC           1173  OP_BVC  LEA     OP_BVC_MSG,A1
000018AE  6000 000C               1174          BRA     OP_BRANCHES_PRINT
000018B2  43F9 000028C1           1175  OP_BRA  LEA     OP_BRA_MSG,A1
000018B8  6000 0002               1176          BRA     OP_BRANCHES_PRINT
000018BC                          1177  OP_BRANCHES_PRINT
000018BC  103C 000E               1178          MOVE.B  #14,D0 * print instruction op, chosen from cases directly above
000018C0  4E4F                    1179          TRAP    #15
000018C2                          1180          
000018C2  43F9 000028EC           1181          LEA     DOLLAR,A1
000018C8  103C 000E               1182          MOVE.B  #14,D0 * print raw data hex of the LABEL
000018CC  4E4F                    1183          TRAP    #15
000018CE                          1184          
000018CE  3C3C 0000               1185          MOVE.W  #0,D6                 * Move in 0 to D6 - prep mask
000018D2  3E3C 0007               1186          MOVE.W  #7,D7                 * Move in 7 to D7
000018D6  6100 0EF2               1187          BSR     BITMASK               * Call BITMASK sub-routine, return in D6
000018DA  CC42                    1188          AND     D2,D6                 * AND mask with op bits, get last 8 bits in D6
000018DC                          1189          
000018DC  0C46 0000               1190          CMPI    #%00000000,D6         * all 0's == word offset
000018E0  6700 0028               1191          BEQ     BCC_WORD_OFFSET
000018E4                          1192          
000018E4  0C46 00FF               1193          CMPI    #%11111111,D6         * all F's == long offset
000018E8  6700 003E               1194          BEQ     BCC_LONG_OFFSET
000018EC                          1195  BCC_BYTE_OFFSET
000018EC  E18E                    1196          LSL.L   #8,D6
000018EE  E18E                    1197          LSL.L   #8,D6
000018F0  E18E                    1198          LSL.L   #8,D6
000018F2                          1199          
000018F2  2C46                    1200          MOVE.L  D6,A6
000018F4  7602                    1201          MOVE.L  #2,D3
000018F6                          1202          
000018F6  6100 0C92               1203          BSR     PRINT_ASCII_HEX_CHAR
000018FA                          1204          
000018FA  43F9 00002833           1205          LEA     NEWLINE,A1
00001900  103C 000E               1206          MOVE.B  #14,D0
00001904  4E4F                    1207          TRAP    #15
00001906                          1208          
00001906  6000 003A               1209          BRA     BCC_END
0000190A                          1210  BCC_WORD_OFFSET
0000190A                          1211  
0000190A  3C1A                    1212          MOVE.W  (A2)+,D6
0000190C                          1213  
0000190C  E18E                    1214          LSL.L   #8,D6
0000190E  E18E                    1215          LSL.L   #8,D6
00001910                          1216          
00001910  2C46                    1217          MOVE.L  D6,A6
00001912  7604                    1218          MOVE.L  #4,D3
00001914                          1219          
00001914  6100 0C74               1220          BSR     PRINT_ASCII_HEX_CHAR
00001918                          1221          
00001918  43F9 00002833           1222          LEA     NEWLINE,A1
0000191E  103C 000E               1223          MOVE.B  #14,D0
00001922  4E4F                    1224          TRAP    #15
00001924                          1225          
00001924  6000 001C               1226          BRA     BCC_END
00001928                          1227  BCC_LONG_OFFSET
00001928                          1228  
00001928  2C1A                    1229          MOVE.L  (A2)+,D6
0000192A                          1230  
0000192A  2C46                    1231          MOVE.L  D6,A6
0000192C  7608                    1232          MOVE.L  #8,D3
0000192E                          1233          
0000192E  6100 0C5A               1234          BSR     PRINT_ASCII_HEX_CHAR
00001932                          1235          
00001932  43F9 00002833           1236          LEA     NEWLINE,A1
00001938  103C 000E               1237          MOVE.B  #14,D0
0000193C  4E4F                    1238          TRAP    #15
0000193E                          1239          
0000193E  6000 0002               1240          BRA     BCC_END
00001942                          1241  BCC_END * reload the memory, call RTS
00001942  4CDF 43FF               1242          MOVEM.L (A7)+,D0-D7/A0-A1/A6 * Pop off the stack to return our registers
00001946  4E75                    1243          RTS
00001948                          1244  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001948                          1245  *-----------------------------------------------------------------------------
00001948                          1246  
00001948                          1247  
00001948                          1248  
00001948                          1249  *-----------------------------------------------------------------------------
00001948                          1250  *-----------------------------------------------------------------------------
00001948                          1251  * NAME: OP_0111   ()
00001948                          1252  * DESCRIPTION:    OP code 0111 is not supported. 
00001948                          1253  * PRE-CONDITION:  
00001948                          1254  * POST-CONDITION: 
00001948                          1255  * REGISTERS:
00001948                          1256  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001948                          1257  OP0111
00001948  6100 0C16               1258      BSR     UNKNOWNOP
0000194C  4E75                    1259      RTS
0000194E                          1260  
0000194E                          1261  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000194E                          1262  *-----------------------------------------------------------------------------
0000194E                          1263  
0000194E                          1264  
0000194E                          1265  
0000194E                          1266  *-----------------------------------------------------------------------------
0000194E                          1267  *-----------------------------------------------------------------------------
0000194E                          1268  * NAME: OP_1000   (DIVS, OR)
0000194E                          1269  * DESCRIPTION:    Determines the instruction by using bit-level logic.
0000194E                          1270  * PRE-CONDITION:  xyz
0000194E                          1271  * POST-CONDITION: All registers return to their previous state, and the output
0000194E                          1272  *                 goes to the output console for reading the raw data or the
0000194E                          1273  *                 actual instruction.
0000194E                          1274  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
0000194E                          1275  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000194E                          1276  OP1000
0000194E  48A7 FFC0               1277          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
00001952                          1278  
00001952                          1279          * Check if the EA Mode is 001 since both DIVS and OR do not support it
00001952  3C3C 0003               1280          MOVE.W  #3, D6              * Prep lower value for bitmask
00001956  3E3C 0005               1281          MOVE.W  #5, D7              * Prep upper value for bitmask
0000195A  6100 0E6E               1282          BSR     BITMASK             * Finalize bitmask setup
0000195E  CC42                    1283          AND     D2,D6               * Apply bitmask
00001960                          1284          
00001960  0C46 0008               1285          CMPI    #%0000000000001000, D6  * Is the mode 001, an unsupported mode?
00001964  6700 0BFA               1286          BEQ     UNKNOWNOP                 * If so, the op is not supported
00001968                          1287          
00001968                          1288          * Checking for DIVS
00001968  3C3C 0006               1289          MOVE.W  #6, D6              * Prep lower value for bitmask
0000196C  3E3C 0008               1290          MOVE.W  #8, D7              * Prep upper value for bitmask
00001970  6100 0E58               1291          BSR     BITMASK             * Finalize bitmask setup
00001974  CC42                    1292          AND     D2,D6               * Apply bitmask
00001976                          1293          
00001976  0C46 01C0               1294          CMPI    #%0000000111000000, D6  * Are we DIVS?
0000197A  6600 0050               1295          BNE     NOTDIVS                 * If not, branch to see if it's OR
0000197E                          1296          
0000197E  43F9 00002836           1297          LEA     DIVSOP,A1           * We found DIVS
00001984  103C 000E               1298          MOVE.B  #14,D0              * Trap #14 prints out the data
00001988  4E4F                    1299          TRAP    #15                 * Perform Trap #14
0000198A                          1300          
0000198A  43F9 000028EA           1301          LEA     SPACE,A1            * formatting
00001990  103C 000E               1302          MOVE.B  #14,D0              * Trap #14 prints out space
00001994  4E4F                    1303          TRAP    #15                 * Perform Trap #14
00001996                          1304          
00001996  4243                    1305          CLR     D3                  * clear D3, it is a parameter of ea05 to indicate size
00001998  08C3 0000               1306          BSET    #0,D3               * in this case it is always word, so set the first bit of D3
0000199C                          1307                                      * to indicate a potential immediate of size word
0000199C                          1308          
0000199C  6100 05E0               1309          BSR     EAHELPER05          * Print out data
000019A0                          1310  
000019A0  43F9 000028F0           1311          LEA     COMMA,A1            * formatting
000019A6  103C 000E               1312          MOVE.B  #14,D0              * Trap #14 prints out a comma
000019AA  4E4F                    1313          TRAP    #15                 * Perform Trap #14
000019AC                          1314          
000019AC                          1315          * bit manipulation is needed to make DIVS work
000019AC                          1316          * with the generic EAHELPER611
000019AC  0882 0006               1317          BCLR    #6,D2               * This signifies that
000019B0  0882 0007               1318          BCLR    #7,D2               * we are dealing with
000019B4  0882 0008               1319          BCLR    #8,D2               * a data register
000019B8                          1320       
000019B8  6100 0582               1321          BSR     EAHELPER611 
000019BC                          1322  
000019BC  43F9 00002833           1323          LEA     NEWLINE,A1          * We found DIVS
000019C2  103C 000E               1324          MOVE.B  #14,D0              * Trap #14 prints out the data
000019C6  4E4F                    1325          TRAP    #15                 * Perform Trap #14
000019C8                          1326          
000019C8  6000 0056               1327          BRA     OP1000END           * Move onto next iteration
000019CC                          1328          
000019CC                          1329  NOTDIVS 
000019CC                          1330          * Checking for invalid OPMODEs 011 and 111
000019CC  0C46 00C0               1331          CMPI    #%0000000011000000, D6      * Is the OPMODE 011, unsupported by OR?
000019D0  6700 004A               1332          BEQ     UNKNOWN1000                 * If so, the OP is unknown
000019D4  0C46 01C0               1333          CMPI    #%0000000111000000, D6      * Is the OPMODE 111, unsupported by OR?
000019D8  6700 0042               1334          BEQ     UNKNOWN1000                 * If so, the OP is unknown
000019DC                          1335  
000019DC                          1336          * It is confirmed OR at this point
000019DC  43F9 00002878           1337          LEA     OROP,A1         * We found OR
000019E2  103C 000E               1338          MOVE.B  #14,D0          * Trap #14 prints out the data
000019E6  4E4F                    1339          TRAP    #15             * Perform Trap #14
000019E8                          1340  
000019E8  6100 091E               1341          BSR     SIZE68          * print out the size
000019EC                          1342          
000019EC  6100 0590               1343          BSR     EAHELPER05      * print out the EA
000019F0                          1344          
000019F0  43F9 000028F0           1345          LEA     COMMA,A1        * formatting
000019F6  103C 000E               1346          MOVE.B  #14,D0          * Trap #14 prints out comma
000019FA  4E4F                    1347          TRAP    #15             * Perform Trap #1
000019FC                          1348          
000019FC                          1349          * bit manipulation is needed to make EAHELPER611 work
000019FC  0882 0006               1350          BCLR    #6,D2           
00001A00  0882 0007               1351          BCLR    #7,D2
00001A04  0882 0008               1352          BCLR    #8,D2
00001A08                          1353               
00001A08  6100 0532               1354          BSR     EAHELPER611      * Print out register  
00001A0C                          1355          
00001A0C  43F9 00002833           1356          LEA     NEWLINE,A1       * formatting
00001A12  103C 000E               1357          MOVE.B  #14,D0           * Trap #14 prints out comma
00001A16  4E4F                    1358          TRAP    #15              * Perform Trap #1
00001A18                          1359          
00001A18  6000 00C0               1360          BRA     DONE1001         * pop values back
00001A1C                          1361          
00001A1C                          1362  UNKNOWN1000
00001A1C  6100 0B42               1363          BSR     UNKNOWNOP       * Op is unknown
00001A20                          1364  
00001A20                          1365  OP1000END
00001A20  4C9F 03FF               1366          MOVEM   (A7)+,D0-D7/A0-A1   * pop values back
00001A24  4E75                    1367          RTS                         * return to main
00001A26                          1368  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001A26                          1369  *-----------------------------------------------------------------------------
00001A26                          1370  
00001A26                          1371  
00001A26                          1372  
00001A26                          1373  *-----------------------------------------------------------------------------
00001A26                          1374  *-----------------------------------------------------------------------------
00001A26                          1375  * NAME: OP_1001   (SUB)
00001A26                          1376  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001A26                          1377  * PRE-CONDITION:  xyz
00001A26                          1378  * POST-COND        BSR     SIZE68      * pr    int out the sizesizeate, and the output
00001A26                          1379  *                 goes to the output console for reading the raw data or the
00001A26                          1380  *                 actual instruction.
00001A26                          1381  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001A26                          1382  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001A26                          1383  OP1001
00001A26  48A7 FFC0               1384          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
00001A2A                          1385          
00001A2A  3C3C 0006               1386          MOVE.W  #6, D6              * Prep lower value for bitmask
00001A2E  3E3C 0008               1387          MOVE.W  #8, D7              * Prep upper value for bitmask
00001A32  6100 0D96               1388          BSR     BITMASK             * Finalize bitmask setup
00001A36  CC42                    1389          AND     D2,D6               * Apply bitmask
00001A38                          1390          
00001A38                          1391          * Check to see if opmode is unsupported for both EOR and CMP
00001A38  0C46 00C0               1392          CMPI    #%0000000011000000, D6      * Is the OPMODE 011, unsupported by SUB?
00001A3C  6700 0098               1393          BEQ     UNKNOWN1001                 * If so, the OP is unknown
00001A40  0C46 01C0               1394          CMPI    #%0000000111000000, D6      * Is the OPMODE 111, unsupported by SUB?
00001A44  6700 0090               1395          BEQ     UNKNOWN1001                 * If so, the OP is unknown
00001A48                          1396            
00001A48                          1397          * Check to see if the opmode is EA v Dn -> Dn
00001A48  0C46 0000               1398          CMPI    #%0000000000000000, D6      * Is the OPMODE 000, a BYTE for EA v DN?
00001A4C  6700 0070               1399          BEQ     SUB_EA_DN                   * If so, branch to SUB_EA_DN
00001A50  0C46 0040               1400          CMPI    #%0000000001000000, D6      * Is the OPMODE 001, a WORD for EA v DN?
00001A54  6700 0068               1401          BEQ     SUB_EA_DN                   * If so, branch to SUB_EA_DN
00001A58  0C46 0080               1402          CMPI    #%0000000010000000, D6      * Is the OPMODE 010, a LONG for EA v DN?
00001A5C  6700 0060               1403          BEQ     SUB_EA_DN                   * If so, branch to SUB_EA_DN
00001A60                          1404          
00001A60                          1405          * Need to see if the size is a BYTE and the mode is An direct
00001A60                          1406          * Since this is not supported
00001A60  3C3C 0003               1407          MOVE.W  #3, D6              * Prep lower value for bitmask
00001A64  3E3C 0008               1408          MOVE.W  #8, D7              * Prep upper value for bitmask
00001A68  6100 0D60               1409          BSR     BITMASK             * Finalize bitmask setup
00001A6C  CC42                    1410          AND     D2,D6               * Apply bitmask
00001A6E                          1411          
00001A6E  0C46 0108               1412          CMPI    #%0000000100001000, D6      * Is the mode 001 and is a byte?
00001A72  6700 0062               1413          BEQ     UNKNOWN1001                 * If so, unsupported op
00001A76                          1414          
00001A76                          1415          * Verified to be SUB_DN_EA here
00001A76  0C46 0000               1416          CMPI    #%0000000000000000, D6      * Is the  000, a BYTE for EA v DN?
00001A7A  6700 0042               1417          BEQ     SUB_EA_DN                   * If so, branch to SUB_EA_DN
00001A7E                          1418  
00001A7E                          1419  PRINT1001   
00001A7E  43F9 0000289C           1420          LEA     SUBOP,A1    * We found SUB
00001A84  103C 000E               1421          MOVE.B  #14,D0      * Trap #14 prints out a comma
00001A88  4E4F                    1422          TRAP    #15         * Perform Trap #14
00001A8A                          1423          
00001A8A  6100 087C               1424          BSR     SIZE68      * print out the size
00001A8E                          1425          
00001A8E  6100 04EE               1426          BSR     EAHELPER05
00001A92                          1427          
00001A92                          1428          * bit manipulation is needed to make EAHELPER611 work
00001A92  0882 0006               1429          BCLR    #6,D2
00001A96  0882 0007               1430          BCLR    #7,D2
00001A9A  0882 0008               1431          BCLR    #8,D2
00001A9E                          1432               
00001A9E  43F9 000028F0           1433          LEA     COMMA,A1            * formatting
00001AA4  103C 000E               1434          MOVE.B  #14,D0              * Trap #14 prints out comma
00001AA8  4E4F                    1435          TRAP    #15                 * Perform Trap #1
00001AAA                          1436          
00001AAA  6100 0490               1437          BSR     EAHELPER611 
00001AAE                          1438          
00001AAE  43F9 00002833           1439          LEA     NEWLINE,A1          * formatting
00001AB4  103C 000E               1440          MOVE.B  #14,D0              * Trap #14 prints out comma
00001AB8  4E4F                    1441          TRAP    #15                 * Perform Trap #1
00001ABA                          1442          
00001ABA  6000 001E               1443          BRA     DONE1001
00001ABE                          1444          
00001ABE                          1445  SUB_EA_DN
00001ABE                          1446          * SUBA is not supported and must be checked
00001ABE  3C3C 0003               1447          MOVE.W  #3, D6              * Prep lower value for bitmask
00001AC2  3E3C 0005               1448          MOVE.W  #5, D7              * Prep upper value for bitmask
00001AC6  6100 0D02               1449          BSR     BITMASK             * Finalize bitmask setup
00001ACA  CC42                    1450          AND     D2,D6               * Apply bitmask
00001ACC                          1451          
00001ACC  0C46 0008               1452          CMPI    #%0000000000001000, D6      * Is the mode 001, an unsupported mode for SUB?
00001AD0  6700 0004               1453          BEQ     UNKNOWN1001                 * If so, branch to UNKNOWN100
00001AD4                          1454          
00001AD4  60A8                    1455          BRA     PRINT1001           * Verified to be valid at this point
00001AD6                          1456          
00001AD6                          1457  UNKNOWN1001
00001AD6  6100 0A88               1458          BSR     UNKNOWNOP           * Unknown op
00001ADA                          1459          
00001ADA                          1460  DONE1001
00001ADA  4C9F 03FF               1461          MOVEM   (A7)+,D0-D7/A0-A1   * Return vales
00001ADE  4E75                    1462          RTS                         * Return to main
00001AE0                          1463  
00001AE0                          1464  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001AE0                          1465  *-----------------------------------------------------------------------------
00001AE0                          1466  
00001AE0                          1467  
00001AE0                          1468  
00001AE0                          1469  *-----------------------------------------------------------------------------
00001AE0                          1470  *-----------------------------------------------------------------------------
00001AE0                          1471  * NAME: OP_1010   ()
00001AE0                          1472  * DESCRIPTION:    a
00001AE0                          1473  * PRE-CONDITION:  b
00001AE0                          1474  * POST-CONDITION: c
00001AE0                          1475  * REGISTERS:      d
00001AE0                          1476  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001AE0                          1477  OP1010
00001AE0                          1478  
00001AE0  6100 0A7E               1479      BSR     UNKNOWNOP
00001AE4  4E75                    1480      RTS
00001AE6                          1481  
00001AE6                          1482  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001AE6                          1483  *-----------------------------------------------------------------------------
00001AE6                          1484  
00001AE6                          1485  
00001AE6                          1486  
00001AE6                          1487  *-----------------------------------------------------------------------------
00001AE6                          1488  *-----------------------------------------------------------------------------
00001AE6                          1489  * NAME: OP_1011   (EOR, CMP)
00001AE6                          1490  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001AE6                          1491  * PRE-CONDITION:  xyz
00001AE6                          1492  * POST-CONDITION: All registers return to their previous state, and the output
00001AE6                          1493  *                 goes to the output console for reading the raw data or the
00001AE6                          1494  *                 actual instruction.
00001AE6                          1495  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001AE6                          1496  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001AE6                          1497  OP1011
00001AE6                          1498  
00001AE6  48A7 FFC0               1499          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
00001AEA                          1500  
00001AEA  3C3C 0006               1501          MOVE.W  #6, D6              * Prep lower value for bitmask
00001AEE  3E3C 0008               1502          MOVE.W  #8, D7              * Prep upper value for bitmask
00001AF2  6100 0CD6               1503          BSR     BITMASK             * Finalize bitmask setup
00001AF6  CC42                    1504          AND     D2,D6               * Apply bitmask
00001AF8                          1505          
00001AF8                          1506          * Check to see if opmode is unsupported for both EOR and CMP
00001AF8  0C46 00C0               1507          CMPI    #%0000000011000000, D6      * Is the OPMODE 011, unsupported by EOR/CMP?
00001AFC  6700 0088               1508          BEQ     UNKNOWN1011                 * If so, the OP is unknown
00001B00  0C46 01C0               1509          CMPI    #%0000000111000000, D6      * Is the OPMODE 111, unsupported by EOR/CMP?
00001B04  6700 0080               1510          BEQ     UNKNOWN1011                 * If so, the OP is unknown
00001B08                          1511          
00001B08                          1512          * Check to see if it is CMP
00001B08  0C46 0000               1513          CMPI    #%0000000000000000, D6      * Is the OPMODE 000, a BYTE for CMP?
00001B0C  6700 0038               1514          BEQ     NOTEOR                      * If so, the OP is CMP
00001B10  0C46 0040               1515          CMPI    #%0000000001000000, D6      * Is the OPMODE 000, a WORD for CMP?
00001B14  6700 0030               1516          BEQ     NOTEOR                      * If so, the OP is CMP
00001B18  0C46 0080               1517          CMPI    #%0000000010000000, D6      * Is the OPMODE 000, a LONG for CMP?
00001B1C  6700 0028               1518          BEQ     NOTEOR                      * If so, the OP is CMP
00001B20                          1519  
00001B20                          1520          * Check to see EA mode is 001, unsupported by EOR
00001B20  3C3C 0003               1521          MOVE.W  #3, D6              * Prep lower value for bitmask
00001B24  3E3C 0005               1522          MOVE.W  #5, D7              * Prep upper value for bitmask
00001B28  6100 0CA0               1523          BSR     BITMASK             * Finalize bitmask setup
00001B2C  CC42                    1524          AND     D2,D6               * Apply bitmask
00001B2E                          1525          
00001B2E  0C46 0040               1526          CMPI    #%0000000001000000, D6      * Is the mode 001, unsupported for EOR?
00001B32  6700 0052               1527          BEQ     UNKNOWN1011                 * If so, the op is unknown
00001B36                          1528          
00001B36                          1529          * Verified to be EOR at this point
00001B36  43F9 0000283F           1530          LEA     EOROP,A1            * We found EOR
00001B3C  103C 000E               1531          MOVE.B  #14,D0              * Trap #14 prints out the data
00001B40  4E4F                    1532          TRAP    #15                 * Perform Trap #14
00001B42                          1533          
00001B42  6000 000E               1534          BRA     DISPLAY1011         * Branch to the end of 1011       
00001B46                          1535  
00001B46                          1536  NOTEOR
00001B46  43F9 0000283B           1537          LEA     CMPOP,A1            * We found CMP
00001B4C  103C 000E               1538          MOVE.B  #14,D0              * Trap #14 prints out the data
00001B50  4E4F                    1539          TRAP    #15                 * Perform Trap #14
00001B52                          1540          
00001B52                          1541  DISPLAY1011
00001B52  6100 07B4               1542          BSR     SIZE68
00001B56                          1543          
00001B56  6100 0426               1544          BSR     EAHELPER05
00001B5A                          1545          
00001B5A  43F9 000028F0           1546          LEA     COMMA,A1            * Formatting
00001B60  103C 000E               1547          MOVE.B  #14,D0              * Trap #14 prints out the data
00001B64  4E4F                    1548          TRAP    #15                 * Perform Trap #14
00001B66                          1549          
00001B66  0882 0006               1550          BCLR    #6,D2               * Bit manipulation is 
00001B6A  0882 0007               1551          BCLR    #7,D2               * necessary in order to make
00001B6E  0882 0008               1552          BCLR    #8,D2               * EAHELPER611 work generically
00001B72                          1553          
00001B72  6100 03C8               1554          BSR     EAHELPER611         * Print out EA
00001B76                          1555          
00001B76  43F9 00002833           1556          LEA     NEWLINE,A1          * Formatting
00001B7C  103C 000E               1557          MOVE.B  #14,D0              * Trap #14 prints out the data
00001B80  4E4F                    1558          TRAP    #15                 * Perform Trap #14
00001B82                          1559          
00001B82  6000 0006               1560          BRA     DONE1011            * Branch to end 1011 and move to next op
00001B86                          1561          
00001B86                          1562  UNKNOWN1011
00001B86  6100 09D8               1563          BSR     UNKNOWNOP           * Unknown op
00001B8A                          1564                   
00001B8A                          1565  DONE1011
00001B8A  4C9F 03FF               1566          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
00001B8E  4E75                    1567          RTS                         * Return to main
00001B90                          1568  
00001B90                          1569  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001B90                          1570  *-----------------------------------------------------------------------------
00001B90                          1571  
00001B90                          1572  
00001B90                          1573  
00001B90                          1574  *-----------------------------------------------------------------------------
00001B90                          1575  *-----------------------------------------------------------------------------
00001B90                          1576  * NAME: OP_1100   (MULS)
00001B90                          1577  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001B90                          1578  * PRE-CONDITION:  xyz
00001B90                          1579  * POST-CONDITION: All registers return to their previous state, and the output
00001B90                          1580  *                 goes to the output console for reading the raw data or the
00001B90                          1581  *                 actual instruction.
00001B90                          1582  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001B90                          1583  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001B90                          1584  OP1100
00001B90  48A7 FFC0               1585          MOVEM   D0-D7/A0-A1,-(A7)   * Saving values to the stack
00001B94                          1586  
00001B94                          1587          * Check if the EA Mode is 001 since MULS does not support it
00001B94  3C3C 0003               1588          MOVE.W  #3, D6              * Prep lower value for bitmask
00001B98  3E3C 0005               1589          MOVE.W  #5, D7              * Prep upper value for bitmask
00001B9C  6100 0C2C               1590          BSR     BITMASK             * Finalize bitmask setup
00001BA0  CC42                    1591          AND     D2,D6               * Apply bitmask
00001BA2                          1592          
00001BA2  0C46 0008               1593          CMPI    #%0000000000001000, D6    * Is the mode 001, an unsupported mode?
00001BA6  6700 0068               1594          BEQ     UNKNOWN1100               * If so, the op is not supported
00001BAA                          1595          
00001BAA  3C3C 0006               1596          MOVE.W  #6, D6              * Prep lower value for bitmask
00001BAE  3E3C 0008               1597          MOVE.W  #8, D7              * Prep upper value for bitmask
00001BB2  6100 0C16               1598          BSR     BITMASK             * Finalize bitmask setup
00001BB6  CC42                    1599          AND     D2,D6               * Apply bitmask
00001BB8                          1600          
00001BB8  0C46 01C0               1601          CMPI    #%0000000111000000, D6  * Are we MULS?
00001BBC  6600 0052               1602          BNE     UNKNOWN1100             * If not, it is an unknown op
00001BC0                          1603          
00001BC0  43F9 00002873           1604          LEA     MULSOP,A1           * We found MULS
00001BC6  103C 000E               1605          MOVE.B  #14,D0              * Trap #14 prints out the data
00001BCA  4E4F                    1606          TRAP    #15                 * Perform Trap #14
00001BCC                          1607          
00001BCC  43F9 000028EA           1608          LEA     SPACE,A1            * formatting
00001BD2  103C 000E               1609          MOVE.B  #14,D0              * Trap #14 prints out space
00001BD6  4E4F                    1610          TRAP    #15                 * Perform Trap #14
00001BD8                          1611          
00001BD8  4243                    1612          CLR     D3                  * clear D3, it is a parameter
00001BDA  08C3 0000               1613          BSET    #0,D3               * of EAHELPER05 to indicate size
00001BDE                          1614          
00001BDE  6100 039E               1615          BSR     EAHELPER05          * Print out data
00001BE2                          1616  
00001BE2  43F9 000028F0           1617          LEA     COMMA,A1            * formatting
00001BE8  103C 000E               1618          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001BEC  4E4F                    1619          TRAP    #15                 * Perform Trap #14
00001BEE                          1620          
00001BEE  0882 0006               1621          BCLR    #6,D2               * Bit manipulation is 
00001BF2  0882 0007               1622          BCLR    #7,D2               * necessary in order to make
00001BF6  0882 0008               1623          BCLR    #8,D2               * EAHELPER611 work generically
00001BFA                          1624          
00001BFA  6100 0340               1625          BSR     EAHELPER611         * Print out EA
00001BFE                          1626  
00001BFE  43F9 00002833           1627          LEA     NEWLINE,A1          * Formatting
00001C04  103C 000E               1628          MOVE.B  #14,D0              * Trap #14 prints out the data
00001C08  4E4F                    1629          TRAP    #15                 * Perform Trap #14
00001C0A                          1630          
00001C0A  4C9F 03FF               1631          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
00001C0E  4E75                    1632          RTS                         * Return to main
00001C10                          1633          
00001C10                          1634  UNKNOWN1100
00001C10  6100 094E               1635          BSR     UNKNOWNOP
00001C14                          1636       
00001C14  4C9F 03FF               1637          MOVEM   (A7)+,D0-D7/A0-A1   * Done identifying op
00001C18  4E75                    1638          RTS                         * Return to main
00001C1A                          1639          
00001C1A                          1640  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001C1A                          1641  *-----------------------------------------------------------------------------
00001C1A                          1642  
00001C1A                          1643  
00001C1A                          1644  
00001C1A                          1645  
00001C1A                          1646  
00001C1A                          1647  
00001C1A                          1648  *-----------------------------------------------------------------------------
00001C1A                          1649  *-----------------------------------------------------------------------------
00001C1A                          1650  * NAME: OP_1101   (ADD, ADDA)
00001C1A                          1651  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001C1A                          1652  * PRE-CONDITION:  xyz
00001C1A                          1653  * POST-CONDITION: All registers return to their previous state, and the output
00001C1A                          1654  *                 goes to the output console for reading the raw data or the
00001C1A                          1655  *                 actual instruction.
00001C1A                          1656  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001C1A                          1657  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001C1A                          1658  OP1101
00001C1A  48E7 FFFE               1659          MOVEM.L A0-A6/D0-D7,-(A7)
00001C1E                          1660          
00001C1E  3C3C 0006               1661          MOVE.W  #6, D6              * Prep lower value for bitmask
00001C22  3E3C 0008               1662          MOVE.W  #8, D7              * Prep upper value for bitmask
00001C26  6100 0BA2               1663          BSR     BITMASK             * Finalize bitmask setup
00001C2A  CC42                    1664          AND     D2,D6               * Apply bitmask
00001C2C  EC4E                    1665          LSR     #6,D6
00001C2E                          1666  
00001C2E  0C06 0000               1667          CMPI.B  #%0000000000000000,D6
00001C32  6700 003E               1668          BEQ     BYTE_EA_DN
00001C36                          1669  
00001C36  0C06 0001               1670          CMPI.B  #%0000000000000001,D6
00001C3A  6700 004E               1671          BEQ     WORD_EA_DN
00001C3E                          1672  
00001C3E  0C06 0002               1673          CMPI.B  #%0000000000000010,D6
00001C42  6700 005E               1674          BEQ     LONG_EA_DN
00001C46                          1675  
00001C46  0C06 0003               1676          CMPI.B  #%0000000000000011,D6
00001C4A  6700 006E               1677          BEQ     ADDA_WORD_OP
00001C4E                          1678  
00001C4E  0C06 0004               1679          CMPI.B  #%0000000000000100,D6
00001C52  6700 0086               1680          BEQ     BYTE_DN_EA
00001C56                          1681  
00001C56  0C06 0005               1682          CMPI.B  #%0000000000000101,D6
00001C5A  6700 0096               1683          BEQ     WORD_DN_EA
00001C5E                          1684  
00001C5E  0C06 0006               1685          CMPI.B  #%0000000000000110,D6
00001C62  6700 00A6               1686          BEQ     LONG_DN_EA
00001C66                          1687  
00001C66  0C06 0007               1688          CMPI.B  #%0000000000000111,D6
00001C6A  6700 00B6               1689          BEQ     ADDA_LONG_OP
00001C6E                          1690  
00001C6E  6000 011E               1691          BRA     ADD_ADDA_END
00001C72                          1692          
00001C72                          1693  BYTE_EA_DN
00001C72  6100 00CE               1694          BSR     ADD_EA_DN_GENERIC       * print out 'ADD' base op name for ADDA too
00001C76                          1695  
00001C76  43F9 000028FE           1696          LEA     __B,A1                  * print out size
00001C7C  103C 000E               1697          MOVE.B  #14,D0
00001C80  4E4F                    1698          TRAP    #15
00001C82                          1699  
00001C82  6100 00CC               1700          BSR     ADD_ADDA_SPACE          * print out space
00001C86  6000 00EE               1701          BRA     ADD_ADDA_PRINT
00001C8A                          1702  
00001C8A                          1703  WORD_EA_DN
00001C8A  6100 00B6               1704          BSR     ADD_EA_DN_GENERIC
00001C8E                          1705  
00001C8E  43F9 00002902           1706          LEA     __W,A1
00001C94  103C 000E               1707          MOVE.B  #14,D0
00001C98  4E4F                    1708          TRAP    #15
00001C9A                          1709          
00001C9A  6100 00B4               1710          BSR     ADD_ADDA_SPACE
00001C9E  6000 00D6               1711          BRA     ADD_ADDA_PRINT
00001CA2                          1712          
00001CA2                          1713  LONG_EA_DN
00001CA2  6100 009E               1714          BSR     ADD_EA_DN_GENERIC
00001CA6                          1715  
00001CA6  43F9 00002906           1716          LEA     __L,A1
00001CAC  103C 000E               1717          MOVE.B  #14,D0
00001CB0  4E4F                    1718          TRAP    #15
00001CB2                          1719  
00001CB2  6100 009C               1720          BSR     ADD_ADDA_SPACE
00001CB6  6000 00BE               1721          BRA     ADD_ADDA_PRINT
00001CBA                          1722          
00001CBA                          1723  ADDA_WORD_OP
00001CBA  6100 0086               1724          BSR     ADD_EA_DN_GENERIC
00001CBE                          1725  
00001CBE  43F9 000028DE           1726          LEA     ASCII_A,A1
00001CC4  103C 000E               1727          MOVE.B  #14,D0
00001CC8  4E4F                    1728          TRAP    #15
00001CCA                          1729  
00001CCA  43F9 00002902           1730          LEA     __W,A1
00001CD0  103C 000E               1731          MOVE.B  #14,D0
00001CD4  4E4F                    1732          TRAP    #15
00001CD6                          1733          
00001CD6  6000 0086               1734          BRA     ADDA_PRT
00001CDA                          1735          
00001CDA                          1736  BYTE_DN_EA
00001CDA  6100 0066               1737          BSR     ADD_EA_DN_GENERIC
00001CDE                          1738          
00001CDE  43F9 000028FE           1739          LEA     __B,A1
00001CE4  103C 000E               1740          MOVE.B  #14,D0
00001CE8  4E4F                    1741          TRAP    #15
00001CEA                          1742          
00001CEA  6100 0064               1743          BSR     ADD_ADDA_SPACE
00001CEE  6000 0086               1744          BRA     ADD_ADDA_PRINT
00001CF2                          1745  
00001CF2                          1746  WORD_DN_EA
00001CF2  6100 004E               1747          BSR     ADD_EA_DN_GENERIC
00001CF6                          1748  
00001CF6  43F9 00002902           1749          LEA     __W,A1
00001CFC  103C 000E               1750          MOVE.B  #14,D0
00001D00  4E4F                    1751          TRAP    #15 
00001D02                          1752  
00001D02  6100 004C               1753          BSR     ADD_ADDA_SPACE
00001D06  6000 006E               1754          BRA     ADD_ADDA_PRINT
00001D0A                          1755  
00001D0A                          1756  LONG_DN_EA
00001D0A  6100 0036               1757          BSR     ADD_EA_DN_GENERIC
00001D0E                          1758          
00001D0E  43F9 00002906           1759          LEA     __L,A1
00001D14  103C 000E               1760          MOVE.B  #14,D0
00001D18  4E4F                    1761          TRAP    #15     
00001D1A                          1762          
00001D1A  6100 0034               1763          BSR     ADD_ADDA_SPACE
00001D1E  6000 0056               1764          BRA     ADD_ADDA_PRINT
00001D22                          1765  
00001D22                          1766  ADDA_LONG_OP
00001D22  6100 001E               1767          BSR     ADD_EA_DN_GENERIC
00001D26                          1768          
00001D26  43F9 000028DE           1769          LEA     ASCII_A,A1
00001D2C  103C 000E               1770          MOVE.B  #14,D0
00001D30  4E4F                    1771          TRAP    #15
00001D32                          1772          
00001D32  43F9 00002906           1773          LEA     __L,A1
00001D38  103C 000E               1774          MOVE.B  #14,D0
00001D3C  4E4F                    1775          TRAP    #15
00001D3E                          1776          
00001D3E  6000 001E               1777          BRA     ADDA_PRT
00001D42                          1778          
00001D42                          1779  ADD_EA_DN_GENERIC
00001D42  43F9 000028C6           1780          LEA     OP_ADD_MSG,A1           * print out 'ADD'
00001D48  103C 000E               1781          MOVE.B  #14,D0
00001D4C  4E4F                    1782          TRAP    #15
00001D4E  4E75                    1783          RTS
00001D50                          1784          
00001D50                          1785  ADD_ADDA_SPACE
00001D50  43F9 000028EA           1786          LEA     SPACE,A1
00001D56  103C 000E               1787          MOVE.B  #14,D0
00001D5A  4E4F                    1788          TRAP    #15
00001D5C  4E75                    1789          RTS
00001D5E                          1790  
00001D5E                          1791  ADDA_PRT
00001D5E  6100 0364               1792          BSR     MODE_DN
00001D62  43F9 000028F0           1793          LEA     COMMA,A1
00001D68  103C 000E               1794          MOVE.B  #14,D0
00001D6C  4E4F                    1795          TRAP    #15
00001D6E  6100 0454               1796          BSR     MODE_AN
00001D72  6000 001A               1797          BRA     ADD_ADDA_END
00001D76                          1798  
00001D76                          1799  ADD_ADDA_PRINT
00001D76                          1800  
00001D76  6100 0206               1801          BSR     EAHELPER05          * Print out data. TODO: DOESN'T WORK.
00001D7A                          1802  
00001D7A  43F9 000028F0           1803          LEA     COMMA,A1            * formatting
00001D80  103C 000E               1804          MOVE.B  #14,D0              * Trap #14 prints out a comma
00001D84  4E4F                    1805          TRAP    #15                 * Perform Trap #14
00001D86                          1806          
00001D86  6100 01B4               1807          BSR     EAHELPER611
00001D8A  6000 0002               1808          BRA     ADD_ADDA_END
00001D8E                          1809          
00001D8E                          1810  ADD_ADDA_END
00001D8E  43F9 00002833           1811          LEA     NEWLINE,A1
00001D94  103C 000E               1812          MOVE.B  #14,D0
00001D98  4E4F                    1813          TRAP    #15
00001D9A                          1814          
00001D9A  4CDF 7FFF               1815          MOVEM.L (A7)+,A0-A6/D0-D7
00001D9E  4E75                    1816          RTS
00001DA0                          1817  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001DA0                          1818  *-----------------------------------------------------------------------------
00001DA0                          1819  
00001DA0                          1820  
00001DA0                          1821  
00001DA0                          1822  *-----------------------------------------------------------------------------
00001DA0                          1823  *-----------------------------------------------------------------------------
00001DA0                          1824  * NAME: OP_1110   (LSL, LSR, ASL, ASR, ROL, ROR)
00001DA0                          1825  * DESCRIPTION:    Determines the instruction by using bit-level logic.
00001DA0                          1826  * PRE-CONDITION:  xyz
00001DA0                          1827  * POST-CONDITION: All registers return to their previous state, and the output
00001DA0                          1828  *                 goes to the output console for reading the raw data or the
00001DA0                          1829  *                 actual instruction.
00001DA0                          1830  * REGISTERS:      D0, D1 (output), D2 (op-code), D6 (bitmask)
00001DA0                          1831  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001DA0                          1832  OP1110
00001DA0                          1833  
00001DA0  48A7 FFC0               1834      MOVEM   D0-D7/A0-A1,-(A7)   * Caller saved
00001DA4                          1835  
00001DA4  7C03                    1836      MOVE.L  #3,D6
00001DA6  7E04                    1837      MOVE.L  #4,D7
00001DA8                          1838      
00001DA8  6100 0A20               1839      BSR     BITMASK * generate a bitmask for the 3 and 4 bits
00001DAC                          1840      
00001DAC  CC82                    1841      AND.L   D2,D6
00001DAE                          1842      
00001DAE  0C46 0008               1843      CMPI    #%0000000000001000,D6 *is it a logical shift
00001DB2  6700 001A               1844      BEQ     LS
00001DB6                          1845      
00001DB6  0C46 0000               1846      CMPI    #%0000000000000000,D6 *is it an arithmatic shift
00001DBA  6700 0048               1847      BEQ     AS
00001DBE                          1848      
00001DBE  0C46 0018               1849      CMPI    #%0000000000011000,D6 *is it a rorate?
00001DC2  6700 0076               1850      BEQ     RO
00001DC6                          1851  
00001DC6  6100 0798               1852      BSR     UNKNOWNOP *if nothing above, we don't know what it is
00001DCA  6000 0158               1853      BRA     ENDOP1110
00001DCE                          1854      
00001DCE                          1855  LS
00001DCE  7C08                    1856      MOVE.L  #8,D6
00001DD0  7E08                    1857      MOVE.L  #8,D7
00001DD2                          1858      
00001DD2  6100 09F6               1859      BSR     BITMASK
00001DD6                          1860      
00001DD6  CC82                    1861      AND.L   D2,D6
00001DD8                          1862      
00001DD8  0C46 0000               1863      CMPI    #0,D6 * is it a left shift?
00001DDC  6700 0016               1864      BEQ     LSR
00001DE0                          1865      
00001DE0  6000 0002               1866      BRA     LSL * if not a left shift, must be right
00001DE4                          1867  
00001DE4                          1868  LSL
00001DE4                          1869  
00001DE4  43F9 00002884           1870      LEA     LSLOP,A1            * formatting
00001DEA  103C 000E               1871      MOVE.B  #14,D0              * Trap #14 prints out LSL
00001DEE  4E4F                    1872      TRAP    #15                 * Perform Trap #14
00001DF0                          1873      
00001DF0  6000 007E               1874      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001DF4                          1875                                  * prints the registers and imm data
00001DF4                          1876  LSR
00001DF4                          1877  
00001DF4  43F9 00002888           1878      LEA     LSROP,A1            * formatting
00001DFA  103C 000E               1879      MOVE.B  #14,D0              * Trap #14 prints out LSR
00001DFE  4E4F                    1880      TRAP    #15                 * Perform Trap #14
00001E00                          1881      
00001E00  6000 006E               1882      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001E04                          1883                                  * prints the registers and imm data
00001E04                          1884  
00001E04                          1885  AS
00001E04  7C08                    1886      MOVE.L  #8,D6
00001E06  7E08                    1887      MOVE.L  #8,D7
00001E08                          1888      
00001E08  6100 09C0               1889      BSR     BITMASK
00001E0C                          1890      
00001E0C  CC82                    1891      AND.L   D2,D6
00001E0E                          1892      
00001E0E  0C46 0000               1893      CMPI    #0,D6 * is it a left shift?
00001E12  6700 0016               1894      BEQ     ASR
00001E16                          1895      
00001E16  6000 0002               1896      BRA     ASL * if not a left shift, must be right
00001E1A                          1897      
00001E1A                          1898  ASL
00001E1A                          1899  
00001E1A  43F9 0000288C           1900      LEA     ASLOP,A1            * formatting
00001E20  103C 000E               1901      MOVE.B  #14,D0              * Trap #14 prints out ASL
00001E24  4E4F                    1902      TRAP    #15                 * Perform Trap #14
00001E26                          1903      
00001E26  6000 0048               1904      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001E2A                          1905                                  * prints the registers and imm data
00001E2A                          1906  ASR
00001E2A                          1907  
00001E2A  43F9 00002890           1908      LEA     ASROP,A1            * formatting
00001E30  103C 000E               1909      MOVE.B  #14,D0              * Trap #14 prints out ASR
00001E34  4E4F                    1910      TRAP    #15                 * Perform Trap #14
00001E36                          1911      
00001E36  6000 0038               1912      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001E3A                          1913                                  * prints the registers and imm data
00001E3A                          1914  RO
00001E3A  7C08                    1915      MOVE.L  #8,D6
00001E3C  7E08                    1916      MOVE.L  #8,D7
00001E3E                          1917      
00001E3E  6100 098A               1918      BSR     BITMASK
00001E42                          1919      
00001E42  CC82                    1920      AND.L   D2,D6
00001E44                          1921      
00001E44  0C46 0000               1922      CMPI    #0,D6 * is it a left shift?
00001E48  6700 0016               1923      BEQ     ROR
00001E4C                          1924      
00001E4C  6000 0002               1925      BRA     ROL * if not a left shift, must be right
00001E50                          1926  
00001E50                          1927  ROL
00001E50                          1928  
00001E50  43F9 00002894           1929      LEA     ROLOP,A1            * formatting
00001E56  103C 000E               1930      MOVE.B  #14,D0              * Trap #14 prints out ROL
00001E5A  4E4F                    1931      TRAP    #15                 * Perform Trap #14
00001E5C                          1932      
00001E5C  6000 0012               1933      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001E60                          1934                                  * prints the registers and imm data
00001E60                          1935  ROR
00001E60                          1936  
00001E60  43F9 00002898           1937      LEA     ROROP,A1            * formatting
00001E66  103C 000E               1938      MOVE.B  #14,D0              * Trap #14 prints out ROR
00001E6A  4E4F                    1939      TRAP    #15                 * Perform Trap #14
00001E6C                          1940      
00001E6C  6000 0002               1941      BRA     OP1110GENERIC       * a generic part of OP1110 that
00001E70                          1942                                  * prints the registers and imm data
00001E70                          1943  
00001E70                          1944  OP1110GENERIC
00001E70                          1945  
00001E70  6100 0452               1946      BSR     SIZE67
00001E74                          1947      
00001E74  7C05                    1948      MOVE.L  #5,D6
00001E76  7E05                    1949      MOVE.L  #5,D7
00001E78                          1950      
00001E78  6100 0950               1951      BSR     BITMASK
00001E7C                          1952      
00001E7C  CC82                    1953      AND.L   D2,D6
00001E7E                          1954      
00001E7E  0C46 0020               1955      CMPI    #%0000000000100000,D6   *is it a data reg?
00001E82  6700 0074               1956      BEQ     OP1110DATAREG
00001E86                          1957      
00001E86  43F9 000028EE           1958      LEA     IMD,A1              * formatting
00001E8C  103C 000E               1959      MOVE.B  #14,D0              * Trap #14 prints out pound #
00001E90  4E4F                    1960      TRAP    #15                 * Perform Trap #14
00001E92                          1961      
00001E92  7C09                    1962      MOVE.L  #9,D6
00001E94  7E0B                    1963      MOVE.L  #11,D7
00001E96                          1964      
00001E96  6100 0932               1965      BSR     BITMASK
00001E9A                          1966      
00001E9A  CC82                    1967      AND.L   D2,D6
00001E9C                          1968      
00001E9C  0C46 0000               1969      CMPI    #0,D6 * special case, if zero print #8 not #0
00001EA0  6700 002E               1970      BEQ     OP1110IMMEIGHT
00001EA4                          1971      
00001EA4  E08E                    1972      LSR.L   #8,D6
00001EA6  E28E                    1973      LSR.L   #1,D6
00001EA8                          1974      
00001EA8  2206                    1975      MOVE.L  D6,D1              * formatting
00001EAA  103C 0003               1976      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001EAE  4E4F                    1977      TRAP    #15                * Perform Trap #14
00001EB0                          1978      
00001EB0  43F9 000028F0           1979      LEA     COMMA,A1            * formatting
00001EB6  103C 000E               1980      MOVE.B  #14,D0              * Trap #14 prints out comma
00001EBA  4E4F                    1981      TRAP    #15                 * Perform Trap #1
00001EBC                          1982      
00001EBC                          1983      * in order to use the eahlpers, we need to do some bit manipulation
00001EBC                          1984      * clearing the bits below lets our helper know that the mode is Dn
00001EBC  0882 0003               1985      BCLR    #3,D2
00001EC0  0882 0004               1986      BCLR    #4,D2
00001EC4  0882 0005               1987      BCLR    #5,D2
00001EC8                          1988      
00001EC8  6100 00B4               1989      BSR     EAHELPER05
00001ECC                          1990      
00001ECC  6000 0056               1991      BRA     ENDOP1110
00001ED0                          1992      
00001ED0                          1993  OP1110IMMEIGHT
00001ED0                          1994  
00001ED0  7208                    1995      MOVE.L  #8,D1              * formatting
00001ED2  103C 0003               1996      MOVE.B  #3,D0              * Trap #14 prints out the number in D1
00001ED6  4E4F                    1997      TRAP    #15                * Perform Trap #14
00001ED8                          1998      
00001ED8  43F9 000028F0           1999      LEA     COMMA,A1            * formatting
00001EDE  103C 000E               2000      MOVE.B  #14,D0              * Trap #14 prints out comma
00001EE2  4E4F                    2001      TRAP    #15                 * Perform Trap #1
00001EE4                          2002      
00001EE4                          2003      * in order to use the eahlpers, we need to do some bit manipulation
00001EE4                          2004      * clearing the bits below lets our helper know that the mode is Dn
00001EE4  0882 0003               2005      BCLR    #3,D2
00001EE8  0882 0004               2006      BCLR    #4,D2
00001EEC  0882 0005               2007      BCLR    #5,D2
00001EF0                          2008      
00001EF0  6100 008C               2009      BSR     EAHELPER05
00001EF4                          2010      
00001EF4  6000 002E               2011      BRA     ENDOP1110
00001EF8                          2012  
00001EF8                          2013  OP1110DATAREG
00001EF8                          2014  
00001EF8                          2015      * in order to use the eahlpers, we need to do some bit manipulation
00001EF8                          2016      * clearing the bits below lets our helper know that the mode is Dn
00001EF8  0882 0003               2017      BCLR    #3,D2
00001EFC  0882 0004               2018      BCLR    #4,D2
00001F00  0882 0005               2019      BCLR    #5,D2
00001F04  0882 0006               2020      BCLR    #6,D2
00001F08  0882 0007               2021      BCLR    #7,D2
00001F0C  0882 0008               2022      BCLR    #8,D2
00001F10                          2023      
00001F10  6100 002A               2024      BSR     EAHELPER611
00001F14                          2025      
00001F14  43F9 000028F0           2026      LEA     COMMA,A1            * formatting
00001F1A  103C 000E               2027      MOVE.B  #14,D0              * Trap #14 prints out comma
00001F1E  4E4F                    2028      TRAP    #15                 * Perform Trap #14
00001F20                          2029      
00001F20  6100 005C               2030      BSR     EAHELPER05
00001F24                          2031  
00001F24                          2032  ENDOP1110
00001F24                          2033  
00001F24  43F9 00002833           2034      LEA     NEWLINE,A1          * formatting
00001F2A  103C 000E               2035      MOVE.B  #14,D0              * Trap #14 prints out a new line
00001F2E  4E4F                    2036      TRAP    #15                 * Perform Trap #14
00001F30                          2037      
00001F30  4C9F 03FF               2038      MOVEM   (A7)+,D0-D7/A0-A1   * Caller saved
00001F34  4E75                    2039      RTS
00001F36                          2040  
00001F36                          2041  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001F36                          2042  *-----------------------------------------------------------------------------
00001F36                          2043  
00001F36                          2044  
00001F36                          2045  
00001F36                          2046  *-----------------------------------------------------------------------------
00001F36                          2047  *-----------------------------------------------------------------------------
00001F36                          2048  * NAME: OP_1111   ()
00001F36                          2049  * DESCRIPTION:    a
00001F36                          2050  * PRE-CONDITION:  b
00001F36                          2051  * POST-CONDITION: c
00001F36                          2052  * REGISTERS:      d
00001F36                          2053  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001F36                          2054  OP1111
00001F36                          2055  
00001F36  6100 0628               2056      BSR     UNKNOWNOP
00001F3A  4E75                    2057      RTS
00001F3C                          2058  
00001F3C                          2059  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001F3C                          2060  *-----------------------------------------------------------------------------
00001F3C                          2061  
00001F3C                          2062  
00001F3C                          2063  
00001F3C                          2064  *-----------------------------------------------------------------------------
00001F3C                          2065  *-----------------------------------------------------------------------------
00001F3C                          2066  * NAME:           EAHELPER611
00001F3C                          2067  * DESCRIPTION:    a
00001F3C                          2068  * PRE-CONDITION:  D2 contains the instruction to print modes for.
00001F3C                          2069  *                 D5 contains the size of the data to be printed
00001F3C                          2070  * POST-CONDITION: Determines if mode is direct, if it's not, passes D2 to 
00001F3C                          2071  *                 EAHELPER05 to print.
00001F3C                          2072  * REGISTERS:      a
00001F3C                          2073  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001F3C                          2074  EAHELPER611
00001F3C  48A7 FFC0               2075      MOVEM  D0-D7/A0-A1,-(A7)    * Push values onto stack
00001F40                          2076      
00001F40  3C3C 0006               2077      MOVE.W  #6, D6              * Prep lower value for bitmask
00001F44  3E3C 0008               2078      MOVE.W  #8, D7              * Prep upper value for bitmask
00001F48  6100 0880               2079      BSR     BITMASK             * Finalize bitmask setup
00001F4C  CC42                    2080      AND     D2,D6               * Apply bitmask
00001F4E                          2081      
00001F4E                          2082      * to move the mode where EAHELPER50 can process it
00001F4E  7C06                    2083      MOVE.L  #6,D6       * Prep lower value of bitmask
00001F50  7E08                    2084      MOVE.L  #8,D7       * Prep upper value of bitmask
00001F52  6100 0876               2085      BSR     BITMASK     * Create bitmask
00001F56  CC42                    2086      AND     D2,D6       * Apply bitmask
00001F58                          2087      
00001F58  4243                    2088      CLR     D3      * prep D3 to store values
00001F5A  3606                    2089      MOVE.W  D6,D3   * store bitmasked value in D3
00001F5C  E64B                    2090      LSR     #3,D3   * move bits 6-8 to 3-5
00001F5E                          2091      
00001F5E                          2092      * to move the register where EAHELPER50 can process it
00001F5E  7C09                    2093      MOVE.L  #9,D6   * Prep lower value for bitmask
00001F60  7E0B                    2094      MOVE.L  #11,D7  * Prep upper value for bitmask
00001F62  6100 0866               2095      BSR     BITMASK * create bitmask
00001F66  CC42                    2096      AND     D2,D6   * apply bitmask
00001F68                          2097      
00001F68  4244                    2098      CLR     D4      * prep D3 to store values
00001F6A  3806                    2099      MOVE.W  D6,D4   * store bitmasked value in D3
00001F6C                          2100      
00001F6C  E04C                    2101      LSR     #8,D4   * move bits 9-11 to 0-2
00001F6E  E24C                    2102      LSR     #1,D4   * move bits 9-11 to 0-2
00001F70                          2103    
00001F70  8684                    2104      OR.L    D4,D3   * combind the register and mode
00001F72  2403                    2105      MOVE.L  D3,D2   * put the result in D2 so EAHELPER05 can process it
00001F74                          2106      
00001F74  6100 0008               2107      BSR     EAHELPER05
00001F78                          2108      
00001F78                          2109  ENDEAHELPER611
00001F78                          2110      
00001F78  4C9F 03FF               2111      MOVEM  (A7)+,D0-D7/A0-A1    * Revert back
00001F7C  4E75                    2112      RTS
00001F7E                          2113  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00001F7E                          2114  *-----------------------------------------------------------------------------
00001F7E                          2115  
00001F7E                          2116  
00001F7E                          2117  
00001F7E                          2118  *-----------------------------------------------------------------------------
00001F7E                          2119  *-----------------------------------------------------------------------------
00001F7E                          2120  * NAME:           EAHELPER05
00001F7E                          2121  * DESCRIPTION:    a
00001F7E                          2122  * PRE-CONDITION:  D2 contains the instruction to print modes for. Only call
00001F7E                          2123  *                 this sub-routine helper for operations that only have one
00001F7E                          2124  *                 mode register.
00001F7E                          2125  *                 D3 contains the size of immediate it could be, 1 = byte
00001F7E                          2126  *                 2 = word, 3 = long
00001F7E                          2127  * POST-CONDITION: Determines mode, passes D2 to REGHELPER to print.
00001F7E                          2128  * REGISTERS:      a
00001F7E                          2129  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00001F7E                          2130  EAHELPER05
00001F7E                          2131      * todo: add code for printing immediate values
00001F7E                          2132      
00001F7E  48A7 FFC0               2133      MOVEM   D0-D7/A0-A1,-(A7) * save stuff
00001F82                          2134      
00001F82  7C03                    2135      MOVE.L  #3,D6
00001F84  7E05                    2136      MOVE.L  #5,D7
00001F86                          2137      
00001F86  6100 0842               2138      BSR     BITMASK * generate a bitmask to identify the mode
00001F8A                          2139      
00001F8A  CC42                    2140      AND     D2,D6   * mask off the parts of D2 we don't need
00001F8C                          2141      
00001F8C  2A06                    2142      MOVE.L  D6,D5   * store the 3-5 bitmask for later use
00001F8E                          2143      
00001F8E  0C46 0000               2144      CMPI    #%0000000000000000,D6 * is it data register direct?
00001F92  6600 000A               2145      BNE     NOTDATAREG
00001F96                          2146      
00001F96  6100 012C               2147      BSR     MODE_DN
00001F9A                          2148       
00001F9A  6000 0122               2149      BRA     ENDEAHELPER05
00001F9E                          2150      
00001F9E                          2151  NOTDATAREG * address register direct
00001F9E                          2152      
00001F9E  0C46 0008               2153      CMPI    #%0000000000001000,D6 * is it address register direct?
00001FA2  6600 000A               2154      BNE     NOTADRDIRECT
00001FA6                          2155      
00001FA6  6100 021C               2156      BSR     MODE_AN * simply prints out the address register
00001FAA                          2157       
00001FAA  6000 0112               2158      BRA     ENDEAHELPER05
00001FAE                          2159      
00001FAE                          2160  NOTADRDIRECT * address register indirect
00001FAE                          2161          
00001FAE  0C46 0010               2162      CMPI    #%0000000000010000,D6 * is it address register indirect?
00001FB2  6600 0022               2163      BNE     NOTADRINDIRECT
00001FB6                          2164      
00001FB6  43F9 000028F2           2165      LEA     OBRACK,A1       * Load '('
00001FBC  303C 000E               2166      MOVE.W  #14,D0          * Trap #14 to display message
00001FC0  4E4F                    2167      TRAP    #15             * Perform #14
00001FC2                          2168          
00001FC2                          2169  
00001FC2  6100 0200               2170      BSR     MODE_AN * print out an address register
00001FC6                          2171      
00001FC6  43F9 000028F4           2172      LEA     CBRACK,A1       * Load ')'
00001FCC  303C 000E               2173      MOVE.W  #14,D0          * Trap #14 to display message
00001FD0  4E4F                    2174      TRAP    #15             * Perform #14
00001FD2                          2175       
00001FD2  6000 00EA               2176      BRA     ENDEAHELPER05
00001FD6                          2177      
00001FD6                          2178  NOTADRINDIRECT * address register indirect, post increment
00001FD6                          2179      
00001FD6  0C46 0018               2180      CMPI    #%0000000000011000,D6 * is it address register indirect post increment?
00001FDA  6600 002E               2181      BNE     NOTADRINDIRECTPOST
00001FDE                          2182      
00001FDE  43F9 000028F2           2183      LEA     OBRACK,A1       * Load '('
00001FE4  303C 000E               2184      MOVE.W  #14,D0          * Trap #14 to display message
00001FE8  4E4F                    2185      TRAP    #15             * Perform #14
00001FEA                          2186          
00001FEA                          2187  
00001FEA  6100 01D8               2188      BSR     MODE_AN * print out an address register
00001FEE                          2189      
00001FEE  43F9 000028F4           2190      LEA     CBRACK,A1       * Load ')'
00001FF4  303C 000E               2191      MOVE.W  #14,D0          * Trap #14 to display message
00001FF8  4E4F                    2192      TRAP    #15             * Perform #14
00001FFA                          2193      
00001FFA  43F9 000028F6           2194      LEA     PLUS,A1       * Load '+'
00002000  303C 000E               2195      MOVE.W  #14,D0          * Trap #14 to display message
00002004  4E4F                    2196      TRAP    #15             * Perform #14
00002006                          2197       
00002006  6000 00B6               2198      BRA     ENDEAHELPER05
0000200A                          2199      
0000200A                          2200  NOTADRINDIRECTPOST * address register indirect, pre decrement
0000200A                          2201      
0000200A  0C46 0020               2202      CMPI    #%0000000000100000,D6 * is it address register indirect pre decrement?
0000200E  6600 002E               2203      BNE     NOTADRINDIRECTPRE
00002012                          2204      
00002012  43F9 000028F8           2205      LEA     MINUS,A1       * Load '-'
00002018  303C 000E               2206      MOVE.W  #14,D0          * Trap #14 to display message
0000201C  4E4F                    2207      TRAP    #15             * Perform #14
0000201E                          2208      
0000201E  43F9 000028F2           2209      LEA     OBRACK,A1       * Load '('
00002024  303C 000E               2210      MOVE.W  #14,D0          * Trap #14 to display message
00002028  4E4F                    2211      TRAP    #15             * Perform #14
0000202A                          2212          
0000202A                          2213  
0000202A  6100 0198               2214      BSR     MODE_AN * print out an address register
0000202E                          2215      
0000202E  43F9 000028F4           2216      LEA     CBRACK,A1       * Load ')'
00002034  303C 000E               2217      MOVE.W  #14,D0          * Trap #14 to display message
00002038  4E4F                    2218      TRAP    #15             * Perform #14
0000203A                          2219       
0000203A  6000 0082               2220      BRA     ENDEAHELPER05
0000203E                          2221  
0000203E                          2222  NOTADRINDIRECTPRE
0000203E                          2223  
0000203E  0C46 0038               2224      CMPI    #%0000000000111000,D6 * is it immediate?
00002042  6600 0076               2225      BNE     NOTIMMEDIATE
00002046                          2226  
00002046  0C43 0001               2227      CMPI    #1,D3 * is it a byte?
0000204A  6600 0024               2228      BNE     NOTIMMBYTE
0000204E                          2229      
0000204E  43F9 000028EE           2230      LEA     IMD,A1 *print out the '#' indicating an immediate value
00002054  103C 000E               2231      MOVE.B  #14,D0
00002058  4E4F                    2232      TRAP    #15
0000205A                          2233      
0000205A  7C00                    2234      MOVE.L  #0, D6              * Prep lower value for bitmask
0000205C  7E07                    2235      MOVE.L  #7, D7              * Prep upper value for bitmask
0000205E  6100 076A               2236      BSR     BITMASK             * Finalize bitmask setup
00002062                          2237          
00002062  321A                    2238      MOVE.W  (A2)+,D1
00002064                          2239      
00002064  C286                    2240      AND.L     D6,D1
00002066                          2241          
00002066  103C 0003               2242      MOVE.B  #3,D0   
0000206A  4E4F                    2243      TRAP    #15      * Perform Trap #3
0000206C                          2244      
0000206C  6000 0050               2245      BRA     ENDEAHELPER05
00002070                          2246  
00002070                          2247  NOTIMMBYTE
00002070                          2248      
00002070  0C43 0002               2249      CMPI    #2,D3 * is it a word?
00002074  6600 0024               2250      BNE     NOTIMMWORD
00002078                          2251      
00002078  43F9 000028EE           2252      LEA     IMD,A1 *print out the '#' indicating an immediate value
0000207E  103C 000E               2253      MOVE.B  #14,D0
00002082  4E4F                    2254      TRAP    #15
00002084                          2255      
00002084  7C00                    2256      MOVE.L  #0, D6              * Prep lower value for bitmask
00002086  7E0F                    2257      MOVE.L  #15, D7             * Prep upper value for bitmask
00002088  6100 0740               2258      BSR     BITMASK             * Finalize bitmask setup
0000208C                          2259          
0000208C  321A                    2260      MOVE.W  (A2)+,D1
0000208E                          2261      
0000208E  C286                    2262      AND.L    D6,D1               * Apply bitmask
00002090                          2263          
00002090  103C 0003               2264      MOVE.B  #3,D0   
00002094  4E4F                    2265      TRAP    #15      * Perform Trap #3
00002096                          2266      
00002096  6000 0026               2267      BRA     ENDEAHELPER05
0000209A                          2268      
0000209A                          2269  NOTIMMWORD
0000209A  0C43 0003               2270      CMPI    #3,D3 * is it a long?
0000209E  6600 001A               2271      BNE     NOTIMMEDIATE
000020A2                          2272      
000020A2  43F9 000028EE           2273      LEA     IMD,A1 *print out the '#' indicating an immediate value
000020A8  103C 000E               2274      MOVE.B  #14,D0
000020AC  4E4F                    2275      TRAP    #15
000020AE                          2276          
000020AE  221A                    2277      MOVE.L  (A2)+,D1
000020B0                          2278          
000020B0  103C 0003               2279      MOVE.B  #3,D0   * Indicate we are using trap #15, 15 to in a certain #base
000020B4  4E4F                    2280      TRAP    #15      * Perform Trap #3
000020B6                          2281      
000020B6  6000 0006               2282      BRA     ENDEAHELPER05
000020BA                          2283  
000020BA                          2284  NOTIMMEDIATE
000020BA  6100 04A4               2285      BSR     UNKNOWNOP
000020BE                          2286      
000020BE                          2287  ENDEAHELPER05
000020BE  4C9F 03FF               2288      MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
000020C2  4E75                    2289      RTS
000020C4                          2290  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000020C4                          2291  *-----------------------------------------------------------------------------
000020C4                          2292  
000020C4                          2293  
000020C4                          2294  
000020C4                          2295  *-----------------------------------------------------------------------------
000020C4                          2296  *-----------------------------------------------------------------------------
000020C4                          2297  * NAME:           MODE_DN
000020C4                          2298  * DESCRIPTION:    Generalize the EA part of the project.
000020C4                          2299  * PRE-CONDITION:  The mode must have been correctly identified. All modes
000020C4                          2300  *                 must be called by RTS.
000020C4                          2301  * POST-CONDITION: After the EA, the entire op will head back to the BSR that
000020C4                          2302  *                 called it.
000020C4                          2303  * REGISTERS:      a
000020C4                          2304  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000020C4                          2305  * ---> Dn
000020C4                          2306  MODE_DN
000020C4  48A7 FFC0               2307          MOVEM   D0-D7/A0-A1,-(A7) * save stuff
000020C8                          2308  
000020C8  3C3C 0000               2309          MOVE.W  #0, D6              * Prep lower value for bitmask
000020CC  3E3C 0002               2310          MOVE.W  #2, D7              * Prep upper value for bitmask
000020D0  6100 06F8               2311          BSR     BITMASK             * Finalize bitmask setup
000020D4  CC42                    2312          AND     D2,D6               * Apply bitmask
000020D6                          2313          
000020D6  0C46 0000               2314          CMPI    #%000000000000000, D6   * Data Register D0?
000020DA  6600 000A               2315          BNE     NOTD0
000020DE                          2316          
000020DE  6100 0074               2317          BSR     PRINTD0
000020E2  6000 006A               2318          BRA     ENDMODE_DN
000020E6                          2319  NOTD0      
000020E6  0C46 0001               2320          CMPI    #%000000000000001, D6   * Data Register D1?
000020EA  6600 000A               2321          BNE     NOTD1
000020EE                          2322          
000020EE  6100 0072               2323          BSR     PRINTD1
000020F2  6000 005A               2324          BRA     ENDMODE_DN
000020F6                          2325  NOTD1
000020F6  0C46 0002               2326          CMPI    #%000000000000010, D6   * Data Register D2?
000020FA  6600 000A               2327          BNE     NOTD2
000020FE                          2328          
000020FE  6100 0070               2329          BSR     PRINTD2
00002102  6000 004A               2330          BRA     ENDMODE_DN
00002106                          2331  NOTD2
00002106  0C46 0003               2332          CMPI    #%000000000000011, D6   * Data Register D3?
0000210A  6600 000A               2333          BNE     NOTD3
0000210E                          2334          
0000210E  6100 006E               2335          BSR     PRINTD3
00002112  6000 003A               2336          BRA     ENDMODE_DN
00002116                          2337  NOTD3
00002116  0C46 0004               2338          CMPI    #%000000000000100, D6   * Data Register D4?
0000211A  6600 000A               2339          BNE     NOTD4
0000211E                          2340          
0000211E  6100 006C               2341          BSR     PRINTD4
00002122  6000 002A               2342          BRA     ENDMODE_DN
00002126                          2343  NOTD4
00002126  0C46 0005               2344          CMPI    #%000000000000101, D6   * Data Register D5?
0000212A  6600 000A               2345          BNE     NOTD5
0000212E                          2346          
0000212E  6100 006A               2347          BSR     PRINTD5
00002132  6000 001A               2348          BRA     ENDMODE_DN
00002136                          2349  NOTD5
00002136  0C46 0006               2350          CMPI    #%000000000000110, D6   * Data Register D6?
0000213A  6600 000A               2351          BNE     NOTD6
0000213E                          2352          
0000213E  6100 0068               2353          BSR     PRINTD6
00002142  6000 000A               2354          BRA     ENDMODE_DN
00002146                          2355  NOTD6
00002146  6100 006E               2356          BSR     PRINTD7
0000214A  6000 0002               2357          BRA     ENDMODE_DN
0000214E                          2358          
0000214E                          2359  ENDMODE_DN
0000214E  4C9F 03FF               2360          MOVEM   (A7)+,D0-D7/A0-A1 * restore stuff
00002152  4E75                    2361          RTS
00002154                          2362  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002154                          2363  *-----------------------------------------------------------------------------
00002154                          2364  
00002154                          2365  
00002154                          2366  
00002154                          2367  *-----------------------------------------------------------------------------
00002154                          2368  *-----------------------------------------------------------------------------
00002154                          2369  * NAME:           PRINTD0
00002154                          2370  * DESCRIPTION:    Simply prints D0, D1, ..., up to D7.
00002154                          2371  * PRE-CONDITION:  a
00002154                          2372  * POST-CONDITION: a
00002154                          2373  * REGISTERS:      a
00002154                          2374  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002154                          2375  PRINTD0
00002154  43F9 00002922           2376          LEA     __D0, A1        * Load 'D0'
0000215A  103C 000E               2377          MOVE.B  #14, D0         * Load Trap #14 to print out
0000215E  4E4F                    2378          TRAP    #15             * Perform Trap #14
00002160  4E75                    2379          RTS
00002162                          2380  PRINTD1
00002162  43F9 00002925           2381          LEA     __D1, A1        * Load 'D1'
00002168  103C 000E               2382          MOVE.B  #14, D0         * Load Trap #14 to print out
0000216C  4E4F                    2383          TRAP    #15             * Perform Trap #14
0000216E  4E75                    2384          RTS      
00002170                          2385  PRINTD2
00002170  43F9 00002928           2386          LEA     __D2, A1        * Load 'D2'
00002176  103C 000E               2387          MOVE.B  #14, D0         * Load Trap #14 to print out
0000217A  4E4F                    2388          TRAP    #15             * Perform Trap #14
0000217C  4E75                    2389          RTS      
0000217E                          2390  PRINTD3
0000217E  43F9 0000292B           2391          LEA     __D3, A1        * Load 'D3'
00002184  103C 000E               2392          MOVE.B  #14, D0         * Load Trap #14 to print out
00002188  4E4F                    2393          TRAP    #15             * Perform Trap #14
0000218A  4E75                    2394          RTS      
0000218C                          2395  PRINTD4
0000218C  43F9 0000292E           2396          LEA     __D4, A1        * Load 'D4'
00002192  103C 000E               2397          MOVE.B  #14, D0         * Load Trap #14 to print out
00002196  4E4F                    2398          TRAP    #15             * Perform Trap #14
00002198  4E75                    2399          RTS       
0000219A                          2400  PRINTD5
0000219A  43F9 00002931           2401          LEA     __D5, A1        * Load 'D5'
000021A0  103C 000E               2402          MOVE.B  #14, D0         * Load Trap #14 to print out
000021A4  4E4F                    2403          TRAP    #15             * Perform Trap #14
000021A6  4E75                    2404          RTS      
000021A8                          2405  PRINTD6
000021A8  43F9 00002934           2406          LEA     __D6, A1        * Load 'D6'
000021AE  103C 000E               2407          MOVE.B  #14, D0         * Load Trap #14 to print out
000021B2  4E4F                    2408          TRAP    #15             * Perform Trap #14
000021B4  4E75                    2409          RTS
000021B6                          2410  PRINTD7
000021B6  43F9 00002937           2411          LEA     __D7, A1        * Load 'D7'
000021BC  103C 000E               2412          MOVE.B  #14, D0         * Load Trap #14 to print out
000021C0  4E4F                    2413          TRAP    #15             * Perform Trap #14
000021C2  4E75                    2414          RTS
000021C4                          2415  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000021C4                          2416  *-----------------------------------------------------------------------------
000021C4                          2417  
000021C4                          2418  
000021C4                          2419  
000021C4                          2420  *-----------------------------------------------------------------------------
000021C4                          2421  *-----------------------------------------------------------------------------
000021C4                          2422  * NAME:           MODE_AN
000021C4                          2423  * DESCRIPTION:    Simply chooses to print A0-A7.
000021C4                          2424  * PRE-CONDITION:  a
000021C4                          2425  * POST-CONDITION: a
000021C4                          2426  * REGISTERS:      a
000021C4                          2427  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000021C4                          2428  MODE_AN
000021C4  48A7 FFC0               2429          MOVEM   D0-D7/A0-A1,-(A7)   * Save information
000021C8                          2430  
000021C8  3C3C 0000               2431          MOVE.W  #0, D6              * Prep lower value for bitmask
000021CC  3E3C 0002               2432          MOVE.W  #2, D7              * Prep upper value for bitmask
000021D0  6100 05F8               2433          BSR     BITMASK             * Finalize bitmask setup
000021D4  CC42                    2434          AND     D2,D6               * Apply bitmask
000021D6                          2435          
000021D6  0C46 0000               2436          CMPI    #%000000000000000, D6   * Address Register A0?
000021DA  6600 000A               2437          BNE     NOTA0
000021DE                          2438          
000021DE  6100 0074               2439          BSR     PRINTA0
000021E2                          2440          
000021E2  6000 006A               2441          BRA     ENDMODE_AN
000021E6                          2442  NOTA0      
000021E6  0C46 0001               2443          CMPI    #%000000000000001, D6   * Address Register A1?
000021EA  6600 000A               2444          BNE     NOTA1
000021EE                          2445          
000021EE  6100 0072               2446          BSR     PRINTA1
000021F2                          2447          
000021F2  6000 005A               2448          BRA     ENDMODE_AN
000021F6                          2449  NOTA1
000021F6  0C46 0002               2450          CMPI    #%000000000000010, D6   * Address Register A2?
000021FA  6600 000A               2451          BNE     NOTA2
000021FE                          2452          
000021FE  6100 0070               2453          BSR     PRINTA2
00002202                          2454          
00002202  6000 004A               2455          BRA     ENDMODE_AN
00002206                          2456  NOTA2
00002206  0C46 0003               2457          CMPI    #%000000000000011, D6   * Address Register A3?
0000220A  6600 000A               2458          BNE     NOTA3
0000220E                          2459          
0000220E  6100 006E               2460          BSR     PRINTA3
00002212                          2461          
00002212  6000 003A               2462          BRA     ENDMODE_AN
00002216                          2463  NOTA3
00002216  0C46 0004               2464          CMPI    #%000000000000100, D6   * Address Register A4?
0000221A  6600 000A               2465          BNE     NOTA4
0000221E                          2466          
0000221E  6100 006C               2467          BSR     PRINTA4
00002222                          2468          
00002222  6000 002A               2469          BRA     ENDMODE_AN
00002226                          2470  NOTA4
00002226  0C46 0005               2471          CMPI    #%000000000000101, D6   * Address Register A5?
0000222A  6600 000A               2472          BNE     NOTA5
0000222E                          2473          
0000222E  6100 006A               2474          BSR     PRINTA5
00002232                          2475          
00002232  6000 001A               2476          BRA     ENDMODE_AN
00002236                          2477  NOTA5
00002236  0C46 0006               2478          CMPI    #%000000000000110, D6   * Address Register A6?
0000223A  6600 000A               2479          BNE     NOTA6
0000223E                          2480          
0000223E  6100 0068               2481          BSR     PRINTA6
00002242                          2482          
00002242  6000 000A               2483          BRA     ENDMODE_AN
00002246                          2484  NOTA6
00002246  6100 006E               2485          BSR     PRINTA7
0000224A                          2486          
0000224A  6000 0002               2487          BRA     ENDMODE_AN
0000224E                          2488  ENDMODE_AN
0000224E  4C9F 03FF               2489          MOVEM   (A7)+,D0-D7/A0-A1   * Restore registers
00002252  4E75                    2490          RTS
00002254                          2491  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002254                          2492  *-----------------------------------------------------------------------------
00002254                          2493  
00002254                          2494  
00002254                          2495  
00002254                          2496  *-----------------------------------------------------------------------------
00002254                          2497  *-----------------------------------------------------------------------------
00002254                          2498  * NAME:           PRINTA0
00002254                          2499  * DESCRIPTION:    Simply print out the address register.
00002254                          2500  * PRE-CONDITION:  a
00002254                          2501  * POST-CONDITION: a
00002254                          2502  * REGISTERS:      a
00002254                          2503  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002254                          2504  PRINTA0
00002254  43F9 0000290A           2505          LEA     __A0, A1        * Load 'A0'
0000225A  103C 000E               2506          MOVE.B  #14, D0         * Load Trap #14 to print out
0000225E  4E4F                    2507          TRAP    #15             * Perform Trap #14
00002260  4E75                    2508          RTS
00002262                          2509  
00002262                          2510  PRINTA1
00002262  43F9 0000290D           2511          LEA     __A1, A1        * Load 'A1'
00002268  103C 000E               2512          MOVE.B  #14, D0         * Load Trap #14 to print out
0000226C  4E4F                    2513          TRAP    #15             * Perform Trap #14
0000226E  4E75                    2514          RTS
00002270                          2515          
00002270                          2516  PRINTA2
00002270  43F9 00002910           2517          LEA     __A2, A1        * Load 'A2'
00002276  103C 000E               2518          MOVE.B  #14, D0         * Load Trap #14 to print out
0000227A  4E4F                    2519          TRAP    #15             * Perform Trap #14
0000227C  4E75                    2520          RTS
0000227E                          2521  
0000227E                          2522  PRINTA3
0000227E  43F9 00002913           2523          LEA     __A3, A1        * Load 'A3'
00002284  103C 000E               2524          MOVE.B  #14, D0         * Load Trap #14 to print out
00002288  4E4F                    2525          TRAP    #15             * Perform Trap #14
0000228A  4E75                    2526          RTS
0000228C                          2527  
0000228C                          2528  PRINTA4
0000228C  43F9 00002916           2529          LEA     __A4, A1        * Load 'A4'
00002292  103C 000E               2530          MOVE.B  #14, D0         * Load Trap #14 to print out
00002296  4E4F                    2531          TRAP    #15             * Perform Trap #14
00002298  4E75                    2532          RTS
0000229A                          2533  
0000229A                          2534  PRINTA5
0000229A  43F9 00002919           2535          LEA     __A5, A1        * Load 'A5'
000022A0  103C 000E               2536          MOVE.B  #14, D0         * Load Trap #14 to print out
000022A4  4E4F                    2537          TRAP    #15             * Perform Trap #14
000022A6  4E75                    2538          RTS
000022A8                          2539  
000022A8                          2540  PRINTA6
000022A8  43F9 0000291C           2541          LEA     __A6, A1        * Load 'A6'
000022AE  103C 000E               2542          MOVE.B  #14, D0         * Load Trap #14 to print out
000022B2  4E4F                    2543          TRAP    #15             * Perform Trap #14
000022B4  4E75                    2544          RTS
000022B6                          2545  
000022B6                          2546  PRINTA7
000022B6  43F9 0000291F           2547          LEA     __A7, A1        * Load 'A7'
000022BC  103C 000E               2548          MOVE.B  #14, D0         * Load Trap #14 to print out
000022C0  4E4F                    2549          TRAP    #15             * Perform Trap #14
000022C2  4E75                    2550          RTS
000022C4                          2551  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000022C4                          2552  *-----------------------------------------------------------------------------
000022C4                          2553  
000022C4                          2554  
000022C4                          2555  
000022C4                          2556  *-----------------------------------------------------------------------------
000022C4                          2557  *-----------------------------------------------------------------------------
000022C4                          2558  * NAME:           SIZE67
000022C4                          2559  * DESCRIPTION:    Called if the size is stored in bits 6 to 7.
000022C4                          2560  * PRE-CONDITION:  a
000022C4                          2561  * POST-CONDITION: a
000022C4                          2562  * REGISTERS:      a
000022C4                          2563  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000022C4                          2564  SIZE67
000022C4  48A7 FFFE               2565          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
000022C8  3C3C 0006               2566          MOVE.W  #6, D6              * Prep lower value for bitmask
000022CC  3E3C 0007               2567          MOVE.W  #7, D7              * Prep upper value for bitmask
000022D0  6100 04F8               2568          BSR     BITMASK             * Finalize bitmask setup
000022D4  CC42                    2569          AND     D2,D6               * Apply bitmask     
000022D6                          2570  
000022D6  0C46 0000               2571          CMPI    #%0000000000000000, D6   * is it a BYTE?
000022DA  6600 000A               2572          BNE     NOT67BYTE
000022DE                          2573          
000022DE  6100 009C               2574          BSR     PRINTBYTE               * Branch to handle BYTE sizes
000022E2  6000 001E               2575          BRA     END67
000022E6                          2576  NOT67BYTE        
000022E6  0C46 0040               2577          CMPI    #%0000000001000000, D6   * is it a WORD?
000022EA  6600 000A               2578          BNE     NOT67WORD
000022EE                          2579          
000022EE  6100 009A               2580          BSR     PRINTWORD               * Branch to handle WORD sizes
000022F2  6000 000E               2581          BRA     END67
000022F6                          2582  NOT67WORD
000022F6  0C46 0080               2583          CMPI    #%0000000010000000, D6   * is it a LONG?
000022FA  6600 0006               2584          BNE     END67
000022FE                          2585          
000022FE  6100 0098               2586          BSR     PRINTLONG               * Branch to handle LONG sizes
00002302                          2587  END67
00002302  4C9F 7FFF               2588          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
00002306  4E75                    2589          RTS                             * Return. Size handling is finished.
00002308                          2590  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002308                          2591  *-----------------------------------------------------------------------------
00002308                          2592  
00002308                          2593  
00002308                          2594  
00002308                          2595  *-----------------------------------------------------------------------------
00002308                          2596  *-----------------------------------------------------------------------------
00002308                          2597  * NAME:           SIZE68
00002308                          2598  * DESCRIPTION:    Called if the size is stored in bits 6 to 8.
00002308                          2599  * PRE-CONDITION:  a
00002308                          2600  * POST-CONDITION: a
00002308                          2601  * REGISTERS:      a
00002308                          2602  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002308                          2603  SIZE68
00002308                          2604  
00002308  48A7 FFFE               2605          MOVEM   D0-D7/A0-A6, -(A7)  * Save values to return to original when done
0000230C  3C3C 0006               2606          MOVE.W  #6, D6              * Prep lower value for bitmask
00002310  3E3C 0008               2607          MOVE.W  #8, D7              * Prep upper value for bitmask
00002314  6100 04B4               2608          BSR     BITMASK             * Finalize bitmask setup
00002318  CC42                    2609          AND     D2,D6               * Apply bitmask       
0000231A                          2610  
0000231A  0C46 0000               2611          CMPI    #%0000000000000000, D6  * is it a BYTE?
0000231E  6700 003E               2612          BEQ     PRINTBYTE68               * Branch to handle BYTE sizes
00002322  0C46 0100               2613          CMPI    #%0000000100000000, D6  * is it a BYTE?
00002326  6700 0036               2614          BEQ     PRINTBYTE68               * Branch to handle BYTE sizes 
0000232A                          2615        
0000232A  0C46 0040               2616          CMPI    #%0000000001000000, D6  * is it a WORD?
0000232E  6700 0036               2617          BEQ     PRINTWORD68               * Branch to handle BYTE sizes
00002332  0C46 0140               2618          CMPI    #%0000000101000000, D6  * is it a WORD?
00002336  6700 002E               2619          BEQ     PRINTWORD68               * Branch to handle BYTE sizes
0000233A  0C46 00C0               2620          CMPI    #%0000000011000000, D6  * is it a WORD (ADDA)?
0000233E  6700 0026               2621          BEQ     PRINTWORD68               * Branch to handle BYTE sizes
00002342                          2622  
00002342  0C46 0080               2623          CMPI    #%0000000010000000, D6  * is it a LONG?
00002346  6700 0026               2624          BEQ     PRINTLONG68               * Branch to handle BYTE sizes
0000234A  0C46 0180               2625          CMPI    #%0000000110000000, D6  * is it a LONG?
0000234E  6700 001E               2626          BEQ     PRINTLONG68               * Branch to handle BYTE sizes
00002352  0C46 01C0               2627          CMPI    #%0000000111000000, D6  * is it a LONG (ADDA)?
00002356  6700 0016               2628          BEQ     PRINTLONG68               * Branch to handle BYTE sizes
0000235A                          2629  
0000235A  6000 001A               2630          BRA     END68
0000235E                          2631          
0000235E                          2632  PRINTBYTE68
0000235E  6100 001C               2633          BSR     PRINTBYTE
00002362  6000 0012               2634          BRA     END68
00002366                          2635  
00002366                          2636  PRINTWORD68
00002366  6100 0022               2637          BSR     PRINTWORD
0000236A  6000 000A               2638          BRA     END68
0000236E                          2639          
0000236E                          2640  PRINTLONG68
0000236E  6100 0028               2641          BSR     PRINTLONG
00002372  6000 0002               2642          BRA     END68
00002376                          2643  
00002376                          2644  END68
00002376  4C9F 7FFF               2645          MOVEM   (A7)+,D0-D7/A0-A6       * Pop off the stack to return our registers
0000237A  4E75                    2646          RTS                             * Return. Size handling is finished.
0000237C                          2647  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000237C                          2648  *-----------------------------------------------------------------------------
0000237C                          2649  
0000237C                          2650  
0000237C                          2651  
0000237C                          2652  *-----------------------------------------------------------------------------
0000237C                          2653  *-----------------------------------------------------------------------------
0000237C                          2654  * NAME:           PRINTBYTE
0000237C                          2655  * DESCRIPTION:    a
0000237C                          2656  * PRE-CONDITION:  a
0000237C                          2657  * POST-CONDITION: a
0000237C                          2658  * REGISTERS:      a
0000237C                          2659  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000237C                          2660  PRINTBYTE
0000237C  43F9 000028FE           2661          LEA     __B,A1      * Load '.B ' into A1
00002382  103C 000E               2662          MOVE.B  #14,D0      * Trap #14 setup to print
00002386  4E4F                    2663          TRAP    #15         * Perform Trap #14
00002388  4E75                    2664          RTS                 * Return to SIZE67/SIZE68
0000238A                          2665          
0000238A                          2666  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000238A                          2667  *-----------------------------------------------------------------------------
0000238A                          2668  
0000238A                          2669  
0000238A                          2670  
0000238A                          2671  *-----------------------------------------------------------------------------
0000238A                          2672  *-----------------------------------------------------------------------------
0000238A                          2673  * NAME:           PRINTWORD
0000238A                          2674  * DESCRIPTION:    a
0000238A                          2675  * PRE-CONDITION:  a
0000238A                          2676  * POST-CONDITION: a
0000238A                          2677  * REGISTERS:      a
0000238A                          2678  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000238A                          2679  PRINTWORD
0000238A  43F9 00002902           2680          LEA     __W,A1      * Load '.W ' into A1
00002390  103C 000E               2681          MOVE.B  #14,D0      * Trap #14 setup to print
00002394  4E4F                    2682          TRAP    #15         * Perform Trap #14
00002396  4E75                    2683          RTS                 * Return to SIZE67/SIZE68
00002398                          2684          
00002398                          2685  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002398                          2686  *-----------------------------------------------------------------------------
00002398                          2687  
00002398                          2688  
00002398                          2689  
00002398                          2690  *-----------------------------------------------------------------------------
00002398                          2691  *-----------------------------------------------------------------------------
00002398                          2692  * NAME:           PRINTLONG
00002398                          2693  * DESCRIPTION:    a
00002398                          2694  * PRE-CONDITION:  a
00002398                          2695  * POST-CONDITION: a
00002398                          2696  * REGISTERS:      a
00002398                          2697  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002398                          2698  PRINTLONG
00002398  43F9 00002906           2699          LEA     __L,A1      * Load '.L ' into A1
0000239E  103C 000E               2700          MOVE.B  #14,D0      * Trap #14 setup to print
000023A2  4E4F                    2701          TRAP    #15         * Perform Trap #14
000023A4  4E75                    2702          RTS                 * Return to SIZE67/SIZE68
000023A6                          2703          
000023A6                          2704  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000023A6                          2705  *-----------------------------------------------------------------------------
000023A6                          2706  
000023A6                          2707  
000023A6                          2708  
000023A6                          2709  *-----------------------------------------------------------------------------
000023A6                          2710  *-----------------------------------------------------------------------------
000023A6                          2711  * NAME:           MOVEMHELPERPOST
000023A6                          2712  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
000023A6                          2713  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
000023A6                          2714  * POST-CONDITION: The registers being saved are printed
000023A6                          2715  * REGISTERS:      A2
000023A6                          2716  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000023A6                          2717  MOVEMHELPERPOST
000023A6  48A7 FFFE               2718          MOVEM  D0-D7/A0-A6,-(A7)
000023AA                          2719          
000023AA  4285                    2720          CLR.L   D5  * to be used as a loop counter
000023AC  4284                    2721          CLR.L   D4  * == 1 if we have printed any registers (for fencepost issue)
000023AE  4283                    2722          CLR.L   D3  * == 1 if we are in a range
000023B0  4286                    2723          CLR.L   D6  * == 1 if we have already printed the slash or dash
000023B2  4287                    2724          CLR.L   D7  * == counts the number of registers in a range
000023B4  1C3C 0001               2725          MOVE.B  #1,D6 * to fix fencepost issue
000023B8  4282                    2726          CLR.L   D2
000023BA  3412                    2727          MOVE.W  (A2),D2
000023BC                          2728          
000023BC                          2729  DLOOP * loop to print out the data register portion of the addresses being saved
000023BC                          2730  
000023BC  E25A                    2731          ROR     #1,D2
000023BE  6500 0006               2732          BCS     DVALID
000023C2                          2733          
000023C2  6000 0064               2734          BRA     DINVALID
000023C6                          2735          
000023C6                          2736  DVALID
000023C6  0C43 0000               2737          CMPI    #0,D3
000023CA  6700 0020               2738          BEQ     DFORWARDVALID * we are not in a range
000023CE                          2739          
000023CE  5247                    2740          ADDI    #1,D7 *increment number of regs in range
000023D0                          2741          
000023D0  0C46 0001               2742          CMPI    #1,D6   *have we already printed a symbol?
000023D4  6700 0086               2743          BEQ     DLOOPITER
000023D8                          2744          
000023D8  43F9 000028FC           2745          LEA     DASH,A1    *print a dash
000023DE  103C 000E               2746          MOVE.B  #14,D0
000023E2  4E4F                    2747          TRAP    #15
000023E4                          2748          
000023E4  1C3C 0001               2749          MOVE.B  #1,D6 * indicates a symbol has been printed
000023E8                          2750          
000023E8  6000 0072               2751          BRA     DLOOPITER
000023EC                          2752          
000023EC                          2753  DFORWARDVALID
000023EC                          2754          * not in a range yet, print
000023EC                          2755          
000023EC  0C44 0000               2756          CMPI    #0,D4
000023F0  6700 000E               2757          BEQ     DNOSLASH
000023F4                          2758                  
000023F4  43F9 000028FA           2759          LEA     SLASH,A1
000023FA  103C 000E               2760          MOVE.B  #14,D0
000023FE  4E4F                    2761          TRAP    #15
00002400                          2762          
00002400                          2763  DNOSLASH
00002400                          2764  
00002400  183C 0001               2765          MOVE.B  #1,D4 * we have printed something, now slashes are fair game
00002404                          2766          
00002404  1C3C 0001               2767          MOVE.B  #1,D6   * we have printed a symbol
00002408                          2768          
00002408  43F9 000028E4           2769          LEA     ASCII_D,A1
0000240E  103C 000E               2770          MOVE.B  #14,D0
00002412  4E4F                    2771          TRAP    #15
00002414                          2772          
00002414  2205                    2773          MOVE.L  D5,D1
00002416  103C 0003               2774          MOVE.B  #3,D0
0000241A  4E4F                    2775          TRAP    #15
0000241C                          2776  
0000241C  163C 0001               2777          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
00002420  1C3C 0000               2778          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
00002424                          2779          
00002424  6000 0036               2780          BRA     DLOOPITER
00002428                          2781  
00002428                          2782  
00002428                          2783  DINVALID
00002428                          2784  
00002428                          2785          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
00002428                          2786          
00002428  0C43 0001               2787          CMPI    #1,D3
0000242C  6600 002E               2788          BNE     DLOOPITER
00002430                          2789          
00002430  163C 0000               2790          MOVE.B  #0,D3
00002434                          2791          
00002434  0C47 0001               2792          CMPI    #1,D7
00002438  6D00 0020               2793          BLT     DLOOPITERCLR
0000243C                          2794          
0000243C  43F9 000028E4           2795          LEA     ASCII_D,A1
00002442  103C 000E               2796          MOVE.B  #14,D0
00002446  4E4F                    2797          TRAP    #15
00002448                          2798          
00002448  2205                    2799          MOVE.L  D5,D1
0000244A                          2800          
0000244A  0641 FFFF               2801          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
0000244E                          2802          
0000244E  103C 0003               2803          MOVE.B  #3,D0
00002452  4E4F                    2804          TRAP    #15
00002454                          2805          
00002454  4287                    2806          CLR.L   D7
00002456                          2807          
00002456  6000 0004               2808          BRA     DLOOPITER
0000245A                          2809          
0000245A                          2810  DLOOPITERCLR        
0000245A  4287                    2811          CLR.L   D7
0000245C                          2812  
0000245C                          2813  DLOOPITER
0000245C                          2814          
0000245C  0C45 0008               2815          CMPI    #8,D5
00002460  6700 0008               2816          BEQ     DLOOPDONE
00002464                          2817  
00002464  5245                    2818          ADDI    #1,D5
00002466  6000 FF54               2819          BRA     DLOOP
0000246A                          2820  
0000246A                          2821  DLOOPDONE
0000246A                          2822  
0000246A  7A09                    2823          MOVE.L  #9,D5  * to be used as a loop counter
0000246C  4283                    2824          CLR.L   D3  * == 1 if we are in a range
0000246E  4286                    2825          CLR.L   D6  * == 1 if we have already printed the slash or dash
00002470  4287                    2826          CLR.L   D7  * count of registers in a range
00002472  1C3C 0001               2827          MOVE.B  #1,D6 * to fix fencepost issue     
00002476                          2828  
00002476                          2829  ALOOP * loop to print out the data register portion of the addresses being saved
00002476                          2830  
00002476  E25A                    2831          ROR     #1,D2
00002478  6500 0006               2832          BCS     AVALID
0000247C                          2833          
0000247C  6000 0068               2834          BRA     AINVALID
00002480                          2835          
00002480                          2836  AVALID
00002480  0C43 0000               2837          CMPI    #0,D3
00002484  6700 0020               2838          BEQ     AFORWARDVALID * we are not in a range
00002488                          2839          
00002488  5247                    2840          ADDI    #1,D7 *increment number of regs in range
0000248A                          2841          
0000248A  0C46 0001               2842          CMPI    #1,D6   *have we already printed a symbol?
0000248E  6700 008E               2843          BEQ     ALOOPITER
00002492                          2844          
00002492  43F9 000028FC           2845          LEA     DASH,A1    *print a dash
00002498  103C 000E               2846          MOVE.B  #14,D0
0000249C  4E4F                    2847          TRAP    #15
0000249E                          2848          
0000249E  1C3C 0001               2849          MOVE.B  #1,D6 * indicates a symbol has been printed
000024A2                          2850          
000024A2  6000 007A               2851          BRA     ALOOPITER
000024A6                          2852          
000024A6                          2853  AFORWARDVALID
000024A6                          2854          * not in a range yet, print
000024A6                          2855          
000024A6                          2856                  
000024A6  0C44 0000               2857          CMPI    #0,D4
000024AA  6700 000E               2858          BEQ     ANOSLASH
000024AE                          2859                  
000024AE  43F9 000028FA           2860          LEA     SLASH,A1
000024B4  103C 000E               2861          MOVE.B  #14,D0
000024B8  4E4F                    2862          TRAP    #15
000024BA                          2863          
000024BA                          2864  ANOSLASH
000024BA                          2865  
000024BA  183C 0001               2866          MOVE.B  #1,D4   * we have printed something, now slashes are fair game
000024BE                          2867          
000024BE  1C3C 0001               2868          MOVE.B  #1,D6   * we have printed a symbol
000024C2                          2869          
000024C2  43F9 000028DE           2870          LEA     ASCII_A,A1
000024C8  103C 000E               2871          MOVE.B  #14,D0
000024CC  4E4F                    2872          TRAP    #15
000024CE                          2873          
000024CE  2205                    2874          MOVE.L  D5,D1
000024D0                          2875          
000024D0  0641 FFF8               2876          ADDI    #-8,D1 * it's A, need to adjust by 8
000024D4                          2877          
000024D4  103C 0003               2878          MOVE.B  #3,D0
000024D8  4E4F                    2879          TRAP    #15
000024DA                          2880  
000024DA  163C 0001               2881          MOVE.B  #1,D3   * set to 1 to indicate we are in a range
000024DE  1C3C 0000               2882          MOVE.B  #0,D6   * set to 0 to indicate we have not printed a symbol
000024E2                          2883          
000024E2  6000 003A               2884          BRA     ALOOPITER
000024E6                          2885  
000024E6                          2886  
000024E6                          2887  AINVALID
000024E6                          2888  
000024E6                          2889          * were we in a range? if so, print last register, set D3 to zero branch to next iteration also set D6 to 0
000024E6                          2890          
000024E6  0C43 0001               2891          CMPI    #1,D3
000024EA  6600 0032               2892          BNE     ALOOPITER
000024EE                          2893          
000024EE  163C 0000               2894          MOVE.B  #0,D3
000024F2                          2895          
000024F2  0C47 0001               2896          CMPI    #1,D7
000024F6  6D00 0024               2897          BLT     ALOOPITERCLR
000024FA                          2898          
000024FA  43F9 000028DE           2899          LEA     ASCII_A,A1
00002500  103C 000E               2900          MOVE.B  #14,D0
00002504  4E4F                    2901          TRAP    #15
00002506                          2902          
00002506  2205                    2903          MOVE.L  D5,D1
00002508                          2904          
00002508  0641 FFFF               2905          ADDI    #-1,D1 * print out previous reg #, it was the last in the range
0000250C  0641 FFF8               2906          ADDI    #-8,D1 * it's A, need to adjust by 8
00002510                          2907          
00002510  103C 0003               2908          MOVE.B  #3,D0
00002514  4E4F                    2909          TRAP    #15
00002516                          2910          
00002516  4287                    2911          CLR.L   D7
00002518                          2912          
00002518  6000 0004               2913          BRA     ALOOPITER
0000251C                          2914          
0000251C                          2915  ALOOPITERCLR
0000251C                          2916          
0000251C  4287                    2917          CLR.L   D7
0000251E                          2918  
0000251E                          2919  ALOOPITER
0000251E                          2920          
0000251E  0C45 0010               2921          CMPI     #16,D5
00002522  6700 0008               2922          BEQ     ALOOPDONE
00002526                          2923  
00002526  5245                    2924          ADDI    #1,D5
00002528  6000 FF4C               2925          BRA     ALOOP
0000252C                          2926  
0000252C                          2927  ALOOPDONE
0000252C                          2928          
0000252C  4C9F 7FFF               2929          MOVEM    (A7)+,D0-D7/A0-A6
00002530  4E75                    2930          RTS
00002532                          2931  
00002532                          2932          
00002532                          2933  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002532                          2934  *-----------------------------------------------------------------------------
00002532                          2935  
00002532                          2936  
00002532                          2937  
00002532                          2938  
00002532                          2939  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002532                          2940  *-----------------------------------------------------------------------------
00002532                          2941  *-----------------------------------------------------------------------------
00002532                          2942  * NAME:           MOVEMHELPERPRE
00002532                          2943  * DESCRIPTION:    Deciphers the myriad of combinations possible for MOVEM
00002532                          2944  * PRE-CONDITION:  A2 points to the second word of the MOVEM op
00002532                          2945  * POST-CONDITION: The registers being saved are printed
00002532                          2946  * REGISTERS:      A2
00002532                          2947  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002532                          2948  MOVEMHELPERPRE
00002532                          2949  
00002532  48A7 7F00               2950      MOVEM   D1-D7,-(A7)
00002536                          2951  
00002536  3412                    2952      MOVE.W  (A2),D2 * move the data we need to proccess into D2
00002538  7800                    2953      MOVE.L  #0,D4
0000253A  4287                    2954      CLR.L    D7 * put the flipped bits here
0000253C                          2955      
0000253C                          2956      *the following block of code moves bits
0000253C                          2957      *into the same position they would be in if
0000253C                          2958      *the MOVEM was post inc, then simply uses post
0000253C                          2959      *inc to print the registers being saved
0000253C                          2960  PRELOOP
0000253C  E35A                    2961      ROL.W   #1,D2
0000253E                          2962      
0000253E  6500 0006               2963      BCS     PRESETBIT
00002542  6000 0004               2964      BRA     PRELOOPITER
00002546                          2965      
00002546                          2966  PRESETBIT
00002546  09C7                    2967      BSET    D4,D7
00002548                          2968  
00002548                          2969  PRELOOPITER
00002548  0C44 000F               2970      CMPI    #15,D4
0000254C  6700 0006               2971      BEQ     PRELOOPDONE
00002550                          2972      
00002550  5244                    2973      ADDI    #1,D4
00002552  60E8                    2974      BRA     PRELOOP
00002554                          2975  
00002554                          2976  PRELOOPDONE
00002554                          2977  
00002554  3487                    2978      MOVE.W  D7,(A2)    
00002556  4C9F 00FE               2979      MOVEM   (A7)+,D1-D7
0000255A                          2980  
0000255A  6100 FE4A               2981      BSR MOVEMHELPERPOST
0000255E                          2982  
0000255E  4E75                    2983      RTS
00002560                          2984  
00002560                          2985  
00002560                          2986  
00002560                          2987          
00002560                          2988  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
00002560                          2989  *-----------------------------------------------------------------------------
00002560                          2990  
00002560                          2991  
00002560                          2992  
00002560                          2993  *-----------------------------------------------------------------------------
00002560                          2994  *-----------------------------------------------------------------------------
00002560                          2995  * NAME:           UNKNOWNOP
00002560                          2996  * DESCRIPTION:    a
00002560                          2997  * PRE-CONDITION:  D2 contains the instruction to print. D2 has already been
00002560                          2998  *                 identified as an unknown operation.
00002560                          2999  * POST-CONDITION: D2 is no longer the opcode.
00002560                          3000  * REGISTERS:      a
00002560                          3001  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00002560                          3002  UNKNOWNOP
00002560  48A7 FFC0               3003          MOVEM   D0-D7/A0-A1,-(A7)
00002564                          3004          
00002564  43F9 000028A0           3005          LEA     DATA,A1 * load " DATA $" into register A1
0000256A  700E                    3006          MOVE.L  #14,D0  * print the string stored in A1
0000256C  4E4F                    3007          TRAP    #15
0000256E                          3008          
0000256E  E18A                    3009          LSL.L   #8,D2
00002570  E18A                    3010          LSL.L   #8,D2
00002572                          3011          
00002572  2C42                    3012          MOVE.L  D2,A6
00002574                          3013          
00002574  7604                    3014          MOVE.L  #4,D3
00002576                          3015          
00002576  6100 0012               3016          BSR     PRINT_ASCII_HEX_CHAR
0000257A                          3017  
0000257A  43F9 00002833           3018          LEA     NEWLINE,A1 * load newline into register A1
00002580  700E                    3019          MOVE.L  #14,D0  * print the string stored in A1
00002582  4E4F                    3020          TRAP    #15
00002584                          3021  
00002584  4C9F 03FF               3022          MOVEM   (A7)+,D0-D7/A0-A1
00002588  4E75                    3023          RTS
0000258A                          3024  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000258A                          3025  *-----------------------------------------------------------------------------
0000258A                          3026  
0000258A                          3027  
0000258A                          3028  
0000258A                          3029  *-----------------------------------------------------------------------------
0000258A                          3030  *-----------------------------------------------------------------------------
0000258A                          3031  * NAME: Print ASCII hex char
0000258A                          3032  * DESCRIPTION:    Prints and address register to console in hex (ASCII chars)
0000258A                          3033  * PRE-CONDITION:  A6 contains the register of memory to print.
0000258A                          3034  *                 This parameter would be pre-loaded by, for example:
0000258A                          3035  *                 "LEA FOO_BAR_ADDR,A6" or "LEA $1234FEED,A6"
0000258A                          3036  *                 D3 contains the loops to do (number of nibbles).
0000258A                          3037  * POST-CONDITION: 
0000258A                          3038  * REGISTERS:      
0000258A                          3039  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
0000258A                          3040  PRINT_ASCII_HEX_CHAR
0000258A  48E7 FFFC               3041      MOVEM.L     D0-D7/A0-A5,-(A7) * push data to save
0000258E  4285                    3042      CLR.L       D5
00002590                          3043      
00002590                          3044      * fence post check (if-statement, check if 0 > chars)
00002590  0C03 0000               3045      CMPI.B      #0,D3
00002594  6700 017C               3046      BEQ         INVALID_ASCII_INPUT * go to very last part if invalid
00002598                          3047      
00002598                          3048  *    MOVE.L      A6,D4
00002598  2E0E                    3049      MOVE.L      A6,D7
0000259A                          3050  PRINT_ASCII_LOOP
0000259A                          3051  *    MOVE.L      A6,D7 * increase a6's pointer position ea. loop
0000259A                          3052  *    MOVE.L      D4,D7 * make a mutable copy
0000259A  E99F                    3053      ROL.L       #4,D7 * roll to next spot
0000259C  48E7 0100               3054      MOVEM.L     D7,-(A7) * save D7
000025A0                          3055  
000025A0  0287 0000000F           3056      ANDI.L      #HEX_VALUE_MASK_LONG,D7
000025A6                          3057      
000025A6  0C87 00000000           3058      CMPI.L      #0,D7
000025AC  6D00 0164               3059      BLT         INVALID_ASCII_INPUT
000025B0                          3060  
000025B0  0C87 0000000F           3061      CMPI.L      #15,D7
000025B6  6E00 015A               3062      BGT         INVALID_ASCII_INPUT
000025BA                          3063  
000025BA                          3064      * this might be faster... to do later, after entire assignment done
000025BA                          3065       * CMPI.L      #9,D7
000025BA                          3066       * BLE         PRINT_ASCII_0_TO_9
000025BA                          3067  
000025BA  0C87 00000000           3068      CMPI.L      #0,D7
000025C0  6700 0098               3069      BEQ         PRINT_ASCII_0
000025C4  0C87 00000001           3070      CMPI.L      #1,D7
000025CA  6700 0098               3071      BEQ         PRINT_ASCII_1
000025CE  0C87 00000002           3072      CMPI.L      #2,D7
000025D4  6700 0098               3073      BEQ         PRINT_ASCII_2
000025D8  0C87 00000003           3074      CMPI.L      #3,D7
000025DE  6700 0098               3075      BEQ         PRINT_ASCII_3
000025E2  0C87 00000004           3076      CMPI.L      #4,D7
000025E8  6700 0098               3077      BEQ         PRINT_ASCII_4
000025EC  0C87 00000005           3078      CMPI.L      #5,D7
000025F2  6700 0098               3079      BEQ         PRINT_ASCII_5
000025F6  0C87 00000006           3080      CMPI.L      #6,D7
000025FC  6700 0098               3081      BEQ         PRINT_ASCII_6
00002600  0C87 00000007           3082      CMPI.L      #7,D7
00002606  6700 0098               3083      BEQ         PRINT_ASCII_7
0000260A  0C87 00000008           3084      CMPI.L      #8,D7
00002610  6700 0098               3085      BEQ         PRINT_ASCII_8
00002614  0C87 00000009           3086      CMPI.L      #9,D7
0000261A  6700 0098               3087      BEQ         PRINT_ASCII_9
0000261E  0C87 0000000A           3088      CMPI.L      #10,D7
00002624  6700 0098               3089      BEQ         PRINT_ASCII_A
00002628  0C87 0000000B           3090      CMPI.L      #11,D7
0000262E  6700 0098               3091      BEQ         PRINT_ASCII_B
00002632  0C87 0000000C           3092      CMPI.L      #12,D7
00002638  6700 0098               3093      BEQ         PRINT_ASCII_C
0000263C  0C87 0000000D           3094      CMPI.L      #13,D7
00002642  6700 0098               3095      BEQ         PRINT_ASCII_D
00002646  0C87 0000000E           3096      CMPI.L      #14,D7
0000264C  6700 0098               3097      BEQ         PRINT_ASCII_E
00002650  0C87 0000000F           3098      CMPI.L      #15,D7
00002656  6700 0098               3099      BEQ         PRINT_ASCII_F
0000265A                          3100  PRINT_ASCII_0
0000265A  43F9 000028CA           3101      LEA         ASCII_0,A1
00002660  6000 0098               3102      BRA         PRINT_ASCII_CHAR
00002664                          3103  PRINT_ASCII_1
00002664  43F9 000028CC           3104      LEA         ASCII_1,A1
0000266A  6000 008E               3105      BRA         PRINT_ASCII_CHAR
0000266E                          3106  PRINT_ASCII_2
0000266E  43F9 000028CE           3107      LEA         ASCII_2,A1
00002674  6000 0084               3108      BRA         PRINT_ASCII_CHAR
00002678                          3109  PRINT_ASCII_3
00002678  43F9 000028D0           3110      LEA         ASCII_3,A1
0000267E  6000 007A               3111      BRA         PRINT_ASCII_CHAR
00002682                          3112  PRINT_ASCII_4
00002682  43F9 000028D2           3113      LEA         ASCII_4,A1
00002688  6000 0070               3114      BRA         PRINT_ASCII_CHAR
0000268C                          3115  PRINT_ASCII_5
0000268C  43F9 000028D4           3116      LEA         ASCII_5,A1
00002692  6000 0066               3117      BRA         PRINT_ASCII_CHAR
00002696                          3118  PRINT_ASCII_6
00002696  43F9 000028D6           3119      LEA         ASCII_6,A1
0000269C  6000 005C               3120      BRA         PRINT_ASCII_CHAR
000026A0                          3121  PRINT_ASCII_7
000026A0  43F9 000028D8           3122      LEA         ASCII_7,A1
000026A6  6000 0052               3123      BRA         PRINT_ASCII_CHAR
000026AA                          3124  PRINT_ASCII_8
000026AA  43F9 000028DA           3125      LEA         ASCII_8,A1
000026B0  6000 0048               3126      BRA         PRINT_ASCII_CHAR
000026B4                          3127  PRINT_ASCII_9
000026B4  43F9 000028DC           3128      LEA         ASCII_9,A1
000026BA  6000 003E               3129      BRA         PRINT_ASCII_CHAR
000026BE                          3130  PRINT_ASCII_A
000026BE  43F9 000028DE           3131      LEA         ASCII_A,A1
000026C4  6000 0034               3132      BRA         PRINT_ASCII_CHAR
000026C8                          3133  PRINT_ASCII_B
000026C8  43F9 000028E0           3134      LEA         ASCII_B,A1
000026CE  6000 002A               3135      BRA         PRINT_ASCII_CHAR
000026D2                          3136  PRINT_ASCII_C
000026D2  43F9 000028E2           3137      LEA         ASCII_C,A1
000026D8  6000 0020               3138      BRA         PRINT_ASCII_CHAR
000026DC                          3139  PRINT_ASCII_D
000026DC  43F9 000028E4           3140      LEA         ASCII_D,A1
000026E2  6000 0016               3141      BRA         PRINT_ASCII_CHAR
000026E6                          3142  PRINT_ASCII_E
000026E6  43F9 000028E6           3143      LEA         ASCII_E,A1
000026EC  6000 000C               3144      BRA         PRINT_ASCII_CHAR
000026F0                          3145  PRINT_ASCII_F
000026F0  43F9 000028E8           3146      LEA         ASCII_F,A1
000026F6  6000 0002               3147      BRA         PRINT_ASCII_CHAR
000026FA                          3148  PRINT_ASCII_CHAR
000026FA  103C 000E               3149      MOVE.B      #14,D0
000026FE  4E4F                    3150      TRAP        #15
00002700                          3151      
00002700                          3152          
00002700  4287                    3153      CLR.L       D7
00002702  4CDF 0080               3154      MOVEM.L     (A7)+,D7 * copy back D7 from stack, to mutate its' bits
00002706                          3155      
00002706  5205                    3156      ADD.B       #1,D5 * loop until counter stops
00002708  BA03                    3157      CMP.B       D3,D5
0000270A  6C00 0006               3158      BGE         PRINT_ASCII_FINISH
0000270E                          3159      
0000270E  6000 FE8A               3160      BRA         PRINT_ASCII_LOOP
00002712                          3161  INVALID_ASCII_INPUT
00002712                          3162  PRINT_ASCII_FINISH
00002712  4CDF 3FFF               3163      MOVEM.L     (A7)+,D0-D7/A0-A5 * pop saved memory
00002716  4E75                    3164      RTS
00002718                          3165      
00002718                          3166  PRINTDATA911
00002718  0C46 0E00               3167      CMPI    #%0000111000000000, D6   * Print 7
0000271C  6700 003C               3168      BEQ     PRINT7   
00002720  0C46 0C00               3169      CMPI    #%0000110000000000, D6   * Print 6
00002724  6700 0042               3170      BEQ     PRINT6
00002728  0C46 0A00               3171      CMPI    #%0000101000000000, D6   * Print 5
0000272C  6700 0048               3172      BEQ     PRINT5
00002730  0C46 0800               3173      CMPI    #%0000100000000000, D6   * Print 4
00002734  6700 004E               3174      BEQ     PRINT4 
00002738  0C46 0600               3175      CMPI    #%0000011000000000, D6   * Print 3
0000273C  6700 0054               3176      BEQ     PRINT3    
00002740  0C46 0400               3177      CMPI    #%0000010000000000, D6   * Print 2
00002744  6700 005A               3178      BEQ     PRINT2   
00002748  0C46 0200               3179      CMPI    #%0000001000000000, D6   * Print 1
0000274C  6700 0060               3180      BEQ     PRINT1     
00002750  0C46 0000               3181      CMPI    #%0000000000000000, D6   * Print 0
00002754  6700 0066               3182      BEQ     PRINT8
00002758                          3183      
00002758  4E75                    3184      RTS                             * Fail case  
0000275A                          3185      
0000275A                          3186  PRINT7
0000275A  43F9 000028D8           3187      LEA     ASCII_7, A1
00002760  103C 000E               3188      MOVE.B      #14,D0
00002764  4E4F                    3189      TRAP        #15
00002766  4E75                    3190      RTS
00002768                          3191      
00002768                          3192  PRINT6
00002768  43F9 000028D6           3193      LEA     ASCII_6, A1
0000276E  103C 000E               3194      MOVE.B      #14,D0
00002772  4E4F                    3195      TRAP        #15
00002774  4E75                    3196      RTS
00002776                          3197      
00002776                          3198  PRINT5
00002776  43F9 000028D4           3199      LEA     ASCII_5, A1
0000277C  103C 000E               3200      MOVE.B      #14,D0
00002780  4E4F                    3201      TRAP        #15
00002782  4E75                    3202      RTS
00002784                          3203      
00002784                          3204  PRINT4
00002784  43F9 000028D2           3205      LEA     ASCII_4, A1
0000278A  103C 000E               3206      MOVE.B      #14,D0
0000278E  4E4F                    3207      TRAP        #15
00002790  4E75                    3208      RTS
00002792                          3209      
00002792                          3210  PRINT3
00002792  43F9 000028D0           3211      LEA     ASCII_3, A1
00002798  103C 000E               3212      MOVE.B      #14,D0
0000279C  4E4F                    3213      TRAP        #15
0000279E  4E75                    3214      RTS
000027A0                          3215      
000027A0                          3216  PRINT2
000027A0  43F9 000028CE           3217      LEA     ASCII_2, A1
000027A6  103C 000E               3218      MOVE.B      #14,D0
000027AA  4E4F                    3219      TRAP        #15
000027AC  4E75                    3220      RTS
000027AE                          3221      
000027AE                          3222  PRINT1
000027AE  43F9 000028CC           3223      LEA     ASCII_1, A1
000027B4  103C 000E               3224      MOVE.B      #14,D0
000027B8  4E4F                    3225      TRAP        #15
000027BA  4E75                    3226      RTS
000027BC                          3227          
000027BC                          3228  PRINT8
000027BC  43F9 000028DA           3229      LEA     ASCII_8, A1
000027C2  103C 000E               3230      MOVE.B      #14,D0
000027C6  4E4F                    3231      TRAP        #15
000027C8  4E75                    3232      RTS
000027CA                          3233  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000027CA                          3234  *-----------------------------------------------------------------------------
000027CA                          3235  
000027CA                          3236  
000027CA                          3237  
000027CA                          3238  *-----------------------------------------------------------------------------
000027CA                          3239  *-----------------------------------------------------------------------------
000027CA                          3240  * NAME: Bitmask
000027CA                          3241  * DESCRIPTION:    Masks bits in a data register.
000027CA                          3242  * PRE-CONDITION:  D6 contains the starting bit to be masked, and D7 contains
000027CA                          3243  *                 the ending bit.  For example, a starting bit of decimal
000027CA                          3244  *                 value 0 and an ending bit of decimal value 3 will mask the
000027CA                          3245  *                 bits 0, 1, 2, and 3.
000027CA                          3246  * POST-CONDITION: D6 contains the bitmask, ready for use.
000027CA                          3247  * REGISTERS:      D5,D6,D7
000027CA                          3248  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000027CA                          3249  BITMASK
000027CA  3F05                    3250          MOVE    D5,-(A7)    * push D5 onto the stack so we can use it to
000027CC  4245                    3251          CLR     D5          * clear D5 so we can use it
000027CE                          3252  LOOPBIT 
000027CE  0DC5                    3253          BSET    D6,D5       * set the D6th bit in D5 to 1
000027D0  5246                    3254          ADD     #1,D6       * increment D6
000027D2                          3255  
000027D2  BC47                    3256          CMP     D7,D6       * have we finished?
000027D4  6E00 0004               3257          BGT     BITMASKDONE * yes
000027D8  60F4                    3258          BRA     LOOPBIT     * no, iterate again
000027DA                          3259  
000027DA                          3260  BITMASKDONE
000027DA  2C05                    3261          MOVE.L  D5,D6
000027DC  3A1F                    3262          MOVE    (A7)+,D5    * restore D5
000027DE  4E75                    3263          RTS
000027E0                          3264  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
000027E0                          3265  *-----------------------------------------------------------------------------
000027E0                          3266  
000027E0                          3267  
000027E0                          3268  
000027E0                          3269  *-----------------------------------------------------------------------------
000027E0                          3270  *-----------------------------------------------------------------------------
000027E0                          3271  * SECTION: Constants/variables used throughout the program.
000027E0                          3272  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
000027E0                          3273  
000027E0                          3274  * ---> GENERAL
000027E0  =0000000D               3275  CR          EQU     $0D
000027E0  =0000000A               3276  LF          EQU     $0A
000027E0= 45 4E 54 45 52 20 ...   3277  MSGSTART    DC.B    'ENTER START ADDRESS: ',CR,LF,0
000027F8= 45 4E 54 45 52 20 ...   3278  MSGEND      DC.B    'ENTER END ADDRESS: ',CR,LF,0
0000280E= 48 69 74 20 74 68 ...   3279  CONT_MSG    DC.B    'Hit the [ENTER] key to continue...',CR,LF,0
00002833= 0D 0A 00                3280  NEWLINE     DC.B    CR,LF,0
00002836                          3281  
00002836                          3282  * ---> OPS
00002836= 44 49 56 53 00          3283  DIVSOP      DC.B    'DIVS',0
0000283B= 43 4D 50 00             3284  CMPOP       DC.B    'CMP',0
0000283F= 45 4F 52 00             3285  EOROP       DC.B    'EOR',0
00002843= 4E 4F 50 00             3286  NOOPERATION DC.B    'NOP',0
00002847= 4E 45 47 00             3287  NEGOP       DC.B    'NEG',0
0000284B= 4D 4F 56 45 00          3288  MOVEOP      DC.B    'MOVE',0
00002850= 4D 4F 56 45 41 00       3289  MOVEAOP      DC.B   'MOVEA',0
00002856= 4D 4F 56 45 4D 00       3290  MOVEMOP     DC.B    'MOVEM',0
0000285C= 4A 53 52 00             3291  JSROP       DC.B    'JSR',0
00002860= 52 54 53 00             3292  RTSOP       DC.B    'RTS',0
00002864= 53 55 42 51 00          3293  SUBQOP      DC.B    'SUBQ',0
00002869= 4C 45 41 00             3294  LEAOP       DC.B    'LEA',0
0000286D= 42 43 4C 52 20 00       3295  BCLROP      DC.B    'BCLR ',0
00002873= 4D 55 4C 53 00          3296  MULSOP      DC.B    'MULS',0
00002878= 4F 52 00                3297  OROP        DC.B    'OR',0
0000287B= 4F 52 49 00             3298  ORIOP       DC.B    'ORI',0
0000287F= 43 4D 50 49 00          3299  CMPIOP      DC.B    'CMPI',0
00002884= 4C 53 4C 00             3300  LSLOP       DC.B    'LSL',0
00002888= 4C 53 52 00             3301  LSROP       DC.B    'LSR',0
0000288C= 41 53 4C 00             3302  ASLOP       DC.B    'ASL',0
00002890= 41 53 52 00             3303  ASROP       DC.B    'ASR',0
00002894= 52 4F 4C 00             3304  ROLOP       DC.B    'ROL',0
00002898= 52 4F 52 00             3305  ROROP       DC.B    'ROR',0
0000289C= 53 55 42 00             3306  SUBOP       DC.B    'SUB',0
000028A0= 20 44 41 54 41 20 ...   3307  DATA        DC.B    ' DATA $',0
000028A8= 42 43 43 20 00          3308  OP_BCC_MSG  DC.B    'BCC ',0
000028AD= 42 43 53 20 00          3309  OP_BCS_MSG  DC.B    'BCS ',0
000028B2= 42 47 45 20 00          3310  OP_BGE_MSG  DC.B    'BGE ',0
000028B7= 42 4C 54 20 00          3311  OP_BLT_MSG  DC.B    'BLT ',0
000028BC= 42 56 43 20 00          3312  OP_BVC_MSG  DC.B    'BVC ',0
000028C1= 42 52 41 20 00          3313  OP_BRA_MSG  DC.B    'BRA ',0
000028C6= 41 44 44 00             3314  OP_ADD_MSG  DC.B    'ADD',0
000028CA                          3315  
000028CA                          3316  * ---> HEX CHARS
000028CA= 30 00                   3317  ASCII_0     DC.B    '0',0
000028CC= 31 00                   3318  ASCII_1     DC.B    '1',0
000028CE= 32 00                   3319  ASCII_2     DC.B    '2',0
000028D0= 33 00                   3320  ASCII_3     DC.B    '3',0
000028D2= 34 00                   3321  ASCII_4     DC.B    '4',0
000028D4= 35 00                   3322  ASCII_5     DC.B    '5',0
000028D6= 36 00                   3323  ASCII_6     DC.B    '6',0
000028D8= 37 00                   3324  ASCII_7     DC.B    '7',0
000028DA= 38 00                   3325  ASCII_8     DC.B    '8',0
000028DC= 39 00                   3326  ASCII_9     DC.B    '9',0
000028DE= 41 00                   3327  ASCII_A     DC.B    'A',0
000028E0= 42 00                   3328  ASCII_B     DC.B    'B',0
000028E2= 43 00                   3329  ASCII_C     DC.B    'C',0
000028E4= 44 00                   3330  ASCII_D     DC.B    'D',0
000028E6= 45 00                   3331  ASCII_E     DC.B    'E',0
000028E8= 46 00                   3332  ASCII_F     DC.B    'F',0
000028EA                          3333  
000028EA                          3334  * ---> SPECIAL CHARACTERS
000028EA= 20 00                   3335  SPACE       DC.B    ' ',0
000028EC= 24 00                   3336  DOLLAR      DC.B    '$',0
000028EE= 23 00                   3337  IMD         DC.B    '#',0
000028F0= 2C 00                   3338  COMMA       DC.B    ',',0
000028F2= 28 00                   3339  OBRACK      DC.B    '(',0
000028F4= 29 00                   3340  CBRACK      DC.B    ')',0
000028F6= 2B 00                   3341  PLUS        DC.B    '+',0
000028F8= 2D 00                   3342  MINUS       DC.B    '-',0
000028FA= 2F 00                   3343  SLASH       DC.B    '/',0
000028FC= 2D 00                   3344  DASH        DC.B    '-',0
000028FE                          3345  
000028FE                          3346  * ---> B/W/L (BYTE, WORD, LONG, RESPECTIVELY)
000028FE= 2E 42 20 00             3347  __B         DC.B    '.B ',0
00002902= 2E 57 20 00             3348  __W         DC.B    '.W ',0
00002906= 2E 4C 20 00             3349  __L         DC.B    '.L ',0
0000290A                          3350  
0000290A                          3351  * ---> ADDRESS REGISTERS A0-A7
0000290A= 41 30 00                3352  __A0        DC.B   'A0',0
0000290D= 41 31 00                3353  __A1        DC.B   'A1',0    
00002910= 41 32 00                3354  __A2        DC.B   'A2',0
00002913= 41 33 00                3355  __A3        DC.B   'A3',0
00002916= 41 34 00                3356  __A4        DC.B   'A4',0
00002919= 41 35 00                3357  __A5        DC.B   'A5',0
0000291C= 41 36 00                3358  __A6        DC.B   'A6',0
0000291F= 41 37 00                3359  __A7        DC.B   'A7',0
00002922                          3360  
00002922                          3361  * ---> DATA REGISTERS D0-D7
00002922= 44 30 00                3362  __D0        DC.B   'D0',0
00002925= 44 31 00                3363  __D1        DC.B   'D1',0
00002928= 44 32 00                3364  __D2        DC.B   'D2',0
0000292B= 44 33 00                3365  __D3        DC.B   'D3',0
0000292E= 44 34 00                3366  __D4        DC.B   'D4',0
00002931= 44 35 00                3367  __D5        DC.B   'D5',0
00002934= 44 36 00                3368  __D6        DC.B   'D6',0
00002937= 44 37 00                3369  __D7        DC.B   'D7',0
0000293A                          3370  
0000293A                          3371  __COUNTER   DS.B    1       * main loop counter
0000293B                          3372  
0000293B                          3373  *------------------------[+]END CODE BLOCK SEGMENT[+]-------------------------
0000293B                          3374  *-----------------------------------------------------------------------------
0000293B                          3375  
0000293B                          3376  
0000293B                          3377  
0000293B                          3378  *-----------------------------------------------------------------------------
0000293B                          3379  *-----------------------------------------------------------------------------
0000293B                          3380  * SECTION: Sample program to run, then attempt testing disassembly on.
0000293B                          3381  * STARTING: 16384
0000293B                          3382  * ENDING:   Any even number before 16384 to continue FOREVER
0000293B                          3383  *-----------------------[+]START CODE BLOCK SEGMENT[+]------------------------
00004000                          3384      ORG $4000
00004000                          3385      
00004000  9240                    3386      SUB     D0,D1
00004002  944A                    3387      SUB     A2,D2   * Should be invalid since this is SUBA
00004004  8642                    3388      OR      D2,D3
00004006  8492                    3389      OR.L    (A2),D2
00004008  B200                    3390      CMP.B   D0,D1
0000400A  B441                    3391      CMP.W   D1,D2
0000400C  B682                    3392      CMP.L   D2,D3
0000400E  B248                    3393      CMP     A0,D1
00004010  B25A                    3394      CMP     (A2)+,D1
00004012  B101                    3395      EOR.B   D0,D1
00004014  B342                    3396      EOR.W   D1,D2
00004016  B583                    3397      EOR.L   D2,D3
00004018  B150                    3398      EOR     D0,(A0)
0000401A  B359                    3399      EOR     D1,(A1)+
0000401C  0000 0003               3400      ORI.B   #3,D0 
00004020  0042 0290               3401      ORI.W   #$290,D2
00004024  0087 0000000A           3402      ORI.L   #%1010,D7   * $1010 == A
0000402A  0043 0002               3403      ORI     #2,D3
0000402E  4E71                    3404      NOP
00004030  103C 009A               3405      MOVE.B   #%10011010, D0
00004034  123C 00A9               3406      MOVE.B   #%10101001, D1
00004038  303C 009A               3407      MOVE.W   #%10011010, D0
0000403C  323C 00A9               3408      MOVE.W   #%10101001, D1
00004040  203C 00011170           3409      MOVE.L   #70000, D0
00004046  223C 00011170           3410      MOVE.L   #70000, D1
0000404C  81FC 0001               3411      DIVS     #1, D0
00004050  D200                    3412      ADD.B    D0,D1
00004052  4C9F 3C1A               3413      MOVEM    (A7)+,A2-A5/D1/D3-D4
00004056  43F8 285C               3414      LEA      JSROP,A1
0000405A  4467                    3415      NEG.W    -(A7)
0000405C  4EB9 00004092           3416      JSR      END
00004062  CFFC 0003               3417      MULS.W  #3, D7
00004066  CFC0                    3418      MULS    D0, D7
00004068  C5D9                    3419      MULS    (A1)+, D2
0000406A  C682                    3420      AND.L   D2,D3
0000406C  5146                    3421      SUBQ    #8, D6
0000406E  5F81                    3422      SUBQ.L  #7, D1
00004070  0041 0004               3423      ORI     #4, D1
00004074  E389                    3424      LSL.L   #1,D1
00004076  E489                    3425      LSR.L   #2,D1
00004078  E781                    3426      ASL.L   #3,D1
0000407A  E881                    3427      ASR.L   #4,D1
0000407C  EB99                    3428      ROL.L   #5,D1
0000407E  E099                    3429      ROR.L   #8,D1
00004080  0881 0002               3430      BCLR    #2,D1
00004084                          3431  
00004084                          3432  SOMELABLE
00004084  DAC1                    3433      ADDA.W  D1,A5
00004086  4E71                    3434      NOP
00004088  D803                    3435      ADD.B   D3,D4
0000408A  4E71                    3436      NOP
0000408C  6000 0006               3437      BRA     RLLYEND
00004090  65F2                    3438      BCS     SOMELABLE
00004092                          3439  
00004092                          3440  END
00004092  4E75                    3441      RTS
00004094                          3442      
00004094                          3443  RLLYEND
00004094                          3444      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_LONG_OP        1D22
ADDA_PRT            1D5E
ADDA_WORD_OP        1CBA
ADD_ADDA_END        1D8E
ADD_ADDA_PRINT      1D76
ADD_ADDA_SPACE      1D50
ADD_EA_DN_GENERIC   1D42
AFORWARDVALID       24A6
AINVALID            24E6
ALOOP               2476
ALOOPDONE           252C
ALOOPITER           251E
ALOOPITERCLR        251C
ANOSLASH            24BA
AS                  1E04
ASCII_0             28CA
ASCII_1             28CC
ASCII_2             28CE
ASCII_3             28D0
ASCII_4             28D2
ASCII_5             28D4
ASCII_6             28D6
ASCII_7             28D8
ASCII_8             28DA
ASCII_9             28DC
ASCII_A             28DE
ASCII_B             28E0
ASCII_C             28E2
ASCII_D             28E4
ASCII_E             28E6
ASCII_F             28E8
ASL                 1E1A
ASLOP               288C
ASR                 1E2A
ASROP               2890
AVALID              2480
BCC_BYTE_OFFSET     18EC
BCC_END             1942
BCC_LONG_OFFSET     1928
BCC_WORD_OFFSET     190A
BCLROP              286D
BITMASK             27CA
BITMASKDONE         27DA
BYTE_DN_EA          1CDA
BYTE_EA_DN          1C72
CBRACK              28F4
CLEAR_SCREEN        11AE
CMPIOP              287F
CMPOP               283B
COMMA               28F0
CONT_MSG            280E
CR                  D
DASH                28FC
DATA                28A0
DFORWARDVALID       23EC
DINVALID            2428
DISPLAY1011         1B52
DIVSOP              2836
DLOOP               23BC
DLOOPDONE           246A
DLOOPITER           245C
DLOOPITERCLR        245A
DNOSLASH            2400
DOLLAR              28EC
DONE0100            17C2
DONE1001            1ADA
DONE1011            1B8A
DVALID              23C6
EAHELPER05          1F7E
EAHELPER611         1F3C
END                 4092
END0000             133E
END67               2302
END68               2376
ENDEAHELPER05       20BE
ENDEAHELPER611      1F78
ENDMODE_AN          224E
ENDMODE_DN          214E
ENDOP0001           13B0
ENDOP0010           1422
ENDOP0011           1494
ENDOP1110           1F24
END_OF_LOOP         1182
EOROP               283F
HEX_VALUE_MASK_LONG  F
IDLE_STATE          118C
IMD                 28EE
IMD_SIZE_0000       12BE
INVALID_ASCII_INPUT  2712
ITERATION           116A
JSROP               285C
LEAOP               2869
LF                  A
LONG_DN_EA          1D0A
LONG_EA_DN          1CA2
LOOP                104C
LOOPBIT             27CE
LOOPUNKNOWNOP       1166
LS                  1DCE
LSL                 1DE4
LSLOP               2884
LSR                 1DF4
LSROP               2888
MINUS               28F8
MODE_AN             21C4
MODE_DN             20C4
MOVEAOP             2850
MOVEMHELPERPOST     23A6
MOVEMHELPERPRE      2532
MOVEMOP             2856
MOVEMTOMEM          15CA
MOVEMTOREG          1530
MOVEOP              284B
MSGEND              27F8
MSGSTART            27E0
MULSOP              2873
NEGOP               2847
NEWLINE             2833
NOOPERATION         2843
NOT0000             1076
NOT0001             1086
NOT0010             1096
NOT0011             10A6
NOT0100             10B6
NOT0101             10C6
NOT0110             10D6
NOT0111             10E6
NOT1000             10F6
NOT1001             1106
NOT1010             1116
NOT1011             1126
NOT1100             1136
NOT1101             1146
NOT1110             1156
NOT67BYTE           22E6
NOT67WORD           22F6
NOTA0               21E6
NOTA1               21F6
NOTA2               2206
NOTA3               2216
NOTA4               2226
NOTA5               2236
NOTA6               2246
NOTADRDIRECT        1FAE
NOTADRINDIRECT      1FD6
NOTADRINDIRECTPOST  200A
NOTADRINDIRECTPRE   203E
NOTBCLR             1286
NOTBCLRDYNA         1238
NOTD0               20E6
NOTD1               20F6
NOTD2               2106
NOTD3               2116
NOTD4               2126
NOTD5               2136
NOTD6               2146
NOTDATAREG          1F9E
NOTDIVS             19CC
NOTEOR              1B46
NOTIMMBYTE          2070
NOTIMMEDIATE        20BA
NOTIMMWORD          209A
NOTJSR              16BA
NOTLONGMOVEM1       1598
NOTLONGMOVEM2       1632
NOTMOVEM            1664
NOTNEG              150C
NOTNOP              14B6
NOTORI              1324
NOTRTS              16DC
OBRACK              28F2
OP0000              11BA
OP0001              1344
OP0001MOVE          136E
OP0001MOVEA         137A
OP0010              13B6
OP0010MOVE          13E0
OP0010MOVEA         13EC
OP0011              1428
OP0011MOVE          1452
OP0011MOVEA         145E
OP0100              149A
OP0101              17C8
OP0110              1836
OP0111              1948
OP1000              194E
OP1000END           1A20
OP1001              1A26
OP1010              1AE0
OP1011              1AE6
OP1100              1B90
OP1101              1C1A
OP1110              1DA0
OP1110DATAREG       1EF8
OP1110GENERIC       1E70
OP1110IMMEIGHT      1ED0
OP1111              1F36
OP_0000             0
OP_0001             1000
OP_0010             2000
OP_0011             3000
OP_0100             4000
OP_0101             5000
OP_0110             6000
OP_0111             7000
OP_1000             8000
OP_1001             9000
OP_1010             A000
OP_1011             B000
OP_1100             C000
OP_1101             D000
OP_1110             E000
OP_1111             F000
OP_ADD_MSG          28C6
OP_BCC              1880
OP_BCC_MSG          28A8
OP_BCS              188A
OP_BCS_MSG          28AD
OP_BGE              1894
OP_BGE_MSG          28B2
OP_BLT              189E
OP_BLT_MSG          28B7
OP_BRA              18B2
OP_BRANCHES_PRINT   18BC
OP_BRA_MSG          28C1
OP_BVC              18A8
OP_BVC_MSG          28BC
ORIOP               287B
OROP                2878
PLUS                28F6
PRELOOP             253C
PRELOOPDONE         2554
PRELOOPITER         2548
PRESETBIT           2546
PRINT1              27AE
PRINT1001           1A7E
PRINT2              27A0
PRINT3              2792
PRINT4              2784
PRINT5              2776
PRINT6              2768
PRINT7              275A
PRINT8              27BC
PRINTA0             2254
PRINTA1             2262
PRINTA2             2270
PRINTA3             227E
PRINTA4             228C
PRINTA5             229A
PRINTA6             22A8
PRINTA7             22B6
PRINTBYTE           237C
PRINTBYTE68         235E
PRINTD0             2154
PRINTD1             2162
PRINTD2             2170
PRINTD3             217E
PRINTD4             218C
PRINTD5             219A
PRINTD6             21A8
PRINTD7             21B6
PRINTDATA911        2718
PRINTLONG           2398
PRINTLONG68         236E
PRINTWORD           238A
PRINTWORD68         2366
PRINT_ASCII_0       265A
PRINT_ASCII_1       2664
PRINT_ASCII_2       266E
PRINT_ASCII_3       2678
PRINT_ASCII_4       2682
PRINT_ASCII_5       268C
PRINT_ASCII_6       2696
PRINT_ASCII_7       26A0
PRINT_ASCII_8       26AA
PRINT_ASCII_9       26B4
PRINT_ASCII_A       26BE
PRINT_ASCII_B       26C8
PRINT_ASCII_C       26D2
PRINT_ASCII_CHAR    26FA
PRINT_ASCII_D       26DC
PRINT_ASCII_E       26E6
PRINT_ASCII_F       26F0
PRINT_ASCII_FINISH  2712
PRINT_ASCII_HEX_CHAR  258A
PRINT_ASCII_LOOP    259A
RLLYEND             4094
RO                  1E3A
ROL                 1E50
ROLOP               2894
ROR                 1E60
ROROP               2898
RTSOP               2860
SIZE67              22C4
SIZE68              2308
SKIPLONG            1302
SKIPNOTLONG1        15A4
SKIPNOTLONG2        163E
SLASH               28FA
SOMELABLE           4084
SPACE               28EA
START               1000
SUBOP               289C
SUBQOP              2864
SUB_EA_DN           1ABE
TWOWORDLEA          176C
UNKNOWN0000         133A
UNKNOWN0100         17BE
UNKNOWN0101         1830
UNKNOWN1000         1A1C
UNKNOWN1001         1AD6
UNKNOWN1011         1B86
UNKNOWN1100         1C10
UNKNOWNOP           2560
UNKNOWNOP0001       13AC
UNKNOWNOP0010       141E
UNKNOWNOP0011       1490
WORD_DN_EA          1CF2
WORD_EA_DN          1C8A
__A0                290A
__A1                290D
__A2                2910
__A3                2913
__A4                2916
__A5                2919
__A6                291C
__A7                291F
__B                 28FE
__COUNTER           293A
__D0                2922
__D1                2925
__D2                2928
__D3                292B
__D4                292E
__D5                2931
__D6                2934
__D7                2937
__L                 2906
__W                 2902
